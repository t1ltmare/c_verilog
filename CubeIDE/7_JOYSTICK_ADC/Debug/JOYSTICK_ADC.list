
JOYSTICK_ADC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002578  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08002710  08002710  00003710  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002728  08002728  0000400c  2**0
                  CONTENTS
  4 .ARM          00000008  08002728  08002728  00003728  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002730  08002730  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002730  08002730  00003730  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002734  08002734  00003734  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08002738  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d0  2000000c  08002744  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000dc  08002744  000040dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005b1f  00000000  00000000  0000403c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000014ee  00000000  00000000  00009b5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000005a8  00000000  00000000  0000b050  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000428  00000000  00000000  0000b5f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015853  00000000  00000000  0000ba20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000730e  00000000  00000000  00021273  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b676  00000000  00000000  00028581  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b3bf7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001588  00000000  00000000  000b3c3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  000b51c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000000c 	.word	0x2000000c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080026f8 	.word	0x080026f8

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000010 	.word	0x20000010
 80001d4:	080026f8 	.word	0x080026f8

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96a 	b.w	80004c4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	460c      	mov	r4, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14e      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000214:	4694      	mov	ip, r2
 8000216:	458c      	cmp	ip, r1
 8000218:	4686      	mov	lr, r0
 800021a:	fab2 f282 	clz	r2, r2
 800021e:	d962      	bls.n	80002e6 <__udivmoddi4+0xde>
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0320 	rsb	r3, r2, #32
 8000226:	4091      	lsls	r1, r2
 8000228:	fa20 f303 	lsr.w	r3, r0, r3
 800022c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000230:	4319      	orrs	r1, r3
 8000232:	fa00 fe02 	lsl.w	lr, r0, r2
 8000236:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800023a:	fa1f f68c 	uxth.w	r6, ip
 800023e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000242:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000246:	fb07 1114 	mls	r1, r7, r4, r1
 800024a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024e:	fb04 f106 	mul.w	r1, r4, r6
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f104 30ff 	add.w	r0, r4, #4294967295
 800025e:	f080 8112 	bcs.w	8000486 <__udivmoddi4+0x27e>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 810f 	bls.w	8000486 <__udivmoddi4+0x27e>
 8000268:	3c02      	subs	r4, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a59      	subs	r1, r3, r1
 800026e:	fa1f f38e 	uxth.w	r3, lr
 8000272:	fbb1 f0f7 	udiv	r0, r1, r7
 8000276:	fb07 1110 	mls	r1, r7, r0, r1
 800027a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027e:	fb00 f606 	mul.w	r6, r0, r6
 8000282:	429e      	cmp	r6, r3
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x94>
 8000286:	eb1c 0303 	adds.w	r3, ip, r3
 800028a:	f100 31ff 	add.w	r1, r0, #4294967295
 800028e:	f080 80fc 	bcs.w	800048a <__udivmoddi4+0x282>
 8000292:	429e      	cmp	r6, r3
 8000294:	f240 80f9 	bls.w	800048a <__udivmoddi4+0x282>
 8000298:	4463      	add	r3, ip
 800029a:	3802      	subs	r0, #2
 800029c:	1b9b      	subs	r3, r3, r6
 800029e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002a2:	2100      	movs	r1, #0
 80002a4:	b11d      	cbz	r5, 80002ae <__udivmoddi4+0xa6>
 80002a6:	40d3      	lsrs	r3, r2
 80002a8:	2200      	movs	r2, #0
 80002aa:	e9c5 3200 	strd	r3, r2, [r5]
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d905      	bls.n	80002c2 <__udivmoddi4+0xba>
 80002b6:	b10d      	cbz	r5, 80002bc <__udivmoddi4+0xb4>
 80002b8:	e9c5 0100 	strd	r0, r1, [r5]
 80002bc:	2100      	movs	r1, #0
 80002be:	4608      	mov	r0, r1
 80002c0:	e7f5      	b.n	80002ae <__udivmoddi4+0xa6>
 80002c2:	fab3 f183 	clz	r1, r3
 80002c6:	2900      	cmp	r1, #0
 80002c8:	d146      	bne.n	8000358 <__udivmoddi4+0x150>
 80002ca:	42a3      	cmp	r3, r4
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xcc>
 80002ce:	4290      	cmp	r0, r2
 80002d0:	f0c0 80f0 	bcc.w	80004b4 <__udivmoddi4+0x2ac>
 80002d4:	1a86      	subs	r6, r0, r2
 80002d6:	eb64 0303 	sbc.w	r3, r4, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	2d00      	cmp	r5, #0
 80002de:	d0e6      	beq.n	80002ae <__udivmoddi4+0xa6>
 80002e0:	e9c5 6300 	strd	r6, r3, [r5]
 80002e4:	e7e3      	b.n	80002ae <__udivmoddi4+0xa6>
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	f040 8090 	bne.w	800040c <__udivmoddi4+0x204>
 80002ec:	eba1 040c 	sub.w	r4, r1, ip
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	fa1f f78c 	uxth.w	r7, ip
 80002f8:	2101      	movs	r1, #1
 80002fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80002fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000302:	fb08 4416 	mls	r4, r8, r6, r4
 8000306:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800030a:	fb07 f006 	mul.w	r0, r7, r6
 800030e:	4298      	cmp	r0, r3
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x11c>
 8000312:	eb1c 0303 	adds.w	r3, ip, r3
 8000316:	f106 34ff 	add.w	r4, r6, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x11a>
 800031c:	4298      	cmp	r0, r3
 800031e:	f200 80cd 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 8000322:	4626      	mov	r6, r4
 8000324:	1a1c      	subs	r4, r3, r0
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb4 f0f8 	udiv	r0, r4, r8
 800032e:	fb08 4410 	mls	r4, r8, r0, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb00 f707 	mul.w	r7, r0, r7
 800033a:	429f      	cmp	r7, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x148>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 34ff 	add.w	r4, r0, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x146>
 8000348:	429f      	cmp	r7, r3
 800034a:	f200 80b0 	bhi.w	80004ae <__udivmoddi4+0x2a6>
 800034e:	4620      	mov	r0, r4
 8000350:	1bdb      	subs	r3, r3, r7
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	e7a5      	b.n	80002a4 <__udivmoddi4+0x9c>
 8000358:	f1c1 0620 	rsb	r6, r1, #32
 800035c:	408b      	lsls	r3, r1
 800035e:	fa22 f706 	lsr.w	r7, r2, r6
 8000362:	431f      	orrs	r7, r3
 8000364:	fa20 fc06 	lsr.w	ip, r0, r6
 8000368:	fa04 f301 	lsl.w	r3, r4, r1
 800036c:	ea43 030c 	orr.w	r3, r3, ip
 8000370:	40f4      	lsrs	r4, r6
 8000372:	fa00 f801 	lsl.w	r8, r0, r1
 8000376:	0c38      	lsrs	r0, r7, #16
 8000378:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800037c:	fbb4 fef0 	udiv	lr, r4, r0
 8000380:	fa1f fc87 	uxth.w	ip, r7
 8000384:	fb00 441e 	mls	r4, r0, lr, r4
 8000388:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800038c:	fb0e f90c 	mul.w	r9, lr, ip
 8000390:	45a1      	cmp	r9, r4
 8000392:	fa02 f201 	lsl.w	r2, r2, r1
 8000396:	d90a      	bls.n	80003ae <__udivmoddi4+0x1a6>
 8000398:	193c      	adds	r4, r7, r4
 800039a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800039e:	f080 8084 	bcs.w	80004aa <__udivmoddi4+0x2a2>
 80003a2:	45a1      	cmp	r9, r4
 80003a4:	f240 8081 	bls.w	80004aa <__udivmoddi4+0x2a2>
 80003a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ac:	443c      	add	r4, r7
 80003ae:	eba4 0409 	sub.w	r4, r4, r9
 80003b2:	fa1f f983 	uxth.w	r9, r3
 80003b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ba:	fb00 4413 	mls	r4, r0, r3, r4
 80003be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c6:	45a4      	cmp	ip, r4
 80003c8:	d907      	bls.n	80003da <__udivmoddi4+0x1d2>
 80003ca:	193c      	adds	r4, r7, r4
 80003cc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003d0:	d267      	bcs.n	80004a2 <__udivmoddi4+0x29a>
 80003d2:	45a4      	cmp	ip, r4
 80003d4:	d965      	bls.n	80004a2 <__udivmoddi4+0x29a>
 80003d6:	3b02      	subs	r3, #2
 80003d8:	443c      	add	r4, r7
 80003da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003de:	fba0 9302 	umull	r9, r3, r0, r2
 80003e2:	eba4 040c 	sub.w	r4, r4, ip
 80003e6:	429c      	cmp	r4, r3
 80003e8:	46ce      	mov	lr, r9
 80003ea:	469c      	mov	ip, r3
 80003ec:	d351      	bcc.n	8000492 <__udivmoddi4+0x28a>
 80003ee:	d04e      	beq.n	800048e <__udivmoddi4+0x286>
 80003f0:	b155      	cbz	r5, 8000408 <__udivmoddi4+0x200>
 80003f2:	ebb8 030e 	subs.w	r3, r8, lr
 80003f6:	eb64 040c 	sbc.w	r4, r4, ip
 80003fa:	fa04 f606 	lsl.w	r6, r4, r6
 80003fe:	40cb      	lsrs	r3, r1
 8000400:	431e      	orrs	r6, r3
 8000402:	40cc      	lsrs	r4, r1
 8000404:	e9c5 6400 	strd	r6, r4, [r5]
 8000408:	2100      	movs	r1, #0
 800040a:	e750      	b.n	80002ae <__udivmoddi4+0xa6>
 800040c:	f1c2 0320 	rsb	r3, r2, #32
 8000410:	fa20 f103 	lsr.w	r1, r0, r3
 8000414:	fa0c fc02 	lsl.w	ip, ip, r2
 8000418:	fa24 f303 	lsr.w	r3, r4, r3
 800041c:	4094      	lsls	r4, r2
 800041e:	430c      	orrs	r4, r1
 8000420:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000424:	fa00 fe02 	lsl.w	lr, r0, r2
 8000428:	fa1f f78c 	uxth.w	r7, ip
 800042c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000430:	fb08 3110 	mls	r1, r8, r0, r3
 8000434:	0c23      	lsrs	r3, r4, #16
 8000436:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043a:	fb00 f107 	mul.w	r1, r0, r7
 800043e:	4299      	cmp	r1, r3
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x24c>
 8000442:	eb1c 0303 	adds.w	r3, ip, r3
 8000446:	f100 36ff 	add.w	r6, r0, #4294967295
 800044a:	d22c      	bcs.n	80004a6 <__udivmoddi4+0x29e>
 800044c:	4299      	cmp	r1, r3
 800044e:	d92a      	bls.n	80004a6 <__udivmoddi4+0x29e>
 8000450:	3802      	subs	r0, #2
 8000452:	4463      	add	r3, ip
 8000454:	1a5b      	subs	r3, r3, r1
 8000456:	b2a4      	uxth	r4, r4
 8000458:	fbb3 f1f8 	udiv	r1, r3, r8
 800045c:	fb08 3311 	mls	r3, r8, r1, r3
 8000460:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000464:	fb01 f307 	mul.w	r3, r1, r7
 8000468:	42a3      	cmp	r3, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x276>
 800046c:	eb1c 0404 	adds.w	r4, ip, r4
 8000470:	f101 36ff 	add.w	r6, r1, #4294967295
 8000474:	d213      	bcs.n	800049e <__udivmoddi4+0x296>
 8000476:	42a3      	cmp	r3, r4
 8000478:	d911      	bls.n	800049e <__udivmoddi4+0x296>
 800047a:	3902      	subs	r1, #2
 800047c:	4464      	add	r4, ip
 800047e:	1ae4      	subs	r4, r4, r3
 8000480:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000484:	e739      	b.n	80002fa <__udivmoddi4+0xf2>
 8000486:	4604      	mov	r4, r0
 8000488:	e6f0      	b.n	800026c <__udivmoddi4+0x64>
 800048a:	4608      	mov	r0, r1
 800048c:	e706      	b.n	800029c <__udivmoddi4+0x94>
 800048e:	45c8      	cmp	r8, r9
 8000490:	d2ae      	bcs.n	80003f0 <__udivmoddi4+0x1e8>
 8000492:	ebb9 0e02 	subs.w	lr, r9, r2
 8000496:	eb63 0c07 	sbc.w	ip, r3, r7
 800049a:	3801      	subs	r0, #1
 800049c:	e7a8      	b.n	80003f0 <__udivmoddi4+0x1e8>
 800049e:	4631      	mov	r1, r6
 80004a0:	e7ed      	b.n	800047e <__udivmoddi4+0x276>
 80004a2:	4603      	mov	r3, r0
 80004a4:	e799      	b.n	80003da <__udivmoddi4+0x1d2>
 80004a6:	4630      	mov	r0, r6
 80004a8:	e7d4      	b.n	8000454 <__udivmoddi4+0x24c>
 80004aa:	46d6      	mov	lr, sl
 80004ac:	e77f      	b.n	80003ae <__udivmoddi4+0x1a6>
 80004ae:	4463      	add	r3, ip
 80004b0:	3802      	subs	r0, #2
 80004b2:	e74d      	b.n	8000350 <__udivmoddi4+0x148>
 80004b4:	4606      	mov	r6, r0
 80004b6:	4623      	mov	r3, r4
 80004b8:	4608      	mov	r0, r1
 80004ba:	e70f      	b.n	80002dc <__udivmoddi4+0xd4>
 80004bc:	3e02      	subs	r6, #2
 80004be:	4463      	add	r3, ip
 80004c0:	e730      	b.n	8000324 <__udivmoddi4+0x11c>
 80004c2:	bf00      	nop

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b082      	sub	sp, #8
 80004cc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004ce:	f000 fa49 	bl	8000964 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d2:	f000 f81b 	bl	800050c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d6:	f000 f901 	bl	80006dc <MX_GPIO_Init>
  MX_DMA_Init();
 80004da:	f000 f8df 	bl	800069c <MX_DMA_Init>
  MX_ADC1_Init();
 80004de:	f000 f87d 	bl	80005dc <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
int x = 0;
 80004e2:	2300      	movs	r3, #0
 80004e4:	607b      	str	r3, [r7, #4]
int y = 0;
 80004e6:	2300      	movs	r3, #0
 80004e8:	603b      	str	r3, [r7, #0]
  {

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_ADC_Start_DMA(&hadc1, VR, 2); //start adc in dma mode for multichannel
 80004ea:	2202      	movs	r2, #2
 80004ec:	4905      	ldr	r1, [pc, #20]	@ (8000504 <main+0x3c>)
 80004ee:	4806      	ldr	r0, [pc, #24]	@ (8000508 <main+0x40>)
 80004f0:	f000 faee 	bl	8000ad0 <HAL_ADC_Start_DMA>
	  x = VR[0];
 80004f4:	4b03      	ldr	r3, [pc, #12]	@ (8000504 <main+0x3c>)
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	607b      	str	r3, [r7, #4]
	  y = VR[1];
 80004fa:	4b02      	ldr	r3, [pc, #8]	@ (8000504 <main+0x3c>)
 80004fc:	685b      	ldr	r3, [r3, #4]
 80004fe:	603b      	str	r3, [r7, #0]
	  HAL_ADC_Start_DMA(&hadc1, VR, 2); //start adc in dma mode for multichannel
 8000500:	bf00      	nop
 8000502:	e7f2      	b.n	80004ea <main+0x22>
 8000504:	200000d0 	.word	0x200000d0
 8000508:	20000028 	.word	0x20000028

0800050c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b094      	sub	sp, #80	@ 0x50
 8000510:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000512:	f107 0320 	add.w	r3, r7, #32
 8000516:	2230      	movs	r2, #48	@ 0x30
 8000518:	2100      	movs	r1, #0
 800051a:	4618      	mov	r0, r3
 800051c:	f002 f8c0 	bl	80026a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000520:	f107 030c 	add.w	r3, r7, #12
 8000524:	2200      	movs	r2, #0
 8000526:	601a      	str	r2, [r3, #0]
 8000528:	605a      	str	r2, [r3, #4]
 800052a:	609a      	str	r2, [r3, #8]
 800052c:	60da      	str	r2, [r3, #12]
 800052e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000530:	2300      	movs	r3, #0
 8000532:	60bb      	str	r3, [r7, #8]
 8000534:	4b27      	ldr	r3, [pc, #156]	@ (80005d4 <SystemClock_Config+0xc8>)
 8000536:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000538:	4a26      	ldr	r2, [pc, #152]	@ (80005d4 <SystemClock_Config+0xc8>)
 800053a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800053e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000540:	4b24      	ldr	r3, [pc, #144]	@ (80005d4 <SystemClock_Config+0xc8>)
 8000542:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000544:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000548:	60bb      	str	r3, [r7, #8]
 800054a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800054c:	2300      	movs	r3, #0
 800054e:	607b      	str	r3, [r7, #4]
 8000550:	4b21      	ldr	r3, [pc, #132]	@ (80005d8 <SystemClock_Config+0xcc>)
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	4a20      	ldr	r2, [pc, #128]	@ (80005d8 <SystemClock_Config+0xcc>)
 8000556:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800055a:	6013      	str	r3, [r2, #0]
 800055c:	4b1e      	ldr	r3, [pc, #120]	@ (80005d8 <SystemClock_Config+0xcc>)
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000564:	607b      	str	r3, [r7, #4]
 8000566:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000568:	2301      	movs	r3, #1
 800056a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800056c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000570:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000572:	2302      	movs	r3, #2
 8000574:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000576:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800057a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 800057c:	230c      	movs	r3, #12
 800057e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000580:	2360      	movs	r3, #96	@ 0x60
 8000582:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000584:	2302      	movs	r3, #2
 8000586:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000588:	2304      	movs	r3, #4
 800058a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800058c:	f107 0320 	add.w	r3, r7, #32
 8000590:	4618      	mov	r0, r3
 8000592:	f001 fc61 	bl	8001e58 <HAL_RCC_OscConfig>
 8000596:	4603      	mov	r3, r0
 8000598:	2b00      	cmp	r3, #0
 800059a:	d001      	beq.n	80005a0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800059c:	f000 f8c6 	bl	800072c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005a0:	230f      	movs	r3, #15
 80005a2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005a4:	2302      	movs	r3, #2
 80005a6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005a8:	2300      	movs	r3, #0
 80005aa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005ac:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80005b0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005b2:	2300      	movs	r3, #0
 80005b4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80005b6:	f107 030c 	add.w	r3, r7, #12
 80005ba:	2103      	movs	r1, #3
 80005bc:	4618      	mov	r0, r3
 80005be:	f001 fec3 	bl	8002348 <HAL_RCC_ClockConfig>
 80005c2:	4603      	mov	r3, r0
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d001      	beq.n	80005cc <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80005c8:	f000 f8b0 	bl	800072c <Error_Handler>
  }
}
 80005cc:	bf00      	nop
 80005ce:	3750      	adds	r7, #80	@ 0x50
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bd80      	pop	{r7, pc}
 80005d4:	40023800 	.word	0x40023800
 80005d8:	40007000 	.word	0x40007000

080005dc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b084      	sub	sp, #16
 80005e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005e2:	463b      	mov	r3, r7
 80005e4:	2200      	movs	r2, #0
 80005e6:	601a      	str	r2, [r3, #0]
 80005e8:	605a      	str	r2, [r3, #4]
 80005ea:	609a      	str	r2, [r3, #8]
 80005ec:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80005ee:	4b28      	ldr	r3, [pc, #160]	@ (8000690 <MX_ADC1_Init+0xb4>)
 80005f0:	4a28      	ldr	r2, [pc, #160]	@ (8000694 <MX_ADC1_Init+0xb8>)
 80005f2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80005f4:	4b26      	ldr	r3, [pc, #152]	@ (8000690 <MX_ADC1_Init+0xb4>)
 80005f6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80005fa:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80005fc:	4b24      	ldr	r3, [pc, #144]	@ (8000690 <MX_ADC1_Init+0xb4>)
 80005fe:	2200      	movs	r2, #0
 8000600:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000602:	4b23      	ldr	r3, [pc, #140]	@ (8000690 <MX_ADC1_Init+0xb4>)
 8000604:	2201      	movs	r2, #1
 8000606:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000608:	4b21      	ldr	r3, [pc, #132]	@ (8000690 <MX_ADC1_Init+0xb4>)
 800060a:	2201      	movs	r2, #1
 800060c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800060e:	4b20      	ldr	r3, [pc, #128]	@ (8000690 <MX_ADC1_Init+0xb4>)
 8000610:	2200      	movs	r2, #0
 8000612:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000616:	4b1e      	ldr	r3, [pc, #120]	@ (8000690 <MX_ADC1_Init+0xb4>)
 8000618:	2200      	movs	r2, #0
 800061a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800061c:	4b1c      	ldr	r3, [pc, #112]	@ (8000690 <MX_ADC1_Init+0xb4>)
 800061e:	4a1e      	ldr	r2, [pc, #120]	@ (8000698 <MX_ADC1_Init+0xbc>)
 8000620:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000622:	4b1b      	ldr	r3, [pc, #108]	@ (8000690 <MX_ADC1_Init+0xb4>)
 8000624:	2200      	movs	r2, #0
 8000626:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8000628:	4b19      	ldr	r3, [pc, #100]	@ (8000690 <MX_ADC1_Init+0xb4>)
 800062a:	2202      	movs	r2, #2
 800062c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800062e:	4b18      	ldr	r3, [pc, #96]	@ (8000690 <MX_ADC1_Init+0xb4>)
 8000630:	2200      	movs	r2, #0
 8000632:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000636:	4b16      	ldr	r3, [pc, #88]	@ (8000690 <MX_ADC1_Init+0xb4>)
 8000638:	2201      	movs	r2, #1
 800063a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800063c:	4814      	ldr	r0, [pc, #80]	@ (8000690 <MX_ADC1_Init+0xb4>)
 800063e:	f000 fa03 	bl	8000a48 <HAL_ADC_Init>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d001      	beq.n	800064c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000648:	f000 f870 	bl	800072c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800064c:	2300      	movs	r3, #0
 800064e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000650:	2301      	movs	r3, #1
 8000652:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8000654:	2307      	movs	r3, #7
 8000656:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000658:	463b      	mov	r3, r7
 800065a:	4619      	mov	r1, r3
 800065c:	480c      	ldr	r0, [pc, #48]	@ (8000690 <MX_ADC1_Init+0xb4>)
 800065e:	f000 fb45 	bl	8000cec <HAL_ADC_ConfigChannel>
 8000662:	4603      	mov	r3, r0
 8000664:	2b00      	cmp	r3, #0
 8000666:	d001      	beq.n	800066c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000668:	f000 f860 	bl	800072c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800066c:	2301      	movs	r3, #1
 800066e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000670:	2302      	movs	r3, #2
 8000672:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000674:	463b      	mov	r3, r7
 8000676:	4619      	mov	r1, r3
 8000678:	4805      	ldr	r0, [pc, #20]	@ (8000690 <MX_ADC1_Init+0xb4>)
 800067a:	f000 fb37 	bl	8000cec <HAL_ADC_ConfigChannel>
 800067e:	4603      	mov	r3, r0
 8000680:	2b00      	cmp	r3, #0
 8000682:	d001      	beq.n	8000688 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000684:	f000 f852 	bl	800072c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000688:	bf00      	nop
 800068a:	3710      	adds	r7, #16
 800068c:	46bd      	mov	sp, r7
 800068e:	bd80      	pop	{r7, pc}
 8000690:	20000028 	.word	0x20000028
 8000694:	40012000 	.word	0x40012000
 8000698:	0f000001 	.word	0x0f000001

0800069c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b082      	sub	sp, #8
 80006a0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80006a2:	2300      	movs	r3, #0
 80006a4:	607b      	str	r3, [r7, #4]
 80006a6:	4b0c      	ldr	r3, [pc, #48]	@ (80006d8 <MX_DMA_Init+0x3c>)
 80006a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006aa:	4a0b      	ldr	r2, [pc, #44]	@ (80006d8 <MX_DMA_Init+0x3c>)
 80006ac:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80006b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80006b2:	4b09      	ldr	r3, [pc, #36]	@ (80006d8 <MX_DMA_Init+0x3c>)
 80006b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80006ba:	607b      	str	r3, [r7, #4]
 80006bc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80006be:	2200      	movs	r2, #0
 80006c0:	2100      	movs	r1, #0
 80006c2:	2038      	movs	r0, #56	@ 0x38
 80006c4:	f000 fe9d 	bl	8001402 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80006c8:	2038      	movs	r0, #56	@ 0x38
 80006ca:	f000 feb6 	bl	800143a <HAL_NVIC_EnableIRQ>

}
 80006ce:	bf00      	nop
 80006d0:	3708      	adds	r7, #8
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	40023800 	.word	0x40023800

080006dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006dc:	b480      	push	{r7}
 80006de:	b083      	sub	sp, #12
 80006e0:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006e2:	2300      	movs	r3, #0
 80006e4:	607b      	str	r3, [r7, #4]
 80006e6:	4b10      	ldr	r3, [pc, #64]	@ (8000728 <MX_GPIO_Init+0x4c>)
 80006e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ea:	4a0f      	ldr	r2, [pc, #60]	@ (8000728 <MX_GPIO_Init+0x4c>)
 80006ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80006f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80006f2:	4b0d      	ldr	r3, [pc, #52]	@ (8000728 <MX_GPIO_Init+0x4c>)
 80006f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80006fa:	607b      	str	r3, [r7, #4]
 80006fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006fe:	2300      	movs	r3, #0
 8000700:	603b      	str	r3, [r7, #0]
 8000702:	4b09      	ldr	r3, [pc, #36]	@ (8000728 <MX_GPIO_Init+0x4c>)
 8000704:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000706:	4a08      	ldr	r2, [pc, #32]	@ (8000728 <MX_GPIO_Init+0x4c>)
 8000708:	f043 0301 	orr.w	r3, r3, #1
 800070c:	6313      	str	r3, [r2, #48]	@ 0x30
 800070e:	4b06      	ldr	r3, [pc, #24]	@ (8000728 <MX_GPIO_Init+0x4c>)
 8000710:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000712:	f003 0301 	and.w	r3, r3, #1
 8000716:	603b      	str	r3, [r7, #0]
 8000718:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800071a:	bf00      	nop
 800071c:	370c      	adds	r7, #12
 800071e:	46bd      	mov	sp, r7
 8000720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000724:	4770      	bx	lr
 8000726:	bf00      	nop
 8000728:	40023800 	.word	0x40023800

0800072c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800072c:	b480      	push	{r7}
 800072e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000730:	b672      	cpsid	i
}
 8000732:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000734:	bf00      	nop
 8000736:	e7fd      	b.n	8000734 <Error_Handler+0x8>

08000738 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000738:	b480      	push	{r7}
 800073a:	b083      	sub	sp, #12
 800073c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800073e:	2300      	movs	r3, #0
 8000740:	607b      	str	r3, [r7, #4]
 8000742:	4b10      	ldr	r3, [pc, #64]	@ (8000784 <HAL_MspInit+0x4c>)
 8000744:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000746:	4a0f      	ldr	r2, [pc, #60]	@ (8000784 <HAL_MspInit+0x4c>)
 8000748:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800074c:	6453      	str	r3, [r2, #68]	@ 0x44
 800074e:	4b0d      	ldr	r3, [pc, #52]	@ (8000784 <HAL_MspInit+0x4c>)
 8000750:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000752:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000756:	607b      	str	r3, [r7, #4]
 8000758:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800075a:	2300      	movs	r3, #0
 800075c:	603b      	str	r3, [r7, #0]
 800075e:	4b09      	ldr	r3, [pc, #36]	@ (8000784 <HAL_MspInit+0x4c>)
 8000760:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000762:	4a08      	ldr	r2, [pc, #32]	@ (8000784 <HAL_MspInit+0x4c>)
 8000764:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000768:	6413      	str	r3, [r2, #64]	@ 0x40
 800076a:	4b06      	ldr	r3, [pc, #24]	@ (8000784 <HAL_MspInit+0x4c>)
 800076c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800076e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000772:	603b      	str	r3, [r7, #0]
 8000774:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000776:	bf00      	nop
 8000778:	370c      	adds	r7, #12
 800077a:	46bd      	mov	sp, r7
 800077c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000780:	4770      	bx	lr
 8000782:	bf00      	nop
 8000784:	40023800 	.word	0x40023800

08000788 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b08a      	sub	sp, #40	@ 0x28
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000790:	f107 0314 	add.w	r3, r7, #20
 8000794:	2200      	movs	r2, #0
 8000796:	601a      	str	r2, [r3, #0]
 8000798:	605a      	str	r2, [r3, #4]
 800079a:	609a      	str	r2, [r3, #8]
 800079c:	60da      	str	r2, [r3, #12]
 800079e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	4a2f      	ldr	r2, [pc, #188]	@ (8000864 <HAL_ADC_MspInit+0xdc>)
 80007a6:	4293      	cmp	r3, r2
 80007a8:	d157      	bne.n	800085a <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80007aa:	2300      	movs	r3, #0
 80007ac:	613b      	str	r3, [r7, #16]
 80007ae:	4b2e      	ldr	r3, [pc, #184]	@ (8000868 <HAL_ADC_MspInit+0xe0>)
 80007b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007b2:	4a2d      	ldr	r2, [pc, #180]	@ (8000868 <HAL_ADC_MspInit+0xe0>)
 80007b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80007b8:	6453      	str	r3, [r2, #68]	@ 0x44
 80007ba:	4b2b      	ldr	r3, [pc, #172]	@ (8000868 <HAL_ADC_MspInit+0xe0>)
 80007bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80007c2:	613b      	str	r3, [r7, #16]
 80007c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007c6:	2300      	movs	r3, #0
 80007c8:	60fb      	str	r3, [r7, #12]
 80007ca:	4b27      	ldr	r3, [pc, #156]	@ (8000868 <HAL_ADC_MspInit+0xe0>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ce:	4a26      	ldr	r2, [pc, #152]	@ (8000868 <HAL_ADC_MspInit+0xe0>)
 80007d0:	f043 0301 	orr.w	r3, r3, #1
 80007d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80007d6:	4b24      	ldr	r3, [pc, #144]	@ (8000868 <HAL_ADC_MspInit+0xe0>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007da:	f003 0301 	and.w	r3, r3, #1
 80007de:	60fb      	str	r3, [r7, #12]
 80007e0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80007e2:	2303      	movs	r3, #3
 80007e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007e6:	2303      	movs	r3, #3
 80007e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ea:	2300      	movs	r3, #0
 80007ec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007ee:	f107 0314 	add.w	r3, r7, #20
 80007f2:	4619      	mov	r1, r3
 80007f4:	481d      	ldr	r0, [pc, #116]	@ (800086c <HAL_ADC_MspInit+0xe4>)
 80007f6:	f001 f9ab 	bl	8001b50 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80007fa:	4b1d      	ldr	r3, [pc, #116]	@ (8000870 <HAL_ADC_MspInit+0xe8>)
 80007fc:	4a1d      	ldr	r2, [pc, #116]	@ (8000874 <HAL_ADC_MspInit+0xec>)
 80007fe:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000800:	4b1b      	ldr	r3, [pc, #108]	@ (8000870 <HAL_ADC_MspInit+0xe8>)
 8000802:	2200      	movs	r2, #0
 8000804:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000806:	4b1a      	ldr	r3, [pc, #104]	@ (8000870 <HAL_ADC_MspInit+0xe8>)
 8000808:	2200      	movs	r2, #0
 800080a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800080c:	4b18      	ldr	r3, [pc, #96]	@ (8000870 <HAL_ADC_MspInit+0xe8>)
 800080e:	2200      	movs	r2, #0
 8000810:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000812:	4b17      	ldr	r3, [pc, #92]	@ (8000870 <HAL_ADC_MspInit+0xe8>)
 8000814:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000818:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800081a:	4b15      	ldr	r3, [pc, #84]	@ (8000870 <HAL_ADC_MspInit+0xe8>)
 800081c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000820:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000822:	4b13      	ldr	r3, [pc, #76]	@ (8000870 <HAL_ADC_MspInit+0xe8>)
 8000824:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000828:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800082a:	4b11      	ldr	r3, [pc, #68]	@ (8000870 <HAL_ADC_MspInit+0xe8>)
 800082c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000830:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000832:	4b0f      	ldr	r3, [pc, #60]	@ (8000870 <HAL_ADC_MspInit+0xe8>)
 8000834:	2200      	movs	r2, #0
 8000836:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000838:	4b0d      	ldr	r3, [pc, #52]	@ (8000870 <HAL_ADC_MspInit+0xe8>)
 800083a:	2200      	movs	r2, #0
 800083c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800083e:	480c      	ldr	r0, [pc, #48]	@ (8000870 <HAL_ADC_MspInit+0xe8>)
 8000840:	f000 fe16 	bl	8001470 <HAL_DMA_Init>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d001      	beq.n	800084e <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 800084a:	f7ff ff6f 	bl	800072c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	4a07      	ldr	r2, [pc, #28]	@ (8000870 <HAL_ADC_MspInit+0xe8>)
 8000852:	639a      	str	r2, [r3, #56]	@ 0x38
 8000854:	4a06      	ldr	r2, [pc, #24]	@ (8000870 <HAL_ADC_MspInit+0xe8>)
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 800085a:	bf00      	nop
 800085c:	3728      	adds	r7, #40	@ 0x28
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	40012000 	.word	0x40012000
 8000868:	40023800 	.word	0x40023800
 800086c:	40020000 	.word	0x40020000
 8000870:	20000070 	.word	0x20000070
 8000874:	40026410 	.word	0x40026410

08000878 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000878:	b480      	push	{r7}
 800087a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800087c:	bf00      	nop
 800087e:	e7fd      	b.n	800087c <NMI_Handler+0x4>

08000880 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000880:	b480      	push	{r7}
 8000882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000884:	bf00      	nop
 8000886:	e7fd      	b.n	8000884 <HardFault_Handler+0x4>

08000888 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000888:	b480      	push	{r7}
 800088a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800088c:	bf00      	nop
 800088e:	e7fd      	b.n	800088c <MemManage_Handler+0x4>

08000890 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000890:	b480      	push	{r7}
 8000892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000894:	bf00      	nop
 8000896:	e7fd      	b.n	8000894 <BusFault_Handler+0x4>

08000898 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000898:	b480      	push	{r7}
 800089a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800089c:	bf00      	nop
 800089e:	e7fd      	b.n	800089c <UsageFault_Handler+0x4>

080008a0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008a0:	b480      	push	{r7}
 80008a2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008a4:	bf00      	nop
 80008a6:	46bd      	mov	sp, r7
 80008a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ac:	4770      	bx	lr

080008ae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008ae:	b480      	push	{r7}
 80008b0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008b2:	bf00      	nop
 80008b4:	46bd      	mov	sp, r7
 80008b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ba:	4770      	bx	lr

080008bc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008bc:	b480      	push	{r7}
 80008be:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008c0:	bf00      	nop
 80008c2:	46bd      	mov	sp, r7
 80008c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c8:	4770      	bx	lr

080008ca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008ca:	b580      	push	{r7, lr}
 80008cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008ce:	f000 f89b 	bl	8000a08 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008d2:	bf00      	nop
 80008d4:	bd80      	pop	{r7, pc}
	...

080008d8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80008dc:	4802      	ldr	r0, [pc, #8]	@ (80008e8 <DMA2_Stream0_IRQHandler+0x10>)
 80008de:	f000 fecd 	bl	800167c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80008e2:	bf00      	nop
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	20000070 	.word	0x20000070

080008ec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008ec:	b480      	push	{r7}
 80008ee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80008f0:	4b06      	ldr	r3, [pc, #24]	@ (800090c <SystemInit+0x20>)
 80008f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80008f6:	4a05      	ldr	r2, [pc, #20]	@ (800090c <SystemInit+0x20>)
 80008f8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80008fc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000900:	bf00      	nop
 8000902:	46bd      	mov	sp, r7
 8000904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000908:	4770      	bx	lr
 800090a:	bf00      	nop
 800090c:	e000ed00 	.word	0xe000ed00

08000910 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000910:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000948 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000914:	f7ff ffea 	bl	80008ec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000918:	480c      	ldr	r0, [pc, #48]	@ (800094c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800091a:	490d      	ldr	r1, [pc, #52]	@ (8000950 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800091c:	4a0d      	ldr	r2, [pc, #52]	@ (8000954 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800091e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000920:	e002      	b.n	8000928 <LoopCopyDataInit>

08000922 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000922:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000924:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000926:	3304      	adds	r3, #4

08000928 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000928:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800092a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800092c:	d3f9      	bcc.n	8000922 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800092e:	4a0a      	ldr	r2, [pc, #40]	@ (8000958 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000930:	4c0a      	ldr	r4, [pc, #40]	@ (800095c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000932:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000934:	e001      	b.n	800093a <LoopFillZerobss>

08000936 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000936:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000938:	3204      	adds	r2, #4

0800093a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800093a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800093c:	d3fb      	bcc.n	8000936 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800093e:	f001 feb7 	bl	80026b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000942:	f7ff fdc1 	bl	80004c8 <main>
  bx  lr    
 8000946:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000948:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800094c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000950:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000954:	08002738 	.word	0x08002738
  ldr r2, =_sbss
 8000958:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800095c:	200000dc 	.word	0x200000dc

08000960 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000960:	e7fe      	b.n	8000960 <ADC_IRQHandler>
	...

08000964 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000968:	4b0e      	ldr	r3, [pc, #56]	@ (80009a4 <HAL_Init+0x40>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	4a0d      	ldr	r2, [pc, #52]	@ (80009a4 <HAL_Init+0x40>)
 800096e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000972:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000974:	4b0b      	ldr	r3, [pc, #44]	@ (80009a4 <HAL_Init+0x40>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	4a0a      	ldr	r2, [pc, #40]	@ (80009a4 <HAL_Init+0x40>)
 800097a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800097e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000980:	4b08      	ldr	r3, [pc, #32]	@ (80009a4 <HAL_Init+0x40>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	4a07      	ldr	r2, [pc, #28]	@ (80009a4 <HAL_Init+0x40>)
 8000986:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800098a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800098c:	2003      	movs	r0, #3
 800098e:	f000 fd2d 	bl	80013ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000992:	200f      	movs	r0, #15
 8000994:	f000 f808 	bl	80009a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000998:	f7ff fece 	bl	8000738 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800099c:	2300      	movs	r3, #0
}
 800099e:	4618      	mov	r0, r3
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	40023c00 	.word	0x40023c00

080009a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b082      	sub	sp, #8
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009b0:	4b12      	ldr	r3, [pc, #72]	@ (80009fc <HAL_InitTick+0x54>)
 80009b2:	681a      	ldr	r2, [r3, #0]
 80009b4:	4b12      	ldr	r3, [pc, #72]	@ (8000a00 <HAL_InitTick+0x58>)
 80009b6:	781b      	ldrb	r3, [r3, #0]
 80009b8:	4619      	mov	r1, r3
 80009ba:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80009be:	fbb3 f3f1 	udiv	r3, r3, r1
 80009c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80009c6:	4618      	mov	r0, r3
 80009c8:	f000 fd45 	bl	8001456 <HAL_SYSTICK_Config>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d001      	beq.n	80009d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80009d2:	2301      	movs	r3, #1
 80009d4:	e00e      	b.n	80009f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	2b0f      	cmp	r3, #15
 80009da:	d80a      	bhi.n	80009f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009dc:	2200      	movs	r2, #0
 80009de:	6879      	ldr	r1, [r7, #4]
 80009e0:	f04f 30ff 	mov.w	r0, #4294967295
 80009e4:	f000 fd0d 	bl	8001402 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009e8:	4a06      	ldr	r2, [pc, #24]	@ (8000a04 <HAL_InitTick+0x5c>)
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80009ee:	2300      	movs	r3, #0
 80009f0:	e000      	b.n	80009f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80009f2:	2301      	movs	r3, #1
}
 80009f4:	4618      	mov	r0, r3
 80009f6:	3708      	adds	r7, #8
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd80      	pop	{r7, pc}
 80009fc:	20000000 	.word	0x20000000
 8000a00:	20000008 	.word	0x20000008
 8000a04:	20000004 	.word	0x20000004

08000a08 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a0c:	4b06      	ldr	r3, [pc, #24]	@ (8000a28 <HAL_IncTick+0x20>)
 8000a0e:	781b      	ldrb	r3, [r3, #0]
 8000a10:	461a      	mov	r2, r3
 8000a12:	4b06      	ldr	r3, [pc, #24]	@ (8000a2c <HAL_IncTick+0x24>)
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	4413      	add	r3, r2
 8000a18:	4a04      	ldr	r2, [pc, #16]	@ (8000a2c <HAL_IncTick+0x24>)
 8000a1a:	6013      	str	r3, [r2, #0]
}
 8000a1c:	bf00      	nop
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a24:	4770      	bx	lr
 8000a26:	bf00      	nop
 8000a28:	20000008 	.word	0x20000008
 8000a2c:	200000d8 	.word	0x200000d8

08000a30 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	af00      	add	r7, sp, #0
  return uwTick;
 8000a34:	4b03      	ldr	r3, [pc, #12]	@ (8000a44 <HAL_GetTick+0x14>)
 8000a36:	681b      	ldr	r3, [r3, #0]
}
 8000a38:	4618      	mov	r0, r3
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a40:	4770      	bx	lr
 8000a42:	bf00      	nop
 8000a44:	200000d8 	.word	0x200000d8

08000a48 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b084      	sub	sp, #16
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000a50:	2300      	movs	r3, #0
 8000a52:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d101      	bne.n	8000a5e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000a5a:	2301      	movs	r3, #1
 8000a5c:	e033      	b.n	8000ac6 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d109      	bne.n	8000a7a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000a66:	6878      	ldr	r0, [r7, #4]
 8000a68:	f7ff fe8e 	bl	8000788 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	2200      	movs	r2, #0
 8000a70:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	2200      	movs	r2, #0
 8000a76:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a7e:	f003 0310 	and.w	r3, r3, #16
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d118      	bne.n	8000ab8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a8a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8000a8e:	f023 0302 	bic.w	r3, r3, #2
 8000a92:	f043 0202 	orr.w	r2, r3, #2
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8000a9a:	6878      	ldr	r0, [r7, #4]
 8000a9c:	f000 fa58 	bl	8000f50 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000aaa:	f023 0303 	bic.w	r3, r3, #3
 8000aae:	f043 0201 	orr.w	r2, r3, #1
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	641a      	str	r2, [r3, #64]	@ 0x40
 8000ab6:	e001      	b.n	8000abc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000ab8:	2301      	movs	r3, #1
 8000aba:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	2200      	movs	r2, #0
 8000ac0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000ac4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	3710      	adds	r7, #16
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}
	...

08000ad0 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b086      	sub	sp, #24
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	60f8      	str	r0, [r7, #12]
 8000ad8:	60b9      	str	r1, [r7, #8]
 8000ada:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8000adc:	2300      	movs	r3, #0
 8000ade:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8000ae0:	68fb      	ldr	r3, [r7, #12]
 8000ae2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8000ae6:	2b01      	cmp	r3, #1
 8000ae8:	d101      	bne.n	8000aee <HAL_ADC_Start_DMA+0x1e>
 8000aea:	2302      	movs	r3, #2
 8000aec:	e0ce      	b.n	8000c8c <HAL_ADC_Start_DMA+0x1bc>
 8000aee:	68fb      	ldr	r3, [r7, #12]
 8000af0:	2201      	movs	r2, #1
 8000af2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000af6:	68fb      	ldr	r3, [r7, #12]
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	689b      	ldr	r3, [r3, #8]
 8000afc:	f003 0301 	and.w	r3, r3, #1
 8000b00:	2b01      	cmp	r3, #1
 8000b02:	d018      	beq.n	8000b36 <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000b04:	68fb      	ldr	r3, [r7, #12]
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	689a      	ldr	r2, [r3, #8]
 8000b0a:	68fb      	ldr	r3, [r7, #12]
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	f042 0201 	orr.w	r2, r2, #1
 8000b12:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000b14:	4b5f      	ldr	r3, [pc, #380]	@ (8000c94 <HAL_ADC_Start_DMA+0x1c4>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	4a5f      	ldr	r2, [pc, #380]	@ (8000c98 <HAL_ADC_Start_DMA+0x1c8>)
 8000b1a:	fba2 2303 	umull	r2, r3, r2, r3
 8000b1e:	0c9a      	lsrs	r2, r3, #18
 8000b20:	4613      	mov	r3, r2
 8000b22:	005b      	lsls	r3, r3, #1
 8000b24:	4413      	add	r3, r2
 8000b26:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8000b28:	e002      	b.n	8000b30 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8000b2a:	693b      	ldr	r3, [r7, #16]
 8000b2c:	3b01      	subs	r3, #1
 8000b2e:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8000b30:	693b      	ldr	r3, [r7, #16]
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d1f9      	bne.n	8000b2a <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8000b36:	68fb      	ldr	r3, [r7, #12]
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	689b      	ldr	r3, [r3, #8]
 8000b3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000b40:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000b44:	d107      	bne.n	8000b56 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8000b46:	68fb      	ldr	r3, [r7, #12]
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	689a      	ldr	r2, [r3, #8]
 8000b4c:	68fb      	ldr	r3, [r7, #12]
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8000b54:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8000b56:	68fb      	ldr	r3, [r7, #12]
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	689b      	ldr	r3, [r3, #8]
 8000b5c:	f003 0301 	and.w	r3, r3, #1
 8000b60:	2b01      	cmp	r3, #1
 8000b62:	f040 8086 	bne.w	8000c72 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8000b66:	68fb      	ldr	r3, [r7, #12]
 8000b68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b6a:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8000b6e:	f023 0301 	bic.w	r3, r3, #1
 8000b72:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8000b76:	68fb      	ldr	r3, [r7, #12]
 8000b78:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000b7a:	68fb      	ldr	r3, [r7, #12]
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	685b      	ldr	r3, [r3, #4]
 8000b80:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d007      	beq.n	8000b98 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000b88:	68fb      	ldr	r3, [r7, #12]
 8000b8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b8c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8000b90:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8000b94:	68fb      	ldr	r3, [r7, #12]
 8000b96:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000b98:	68fb      	ldr	r3, [r7, #12]
 8000b9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b9c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000ba0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8000ba4:	d106      	bne.n	8000bb4 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8000ba6:	68fb      	ldr	r3, [r7, #12]
 8000ba8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000baa:	f023 0206 	bic.w	r2, r3, #6
 8000bae:	68fb      	ldr	r3, [r7, #12]
 8000bb0:	645a      	str	r2, [r3, #68]	@ 0x44
 8000bb2:	e002      	b.n	8000bba <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000bb4:	68fb      	ldr	r3, [r7, #12]
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000bba:	68fb      	ldr	r3, [r7, #12]
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000bc2:	4b36      	ldr	r3, [pc, #216]	@ (8000c9c <HAL_ADC_Start_DMA+0x1cc>)
 8000bc4:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000bc6:	68fb      	ldr	r3, [r7, #12]
 8000bc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000bca:	4a35      	ldr	r2, [pc, #212]	@ (8000ca0 <HAL_ADC_Start_DMA+0x1d0>)
 8000bcc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8000bce:	68fb      	ldr	r3, [r7, #12]
 8000bd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000bd2:	4a34      	ldr	r2, [pc, #208]	@ (8000ca4 <HAL_ADC_Start_DMA+0x1d4>)
 8000bd4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8000bd6:	68fb      	ldr	r3, [r7, #12]
 8000bd8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000bda:	4a33      	ldr	r2, [pc, #204]	@ (8000ca8 <HAL_ADC_Start_DMA+0x1d8>)
 8000bdc:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8000bde:	68fb      	ldr	r3, [r7, #12]
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8000be6:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8000be8:	68fb      	ldr	r3, [r7, #12]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	685a      	ldr	r2, [r3, #4]
 8000bee:	68fb      	ldr	r3, [r7, #12]
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8000bf6:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8000bf8:	68fb      	ldr	r3, [r7, #12]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	689a      	ldr	r2, [r3, #8]
 8000bfe:	68fb      	ldr	r3, [r7, #12]
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8000c06:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	334c      	adds	r3, #76	@ 0x4c
 8000c12:	4619      	mov	r1, r3
 8000c14:	68ba      	ldr	r2, [r7, #8]
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	f000 fcd8 	bl	80015cc <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8000c1c:	697b      	ldr	r3, [r7, #20]
 8000c1e:	685b      	ldr	r3, [r3, #4]
 8000c20:	f003 031f 	and.w	r3, r3, #31
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d10f      	bne.n	8000c48 <HAL_ADC_Start_DMA+0x178>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	689b      	ldr	r3, [r3, #8]
 8000c2e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d129      	bne.n	8000c8a <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000c36:	68fb      	ldr	r3, [r7, #12]
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	689a      	ldr	r2, [r3, #8]
 8000c3c:	68fb      	ldr	r3, [r7, #12]
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8000c44:	609a      	str	r2, [r3, #8]
 8000c46:	e020      	b.n	8000c8a <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	4a17      	ldr	r2, [pc, #92]	@ (8000cac <HAL_ADC_Start_DMA+0x1dc>)
 8000c4e:	4293      	cmp	r3, r2
 8000c50:	d11b      	bne.n	8000c8a <HAL_ADC_Start_DMA+0x1ba>
 8000c52:	68fb      	ldr	r3, [r7, #12]
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	689b      	ldr	r3, [r3, #8]
 8000c58:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d114      	bne.n	8000c8a <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000c60:	68fb      	ldr	r3, [r7, #12]
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	689a      	ldr	r2, [r3, #8]
 8000c66:	68fb      	ldr	r3, [r7, #12]
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8000c6e:	609a      	str	r2, [r3, #8]
 8000c70:	e00b      	b.n	8000c8a <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000c72:	68fb      	ldr	r3, [r7, #12]
 8000c74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c76:	f043 0210 	orr.w	r2, r3, #16
 8000c7a:	68fb      	ldr	r3, [r7, #12]
 8000c7c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000c7e:	68fb      	ldr	r3, [r7, #12]
 8000c80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c82:	f043 0201 	orr.w	r2, r3, #1
 8000c86:	68fb      	ldr	r3, [r7, #12]
 8000c88:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8000c8a:	2300      	movs	r3, #0
}
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	3718      	adds	r7, #24
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bd80      	pop	{r7, pc}
 8000c94:	20000000 	.word	0x20000000
 8000c98:	431bde83 	.word	0x431bde83
 8000c9c:	40012300 	.word	0x40012300
 8000ca0:	08001149 	.word	0x08001149
 8000ca4:	08001203 	.word	0x08001203
 8000ca8:	0800121f 	.word	0x0800121f
 8000cac:	40012000 	.word	0x40012000

08000cb0 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	b083      	sub	sp, #12
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8000cb8:	bf00      	nop
 8000cba:	370c      	adds	r7, #12
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc2:	4770      	bx	lr

08000cc4 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	b083      	sub	sp, #12
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8000ccc:	bf00      	nop
 8000cce:	370c      	adds	r7, #12
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd6:	4770      	bx	lr

08000cd8 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	b083      	sub	sp, #12
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8000ce0:	bf00      	nop
 8000ce2:	370c      	adds	r7, #12
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cea:	4770      	bx	lr

08000cec <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8000cec:	b480      	push	{r7}
 8000cee:	b085      	sub	sp, #20
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
 8000cf4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8000d00:	2b01      	cmp	r3, #1
 8000d02:	d101      	bne.n	8000d08 <HAL_ADC_ConfigChannel+0x1c>
 8000d04:	2302      	movs	r3, #2
 8000d06:	e113      	b.n	8000f30 <HAL_ADC_ConfigChannel+0x244>
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	2201      	movs	r2, #1
 8000d0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8000d10:	683b      	ldr	r3, [r7, #0]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	2b09      	cmp	r3, #9
 8000d16:	d925      	bls.n	8000d64 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	68d9      	ldr	r1, [r3, #12]
 8000d1e:	683b      	ldr	r3, [r7, #0]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	b29b      	uxth	r3, r3
 8000d24:	461a      	mov	r2, r3
 8000d26:	4613      	mov	r3, r2
 8000d28:	005b      	lsls	r3, r3, #1
 8000d2a:	4413      	add	r3, r2
 8000d2c:	3b1e      	subs	r3, #30
 8000d2e:	2207      	movs	r2, #7
 8000d30:	fa02 f303 	lsl.w	r3, r2, r3
 8000d34:	43da      	mvns	r2, r3
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	400a      	ands	r2, r1
 8000d3c:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	68d9      	ldr	r1, [r3, #12]
 8000d44:	683b      	ldr	r3, [r7, #0]
 8000d46:	689a      	ldr	r2, [r3, #8]
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	b29b      	uxth	r3, r3
 8000d4e:	4618      	mov	r0, r3
 8000d50:	4603      	mov	r3, r0
 8000d52:	005b      	lsls	r3, r3, #1
 8000d54:	4403      	add	r3, r0
 8000d56:	3b1e      	subs	r3, #30
 8000d58:	409a      	lsls	r2, r3
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	430a      	orrs	r2, r1
 8000d60:	60da      	str	r2, [r3, #12]
 8000d62:	e022      	b.n	8000daa <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	6919      	ldr	r1, [r3, #16]
 8000d6a:	683b      	ldr	r3, [r7, #0]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	b29b      	uxth	r3, r3
 8000d70:	461a      	mov	r2, r3
 8000d72:	4613      	mov	r3, r2
 8000d74:	005b      	lsls	r3, r3, #1
 8000d76:	4413      	add	r3, r2
 8000d78:	2207      	movs	r2, #7
 8000d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d7e:	43da      	mvns	r2, r3
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	400a      	ands	r2, r1
 8000d86:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	6919      	ldr	r1, [r3, #16]
 8000d8e:	683b      	ldr	r3, [r7, #0]
 8000d90:	689a      	ldr	r2, [r3, #8]
 8000d92:	683b      	ldr	r3, [r7, #0]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	b29b      	uxth	r3, r3
 8000d98:	4618      	mov	r0, r3
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	005b      	lsls	r3, r3, #1
 8000d9e:	4403      	add	r3, r0
 8000da0:	409a      	lsls	r2, r3
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	430a      	orrs	r2, r1
 8000da8:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000daa:	683b      	ldr	r3, [r7, #0]
 8000dac:	685b      	ldr	r3, [r3, #4]
 8000dae:	2b06      	cmp	r3, #6
 8000db0:	d824      	bhi.n	8000dfc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8000db8:	683b      	ldr	r3, [r7, #0]
 8000dba:	685a      	ldr	r2, [r3, #4]
 8000dbc:	4613      	mov	r3, r2
 8000dbe:	009b      	lsls	r3, r3, #2
 8000dc0:	4413      	add	r3, r2
 8000dc2:	3b05      	subs	r3, #5
 8000dc4:	221f      	movs	r2, #31
 8000dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dca:	43da      	mvns	r2, r3
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	400a      	ands	r2, r1
 8000dd2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	b29b      	uxth	r3, r3
 8000de0:	4618      	mov	r0, r3
 8000de2:	683b      	ldr	r3, [r7, #0]
 8000de4:	685a      	ldr	r2, [r3, #4]
 8000de6:	4613      	mov	r3, r2
 8000de8:	009b      	lsls	r3, r3, #2
 8000dea:	4413      	add	r3, r2
 8000dec:	3b05      	subs	r3, #5
 8000dee:	fa00 f203 	lsl.w	r2, r0, r3
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	430a      	orrs	r2, r1
 8000df8:	635a      	str	r2, [r3, #52]	@ 0x34
 8000dfa:	e04c      	b.n	8000e96 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	685b      	ldr	r3, [r3, #4]
 8000e00:	2b0c      	cmp	r3, #12
 8000e02:	d824      	bhi.n	8000e4e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8000e0a:	683b      	ldr	r3, [r7, #0]
 8000e0c:	685a      	ldr	r2, [r3, #4]
 8000e0e:	4613      	mov	r3, r2
 8000e10:	009b      	lsls	r3, r3, #2
 8000e12:	4413      	add	r3, r2
 8000e14:	3b23      	subs	r3, #35	@ 0x23
 8000e16:	221f      	movs	r2, #31
 8000e18:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1c:	43da      	mvns	r2, r3
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	400a      	ands	r2, r1
 8000e24:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	b29b      	uxth	r3, r3
 8000e32:	4618      	mov	r0, r3
 8000e34:	683b      	ldr	r3, [r7, #0]
 8000e36:	685a      	ldr	r2, [r3, #4]
 8000e38:	4613      	mov	r3, r2
 8000e3a:	009b      	lsls	r3, r3, #2
 8000e3c:	4413      	add	r3, r2
 8000e3e:	3b23      	subs	r3, #35	@ 0x23
 8000e40:	fa00 f203 	lsl.w	r2, r0, r3
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	430a      	orrs	r2, r1
 8000e4a:	631a      	str	r2, [r3, #48]	@ 0x30
 8000e4c:	e023      	b.n	8000e96 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	685a      	ldr	r2, [r3, #4]
 8000e58:	4613      	mov	r3, r2
 8000e5a:	009b      	lsls	r3, r3, #2
 8000e5c:	4413      	add	r3, r2
 8000e5e:	3b41      	subs	r3, #65	@ 0x41
 8000e60:	221f      	movs	r2, #31
 8000e62:	fa02 f303 	lsl.w	r3, r2, r3
 8000e66:	43da      	mvns	r2, r3
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	400a      	ands	r2, r1
 8000e6e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	b29b      	uxth	r3, r3
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	683b      	ldr	r3, [r7, #0]
 8000e80:	685a      	ldr	r2, [r3, #4]
 8000e82:	4613      	mov	r3, r2
 8000e84:	009b      	lsls	r3, r3, #2
 8000e86:	4413      	add	r3, r2
 8000e88:	3b41      	subs	r3, #65	@ 0x41
 8000e8a:	fa00 f203 	lsl.w	r2, r0, r3
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	430a      	orrs	r2, r1
 8000e94:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000e96:	4b29      	ldr	r3, [pc, #164]	@ (8000f3c <HAL_ADC_ConfigChannel+0x250>)
 8000e98:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	4a28      	ldr	r2, [pc, #160]	@ (8000f40 <HAL_ADC_ConfigChannel+0x254>)
 8000ea0:	4293      	cmp	r3, r2
 8000ea2:	d10f      	bne.n	8000ec4 <HAL_ADC_ConfigChannel+0x1d8>
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	2b12      	cmp	r3, #18
 8000eaa:	d10b      	bne.n	8000ec4 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	685b      	ldr	r3, [r3, #4]
 8000eb0:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	685b      	ldr	r3, [r3, #4]
 8000ebc:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	4a1d      	ldr	r2, [pc, #116]	@ (8000f40 <HAL_ADC_ConfigChannel+0x254>)
 8000eca:	4293      	cmp	r3, r2
 8000ecc:	d12b      	bne.n	8000f26 <HAL_ADC_ConfigChannel+0x23a>
 8000ece:	683b      	ldr	r3, [r7, #0]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	4a1c      	ldr	r2, [pc, #112]	@ (8000f44 <HAL_ADC_ConfigChannel+0x258>)
 8000ed4:	4293      	cmp	r3, r2
 8000ed6:	d003      	beq.n	8000ee0 <HAL_ADC_ConfigChannel+0x1f4>
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	2b11      	cmp	r3, #17
 8000ede:	d122      	bne.n	8000f26 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	685b      	ldr	r3, [r3, #4]
 8000ee4:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	685b      	ldr	r3, [r3, #4]
 8000ef0:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	4a11      	ldr	r2, [pc, #68]	@ (8000f44 <HAL_ADC_ConfigChannel+0x258>)
 8000efe:	4293      	cmp	r3, r2
 8000f00:	d111      	bne.n	8000f26 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000f02:	4b11      	ldr	r3, [pc, #68]	@ (8000f48 <HAL_ADC_ConfigChannel+0x25c>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	4a11      	ldr	r2, [pc, #68]	@ (8000f4c <HAL_ADC_ConfigChannel+0x260>)
 8000f08:	fba2 2303 	umull	r2, r3, r2, r3
 8000f0c:	0c9a      	lsrs	r2, r3, #18
 8000f0e:	4613      	mov	r3, r2
 8000f10:	009b      	lsls	r3, r3, #2
 8000f12:	4413      	add	r3, r2
 8000f14:	005b      	lsls	r3, r3, #1
 8000f16:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8000f18:	e002      	b.n	8000f20 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8000f1a:	68bb      	ldr	r3, [r7, #8]
 8000f1c:	3b01      	subs	r3, #1
 8000f1e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8000f20:	68bb      	ldr	r3, [r7, #8]
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d1f9      	bne.n	8000f1a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	2200      	movs	r2, #0
 8000f2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8000f2e:	2300      	movs	r3, #0
}
 8000f30:	4618      	mov	r0, r3
 8000f32:	3714      	adds	r7, #20
 8000f34:	46bd      	mov	sp, r7
 8000f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3a:	4770      	bx	lr
 8000f3c:	40012300 	.word	0x40012300
 8000f40:	40012000 	.word	0x40012000
 8000f44:	10000012 	.word	0x10000012
 8000f48:	20000000 	.word	0x20000000
 8000f4c:	431bde83 	.word	0x431bde83

08000f50 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000f50:	b480      	push	{r7}
 8000f52:	b085      	sub	sp, #20
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000f58:	4b79      	ldr	r3, [pc, #484]	@ (8001140 <ADC_Init+0x1f0>)
 8000f5a:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	685b      	ldr	r3, [r3, #4]
 8000f60:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	685a      	ldr	r2, [r3, #4]
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	685b      	ldr	r3, [r3, #4]
 8000f70:	431a      	orrs	r2, r3
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	685a      	ldr	r2, [r3, #4]
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8000f84:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	6859      	ldr	r1, [r3, #4]
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	691b      	ldr	r3, [r3, #16]
 8000f90:	021a      	lsls	r2, r3, #8
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	430a      	orrs	r2, r1
 8000f98:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	685a      	ldr	r2, [r3, #4]
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8000fa8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	6859      	ldr	r1, [r3, #4]
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	689a      	ldr	r2, [r3, #8]
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	430a      	orrs	r2, r1
 8000fba:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	689a      	ldr	r2, [r3, #8]
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8000fca:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	6899      	ldr	r1, [r3, #8]
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	68da      	ldr	r2, [r3, #12]
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	430a      	orrs	r2, r1
 8000fdc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000fe2:	4a58      	ldr	r2, [pc, #352]	@ (8001144 <ADC_Init+0x1f4>)
 8000fe4:	4293      	cmp	r3, r2
 8000fe6:	d022      	beq.n	800102e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	689a      	ldr	r2, [r3, #8]
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8000ff6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	6899      	ldr	r1, [r3, #8]
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	430a      	orrs	r2, r1
 8001008:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	689a      	ldr	r2, [r3, #8]
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001018:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	6899      	ldr	r1, [r3, #8]
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	430a      	orrs	r2, r1
 800102a:	609a      	str	r2, [r3, #8]
 800102c:	e00f      	b.n	800104e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	689a      	ldr	r2, [r3, #8]
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800103c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	689a      	ldr	r2, [r3, #8]
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800104c:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	689a      	ldr	r2, [r3, #8]
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	f022 0202 	bic.w	r2, r2, #2
 800105c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	6899      	ldr	r1, [r3, #8]
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	7e1b      	ldrb	r3, [r3, #24]
 8001068:	005a      	lsls	r2, r3, #1
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	430a      	orrs	r2, r1
 8001070:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001078:	2b00      	cmp	r3, #0
 800107a:	d01b      	beq.n	80010b4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	685a      	ldr	r2, [r3, #4]
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800108a:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	685a      	ldr	r2, [r3, #4]
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800109a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	6859      	ldr	r1, [r3, #4]
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010a6:	3b01      	subs	r3, #1
 80010a8:	035a      	lsls	r2, r3, #13
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	430a      	orrs	r2, r1
 80010b0:	605a      	str	r2, [r3, #4]
 80010b2:	e007      	b.n	80010c4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	685a      	ldr	r2, [r3, #4]
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80010c2:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80010d2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	69db      	ldr	r3, [r3, #28]
 80010de:	3b01      	subs	r3, #1
 80010e0:	051a      	lsls	r2, r3, #20
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	430a      	orrs	r2, r1
 80010e8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	689a      	ldr	r2, [r3, #8]
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80010f8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	6899      	ldr	r1, [r3, #8]
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001106:	025a      	lsls	r2, r3, #9
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	430a      	orrs	r2, r1
 800110e:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	689a      	ldr	r2, [r3, #8]
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800111e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	6899      	ldr	r1, [r3, #8]
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	695b      	ldr	r3, [r3, #20]
 800112a:	029a      	lsls	r2, r3, #10
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	430a      	orrs	r2, r1
 8001132:	609a      	str	r2, [r3, #8]
}
 8001134:	bf00      	nop
 8001136:	3714      	adds	r7, #20
 8001138:	46bd      	mov	sp, r7
 800113a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113e:	4770      	bx	lr
 8001140:	40012300 	.word	0x40012300
 8001144:	0f000001 	.word	0x0f000001

08001148 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b084      	sub	sp, #16
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001154:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800115a:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800115e:	2b00      	cmp	r3, #0
 8001160:	d13c      	bne.n	80011dc <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001166:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	689b      	ldr	r3, [r3, #8]
 8001174:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001178:	2b00      	cmp	r3, #0
 800117a:	d12b      	bne.n	80011d4 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001180:	2b00      	cmp	r3, #0
 8001182:	d127      	bne.n	80011d4 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800118a:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800118e:	2b00      	cmp	r3, #0
 8001190:	d006      	beq.n	80011a0 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	689b      	ldr	r3, [r3, #8]
 8001198:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800119c:	2b00      	cmp	r3, #0
 800119e:	d119      	bne.n	80011d4 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	685a      	ldr	r2, [r3, #4]
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f022 0220 	bic.w	r2, r2, #32
 80011ae:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011b4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011c0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d105      	bne.n	80011d4 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011cc:	f043 0201 	orr.w	r2, r3, #1
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80011d4:	68f8      	ldr	r0, [r7, #12]
 80011d6:	f7ff fd6b 	bl	8000cb0 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80011da:	e00e      	b.n	80011fa <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011e0:	f003 0310 	and.w	r3, r3, #16
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d003      	beq.n	80011f0 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80011e8:	68f8      	ldr	r0, [r7, #12]
 80011ea:	f7ff fd75 	bl	8000cd8 <HAL_ADC_ErrorCallback>
}
 80011ee:	e004      	b.n	80011fa <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80011f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011f6:	6878      	ldr	r0, [r7, #4]
 80011f8:	4798      	blx	r3
}
 80011fa:	bf00      	nop
 80011fc:	3710      	adds	r7, #16
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}

08001202 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8001202:	b580      	push	{r7, lr}
 8001204:	b084      	sub	sp, #16
 8001206:	af00      	add	r7, sp, #0
 8001208:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800120e:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001210:	68f8      	ldr	r0, [r7, #12]
 8001212:	f7ff fd57 	bl	8000cc4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001216:	bf00      	nop
 8001218:	3710      	adds	r7, #16
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}

0800121e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800121e:	b580      	push	{r7, lr}
 8001220:	b084      	sub	sp, #16
 8001222:	af00      	add	r7, sp, #0
 8001224:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800122a:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	2240      	movs	r2, #64	@ 0x40
 8001230:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001236:	f043 0204 	orr.w	r2, r3, #4
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800123e:	68f8      	ldr	r0, [r7, #12]
 8001240:	f7ff fd4a 	bl	8000cd8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001244:	bf00      	nop
 8001246:	3710      	adds	r7, #16
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}

0800124c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800124c:	b480      	push	{r7}
 800124e:	b085      	sub	sp, #20
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	f003 0307 	and.w	r3, r3, #7
 800125a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800125c:	4b0c      	ldr	r3, [pc, #48]	@ (8001290 <__NVIC_SetPriorityGrouping+0x44>)
 800125e:	68db      	ldr	r3, [r3, #12]
 8001260:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001262:	68ba      	ldr	r2, [r7, #8]
 8001264:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001268:	4013      	ands	r3, r2
 800126a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001270:	68bb      	ldr	r3, [r7, #8]
 8001272:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001274:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001278:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800127c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800127e:	4a04      	ldr	r2, [pc, #16]	@ (8001290 <__NVIC_SetPriorityGrouping+0x44>)
 8001280:	68bb      	ldr	r3, [r7, #8]
 8001282:	60d3      	str	r3, [r2, #12]
}
 8001284:	bf00      	nop
 8001286:	3714      	adds	r7, #20
 8001288:	46bd      	mov	sp, r7
 800128a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128e:	4770      	bx	lr
 8001290:	e000ed00 	.word	0xe000ed00

08001294 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001294:	b480      	push	{r7}
 8001296:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001298:	4b04      	ldr	r3, [pc, #16]	@ (80012ac <__NVIC_GetPriorityGrouping+0x18>)
 800129a:	68db      	ldr	r3, [r3, #12]
 800129c:	0a1b      	lsrs	r3, r3, #8
 800129e:	f003 0307 	and.w	r3, r3, #7
}
 80012a2:	4618      	mov	r0, r3
 80012a4:	46bd      	mov	sp, r7
 80012a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012aa:	4770      	bx	lr
 80012ac:	e000ed00 	.word	0xe000ed00

080012b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012b0:	b480      	push	{r7}
 80012b2:	b083      	sub	sp, #12
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	4603      	mov	r3, r0
 80012b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	db0b      	blt.n	80012da <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012c2:	79fb      	ldrb	r3, [r7, #7]
 80012c4:	f003 021f 	and.w	r2, r3, #31
 80012c8:	4907      	ldr	r1, [pc, #28]	@ (80012e8 <__NVIC_EnableIRQ+0x38>)
 80012ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ce:	095b      	lsrs	r3, r3, #5
 80012d0:	2001      	movs	r0, #1
 80012d2:	fa00 f202 	lsl.w	r2, r0, r2
 80012d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80012da:	bf00      	nop
 80012dc:	370c      	adds	r7, #12
 80012de:	46bd      	mov	sp, r7
 80012e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e4:	4770      	bx	lr
 80012e6:	bf00      	nop
 80012e8:	e000e100 	.word	0xe000e100

080012ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012ec:	b480      	push	{r7}
 80012ee:	b083      	sub	sp, #12
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	4603      	mov	r3, r0
 80012f4:	6039      	str	r1, [r7, #0]
 80012f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	db0a      	blt.n	8001316 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	b2da      	uxtb	r2, r3
 8001304:	490c      	ldr	r1, [pc, #48]	@ (8001338 <__NVIC_SetPriority+0x4c>)
 8001306:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800130a:	0112      	lsls	r2, r2, #4
 800130c:	b2d2      	uxtb	r2, r2
 800130e:	440b      	add	r3, r1
 8001310:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001314:	e00a      	b.n	800132c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	b2da      	uxtb	r2, r3
 800131a:	4908      	ldr	r1, [pc, #32]	@ (800133c <__NVIC_SetPriority+0x50>)
 800131c:	79fb      	ldrb	r3, [r7, #7]
 800131e:	f003 030f 	and.w	r3, r3, #15
 8001322:	3b04      	subs	r3, #4
 8001324:	0112      	lsls	r2, r2, #4
 8001326:	b2d2      	uxtb	r2, r2
 8001328:	440b      	add	r3, r1
 800132a:	761a      	strb	r2, [r3, #24]
}
 800132c:	bf00      	nop
 800132e:	370c      	adds	r7, #12
 8001330:	46bd      	mov	sp, r7
 8001332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001336:	4770      	bx	lr
 8001338:	e000e100 	.word	0xe000e100
 800133c:	e000ed00 	.word	0xe000ed00

08001340 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001340:	b480      	push	{r7}
 8001342:	b089      	sub	sp, #36	@ 0x24
 8001344:	af00      	add	r7, sp, #0
 8001346:	60f8      	str	r0, [r7, #12]
 8001348:	60b9      	str	r1, [r7, #8]
 800134a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	f003 0307 	and.w	r3, r3, #7
 8001352:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001354:	69fb      	ldr	r3, [r7, #28]
 8001356:	f1c3 0307 	rsb	r3, r3, #7
 800135a:	2b04      	cmp	r3, #4
 800135c:	bf28      	it	cs
 800135e:	2304      	movcs	r3, #4
 8001360:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001362:	69fb      	ldr	r3, [r7, #28]
 8001364:	3304      	adds	r3, #4
 8001366:	2b06      	cmp	r3, #6
 8001368:	d902      	bls.n	8001370 <NVIC_EncodePriority+0x30>
 800136a:	69fb      	ldr	r3, [r7, #28]
 800136c:	3b03      	subs	r3, #3
 800136e:	e000      	b.n	8001372 <NVIC_EncodePriority+0x32>
 8001370:	2300      	movs	r3, #0
 8001372:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001374:	f04f 32ff 	mov.w	r2, #4294967295
 8001378:	69bb      	ldr	r3, [r7, #24]
 800137a:	fa02 f303 	lsl.w	r3, r2, r3
 800137e:	43da      	mvns	r2, r3
 8001380:	68bb      	ldr	r3, [r7, #8]
 8001382:	401a      	ands	r2, r3
 8001384:	697b      	ldr	r3, [r7, #20]
 8001386:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001388:	f04f 31ff 	mov.w	r1, #4294967295
 800138c:	697b      	ldr	r3, [r7, #20]
 800138e:	fa01 f303 	lsl.w	r3, r1, r3
 8001392:	43d9      	mvns	r1, r3
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001398:	4313      	orrs	r3, r2
         );
}
 800139a:	4618      	mov	r0, r3
 800139c:	3724      	adds	r7, #36	@ 0x24
 800139e:	46bd      	mov	sp, r7
 80013a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a4:	4770      	bx	lr
	...

080013a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b082      	sub	sp, #8
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	3b01      	subs	r3, #1
 80013b4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80013b8:	d301      	bcc.n	80013be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013ba:	2301      	movs	r3, #1
 80013bc:	e00f      	b.n	80013de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013be:	4a0a      	ldr	r2, [pc, #40]	@ (80013e8 <SysTick_Config+0x40>)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	3b01      	subs	r3, #1
 80013c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013c6:	210f      	movs	r1, #15
 80013c8:	f04f 30ff 	mov.w	r0, #4294967295
 80013cc:	f7ff ff8e 	bl	80012ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013d0:	4b05      	ldr	r3, [pc, #20]	@ (80013e8 <SysTick_Config+0x40>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013d6:	4b04      	ldr	r3, [pc, #16]	@ (80013e8 <SysTick_Config+0x40>)
 80013d8:	2207      	movs	r2, #7
 80013da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013dc:	2300      	movs	r3, #0
}
 80013de:	4618      	mov	r0, r3
 80013e0:	3708      	adds	r7, #8
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	e000e010 	.word	0xe000e010

080013ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b082      	sub	sp, #8
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013f4:	6878      	ldr	r0, [r7, #4]
 80013f6:	f7ff ff29 	bl	800124c <__NVIC_SetPriorityGrouping>
}
 80013fa:	bf00      	nop
 80013fc:	3708      	adds	r7, #8
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}

08001402 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001402:	b580      	push	{r7, lr}
 8001404:	b086      	sub	sp, #24
 8001406:	af00      	add	r7, sp, #0
 8001408:	4603      	mov	r3, r0
 800140a:	60b9      	str	r1, [r7, #8]
 800140c:	607a      	str	r2, [r7, #4]
 800140e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001410:	2300      	movs	r3, #0
 8001412:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001414:	f7ff ff3e 	bl	8001294 <__NVIC_GetPriorityGrouping>
 8001418:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800141a:	687a      	ldr	r2, [r7, #4]
 800141c:	68b9      	ldr	r1, [r7, #8]
 800141e:	6978      	ldr	r0, [r7, #20]
 8001420:	f7ff ff8e 	bl	8001340 <NVIC_EncodePriority>
 8001424:	4602      	mov	r2, r0
 8001426:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800142a:	4611      	mov	r1, r2
 800142c:	4618      	mov	r0, r3
 800142e:	f7ff ff5d 	bl	80012ec <__NVIC_SetPriority>
}
 8001432:	bf00      	nop
 8001434:	3718      	adds	r7, #24
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}

0800143a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800143a:	b580      	push	{r7, lr}
 800143c:	b082      	sub	sp, #8
 800143e:	af00      	add	r7, sp, #0
 8001440:	4603      	mov	r3, r0
 8001442:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001444:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001448:	4618      	mov	r0, r3
 800144a:	f7ff ff31 	bl	80012b0 <__NVIC_EnableIRQ>
}
 800144e:	bf00      	nop
 8001450:	3708      	adds	r7, #8
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}

08001456 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001456:	b580      	push	{r7, lr}
 8001458:	b082      	sub	sp, #8
 800145a:	af00      	add	r7, sp, #0
 800145c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800145e:	6878      	ldr	r0, [r7, #4]
 8001460:	f7ff ffa2 	bl	80013a8 <SysTick_Config>
 8001464:	4603      	mov	r3, r0
}
 8001466:	4618      	mov	r0, r3
 8001468:	3708      	adds	r7, #8
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}
	...

08001470 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b086      	sub	sp, #24
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001478:	2300      	movs	r3, #0
 800147a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800147c:	f7ff fad8 	bl	8000a30 <HAL_GetTick>
 8001480:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	2b00      	cmp	r3, #0
 8001486:	d101      	bne.n	800148c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001488:	2301      	movs	r3, #1
 800148a:	e099      	b.n	80015c0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	2202      	movs	r2, #2
 8001490:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	2200      	movs	r2, #0
 8001498:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	681a      	ldr	r2, [r3, #0]
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f022 0201 	bic.w	r2, r2, #1
 80014aa:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80014ac:	e00f      	b.n	80014ce <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80014ae:	f7ff fabf 	bl	8000a30 <HAL_GetTick>
 80014b2:	4602      	mov	r2, r0
 80014b4:	693b      	ldr	r3, [r7, #16]
 80014b6:	1ad3      	subs	r3, r2, r3
 80014b8:	2b05      	cmp	r3, #5
 80014ba:	d908      	bls.n	80014ce <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	2220      	movs	r2, #32
 80014c0:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	2203      	movs	r2, #3
 80014c6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80014ca:	2303      	movs	r3, #3
 80014cc:	e078      	b.n	80015c0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f003 0301 	and.w	r3, r3, #1
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d1e8      	bne.n	80014ae <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80014e4:	697a      	ldr	r2, [r7, #20]
 80014e6:	4b38      	ldr	r3, [pc, #224]	@ (80015c8 <HAL_DMA_Init+0x158>)
 80014e8:	4013      	ands	r3, r2
 80014ea:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	685a      	ldr	r2, [r3, #4]
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	689b      	ldr	r3, [r3, #8]
 80014f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80014fa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	691b      	ldr	r3, [r3, #16]
 8001500:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001506:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	699b      	ldr	r3, [r3, #24]
 800150c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001512:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	6a1b      	ldr	r3, [r3, #32]
 8001518:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800151a:	697a      	ldr	r2, [r7, #20]
 800151c:	4313      	orrs	r3, r2
 800151e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001524:	2b04      	cmp	r3, #4
 8001526:	d107      	bne.n	8001538 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001530:	4313      	orrs	r3, r2
 8001532:	697a      	ldr	r2, [r7, #20]
 8001534:	4313      	orrs	r3, r2
 8001536:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	697a      	ldr	r2, [r7, #20]
 800153e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	695b      	ldr	r3, [r3, #20]
 8001546:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001548:	697b      	ldr	r3, [r7, #20]
 800154a:	f023 0307 	bic.w	r3, r3, #7
 800154e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001554:	697a      	ldr	r2, [r7, #20]
 8001556:	4313      	orrs	r3, r2
 8001558:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800155e:	2b04      	cmp	r3, #4
 8001560:	d117      	bne.n	8001592 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001566:	697a      	ldr	r2, [r7, #20]
 8001568:	4313      	orrs	r3, r2
 800156a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001570:	2b00      	cmp	r3, #0
 8001572:	d00e      	beq.n	8001592 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001574:	6878      	ldr	r0, [r7, #4]
 8001576:	f000 fa6f 	bl	8001a58 <DMA_CheckFifoParam>
 800157a:	4603      	mov	r3, r0
 800157c:	2b00      	cmp	r3, #0
 800157e:	d008      	beq.n	8001592 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	2240      	movs	r2, #64	@ 0x40
 8001584:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	2201      	movs	r2, #1
 800158a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800158e:	2301      	movs	r3, #1
 8001590:	e016      	b.n	80015c0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	697a      	ldr	r2, [r7, #20]
 8001598:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800159a:	6878      	ldr	r0, [r7, #4]
 800159c:	f000 fa26 	bl	80019ec <DMA_CalcBaseAndBitshift>
 80015a0:	4603      	mov	r3, r0
 80015a2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80015a8:	223f      	movs	r2, #63	@ 0x3f
 80015aa:	409a      	lsls	r2, r3
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	2200      	movs	r2, #0
 80015b4:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	2201      	movs	r2, #1
 80015ba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80015be:	2300      	movs	r3, #0
}
 80015c0:	4618      	mov	r0, r3
 80015c2:	3718      	adds	r7, #24
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}
 80015c8:	f010803f 	.word	0xf010803f

080015cc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b086      	sub	sp, #24
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	60f8      	str	r0, [r7, #12]
 80015d4:	60b9      	str	r1, [r7, #8]
 80015d6:	607a      	str	r2, [r7, #4]
 80015d8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80015da:	2300      	movs	r3, #0
 80015dc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015e2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80015ea:	2b01      	cmp	r3, #1
 80015ec:	d101      	bne.n	80015f2 <HAL_DMA_Start_IT+0x26>
 80015ee:	2302      	movs	r3, #2
 80015f0:	e040      	b.n	8001674 <HAL_DMA_Start_IT+0xa8>
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	2201      	movs	r2, #1
 80015f6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001600:	b2db      	uxtb	r3, r3
 8001602:	2b01      	cmp	r3, #1
 8001604:	d12f      	bne.n	8001666 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	2202      	movs	r2, #2
 800160a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	2200      	movs	r2, #0
 8001612:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	687a      	ldr	r2, [r7, #4]
 8001618:	68b9      	ldr	r1, [r7, #8]
 800161a:	68f8      	ldr	r0, [r7, #12]
 800161c:	f000 f9b8 	bl	8001990 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001624:	223f      	movs	r2, #63	@ 0x3f
 8001626:	409a      	lsls	r2, r3
 8001628:	693b      	ldr	r3, [r7, #16]
 800162a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	681a      	ldr	r2, [r3, #0]
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f042 0216 	orr.w	r2, r2, #22
 800163a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001640:	2b00      	cmp	r3, #0
 8001642:	d007      	beq.n	8001654 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	681a      	ldr	r2, [r3, #0]
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f042 0208 	orr.w	r2, r2, #8
 8001652:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	681a      	ldr	r2, [r3, #0]
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f042 0201 	orr.w	r2, r2, #1
 8001662:	601a      	str	r2, [r3, #0]
 8001664:	e005      	b.n	8001672 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	2200      	movs	r2, #0
 800166a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800166e:	2302      	movs	r3, #2
 8001670:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001672:	7dfb      	ldrb	r3, [r7, #23]
}
 8001674:	4618      	mov	r0, r3
 8001676:	3718      	adds	r7, #24
 8001678:	46bd      	mov	sp, r7
 800167a:	bd80      	pop	{r7, pc}

0800167c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b086      	sub	sp, #24
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001684:	2300      	movs	r3, #0
 8001686:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001688:	4b8e      	ldr	r3, [pc, #568]	@ (80018c4 <HAL_DMA_IRQHandler+0x248>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	4a8e      	ldr	r2, [pc, #568]	@ (80018c8 <HAL_DMA_IRQHandler+0x24c>)
 800168e:	fba2 2303 	umull	r2, r3, r2, r3
 8001692:	0a9b      	lsrs	r3, r3, #10
 8001694:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800169a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800169c:	693b      	ldr	r3, [r7, #16]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80016a6:	2208      	movs	r2, #8
 80016a8:	409a      	lsls	r2, r3
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	4013      	ands	r3, r2
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d01a      	beq.n	80016e8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f003 0304 	and.w	r3, r3, #4
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d013      	beq.n	80016e8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	681a      	ldr	r2, [r3, #0]
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f022 0204 	bic.w	r2, r2, #4
 80016ce:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80016d4:	2208      	movs	r2, #8
 80016d6:	409a      	lsls	r2, r3
 80016d8:	693b      	ldr	r3, [r7, #16]
 80016da:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80016e0:	f043 0201 	orr.w	r2, r3, #1
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80016ec:	2201      	movs	r2, #1
 80016ee:	409a      	lsls	r2, r3
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	4013      	ands	r3, r2
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d012      	beq.n	800171e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	695b      	ldr	r3, [r3, #20]
 80016fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001702:	2b00      	cmp	r3, #0
 8001704:	d00b      	beq.n	800171e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800170a:	2201      	movs	r2, #1
 800170c:	409a      	lsls	r2, r3
 800170e:	693b      	ldr	r3, [r7, #16]
 8001710:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001716:	f043 0202 	orr.w	r2, r3, #2
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001722:	2204      	movs	r2, #4
 8001724:	409a      	lsls	r2, r3
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	4013      	ands	r3, r2
 800172a:	2b00      	cmp	r3, #0
 800172c:	d012      	beq.n	8001754 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f003 0302 	and.w	r3, r3, #2
 8001738:	2b00      	cmp	r3, #0
 800173a:	d00b      	beq.n	8001754 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001740:	2204      	movs	r2, #4
 8001742:	409a      	lsls	r2, r3
 8001744:	693b      	ldr	r3, [r7, #16]
 8001746:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800174c:	f043 0204 	orr.w	r2, r3, #4
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001758:	2210      	movs	r2, #16
 800175a:	409a      	lsls	r2, r3
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	4013      	ands	r3, r2
 8001760:	2b00      	cmp	r3, #0
 8001762:	d043      	beq.n	80017ec <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f003 0308 	and.w	r3, r3, #8
 800176e:	2b00      	cmp	r3, #0
 8001770:	d03c      	beq.n	80017ec <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001776:	2210      	movs	r2, #16
 8001778:	409a      	lsls	r2, r3
 800177a:	693b      	ldr	r3, [r7, #16]
 800177c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001788:	2b00      	cmp	r3, #0
 800178a:	d018      	beq.n	80017be <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001796:	2b00      	cmp	r3, #0
 8001798:	d108      	bne.n	80017ac <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d024      	beq.n	80017ec <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017a6:	6878      	ldr	r0, [r7, #4]
 80017a8:	4798      	blx	r3
 80017aa:	e01f      	b.n	80017ec <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d01b      	beq.n	80017ec <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80017b8:	6878      	ldr	r0, [r7, #4]
 80017ba:	4798      	blx	r3
 80017bc:	e016      	b.n	80017ec <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d107      	bne.n	80017dc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	681a      	ldr	r2, [r3, #0]
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f022 0208 	bic.w	r2, r2, #8
 80017da:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d003      	beq.n	80017ec <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017e8:	6878      	ldr	r0, [r7, #4]
 80017ea:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80017f0:	2220      	movs	r2, #32
 80017f2:	409a      	lsls	r2, r3
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	4013      	ands	r3, r2
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	f000 808f 	beq.w	800191c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f003 0310 	and.w	r3, r3, #16
 8001808:	2b00      	cmp	r3, #0
 800180a:	f000 8087 	beq.w	800191c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001812:	2220      	movs	r2, #32
 8001814:	409a      	lsls	r2, r3
 8001816:	693b      	ldr	r3, [r7, #16]
 8001818:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001820:	b2db      	uxtb	r3, r3
 8001822:	2b05      	cmp	r3, #5
 8001824:	d136      	bne.n	8001894 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	681a      	ldr	r2, [r3, #0]
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f022 0216 	bic.w	r2, r2, #22
 8001834:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	695a      	ldr	r2, [r3, #20]
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001844:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800184a:	2b00      	cmp	r3, #0
 800184c:	d103      	bne.n	8001856 <HAL_DMA_IRQHandler+0x1da>
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001852:	2b00      	cmp	r3, #0
 8001854:	d007      	beq.n	8001866 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	681a      	ldr	r2, [r3, #0]
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f022 0208 	bic.w	r2, r2, #8
 8001864:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800186a:	223f      	movs	r2, #63	@ 0x3f
 800186c:	409a      	lsls	r2, r3
 800186e:	693b      	ldr	r3, [r7, #16]
 8001870:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	2201      	movs	r2, #1
 8001876:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	2200      	movs	r2, #0
 800187e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001886:	2b00      	cmp	r3, #0
 8001888:	d07e      	beq.n	8001988 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800188e:	6878      	ldr	r0, [r7, #4]
 8001890:	4798      	blx	r3
        }
        return;
 8001892:	e079      	b.n	8001988 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d01d      	beq.n	80018de <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d10d      	bne.n	80018cc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d031      	beq.n	800191c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018bc:	6878      	ldr	r0, [r7, #4]
 80018be:	4798      	blx	r3
 80018c0:	e02c      	b.n	800191c <HAL_DMA_IRQHandler+0x2a0>
 80018c2:	bf00      	nop
 80018c4:	20000000 	.word	0x20000000
 80018c8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d023      	beq.n	800191c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80018d8:	6878      	ldr	r0, [r7, #4]
 80018da:	4798      	blx	r3
 80018dc:	e01e      	b.n	800191c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d10f      	bne.n	800190c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	681a      	ldr	r2, [r3, #0]
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f022 0210 	bic.w	r2, r2, #16
 80018fa:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	2201      	movs	r2, #1
 8001900:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	2200      	movs	r2, #0
 8001908:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001910:	2b00      	cmp	r3, #0
 8001912:	d003      	beq.n	800191c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001918:	6878      	ldr	r0, [r7, #4]
 800191a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001920:	2b00      	cmp	r3, #0
 8001922:	d032      	beq.n	800198a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001928:	f003 0301 	and.w	r3, r3, #1
 800192c:	2b00      	cmp	r3, #0
 800192e:	d022      	beq.n	8001976 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	2205      	movs	r2, #5
 8001934:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	681a      	ldr	r2, [r3, #0]
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f022 0201 	bic.w	r2, r2, #1
 8001946:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001948:	68bb      	ldr	r3, [r7, #8]
 800194a:	3301      	adds	r3, #1
 800194c:	60bb      	str	r3, [r7, #8]
 800194e:	697a      	ldr	r2, [r7, #20]
 8001950:	429a      	cmp	r2, r3
 8001952:	d307      	bcc.n	8001964 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f003 0301 	and.w	r3, r3, #1
 800195e:	2b00      	cmp	r3, #0
 8001960:	d1f2      	bne.n	8001948 <HAL_DMA_IRQHandler+0x2cc>
 8001962:	e000      	b.n	8001966 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001964:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	2201      	movs	r2, #1
 800196a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	2200      	movs	r2, #0
 8001972:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800197a:	2b00      	cmp	r3, #0
 800197c:	d005      	beq.n	800198a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001982:	6878      	ldr	r0, [r7, #4]
 8001984:	4798      	blx	r3
 8001986:	e000      	b.n	800198a <HAL_DMA_IRQHandler+0x30e>
        return;
 8001988:	bf00      	nop
    }
  }
}
 800198a:	3718      	adds	r7, #24
 800198c:	46bd      	mov	sp, r7
 800198e:	bd80      	pop	{r7, pc}

08001990 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001990:	b480      	push	{r7}
 8001992:	b085      	sub	sp, #20
 8001994:	af00      	add	r7, sp, #0
 8001996:	60f8      	str	r0, [r7, #12]
 8001998:	60b9      	str	r1, [r7, #8]
 800199a:	607a      	str	r2, [r7, #4]
 800199c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	681a      	ldr	r2, [r3, #0]
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80019ac:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	683a      	ldr	r2, [r7, #0]
 80019b4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	689b      	ldr	r3, [r3, #8]
 80019ba:	2b40      	cmp	r3, #64	@ 0x40
 80019bc:	d108      	bne.n	80019d0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	687a      	ldr	r2, [r7, #4]
 80019c4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	68ba      	ldr	r2, [r7, #8]
 80019cc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80019ce:	e007      	b.n	80019e0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	68ba      	ldr	r2, [r7, #8]
 80019d6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	687a      	ldr	r2, [r7, #4]
 80019de:	60da      	str	r2, [r3, #12]
}
 80019e0:	bf00      	nop
 80019e2:	3714      	adds	r7, #20
 80019e4:	46bd      	mov	sp, r7
 80019e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ea:	4770      	bx	lr

080019ec <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80019ec:	b480      	push	{r7}
 80019ee:	b085      	sub	sp, #20
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	b2db      	uxtb	r3, r3
 80019fa:	3b10      	subs	r3, #16
 80019fc:	4a14      	ldr	r2, [pc, #80]	@ (8001a50 <DMA_CalcBaseAndBitshift+0x64>)
 80019fe:	fba2 2303 	umull	r2, r3, r2, r3
 8001a02:	091b      	lsrs	r3, r3, #4
 8001a04:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001a06:	4a13      	ldr	r2, [pc, #76]	@ (8001a54 <DMA_CalcBaseAndBitshift+0x68>)
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	4413      	add	r3, r2
 8001a0c:	781b      	ldrb	r3, [r3, #0]
 8001a0e:	461a      	mov	r2, r3
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	2b03      	cmp	r3, #3
 8001a18:	d909      	bls.n	8001a2e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001a22:	f023 0303 	bic.w	r3, r3, #3
 8001a26:	1d1a      	adds	r2, r3, #4
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	659a      	str	r2, [r3, #88]	@ 0x58
 8001a2c:	e007      	b.n	8001a3e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001a36:	f023 0303 	bic.w	r3, r3, #3
 8001a3a:	687a      	ldr	r2, [r7, #4]
 8001a3c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8001a42:	4618      	mov	r0, r3
 8001a44:	3714      	adds	r7, #20
 8001a46:	46bd      	mov	sp, r7
 8001a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4c:	4770      	bx	lr
 8001a4e:	bf00      	nop
 8001a50:	aaaaaaab 	.word	0xaaaaaaab
 8001a54:	08002720 	.word	0x08002720

08001a58 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b085      	sub	sp, #20
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001a60:	2300      	movs	r3, #0
 8001a62:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a68:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	699b      	ldr	r3, [r3, #24]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d11f      	bne.n	8001ab2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001a72:	68bb      	ldr	r3, [r7, #8]
 8001a74:	2b03      	cmp	r3, #3
 8001a76:	d856      	bhi.n	8001b26 <DMA_CheckFifoParam+0xce>
 8001a78:	a201      	add	r2, pc, #4	@ (adr r2, 8001a80 <DMA_CheckFifoParam+0x28>)
 8001a7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a7e:	bf00      	nop
 8001a80:	08001a91 	.word	0x08001a91
 8001a84:	08001aa3 	.word	0x08001aa3
 8001a88:	08001a91 	.word	0x08001a91
 8001a8c:	08001b27 	.word	0x08001b27
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a94:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d046      	beq.n	8001b2a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001aa0:	e043      	b.n	8001b2a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001aa6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001aaa:	d140      	bne.n	8001b2e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001aac:	2301      	movs	r3, #1
 8001aae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001ab0:	e03d      	b.n	8001b2e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	699b      	ldr	r3, [r3, #24]
 8001ab6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001aba:	d121      	bne.n	8001b00 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001abc:	68bb      	ldr	r3, [r7, #8]
 8001abe:	2b03      	cmp	r3, #3
 8001ac0:	d837      	bhi.n	8001b32 <DMA_CheckFifoParam+0xda>
 8001ac2:	a201      	add	r2, pc, #4	@ (adr r2, 8001ac8 <DMA_CheckFifoParam+0x70>)
 8001ac4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ac8:	08001ad9 	.word	0x08001ad9
 8001acc:	08001adf 	.word	0x08001adf
 8001ad0:	08001ad9 	.word	0x08001ad9
 8001ad4:	08001af1 	.word	0x08001af1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001ad8:	2301      	movs	r3, #1
 8001ada:	73fb      	strb	r3, [r7, #15]
      break;
 8001adc:	e030      	b.n	8001b40 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ae2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d025      	beq.n	8001b36 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001aea:	2301      	movs	r3, #1
 8001aec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001aee:	e022      	b.n	8001b36 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001af4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001af8:	d11f      	bne.n	8001b3a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001afa:	2301      	movs	r3, #1
 8001afc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001afe:	e01c      	b.n	8001b3a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001b00:	68bb      	ldr	r3, [r7, #8]
 8001b02:	2b02      	cmp	r3, #2
 8001b04:	d903      	bls.n	8001b0e <DMA_CheckFifoParam+0xb6>
 8001b06:	68bb      	ldr	r3, [r7, #8]
 8001b08:	2b03      	cmp	r3, #3
 8001b0a:	d003      	beq.n	8001b14 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001b0c:	e018      	b.n	8001b40 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	73fb      	strb	r3, [r7, #15]
      break;
 8001b12:	e015      	b.n	8001b40 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b18:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d00e      	beq.n	8001b3e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001b20:	2301      	movs	r3, #1
 8001b22:	73fb      	strb	r3, [r7, #15]
      break;
 8001b24:	e00b      	b.n	8001b3e <DMA_CheckFifoParam+0xe6>
      break;
 8001b26:	bf00      	nop
 8001b28:	e00a      	b.n	8001b40 <DMA_CheckFifoParam+0xe8>
      break;
 8001b2a:	bf00      	nop
 8001b2c:	e008      	b.n	8001b40 <DMA_CheckFifoParam+0xe8>
      break;
 8001b2e:	bf00      	nop
 8001b30:	e006      	b.n	8001b40 <DMA_CheckFifoParam+0xe8>
      break;
 8001b32:	bf00      	nop
 8001b34:	e004      	b.n	8001b40 <DMA_CheckFifoParam+0xe8>
      break;
 8001b36:	bf00      	nop
 8001b38:	e002      	b.n	8001b40 <DMA_CheckFifoParam+0xe8>
      break;   
 8001b3a:	bf00      	nop
 8001b3c:	e000      	b.n	8001b40 <DMA_CheckFifoParam+0xe8>
      break;
 8001b3e:	bf00      	nop
    }
  } 
  
  return status; 
 8001b40:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	3714      	adds	r7, #20
 8001b46:	46bd      	mov	sp, r7
 8001b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4c:	4770      	bx	lr
 8001b4e:	bf00      	nop

08001b50 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b50:	b480      	push	{r7}
 8001b52:	b089      	sub	sp, #36	@ 0x24
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
 8001b58:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001b62:	2300      	movs	r3, #0
 8001b64:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b66:	2300      	movs	r3, #0
 8001b68:	61fb      	str	r3, [r7, #28]
 8001b6a:	e159      	b.n	8001e20 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001b6c:	2201      	movs	r2, #1
 8001b6e:	69fb      	ldr	r3, [r7, #28]
 8001b70:	fa02 f303 	lsl.w	r3, r2, r3
 8001b74:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	697a      	ldr	r2, [r7, #20]
 8001b7c:	4013      	ands	r3, r2
 8001b7e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001b80:	693a      	ldr	r2, [r7, #16]
 8001b82:	697b      	ldr	r3, [r7, #20]
 8001b84:	429a      	cmp	r2, r3
 8001b86:	f040 8148 	bne.w	8001e1a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	f003 0303 	and.w	r3, r3, #3
 8001b92:	2b01      	cmp	r3, #1
 8001b94:	d005      	beq.n	8001ba2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b9e:	2b02      	cmp	r3, #2
 8001ba0:	d130      	bne.n	8001c04 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	689b      	ldr	r3, [r3, #8]
 8001ba6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ba8:	69fb      	ldr	r3, [r7, #28]
 8001baa:	005b      	lsls	r3, r3, #1
 8001bac:	2203      	movs	r2, #3
 8001bae:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb2:	43db      	mvns	r3, r3
 8001bb4:	69ba      	ldr	r2, [r7, #24]
 8001bb6:	4013      	ands	r3, r2
 8001bb8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	68da      	ldr	r2, [r3, #12]
 8001bbe:	69fb      	ldr	r3, [r7, #28]
 8001bc0:	005b      	lsls	r3, r3, #1
 8001bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc6:	69ba      	ldr	r2, [r7, #24]
 8001bc8:	4313      	orrs	r3, r2
 8001bca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	69ba      	ldr	r2, [r7, #24]
 8001bd0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001bd8:	2201      	movs	r2, #1
 8001bda:	69fb      	ldr	r3, [r7, #28]
 8001bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001be0:	43db      	mvns	r3, r3
 8001be2:	69ba      	ldr	r2, [r7, #24]
 8001be4:	4013      	ands	r3, r2
 8001be6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	091b      	lsrs	r3, r3, #4
 8001bee:	f003 0201 	and.w	r2, r3, #1
 8001bf2:	69fb      	ldr	r3, [r7, #28]
 8001bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf8:	69ba      	ldr	r2, [r7, #24]
 8001bfa:	4313      	orrs	r3, r2
 8001bfc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	69ba      	ldr	r2, [r7, #24]
 8001c02:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	f003 0303 	and.w	r3, r3, #3
 8001c0c:	2b03      	cmp	r3, #3
 8001c0e:	d017      	beq.n	8001c40 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	68db      	ldr	r3, [r3, #12]
 8001c14:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001c16:	69fb      	ldr	r3, [r7, #28]
 8001c18:	005b      	lsls	r3, r3, #1
 8001c1a:	2203      	movs	r2, #3
 8001c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c20:	43db      	mvns	r3, r3
 8001c22:	69ba      	ldr	r2, [r7, #24]
 8001c24:	4013      	ands	r3, r2
 8001c26:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	689a      	ldr	r2, [r3, #8]
 8001c2c:	69fb      	ldr	r3, [r7, #28]
 8001c2e:	005b      	lsls	r3, r3, #1
 8001c30:	fa02 f303 	lsl.w	r3, r2, r3
 8001c34:	69ba      	ldr	r2, [r7, #24]
 8001c36:	4313      	orrs	r3, r2
 8001c38:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	69ba      	ldr	r2, [r7, #24]
 8001c3e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	f003 0303 	and.w	r3, r3, #3
 8001c48:	2b02      	cmp	r3, #2
 8001c4a:	d123      	bne.n	8001c94 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c4c:	69fb      	ldr	r3, [r7, #28]
 8001c4e:	08da      	lsrs	r2, r3, #3
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	3208      	adds	r2, #8
 8001c54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c58:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001c5a:	69fb      	ldr	r3, [r7, #28]
 8001c5c:	f003 0307 	and.w	r3, r3, #7
 8001c60:	009b      	lsls	r3, r3, #2
 8001c62:	220f      	movs	r2, #15
 8001c64:	fa02 f303 	lsl.w	r3, r2, r3
 8001c68:	43db      	mvns	r3, r3
 8001c6a:	69ba      	ldr	r2, [r7, #24]
 8001c6c:	4013      	ands	r3, r2
 8001c6e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	691a      	ldr	r2, [r3, #16]
 8001c74:	69fb      	ldr	r3, [r7, #28]
 8001c76:	f003 0307 	and.w	r3, r3, #7
 8001c7a:	009b      	lsls	r3, r3, #2
 8001c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c80:	69ba      	ldr	r2, [r7, #24]
 8001c82:	4313      	orrs	r3, r2
 8001c84:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001c86:	69fb      	ldr	r3, [r7, #28]
 8001c88:	08da      	lsrs	r2, r3, #3
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	3208      	adds	r2, #8
 8001c8e:	69b9      	ldr	r1, [r7, #24]
 8001c90:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001c9a:	69fb      	ldr	r3, [r7, #28]
 8001c9c:	005b      	lsls	r3, r3, #1
 8001c9e:	2203      	movs	r2, #3
 8001ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca4:	43db      	mvns	r3, r3
 8001ca6:	69ba      	ldr	r2, [r7, #24]
 8001ca8:	4013      	ands	r3, r2
 8001caa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	f003 0203 	and.w	r2, r3, #3
 8001cb4:	69fb      	ldr	r3, [r7, #28]
 8001cb6:	005b      	lsls	r3, r3, #1
 8001cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cbc:	69ba      	ldr	r2, [r7, #24]
 8001cbe:	4313      	orrs	r3, r2
 8001cc0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	69ba      	ldr	r2, [r7, #24]
 8001cc6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	f000 80a2 	beq.w	8001e1a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	60fb      	str	r3, [r7, #12]
 8001cda:	4b57      	ldr	r3, [pc, #348]	@ (8001e38 <HAL_GPIO_Init+0x2e8>)
 8001cdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cde:	4a56      	ldr	r2, [pc, #344]	@ (8001e38 <HAL_GPIO_Init+0x2e8>)
 8001ce0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001ce4:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ce6:	4b54      	ldr	r3, [pc, #336]	@ (8001e38 <HAL_GPIO_Init+0x2e8>)
 8001ce8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001cee:	60fb      	str	r3, [r7, #12]
 8001cf0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001cf2:	4a52      	ldr	r2, [pc, #328]	@ (8001e3c <HAL_GPIO_Init+0x2ec>)
 8001cf4:	69fb      	ldr	r3, [r7, #28]
 8001cf6:	089b      	lsrs	r3, r3, #2
 8001cf8:	3302      	adds	r3, #2
 8001cfa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cfe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001d00:	69fb      	ldr	r3, [r7, #28]
 8001d02:	f003 0303 	and.w	r3, r3, #3
 8001d06:	009b      	lsls	r3, r3, #2
 8001d08:	220f      	movs	r2, #15
 8001d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0e:	43db      	mvns	r3, r3
 8001d10:	69ba      	ldr	r2, [r7, #24]
 8001d12:	4013      	ands	r3, r2
 8001d14:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	4a49      	ldr	r2, [pc, #292]	@ (8001e40 <HAL_GPIO_Init+0x2f0>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d019      	beq.n	8001d52 <HAL_GPIO_Init+0x202>
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	4a48      	ldr	r2, [pc, #288]	@ (8001e44 <HAL_GPIO_Init+0x2f4>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d013      	beq.n	8001d4e <HAL_GPIO_Init+0x1fe>
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	4a47      	ldr	r2, [pc, #284]	@ (8001e48 <HAL_GPIO_Init+0x2f8>)
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d00d      	beq.n	8001d4a <HAL_GPIO_Init+0x1fa>
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	4a46      	ldr	r2, [pc, #280]	@ (8001e4c <HAL_GPIO_Init+0x2fc>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d007      	beq.n	8001d46 <HAL_GPIO_Init+0x1f6>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	4a45      	ldr	r2, [pc, #276]	@ (8001e50 <HAL_GPIO_Init+0x300>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d101      	bne.n	8001d42 <HAL_GPIO_Init+0x1f2>
 8001d3e:	2304      	movs	r3, #4
 8001d40:	e008      	b.n	8001d54 <HAL_GPIO_Init+0x204>
 8001d42:	2307      	movs	r3, #7
 8001d44:	e006      	b.n	8001d54 <HAL_GPIO_Init+0x204>
 8001d46:	2303      	movs	r3, #3
 8001d48:	e004      	b.n	8001d54 <HAL_GPIO_Init+0x204>
 8001d4a:	2302      	movs	r3, #2
 8001d4c:	e002      	b.n	8001d54 <HAL_GPIO_Init+0x204>
 8001d4e:	2301      	movs	r3, #1
 8001d50:	e000      	b.n	8001d54 <HAL_GPIO_Init+0x204>
 8001d52:	2300      	movs	r3, #0
 8001d54:	69fa      	ldr	r2, [r7, #28]
 8001d56:	f002 0203 	and.w	r2, r2, #3
 8001d5a:	0092      	lsls	r2, r2, #2
 8001d5c:	4093      	lsls	r3, r2
 8001d5e:	69ba      	ldr	r2, [r7, #24]
 8001d60:	4313      	orrs	r3, r2
 8001d62:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d64:	4935      	ldr	r1, [pc, #212]	@ (8001e3c <HAL_GPIO_Init+0x2ec>)
 8001d66:	69fb      	ldr	r3, [r7, #28]
 8001d68:	089b      	lsrs	r3, r3, #2
 8001d6a:	3302      	adds	r3, #2
 8001d6c:	69ba      	ldr	r2, [r7, #24]
 8001d6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d72:	4b38      	ldr	r3, [pc, #224]	@ (8001e54 <HAL_GPIO_Init+0x304>)
 8001d74:	689b      	ldr	r3, [r3, #8]
 8001d76:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d78:	693b      	ldr	r3, [r7, #16]
 8001d7a:	43db      	mvns	r3, r3
 8001d7c:	69ba      	ldr	r2, [r7, #24]
 8001d7e:	4013      	ands	r3, r2
 8001d80:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d003      	beq.n	8001d96 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001d8e:	69ba      	ldr	r2, [r7, #24]
 8001d90:	693b      	ldr	r3, [r7, #16]
 8001d92:	4313      	orrs	r3, r2
 8001d94:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d96:	4a2f      	ldr	r2, [pc, #188]	@ (8001e54 <HAL_GPIO_Init+0x304>)
 8001d98:	69bb      	ldr	r3, [r7, #24]
 8001d9a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d9c:	4b2d      	ldr	r3, [pc, #180]	@ (8001e54 <HAL_GPIO_Init+0x304>)
 8001d9e:	68db      	ldr	r3, [r3, #12]
 8001da0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001da2:	693b      	ldr	r3, [r7, #16]
 8001da4:	43db      	mvns	r3, r3
 8001da6:	69ba      	ldr	r2, [r7, #24]
 8001da8:	4013      	ands	r3, r2
 8001daa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d003      	beq.n	8001dc0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001db8:	69ba      	ldr	r2, [r7, #24]
 8001dba:	693b      	ldr	r3, [r7, #16]
 8001dbc:	4313      	orrs	r3, r2
 8001dbe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001dc0:	4a24      	ldr	r2, [pc, #144]	@ (8001e54 <HAL_GPIO_Init+0x304>)
 8001dc2:	69bb      	ldr	r3, [r7, #24]
 8001dc4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001dc6:	4b23      	ldr	r3, [pc, #140]	@ (8001e54 <HAL_GPIO_Init+0x304>)
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dcc:	693b      	ldr	r3, [r7, #16]
 8001dce:	43db      	mvns	r3, r3
 8001dd0:	69ba      	ldr	r2, [r7, #24]
 8001dd2:	4013      	ands	r3, r2
 8001dd4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d003      	beq.n	8001dea <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001de2:	69ba      	ldr	r2, [r7, #24]
 8001de4:	693b      	ldr	r3, [r7, #16]
 8001de6:	4313      	orrs	r3, r2
 8001de8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001dea:	4a1a      	ldr	r2, [pc, #104]	@ (8001e54 <HAL_GPIO_Init+0x304>)
 8001dec:	69bb      	ldr	r3, [r7, #24]
 8001dee:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001df0:	4b18      	ldr	r3, [pc, #96]	@ (8001e54 <HAL_GPIO_Init+0x304>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001df6:	693b      	ldr	r3, [r7, #16]
 8001df8:	43db      	mvns	r3, r3
 8001dfa:	69ba      	ldr	r2, [r7, #24]
 8001dfc:	4013      	ands	r3, r2
 8001dfe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d003      	beq.n	8001e14 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001e0c:	69ba      	ldr	r2, [r7, #24]
 8001e0e:	693b      	ldr	r3, [r7, #16]
 8001e10:	4313      	orrs	r3, r2
 8001e12:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001e14:	4a0f      	ldr	r2, [pc, #60]	@ (8001e54 <HAL_GPIO_Init+0x304>)
 8001e16:	69bb      	ldr	r3, [r7, #24]
 8001e18:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e1a:	69fb      	ldr	r3, [r7, #28]
 8001e1c:	3301      	adds	r3, #1
 8001e1e:	61fb      	str	r3, [r7, #28]
 8001e20:	69fb      	ldr	r3, [r7, #28]
 8001e22:	2b0f      	cmp	r3, #15
 8001e24:	f67f aea2 	bls.w	8001b6c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001e28:	bf00      	nop
 8001e2a:	bf00      	nop
 8001e2c:	3724      	adds	r7, #36	@ 0x24
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e34:	4770      	bx	lr
 8001e36:	bf00      	nop
 8001e38:	40023800 	.word	0x40023800
 8001e3c:	40013800 	.word	0x40013800
 8001e40:	40020000 	.word	0x40020000
 8001e44:	40020400 	.word	0x40020400
 8001e48:	40020800 	.word	0x40020800
 8001e4c:	40020c00 	.word	0x40020c00
 8001e50:	40021000 	.word	0x40021000
 8001e54:	40013c00 	.word	0x40013c00

08001e58 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b086      	sub	sp, #24
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d101      	bne.n	8001e6a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e66:	2301      	movs	r3, #1
 8001e68:	e267      	b.n	800233a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f003 0301 	and.w	r3, r3, #1
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d075      	beq.n	8001f62 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001e76:	4b88      	ldr	r3, [pc, #544]	@ (8002098 <HAL_RCC_OscConfig+0x240>)
 8001e78:	689b      	ldr	r3, [r3, #8]
 8001e7a:	f003 030c 	and.w	r3, r3, #12
 8001e7e:	2b04      	cmp	r3, #4
 8001e80:	d00c      	beq.n	8001e9c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e82:	4b85      	ldr	r3, [pc, #532]	@ (8002098 <HAL_RCC_OscConfig+0x240>)
 8001e84:	689b      	ldr	r3, [r3, #8]
 8001e86:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001e8a:	2b08      	cmp	r3, #8
 8001e8c:	d112      	bne.n	8001eb4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e8e:	4b82      	ldr	r3, [pc, #520]	@ (8002098 <HAL_RCC_OscConfig+0x240>)
 8001e90:	685b      	ldr	r3, [r3, #4]
 8001e92:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001e96:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001e9a:	d10b      	bne.n	8001eb4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e9c:	4b7e      	ldr	r3, [pc, #504]	@ (8002098 <HAL_RCC_OscConfig+0x240>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d05b      	beq.n	8001f60 <HAL_RCC_OscConfig+0x108>
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d157      	bne.n	8001f60 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	e242      	b.n	800233a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001ebc:	d106      	bne.n	8001ecc <HAL_RCC_OscConfig+0x74>
 8001ebe:	4b76      	ldr	r3, [pc, #472]	@ (8002098 <HAL_RCC_OscConfig+0x240>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4a75      	ldr	r2, [pc, #468]	@ (8002098 <HAL_RCC_OscConfig+0x240>)
 8001ec4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ec8:	6013      	str	r3, [r2, #0]
 8001eca:	e01d      	b.n	8001f08 <HAL_RCC_OscConfig+0xb0>
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001ed4:	d10c      	bne.n	8001ef0 <HAL_RCC_OscConfig+0x98>
 8001ed6:	4b70      	ldr	r3, [pc, #448]	@ (8002098 <HAL_RCC_OscConfig+0x240>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4a6f      	ldr	r2, [pc, #444]	@ (8002098 <HAL_RCC_OscConfig+0x240>)
 8001edc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001ee0:	6013      	str	r3, [r2, #0]
 8001ee2:	4b6d      	ldr	r3, [pc, #436]	@ (8002098 <HAL_RCC_OscConfig+0x240>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4a6c      	ldr	r2, [pc, #432]	@ (8002098 <HAL_RCC_OscConfig+0x240>)
 8001ee8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001eec:	6013      	str	r3, [r2, #0]
 8001eee:	e00b      	b.n	8001f08 <HAL_RCC_OscConfig+0xb0>
 8001ef0:	4b69      	ldr	r3, [pc, #420]	@ (8002098 <HAL_RCC_OscConfig+0x240>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4a68      	ldr	r2, [pc, #416]	@ (8002098 <HAL_RCC_OscConfig+0x240>)
 8001ef6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001efa:	6013      	str	r3, [r2, #0]
 8001efc:	4b66      	ldr	r3, [pc, #408]	@ (8002098 <HAL_RCC_OscConfig+0x240>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4a65      	ldr	r2, [pc, #404]	@ (8002098 <HAL_RCC_OscConfig+0x240>)
 8001f02:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001f06:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d013      	beq.n	8001f38 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f10:	f7fe fd8e 	bl	8000a30 <HAL_GetTick>
 8001f14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f16:	e008      	b.n	8001f2a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f18:	f7fe fd8a 	bl	8000a30 <HAL_GetTick>
 8001f1c:	4602      	mov	r2, r0
 8001f1e:	693b      	ldr	r3, [r7, #16]
 8001f20:	1ad3      	subs	r3, r2, r3
 8001f22:	2b64      	cmp	r3, #100	@ 0x64
 8001f24:	d901      	bls.n	8001f2a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001f26:	2303      	movs	r3, #3
 8001f28:	e207      	b.n	800233a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f2a:	4b5b      	ldr	r3, [pc, #364]	@ (8002098 <HAL_RCC_OscConfig+0x240>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d0f0      	beq.n	8001f18 <HAL_RCC_OscConfig+0xc0>
 8001f36:	e014      	b.n	8001f62 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f38:	f7fe fd7a 	bl	8000a30 <HAL_GetTick>
 8001f3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f3e:	e008      	b.n	8001f52 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f40:	f7fe fd76 	bl	8000a30 <HAL_GetTick>
 8001f44:	4602      	mov	r2, r0
 8001f46:	693b      	ldr	r3, [r7, #16]
 8001f48:	1ad3      	subs	r3, r2, r3
 8001f4a:	2b64      	cmp	r3, #100	@ 0x64
 8001f4c:	d901      	bls.n	8001f52 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001f4e:	2303      	movs	r3, #3
 8001f50:	e1f3      	b.n	800233a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f52:	4b51      	ldr	r3, [pc, #324]	@ (8002098 <HAL_RCC_OscConfig+0x240>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d1f0      	bne.n	8001f40 <HAL_RCC_OscConfig+0xe8>
 8001f5e:	e000      	b.n	8001f62 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f60:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f003 0302 	and.w	r3, r3, #2
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d063      	beq.n	8002036 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001f6e:	4b4a      	ldr	r3, [pc, #296]	@ (8002098 <HAL_RCC_OscConfig+0x240>)
 8001f70:	689b      	ldr	r3, [r3, #8]
 8001f72:	f003 030c 	and.w	r3, r3, #12
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d00b      	beq.n	8001f92 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f7a:	4b47      	ldr	r3, [pc, #284]	@ (8002098 <HAL_RCC_OscConfig+0x240>)
 8001f7c:	689b      	ldr	r3, [r3, #8]
 8001f7e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001f82:	2b08      	cmp	r3, #8
 8001f84:	d11c      	bne.n	8001fc0 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f86:	4b44      	ldr	r3, [pc, #272]	@ (8002098 <HAL_RCC_OscConfig+0x240>)
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d116      	bne.n	8001fc0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f92:	4b41      	ldr	r3, [pc, #260]	@ (8002098 <HAL_RCC_OscConfig+0x240>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f003 0302 	and.w	r3, r3, #2
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d005      	beq.n	8001faa <HAL_RCC_OscConfig+0x152>
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	68db      	ldr	r3, [r3, #12]
 8001fa2:	2b01      	cmp	r3, #1
 8001fa4:	d001      	beq.n	8001faa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	e1c7      	b.n	800233a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001faa:	4b3b      	ldr	r3, [pc, #236]	@ (8002098 <HAL_RCC_OscConfig+0x240>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	691b      	ldr	r3, [r3, #16]
 8001fb6:	00db      	lsls	r3, r3, #3
 8001fb8:	4937      	ldr	r1, [pc, #220]	@ (8002098 <HAL_RCC_OscConfig+0x240>)
 8001fba:	4313      	orrs	r3, r2
 8001fbc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fbe:	e03a      	b.n	8002036 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	68db      	ldr	r3, [r3, #12]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d020      	beq.n	800200a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001fc8:	4b34      	ldr	r3, [pc, #208]	@ (800209c <HAL_RCC_OscConfig+0x244>)
 8001fca:	2201      	movs	r2, #1
 8001fcc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fce:	f7fe fd2f 	bl	8000a30 <HAL_GetTick>
 8001fd2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fd4:	e008      	b.n	8001fe8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fd6:	f7fe fd2b 	bl	8000a30 <HAL_GetTick>
 8001fda:	4602      	mov	r2, r0
 8001fdc:	693b      	ldr	r3, [r7, #16]
 8001fde:	1ad3      	subs	r3, r2, r3
 8001fe0:	2b02      	cmp	r3, #2
 8001fe2:	d901      	bls.n	8001fe8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001fe4:	2303      	movs	r3, #3
 8001fe6:	e1a8      	b.n	800233a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fe8:	4b2b      	ldr	r3, [pc, #172]	@ (8002098 <HAL_RCC_OscConfig+0x240>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f003 0302 	and.w	r3, r3, #2
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d0f0      	beq.n	8001fd6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ff4:	4b28      	ldr	r3, [pc, #160]	@ (8002098 <HAL_RCC_OscConfig+0x240>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	691b      	ldr	r3, [r3, #16]
 8002000:	00db      	lsls	r3, r3, #3
 8002002:	4925      	ldr	r1, [pc, #148]	@ (8002098 <HAL_RCC_OscConfig+0x240>)
 8002004:	4313      	orrs	r3, r2
 8002006:	600b      	str	r3, [r1, #0]
 8002008:	e015      	b.n	8002036 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800200a:	4b24      	ldr	r3, [pc, #144]	@ (800209c <HAL_RCC_OscConfig+0x244>)
 800200c:	2200      	movs	r2, #0
 800200e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002010:	f7fe fd0e 	bl	8000a30 <HAL_GetTick>
 8002014:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002016:	e008      	b.n	800202a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002018:	f7fe fd0a 	bl	8000a30 <HAL_GetTick>
 800201c:	4602      	mov	r2, r0
 800201e:	693b      	ldr	r3, [r7, #16]
 8002020:	1ad3      	subs	r3, r2, r3
 8002022:	2b02      	cmp	r3, #2
 8002024:	d901      	bls.n	800202a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002026:	2303      	movs	r3, #3
 8002028:	e187      	b.n	800233a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800202a:	4b1b      	ldr	r3, [pc, #108]	@ (8002098 <HAL_RCC_OscConfig+0x240>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f003 0302 	and.w	r3, r3, #2
 8002032:	2b00      	cmp	r3, #0
 8002034:	d1f0      	bne.n	8002018 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f003 0308 	and.w	r3, r3, #8
 800203e:	2b00      	cmp	r3, #0
 8002040:	d036      	beq.n	80020b0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	695b      	ldr	r3, [r3, #20]
 8002046:	2b00      	cmp	r3, #0
 8002048:	d016      	beq.n	8002078 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800204a:	4b15      	ldr	r3, [pc, #84]	@ (80020a0 <HAL_RCC_OscConfig+0x248>)
 800204c:	2201      	movs	r2, #1
 800204e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002050:	f7fe fcee 	bl	8000a30 <HAL_GetTick>
 8002054:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002056:	e008      	b.n	800206a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002058:	f7fe fcea 	bl	8000a30 <HAL_GetTick>
 800205c:	4602      	mov	r2, r0
 800205e:	693b      	ldr	r3, [r7, #16]
 8002060:	1ad3      	subs	r3, r2, r3
 8002062:	2b02      	cmp	r3, #2
 8002064:	d901      	bls.n	800206a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002066:	2303      	movs	r3, #3
 8002068:	e167      	b.n	800233a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800206a:	4b0b      	ldr	r3, [pc, #44]	@ (8002098 <HAL_RCC_OscConfig+0x240>)
 800206c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800206e:	f003 0302 	and.w	r3, r3, #2
 8002072:	2b00      	cmp	r3, #0
 8002074:	d0f0      	beq.n	8002058 <HAL_RCC_OscConfig+0x200>
 8002076:	e01b      	b.n	80020b0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002078:	4b09      	ldr	r3, [pc, #36]	@ (80020a0 <HAL_RCC_OscConfig+0x248>)
 800207a:	2200      	movs	r2, #0
 800207c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800207e:	f7fe fcd7 	bl	8000a30 <HAL_GetTick>
 8002082:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002084:	e00e      	b.n	80020a4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002086:	f7fe fcd3 	bl	8000a30 <HAL_GetTick>
 800208a:	4602      	mov	r2, r0
 800208c:	693b      	ldr	r3, [r7, #16]
 800208e:	1ad3      	subs	r3, r2, r3
 8002090:	2b02      	cmp	r3, #2
 8002092:	d907      	bls.n	80020a4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002094:	2303      	movs	r3, #3
 8002096:	e150      	b.n	800233a <HAL_RCC_OscConfig+0x4e2>
 8002098:	40023800 	.word	0x40023800
 800209c:	42470000 	.word	0x42470000
 80020a0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020a4:	4b88      	ldr	r3, [pc, #544]	@ (80022c8 <HAL_RCC_OscConfig+0x470>)
 80020a6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80020a8:	f003 0302 	and.w	r3, r3, #2
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d1ea      	bne.n	8002086 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f003 0304 	and.w	r3, r3, #4
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	f000 8097 	beq.w	80021ec <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020be:	2300      	movs	r3, #0
 80020c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020c2:	4b81      	ldr	r3, [pc, #516]	@ (80022c8 <HAL_RCC_OscConfig+0x470>)
 80020c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d10f      	bne.n	80020ee <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020ce:	2300      	movs	r3, #0
 80020d0:	60bb      	str	r3, [r7, #8]
 80020d2:	4b7d      	ldr	r3, [pc, #500]	@ (80022c8 <HAL_RCC_OscConfig+0x470>)
 80020d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020d6:	4a7c      	ldr	r2, [pc, #496]	@ (80022c8 <HAL_RCC_OscConfig+0x470>)
 80020d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80020dc:	6413      	str	r3, [r2, #64]	@ 0x40
 80020de:	4b7a      	ldr	r3, [pc, #488]	@ (80022c8 <HAL_RCC_OscConfig+0x470>)
 80020e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020e6:	60bb      	str	r3, [r7, #8]
 80020e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020ea:	2301      	movs	r3, #1
 80020ec:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020ee:	4b77      	ldr	r3, [pc, #476]	@ (80022cc <HAL_RCC_OscConfig+0x474>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d118      	bne.n	800212c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80020fa:	4b74      	ldr	r3, [pc, #464]	@ (80022cc <HAL_RCC_OscConfig+0x474>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	4a73      	ldr	r2, [pc, #460]	@ (80022cc <HAL_RCC_OscConfig+0x474>)
 8002100:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002104:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002106:	f7fe fc93 	bl	8000a30 <HAL_GetTick>
 800210a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800210c:	e008      	b.n	8002120 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800210e:	f7fe fc8f 	bl	8000a30 <HAL_GetTick>
 8002112:	4602      	mov	r2, r0
 8002114:	693b      	ldr	r3, [r7, #16]
 8002116:	1ad3      	subs	r3, r2, r3
 8002118:	2b02      	cmp	r3, #2
 800211a:	d901      	bls.n	8002120 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800211c:	2303      	movs	r3, #3
 800211e:	e10c      	b.n	800233a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002120:	4b6a      	ldr	r3, [pc, #424]	@ (80022cc <HAL_RCC_OscConfig+0x474>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002128:	2b00      	cmp	r3, #0
 800212a:	d0f0      	beq.n	800210e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	689b      	ldr	r3, [r3, #8]
 8002130:	2b01      	cmp	r3, #1
 8002132:	d106      	bne.n	8002142 <HAL_RCC_OscConfig+0x2ea>
 8002134:	4b64      	ldr	r3, [pc, #400]	@ (80022c8 <HAL_RCC_OscConfig+0x470>)
 8002136:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002138:	4a63      	ldr	r2, [pc, #396]	@ (80022c8 <HAL_RCC_OscConfig+0x470>)
 800213a:	f043 0301 	orr.w	r3, r3, #1
 800213e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002140:	e01c      	b.n	800217c <HAL_RCC_OscConfig+0x324>
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	689b      	ldr	r3, [r3, #8]
 8002146:	2b05      	cmp	r3, #5
 8002148:	d10c      	bne.n	8002164 <HAL_RCC_OscConfig+0x30c>
 800214a:	4b5f      	ldr	r3, [pc, #380]	@ (80022c8 <HAL_RCC_OscConfig+0x470>)
 800214c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800214e:	4a5e      	ldr	r2, [pc, #376]	@ (80022c8 <HAL_RCC_OscConfig+0x470>)
 8002150:	f043 0304 	orr.w	r3, r3, #4
 8002154:	6713      	str	r3, [r2, #112]	@ 0x70
 8002156:	4b5c      	ldr	r3, [pc, #368]	@ (80022c8 <HAL_RCC_OscConfig+0x470>)
 8002158:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800215a:	4a5b      	ldr	r2, [pc, #364]	@ (80022c8 <HAL_RCC_OscConfig+0x470>)
 800215c:	f043 0301 	orr.w	r3, r3, #1
 8002160:	6713      	str	r3, [r2, #112]	@ 0x70
 8002162:	e00b      	b.n	800217c <HAL_RCC_OscConfig+0x324>
 8002164:	4b58      	ldr	r3, [pc, #352]	@ (80022c8 <HAL_RCC_OscConfig+0x470>)
 8002166:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002168:	4a57      	ldr	r2, [pc, #348]	@ (80022c8 <HAL_RCC_OscConfig+0x470>)
 800216a:	f023 0301 	bic.w	r3, r3, #1
 800216e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002170:	4b55      	ldr	r3, [pc, #340]	@ (80022c8 <HAL_RCC_OscConfig+0x470>)
 8002172:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002174:	4a54      	ldr	r2, [pc, #336]	@ (80022c8 <HAL_RCC_OscConfig+0x470>)
 8002176:	f023 0304 	bic.w	r3, r3, #4
 800217a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	689b      	ldr	r3, [r3, #8]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d015      	beq.n	80021b0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002184:	f7fe fc54 	bl	8000a30 <HAL_GetTick>
 8002188:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800218a:	e00a      	b.n	80021a2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800218c:	f7fe fc50 	bl	8000a30 <HAL_GetTick>
 8002190:	4602      	mov	r2, r0
 8002192:	693b      	ldr	r3, [r7, #16]
 8002194:	1ad3      	subs	r3, r2, r3
 8002196:	f241 3288 	movw	r2, #5000	@ 0x1388
 800219a:	4293      	cmp	r3, r2
 800219c:	d901      	bls.n	80021a2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800219e:	2303      	movs	r3, #3
 80021a0:	e0cb      	b.n	800233a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021a2:	4b49      	ldr	r3, [pc, #292]	@ (80022c8 <HAL_RCC_OscConfig+0x470>)
 80021a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021a6:	f003 0302 	and.w	r3, r3, #2
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d0ee      	beq.n	800218c <HAL_RCC_OscConfig+0x334>
 80021ae:	e014      	b.n	80021da <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021b0:	f7fe fc3e 	bl	8000a30 <HAL_GetTick>
 80021b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021b6:	e00a      	b.n	80021ce <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021b8:	f7fe fc3a 	bl	8000a30 <HAL_GetTick>
 80021bc:	4602      	mov	r2, r0
 80021be:	693b      	ldr	r3, [r7, #16]
 80021c0:	1ad3      	subs	r3, r2, r3
 80021c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d901      	bls.n	80021ce <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80021ca:	2303      	movs	r3, #3
 80021cc:	e0b5      	b.n	800233a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021ce:	4b3e      	ldr	r3, [pc, #248]	@ (80022c8 <HAL_RCC_OscConfig+0x470>)
 80021d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021d2:	f003 0302 	and.w	r3, r3, #2
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d1ee      	bne.n	80021b8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80021da:	7dfb      	ldrb	r3, [r7, #23]
 80021dc:	2b01      	cmp	r3, #1
 80021de:	d105      	bne.n	80021ec <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021e0:	4b39      	ldr	r3, [pc, #228]	@ (80022c8 <HAL_RCC_OscConfig+0x470>)
 80021e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021e4:	4a38      	ldr	r2, [pc, #224]	@ (80022c8 <HAL_RCC_OscConfig+0x470>)
 80021e6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80021ea:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	699b      	ldr	r3, [r3, #24]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	f000 80a1 	beq.w	8002338 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80021f6:	4b34      	ldr	r3, [pc, #208]	@ (80022c8 <HAL_RCC_OscConfig+0x470>)
 80021f8:	689b      	ldr	r3, [r3, #8]
 80021fa:	f003 030c 	and.w	r3, r3, #12
 80021fe:	2b08      	cmp	r3, #8
 8002200:	d05c      	beq.n	80022bc <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	699b      	ldr	r3, [r3, #24]
 8002206:	2b02      	cmp	r3, #2
 8002208:	d141      	bne.n	800228e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800220a:	4b31      	ldr	r3, [pc, #196]	@ (80022d0 <HAL_RCC_OscConfig+0x478>)
 800220c:	2200      	movs	r2, #0
 800220e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002210:	f7fe fc0e 	bl	8000a30 <HAL_GetTick>
 8002214:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002216:	e008      	b.n	800222a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002218:	f7fe fc0a 	bl	8000a30 <HAL_GetTick>
 800221c:	4602      	mov	r2, r0
 800221e:	693b      	ldr	r3, [r7, #16]
 8002220:	1ad3      	subs	r3, r2, r3
 8002222:	2b02      	cmp	r3, #2
 8002224:	d901      	bls.n	800222a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002226:	2303      	movs	r3, #3
 8002228:	e087      	b.n	800233a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800222a:	4b27      	ldr	r3, [pc, #156]	@ (80022c8 <HAL_RCC_OscConfig+0x470>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002232:	2b00      	cmp	r3, #0
 8002234:	d1f0      	bne.n	8002218 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	69da      	ldr	r2, [r3, #28]
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6a1b      	ldr	r3, [r3, #32]
 800223e:	431a      	orrs	r2, r3
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002244:	019b      	lsls	r3, r3, #6
 8002246:	431a      	orrs	r2, r3
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800224c:	085b      	lsrs	r3, r3, #1
 800224e:	3b01      	subs	r3, #1
 8002250:	041b      	lsls	r3, r3, #16
 8002252:	431a      	orrs	r2, r3
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002258:	061b      	lsls	r3, r3, #24
 800225a:	491b      	ldr	r1, [pc, #108]	@ (80022c8 <HAL_RCC_OscConfig+0x470>)
 800225c:	4313      	orrs	r3, r2
 800225e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002260:	4b1b      	ldr	r3, [pc, #108]	@ (80022d0 <HAL_RCC_OscConfig+0x478>)
 8002262:	2201      	movs	r2, #1
 8002264:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002266:	f7fe fbe3 	bl	8000a30 <HAL_GetTick>
 800226a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800226c:	e008      	b.n	8002280 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800226e:	f7fe fbdf 	bl	8000a30 <HAL_GetTick>
 8002272:	4602      	mov	r2, r0
 8002274:	693b      	ldr	r3, [r7, #16]
 8002276:	1ad3      	subs	r3, r2, r3
 8002278:	2b02      	cmp	r3, #2
 800227a:	d901      	bls.n	8002280 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800227c:	2303      	movs	r3, #3
 800227e:	e05c      	b.n	800233a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002280:	4b11      	ldr	r3, [pc, #68]	@ (80022c8 <HAL_RCC_OscConfig+0x470>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002288:	2b00      	cmp	r3, #0
 800228a:	d0f0      	beq.n	800226e <HAL_RCC_OscConfig+0x416>
 800228c:	e054      	b.n	8002338 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800228e:	4b10      	ldr	r3, [pc, #64]	@ (80022d0 <HAL_RCC_OscConfig+0x478>)
 8002290:	2200      	movs	r2, #0
 8002292:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002294:	f7fe fbcc 	bl	8000a30 <HAL_GetTick>
 8002298:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800229a:	e008      	b.n	80022ae <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800229c:	f7fe fbc8 	bl	8000a30 <HAL_GetTick>
 80022a0:	4602      	mov	r2, r0
 80022a2:	693b      	ldr	r3, [r7, #16]
 80022a4:	1ad3      	subs	r3, r2, r3
 80022a6:	2b02      	cmp	r3, #2
 80022a8:	d901      	bls.n	80022ae <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80022aa:	2303      	movs	r3, #3
 80022ac:	e045      	b.n	800233a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022ae:	4b06      	ldr	r3, [pc, #24]	@ (80022c8 <HAL_RCC_OscConfig+0x470>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d1f0      	bne.n	800229c <HAL_RCC_OscConfig+0x444>
 80022ba:	e03d      	b.n	8002338 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	699b      	ldr	r3, [r3, #24]
 80022c0:	2b01      	cmp	r3, #1
 80022c2:	d107      	bne.n	80022d4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80022c4:	2301      	movs	r3, #1
 80022c6:	e038      	b.n	800233a <HAL_RCC_OscConfig+0x4e2>
 80022c8:	40023800 	.word	0x40023800
 80022cc:	40007000 	.word	0x40007000
 80022d0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80022d4:	4b1b      	ldr	r3, [pc, #108]	@ (8002344 <HAL_RCC_OscConfig+0x4ec>)
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	699b      	ldr	r3, [r3, #24]
 80022de:	2b01      	cmp	r3, #1
 80022e0:	d028      	beq.n	8002334 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80022ec:	429a      	cmp	r2, r3
 80022ee:	d121      	bne.n	8002334 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022fa:	429a      	cmp	r2, r3
 80022fc:	d11a      	bne.n	8002334 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80022fe:	68fa      	ldr	r2, [r7, #12]
 8002300:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002304:	4013      	ands	r3, r2
 8002306:	687a      	ldr	r2, [r7, #4]
 8002308:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800230a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800230c:	4293      	cmp	r3, r2
 800230e:	d111      	bne.n	8002334 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800231a:	085b      	lsrs	r3, r3, #1
 800231c:	3b01      	subs	r3, #1
 800231e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002320:	429a      	cmp	r2, r3
 8002322:	d107      	bne.n	8002334 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800232e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002330:	429a      	cmp	r2, r3
 8002332:	d001      	beq.n	8002338 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002334:	2301      	movs	r3, #1
 8002336:	e000      	b.n	800233a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002338:	2300      	movs	r3, #0
}
 800233a:	4618      	mov	r0, r3
 800233c:	3718      	adds	r7, #24
 800233e:	46bd      	mov	sp, r7
 8002340:	bd80      	pop	{r7, pc}
 8002342:	bf00      	nop
 8002344:	40023800 	.word	0x40023800

08002348 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b084      	sub	sp, #16
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
 8002350:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d101      	bne.n	800235c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002358:	2301      	movs	r3, #1
 800235a:	e0cc      	b.n	80024f6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800235c:	4b68      	ldr	r3, [pc, #416]	@ (8002500 <HAL_RCC_ClockConfig+0x1b8>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f003 0307 	and.w	r3, r3, #7
 8002364:	683a      	ldr	r2, [r7, #0]
 8002366:	429a      	cmp	r2, r3
 8002368:	d90c      	bls.n	8002384 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800236a:	4b65      	ldr	r3, [pc, #404]	@ (8002500 <HAL_RCC_ClockConfig+0x1b8>)
 800236c:	683a      	ldr	r2, [r7, #0]
 800236e:	b2d2      	uxtb	r2, r2
 8002370:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002372:	4b63      	ldr	r3, [pc, #396]	@ (8002500 <HAL_RCC_ClockConfig+0x1b8>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f003 0307 	and.w	r3, r3, #7
 800237a:	683a      	ldr	r2, [r7, #0]
 800237c:	429a      	cmp	r2, r3
 800237e:	d001      	beq.n	8002384 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002380:	2301      	movs	r3, #1
 8002382:	e0b8      	b.n	80024f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f003 0302 	and.w	r3, r3, #2
 800238c:	2b00      	cmp	r3, #0
 800238e:	d020      	beq.n	80023d2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f003 0304 	and.w	r3, r3, #4
 8002398:	2b00      	cmp	r3, #0
 800239a:	d005      	beq.n	80023a8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800239c:	4b59      	ldr	r3, [pc, #356]	@ (8002504 <HAL_RCC_ClockConfig+0x1bc>)
 800239e:	689b      	ldr	r3, [r3, #8]
 80023a0:	4a58      	ldr	r2, [pc, #352]	@ (8002504 <HAL_RCC_ClockConfig+0x1bc>)
 80023a2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80023a6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f003 0308 	and.w	r3, r3, #8
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d005      	beq.n	80023c0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80023b4:	4b53      	ldr	r3, [pc, #332]	@ (8002504 <HAL_RCC_ClockConfig+0x1bc>)
 80023b6:	689b      	ldr	r3, [r3, #8]
 80023b8:	4a52      	ldr	r2, [pc, #328]	@ (8002504 <HAL_RCC_ClockConfig+0x1bc>)
 80023ba:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80023be:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023c0:	4b50      	ldr	r3, [pc, #320]	@ (8002504 <HAL_RCC_ClockConfig+0x1bc>)
 80023c2:	689b      	ldr	r3, [r3, #8]
 80023c4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	689b      	ldr	r3, [r3, #8]
 80023cc:	494d      	ldr	r1, [pc, #308]	@ (8002504 <HAL_RCC_ClockConfig+0x1bc>)
 80023ce:	4313      	orrs	r3, r2
 80023d0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f003 0301 	and.w	r3, r3, #1
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d044      	beq.n	8002468 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	2b01      	cmp	r3, #1
 80023e4:	d107      	bne.n	80023f6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023e6:	4b47      	ldr	r3, [pc, #284]	@ (8002504 <HAL_RCC_ClockConfig+0x1bc>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d119      	bne.n	8002426 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023f2:	2301      	movs	r3, #1
 80023f4:	e07f      	b.n	80024f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	2b02      	cmp	r3, #2
 80023fc:	d003      	beq.n	8002406 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002402:	2b03      	cmp	r3, #3
 8002404:	d107      	bne.n	8002416 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002406:	4b3f      	ldr	r3, [pc, #252]	@ (8002504 <HAL_RCC_ClockConfig+0x1bc>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800240e:	2b00      	cmp	r3, #0
 8002410:	d109      	bne.n	8002426 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002412:	2301      	movs	r3, #1
 8002414:	e06f      	b.n	80024f6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002416:	4b3b      	ldr	r3, [pc, #236]	@ (8002504 <HAL_RCC_ClockConfig+0x1bc>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f003 0302 	and.w	r3, r3, #2
 800241e:	2b00      	cmp	r3, #0
 8002420:	d101      	bne.n	8002426 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002422:	2301      	movs	r3, #1
 8002424:	e067      	b.n	80024f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002426:	4b37      	ldr	r3, [pc, #220]	@ (8002504 <HAL_RCC_ClockConfig+0x1bc>)
 8002428:	689b      	ldr	r3, [r3, #8]
 800242a:	f023 0203 	bic.w	r2, r3, #3
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	4934      	ldr	r1, [pc, #208]	@ (8002504 <HAL_RCC_ClockConfig+0x1bc>)
 8002434:	4313      	orrs	r3, r2
 8002436:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002438:	f7fe fafa 	bl	8000a30 <HAL_GetTick>
 800243c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800243e:	e00a      	b.n	8002456 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002440:	f7fe faf6 	bl	8000a30 <HAL_GetTick>
 8002444:	4602      	mov	r2, r0
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	1ad3      	subs	r3, r2, r3
 800244a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800244e:	4293      	cmp	r3, r2
 8002450:	d901      	bls.n	8002456 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002452:	2303      	movs	r3, #3
 8002454:	e04f      	b.n	80024f6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002456:	4b2b      	ldr	r3, [pc, #172]	@ (8002504 <HAL_RCC_ClockConfig+0x1bc>)
 8002458:	689b      	ldr	r3, [r3, #8]
 800245a:	f003 020c 	and.w	r2, r3, #12
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	009b      	lsls	r3, r3, #2
 8002464:	429a      	cmp	r2, r3
 8002466:	d1eb      	bne.n	8002440 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002468:	4b25      	ldr	r3, [pc, #148]	@ (8002500 <HAL_RCC_ClockConfig+0x1b8>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f003 0307 	and.w	r3, r3, #7
 8002470:	683a      	ldr	r2, [r7, #0]
 8002472:	429a      	cmp	r2, r3
 8002474:	d20c      	bcs.n	8002490 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002476:	4b22      	ldr	r3, [pc, #136]	@ (8002500 <HAL_RCC_ClockConfig+0x1b8>)
 8002478:	683a      	ldr	r2, [r7, #0]
 800247a:	b2d2      	uxtb	r2, r2
 800247c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800247e:	4b20      	ldr	r3, [pc, #128]	@ (8002500 <HAL_RCC_ClockConfig+0x1b8>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f003 0307 	and.w	r3, r3, #7
 8002486:	683a      	ldr	r2, [r7, #0]
 8002488:	429a      	cmp	r2, r3
 800248a:	d001      	beq.n	8002490 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800248c:	2301      	movs	r3, #1
 800248e:	e032      	b.n	80024f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f003 0304 	and.w	r3, r3, #4
 8002498:	2b00      	cmp	r3, #0
 800249a:	d008      	beq.n	80024ae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800249c:	4b19      	ldr	r3, [pc, #100]	@ (8002504 <HAL_RCC_ClockConfig+0x1bc>)
 800249e:	689b      	ldr	r3, [r3, #8]
 80024a0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	68db      	ldr	r3, [r3, #12]
 80024a8:	4916      	ldr	r1, [pc, #88]	@ (8002504 <HAL_RCC_ClockConfig+0x1bc>)
 80024aa:	4313      	orrs	r3, r2
 80024ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f003 0308 	and.w	r3, r3, #8
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d009      	beq.n	80024ce <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80024ba:	4b12      	ldr	r3, [pc, #72]	@ (8002504 <HAL_RCC_ClockConfig+0x1bc>)
 80024bc:	689b      	ldr	r3, [r3, #8]
 80024be:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	691b      	ldr	r3, [r3, #16]
 80024c6:	00db      	lsls	r3, r3, #3
 80024c8:	490e      	ldr	r1, [pc, #56]	@ (8002504 <HAL_RCC_ClockConfig+0x1bc>)
 80024ca:	4313      	orrs	r3, r2
 80024cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80024ce:	f000 f821 	bl	8002514 <HAL_RCC_GetSysClockFreq>
 80024d2:	4602      	mov	r2, r0
 80024d4:	4b0b      	ldr	r3, [pc, #44]	@ (8002504 <HAL_RCC_ClockConfig+0x1bc>)
 80024d6:	689b      	ldr	r3, [r3, #8]
 80024d8:	091b      	lsrs	r3, r3, #4
 80024da:	f003 030f 	and.w	r3, r3, #15
 80024de:	490a      	ldr	r1, [pc, #40]	@ (8002508 <HAL_RCC_ClockConfig+0x1c0>)
 80024e0:	5ccb      	ldrb	r3, [r1, r3]
 80024e2:	fa22 f303 	lsr.w	r3, r2, r3
 80024e6:	4a09      	ldr	r2, [pc, #36]	@ (800250c <HAL_RCC_ClockConfig+0x1c4>)
 80024e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80024ea:	4b09      	ldr	r3, [pc, #36]	@ (8002510 <HAL_RCC_ClockConfig+0x1c8>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4618      	mov	r0, r3
 80024f0:	f7fe fa5a 	bl	80009a8 <HAL_InitTick>

  return HAL_OK;
 80024f4:	2300      	movs	r3, #0
}
 80024f6:	4618      	mov	r0, r3
 80024f8:	3710      	adds	r7, #16
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}
 80024fe:	bf00      	nop
 8002500:	40023c00 	.word	0x40023c00
 8002504:	40023800 	.word	0x40023800
 8002508:	08002710 	.word	0x08002710
 800250c:	20000000 	.word	0x20000000
 8002510:	20000004 	.word	0x20000004

08002514 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002514:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002518:	b090      	sub	sp, #64	@ 0x40
 800251a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800251c:	2300      	movs	r3, #0
 800251e:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8002520:	2300      	movs	r3, #0
 8002522:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8002524:	2300      	movs	r3, #0
 8002526:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8002528:	2300      	movs	r3, #0
 800252a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800252c:	4b59      	ldr	r3, [pc, #356]	@ (8002694 <HAL_RCC_GetSysClockFreq+0x180>)
 800252e:	689b      	ldr	r3, [r3, #8]
 8002530:	f003 030c 	and.w	r3, r3, #12
 8002534:	2b08      	cmp	r3, #8
 8002536:	d00d      	beq.n	8002554 <HAL_RCC_GetSysClockFreq+0x40>
 8002538:	2b08      	cmp	r3, #8
 800253a:	f200 80a1 	bhi.w	8002680 <HAL_RCC_GetSysClockFreq+0x16c>
 800253e:	2b00      	cmp	r3, #0
 8002540:	d002      	beq.n	8002548 <HAL_RCC_GetSysClockFreq+0x34>
 8002542:	2b04      	cmp	r3, #4
 8002544:	d003      	beq.n	800254e <HAL_RCC_GetSysClockFreq+0x3a>
 8002546:	e09b      	b.n	8002680 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002548:	4b53      	ldr	r3, [pc, #332]	@ (8002698 <HAL_RCC_GetSysClockFreq+0x184>)
 800254a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800254c:	e09b      	b.n	8002686 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800254e:	4b53      	ldr	r3, [pc, #332]	@ (800269c <HAL_RCC_GetSysClockFreq+0x188>)
 8002550:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002552:	e098      	b.n	8002686 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002554:	4b4f      	ldr	r3, [pc, #316]	@ (8002694 <HAL_RCC_GetSysClockFreq+0x180>)
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800255c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800255e:	4b4d      	ldr	r3, [pc, #308]	@ (8002694 <HAL_RCC_GetSysClockFreq+0x180>)
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002566:	2b00      	cmp	r3, #0
 8002568:	d028      	beq.n	80025bc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800256a:	4b4a      	ldr	r3, [pc, #296]	@ (8002694 <HAL_RCC_GetSysClockFreq+0x180>)
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	099b      	lsrs	r3, r3, #6
 8002570:	2200      	movs	r2, #0
 8002572:	623b      	str	r3, [r7, #32]
 8002574:	627a      	str	r2, [r7, #36]	@ 0x24
 8002576:	6a3b      	ldr	r3, [r7, #32]
 8002578:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800257c:	2100      	movs	r1, #0
 800257e:	4b47      	ldr	r3, [pc, #284]	@ (800269c <HAL_RCC_GetSysClockFreq+0x188>)
 8002580:	fb03 f201 	mul.w	r2, r3, r1
 8002584:	2300      	movs	r3, #0
 8002586:	fb00 f303 	mul.w	r3, r0, r3
 800258a:	4413      	add	r3, r2
 800258c:	4a43      	ldr	r2, [pc, #268]	@ (800269c <HAL_RCC_GetSysClockFreq+0x188>)
 800258e:	fba0 1202 	umull	r1, r2, r0, r2
 8002592:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002594:	460a      	mov	r2, r1
 8002596:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002598:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800259a:	4413      	add	r3, r2
 800259c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800259e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80025a0:	2200      	movs	r2, #0
 80025a2:	61bb      	str	r3, [r7, #24]
 80025a4:	61fa      	str	r2, [r7, #28]
 80025a6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80025aa:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80025ae:	f7fd fe13 	bl	80001d8 <__aeabi_uldivmod>
 80025b2:	4602      	mov	r2, r0
 80025b4:	460b      	mov	r3, r1
 80025b6:	4613      	mov	r3, r2
 80025b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80025ba:	e053      	b.n	8002664 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025bc:	4b35      	ldr	r3, [pc, #212]	@ (8002694 <HAL_RCC_GetSysClockFreq+0x180>)
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	099b      	lsrs	r3, r3, #6
 80025c2:	2200      	movs	r2, #0
 80025c4:	613b      	str	r3, [r7, #16]
 80025c6:	617a      	str	r2, [r7, #20]
 80025c8:	693b      	ldr	r3, [r7, #16]
 80025ca:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80025ce:	f04f 0b00 	mov.w	fp, #0
 80025d2:	4652      	mov	r2, sl
 80025d4:	465b      	mov	r3, fp
 80025d6:	f04f 0000 	mov.w	r0, #0
 80025da:	f04f 0100 	mov.w	r1, #0
 80025de:	0159      	lsls	r1, r3, #5
 80025e0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80025e4:	0150      	lsls	r0, r2, #5
 80025e6:	4602      	mov	r2, r0
 80025e8:	460b      	mov	r3, r1
 80025ea:	ebb2 080a 	subs.w	r8, r2, sl
 80025ee:	eb63 090b 	sbc.w	r9, r3, fp
 80025f2:	f04f 0200 	mov.w	r2, #0
 80025f6:	f04f 0300 	mov.w	r3, #0
 80025fa:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80025fe:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002602:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002606:	ebb2 0408 	subs.w	r4, r2, r8
 800260a:	eb63 0509 	sbc.w	r5, r3, r9
 800260e:	f04f 0200 	mov.w	r2, #0
 8002612:	f04f 0300 	mov.w	r3, #0
 8002616:	00eb      	lsls	r3, r5, #3
 8002618:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800261c:	00e2      	lsls	r2, r4, #3
 800261e:	4614      	mov	r4, r2
 8002620:	461d      	mov	r5, r3
 8002622:	eb14 030a 	adds.w	r3, r4, sl
 8002626:	603b      	str	r3, [r7, #0]
 8002628:	eb45 030b 	adc.w	r3, r5, fp
 800262c:	607b      	str	r3, [r7, #4]
 800262e:	f04f 0200 	mov.w	r2, #0
 8002632:	f04f 0300 	mov.w	r3, #0
 8002636:	e9d7 4500 	ldrd	r4, r5, [r7]
 800263a:	4629      	mov	r1, r5
 800263c:	028b      	lsls	r3, r1, #10
 800263e:	4621      	mov	r1, r4
 8002640:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002644:	4621      	mov	r1, r4
 8002646:	028a      	lsls	r2, r1, #10
 8002648:	4610      	mov	r0, r2
 800264a:	4619      	mov	r1, r3
 800264c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800264e:	2200      	movs	r2, #0
 8002650:	60bb      	str	r3, [r7, #8]
 8002652:	60fa      	str	r2, [r7, #12]
 8002654:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002658:	f7fd fdbe 	bl	80001d8 <__aeabi_uldivmod>
 800265c:	4602      	mov	r2, r0
 800265e:	460b      	mov	r3, r1
 8002660:	4613      	mov	r3, r2
 8002662:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002664:	4b0b      	ldr	r3, [pc, #44]	@ (8002694 <HAL_RCC_GetSysClockFreq+0x180>)
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	0c1b      	lsrs	r3, r3, #16
 800266a:	f003 0303 	and.w	r3, r3, #3
 800266e:	3301      	adds	r3, #1
 8002670:	005b      	lsls	r3, r3, #1
 8002672:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8002674:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002676:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002678:	fbb2 f3f3 	udiv	r3, r2, r3
 800267c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800267e:	e002      	b.n	8002686 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002680:	4b05      	ldr	r3, [pc, #20]	@ (8002698 <HAL_RCC_GetSysClockFreq+0x184>)
 8002682:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002684:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002686:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002688:	4618      	mov	r0, r3
 800268a:	3740      	adds	r7, #64	@ 0x40
 800268c:	46bd      	mov	sp, r7
 800268e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002692:	bf00      	nop
 8002694:	40023800 	.word	0x40023800
 8002698:	00f42400 	.word	0x00f42400
 800269c:	017d7840 	.word	0x017d7840

080026a0 <memset>:
 80026a0:	4402      	add	r2, r0
 80026a2:	4603      	mov	r3, r0
 80026a4:	4293      	cmp	r3, r2
 80026a6:	d100      	bne.n	80026aa <memset+0xa>
 80026a8:	4770      	bx	lr
 80026aa:	f803 1b01 	strb.w	r1, [r3], #1
 80026ae:	e7f9      	b.n	80026a4 <memset+0x4>

080026b0 <__libc_init_array>:
 80026b0:	b570      	push	{r4, r5, r6, lr}
 80026b2:	4d0d      	ldr	r5, [pc, #52]	@ (80026e8 <__libc_init_array+0x38>)
 80026b4:	4c0d      	ldr	r4, [pc, #52]	@ (80026ec <__libc_init_array+0x3c>)
 80026b6:	1b64      	subs	r4, r4, r5
 80026b8:	10a4      	asrs	r4, r4, #2
 80026ba:	2600      	movs	r6, #0
 80026bc:	42a6      	cmp	r6, r4
 80026be:	d109      	bne.n	80026d4 <__libc_init_array+0x24>
 80026c0:	4d0b      	ldr	r5, [pc, #44]	@ (80026f0 <__libc_init_array+0x40>)
 80026c2:	4c0c      	ldr	r4, [pc, #48]	@ (80026f4 <__libc_init_array+0x44>)
 80026c4:	f000 f818 	bl	80026f8 <_init>
 80026c8:	1b64      	subs	r4, r4, r5
 80026ca:	10a4      	asrs	r4, r4, #2
 80026cc:	2600      	movs	r6, #0
 80026ce:	42a6      	cmp	r6, r4
 80026d0:	d105      	bne.n	80026de <__libc_init_array+0x2e>
 80026d2:	bd70      	pop	{r4, r5, r6, pc}
 80026d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80026d8:	4798      	blx	r3
 80026da:	3601      	adds	r6, #1
 80026dc:	e7ee      	b.n	80026bc <__libc_init_array+0xc>
 80026de:	f855 3b04 	ldr.w	r3, [r5], #4
 80026e2:	4798      	blx	r3
 80026e4:	3601      	adds	r6, #1
 80026e6:	e7f2      	b.n	80026ce <__libc_init_array+0x1e>
 80026e8:	08002730 	.word	0x08002730
 80026ec:	08002730 	.word	0x08002730
 80026f0:	08002730 	.word	0x08002730
 80026f4:	08002734 	.word	0x08002734

080026f8 <_init>:
 80026f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026fa:	bf00      	nop
 80026fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80026fe:	bc08      	pop	{r3}
 8002700:	469e      	mov	lr, r3
 8002702:	4770      	bx	lr

08002704 <_fini>:
 8002704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002706:	bf00      	nop
 8002708:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800270a:	bc08      	pop	{r3}
 800270c:	469e      	mov	lr, r3
 800270e:	4770      	bx	lr
