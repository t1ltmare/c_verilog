
LCD_I2C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002204  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  0800239c  0800239c  0000339c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080023d4  080023d4  0000400c  2**0
                  CONTENTS
  4 .ARM          00000008  080023d4  080023d4  000033d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080023dc  080023dc  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080023dc  080023dc  000033dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080023e0  080023e0  000033e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080023e4  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000007c  2000000c  080023f0  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000088  080023f0  00004088  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006dc5  00000000  00000000  0000403c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001493  00000000  00000000  0000ae01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000700  00000000  00000000  0000c298  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000559  00000000  00000000  0000c998  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014b19  00000000  00000000  0000cef1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000093bb  00000000  00000000  00021a0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00081e88  00000000  00000000  0002adc5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000acc4d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001c00  00000000  00000000  000acc90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  000ae890  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000000c 	.word	0x2000000c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08002384 	.word	0x08002384

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000010 	.word	0x20000010
 80001d4:	08002384 	.word	0x08002384

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96a 	b.w	80004c4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	460c      	mov	r4, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14e      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000214:	4694      	mov	ip, r2
 8000216:	458c      	cmp	ip, r1
 8000218:	4686      	mov	lr, r0
 800021a:	fab2 f282 	clz	r2, r2
 800021e:	d962      	bls.n	80002e6 <__udivmoddi4+0xde>
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0320 	rsb	r3, r2, #32
 8000226:	4091      	lsls	r1, r2
 8000228:	fa20 f303 	lsr.w	r3, r0, r3
 800022c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000230:	4319      	orrs	r1, r3
 8000232:	fa00 fe02 	lsl.w	lr, r0, r2
 8000236:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800023a:	fa1f f68c 	uxth.w	r6, ip
 800023e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000242:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000246:	fb07 1114 	mls	r1, r7, r4, r1
 800024a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024e:	fb04 f106 	mul.w	r1, r4, r6
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f104 30ff 	add.w	r0, r4, #4294967295
 800025e:	f080 8112 	bcs.w	8000486 <__udivmoddi4+0x27e>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 810f 	bls.w	8000486 <__udivmoddi4+0x27e>
 8000268:	3c02      	subs	r4, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a59      	subs	r1, r3, r1
 800026e:	fa1f f38e 	uxth.w	r3, lr
 8000272:	fbb1 f0f7 	udiv	r0, r1, r7
 8000276:	fb07 1110 	mls	r1, r7, r0, r1
 800027a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027e:	fb00 f606 	mul.w	r6, r0, r6
 8000282:	429e      	cmp	r6, r3
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x94>
 8000286:	eb1c 0303 	adds.w	r3, ip, r3
 800028a:	f100 31ff 	add.w	r1, r0, #4294967295
 800028e:	f080 80fc 	bcs.w	800048a <__udivmoddi4+0x282>
 8000292:	429e      	cmp	r6, r3
 8000294:	f240 80f9 	bls.w	800048a <__udivmoddi4+0x282>
 8000298:	4463      	add	r3, ip
 800029a:	3802      	subs	r0, #2
 800029c:	1b9b      	subs	r3, r3, r6
 800029e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002a2:	2100      	movs	r1, #0
 80002a4:	b11d      	cbz	r5, 80002ae <__udivmoddi4+0xa6>
 80002a6:	40d3      	lsrs	r3, r2
 80002a8:	2200      	movs	r2, #0
 80002aa:	e9c5 3200 	strd	r3, r2, [r5]
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d905      	bls.n	80002c2 <__udivmoddi4+0xba>
 80002b6:	b10d      	cbz	r5, 80002bc <__udivmoddi4+0xb4>
 80002b8:	e9c5 0100 	strd	r0, r1, [r5]
 80002bc:	2100      	movs	r1, #0
 80002be:	4608      	mov	r0, r1
 80002c0:	e7f5      	b.n	80002ae <__udivmoddi4+0xa6>
 80002c2:	fab3 f183 	clz	r1, r3
 80002c6:	2900      	cmp	r1, #0
 80002c8:	d146      	bne.n	8000358 <__udivmoddi4+0x150>
 80002ca:	42a3      	cmp	r3, r4
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xcc>
 80002ce:	4290      	cmp	r0, r2
 80002d0:	f0c0 80f0 	bcc.w	80004b4 <__udivmoddi4+0x2ac>
 80002d4:	1a86      	subs	r6, r0, r2
 80002d6:	eb64 0303 	sbc.w	r3, r4, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	2d00      	cmp	r5, #0
 80002de:	d0e6      	beq.n	80002ae <__udivmoddi4+0xa6>
 80002e0:	e9c5 6300 	strd	r6, r3, [r5]
 80002e4:	e7e3      	b.n	80002ae <__udivmoddi4+0xa6>
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	f040 8090 	bne.w	800040c <__udivmoddi4+0x204>
 80002ec:	eba1 040c 	sub.w	r4, r1, ip
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	fa1f f78c 	uxth.w	r7, ip
 80002f8:	2101      	movs	r1, #1
 80002fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80002fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000302:	fb08 4416 	mls	r4, r8, r6, r4
 8000306:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800030a:	fb07 f006 	mul.w	r0, r7, r6
 800030e:	4298      	cmp	r0, r3
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x11c>
 8000312:	eb1c 0303 	adds.w	r3, ip, r3
 8000316:	f106 34ff 	add.w	r4, r6, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x11a>
 800031c:	4298      	cmp	r0, r3
 800031e:	f200 80cd 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 8000322:	4626      	mov	r6, r4
 8000324:	1a1c      	subs	r4, r3, r0
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb4 f0f8 	udiv	r0, r4, r8
 800032e:	fb08 4410 	mls	r4, r8, r0, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb00 f707 	mul.w	r7, r0, r7
 800033a:	429f      	cmp	r7, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x148>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 34ff 	add.w	r4, r0, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x146>
 8000348:	429f      	cmp	r7, r3
 800034a:	f200 80b0 	bhi.w	80004ae <__udivmoddi4+0x2a6>
 800034e:	4620      	mov	r0, r4
 8000350:	1bdb      	subs	r3, r3, r7
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	e7a5      	b.n	80002a4 <__udivmoddi4+0x9c>
 8000358:	f1c1 0620 	rsb	r6, r1, #32
 800035c:	408b      	lsls	r3, r1
 800035e:	fa22 f706 	lsr.w	r7, r2, r6
 8000362:	431f      	orrs	r7, r3
 8000364:	fa20 fc06 	lsr.w	ip, r0, r6
 8000368:	fa04 f301 	lsl.w	r3, r4, r1
 800036c:	ea43 030c 	orr.w	r3, r3, ip
 8000370:	40f4      	lsrs	r4, r6
 8000372:	fa00 f801 	lsl.w	r8, r0, r1
 8000376:	0c38      	lsrs	r0, r7, #16
 8000378:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800037c:	fbb4 fef0 	udiv	lr, r4, r0
 8000380:	fa1f fc87 	uxth.w	ip, r7
 8000384:	fb00 441e 	mls	r4, r0, lr, r4
 8000388:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800038c:	fb0e f90c 	mul.w	r9, lr, ip
 8000390:	45a1      	cmp	r9, r4
 8000392:	fa02 f201 	lsl.w	r2, r2, r1
 8000396:	d90a      	bls.n	80003ae <__udivmoddi4+0x1a6>
 8000398:	193c      	adds	r4, r7, r4
 800039a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800039e:	f080 8084 	bcs.w	80004aa <__udivmoddi4+0x2a2>
 80003a2:	45a1      	cmp	r9, r4
 80003a4:	f240 8081 	bls.w	80004aa <__udivmoddi4+0x2a2>
 80003a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ac:	443c      	add	r4, r7
 80003ae:	eba4 0409 	sub.w	r4, r4, r9
 80003b2:	fa1f f983 	uxth.w	r9, r3
 80003b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ba:	fb00 4413 	mls	r4, r0, r3, r4
 80003be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c6:	45a4      	cmp	ip, r4
 80003c8:	d907      	bls.n	80003da <__udivmoddi4+0x1d2>
 80003ca:	193c      	adds	r4, r7, r4
 80003cc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003d0:	d267      	bcs.n	80004a2 <__udivmoddi4+0x29a>
 80003d2:	45a4      	cmp	ip, r4
 80003d4:	d965      	bls.n	80004a2 <__udivmoddi4+0x29a>
 80003d6:	3b02      	subs	r3, #2
 80003d8:	443c      	add	r4, r7
 80003da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003de:	fba0 9302 	umull	r9, r3, r0, r2
 80003e2:	eba4 040c 	sub.w	r4, r4, ip
 80003e6:	429c      	cmp	r4, r3
 80003e8:	46ce      	mov	lr, r9
 80003ea:	469c      	mov	ip, r3
 80003ec:	d351      	bcc.n	8000492 <__udivmoddi4+0x28a>
 80003ee:	d04e      	beq.n	800048e <__udivmoddi4+0x286>
 80003f0:	b155      	cbz	r5, 8000408 <__udivmoddi4+0x200>
 80003f2:	ebb8 030e 	subs.w	r3, r8, lr
 80003f6:	eb64 040c 	sbc.w	r4, r4, ip
 80003fa:	fa04 f606 	lsl.w	r6, r4, r6
 80003fe:	40cb      	lsrs	r3, r1
 8000400:	431e      	orrs	r6, r3
 8000402:	40cc      	lsrs	r4, r1
 8000404:	e9c5 6400 	strd	r6, r4, [r5]
 8000408:	2100      	movs	r1, #0
 800040a:	e750      	b.n	80002ae <__udivmoddi4+0xa6>
 800040c:	f1c2 0320 	rsb	r3, r2, #32
 8000410:	fa20 f103 	lsr.w	r1, r0, r3
 8000414:	fa0c fc02 	lsl.w	ip, ip, r2
 8000418:	fa24 f303 	lsr.w	r3, r4, r3
 800041c:	4094      	lsls	r4, r2
 800041e:	430c      	orrs	r4, r1
 8000420:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000424:	fa00 fe02 	lsl.w	lr, r0, r2
 8000428:	fa1f f78c 	uxth.w	r7, ip
 800042c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000430:	fb08 3110 	mls	r1, r8, r0, r3
 8000434:	0c23      	lsrs	r3, r4, #16
 8000436:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043a:	fb00 f107 	mul.w	r1, r0, r7
 800043e:	4299      	cmp	r1, r3
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x24c>
 8000442:	eb1c 0303 	adds.w	r3, ip, r3
 8000446:	f100 36ff 	add.w	r6, r0, #4294967295
 800044a:	d22c      	bcs.n	80004a6 <__udivmoddi4+0x29e>
 800044c:	4299      	cmp	r1, r3
 800044e:	d92a      	bls.n	80004a6 <__udivmoddi4+0x29e>
 8000450:	3802      	subs	r0, #2
 8000452:	4463      	add	r3, ip
 8000454:	1a5b      	subs	r3, r3, r1
 8000456:	b2a4      	uxth	r4, r4
 8000458:	fbb3 f1f8 	udiv	r1, r3, r8
 800045c:	fb08 3311 	mls	r3, r8, r1, r3
 8000460:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000464:	fb01 f307 	mul.w	r3, r1, r7
 8000468:	42a3      	cmp	r3, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x276>
 800046c:	eb1c 0404 	adds.w	r4, ip, r4
 8000470:	f101 36ff 	add.w	r6, r1, #4294967295
 8000474:	d213      	bcs.n	800049e <__udivmoddi4+0x296>
 8000476:	42a3      	cmp	r3, r4
 8000478:	d911      	bls.n	800049e <__udivmoddi4+0x296>
 800047a:	3902      	subs	r1, #2
 800047c:	4464      	add	r4, ip
 800047e:	1ae4      	subs	r4, r4, r3
 8000480:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000484:	e739      	b.n	80002fa <__udivmoddi4+0xf2>
 8000486:	4604      	mov	r4, r0
 8000488:	e6f0      	b.n	800026c <__udivmoddi4+0x64>
 800048a:	4608      	mov	r0, r1
 800048c:	e706      	b.n	800029c <__udivmoddi4+0x94>
 800048e:	45c8      	cmp	r8, r9
 8000490:	d2ae      	bcs.n	80003f0 <__udivmoddi4+0x1e8>
 8000492:	ebb9 0e02 	subs.w	lr, r9, r2
 8000496:	eb63 0c07 	sbc.w	ip, r3, r7
 800049a:	3801      	subs	r0, #1
 800049c:	e7a8      	b.n	80003f0 <__udivmoddi4+0x1e8>
 800049e:	4631      	mov	r1, r6
 80004a0:	e7ed      	b.n	800047e <__udivmoddi4+0x276>
 80004a2:	4603      	mov	r3, r0
 80004a4:	e799      	b.n	80003da <__udivmoddi4+0x1d2>
 80004a6:	4630      	mov	r0, r6
 80004a8:	e7d4      	b.n	8000454 <__udivmoddi4+0x24c>
 80004aa:	46d6      	mov	lr, sl
 80004ac:	e77f      	b.n	80003ae <__udivmoddi4+0x1a6>
 80004ae:	4463      	add	r3, ip
 80004b0:	3802      	subs	r0, #2
 80004b2:	e74d      	b.n	8000350 <__udivmoddi4+0x148>
 80004b4:	4606      	mov	r6, r0
 80004b6:	4623      	mov	r3, r4
 80004b8:	4608      	mov	r0, r1
 80004ba:	e70f      	b.n	80002dc <__udivmoddi4+0xd4>
 80004bc:	3e02      	subs	r6, #2
 80004be:	4463      	add	r3, ip
 80004c0:	e730      	b.n	8000324 <__udivmoddi4+0x11c>
 80004c2:	bf00      	nop

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b086      	sub	sp, #24
 80004cc:	af02      	add	r7, sp, #8
 80004ce:	4603      	mov	r3, r0
 80004d0:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 80004d2:	79fb      	ldrb	r3, [r7, #7]
 80004d4:	f023 030f 	bic.w	r3, r3, #15
 80004d8:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 80004da:	79fb      	ldrb	r3, [r7, #7]
 80004dc:	011b      	lsls	r3, r3, #4
 80004de:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0 -> bxxxx1100
 80004e0:	7bfb      	ldrb	r3, [r7, #15]
 80004e2:	f043 030c 	orr.w	r3, r3, #12
 80004e6:	b2db      	uxtb	r3, r3
 80004e8:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0 -> bxxxx1000
 80004ea:	7bfb      	ldrb	r3, [r7, #15]
 80004ec:	f043 0308 	orr.w	r3, r3, #8
 80004f0:	b2db      	uxtb	r3, r3
 80004f2:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0 -> bxxxx1100
 80004f4:	7bbb      	ldrb	r3, [r7, #14]
 80004f6:	f043 030c 	orr.w	r3, r3, #12
 80004fa:	b2db      	uxtb	r3, r3
 80004fc:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0 -> bxxxx1000
 80004fe:	7bbb      	ldrb	r3, [r7, #14]
 8000500:	f043 0308 	orr.w	r3, r3, #8
 8000504:	b2db      	uxtb	r3, r3
 8000506:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000508:	f107 0208 	add.w	r2, r7, #8
 800050c:	2364      	movs	r3, #100	@ 0x64
 800050e:	9300      	str	r3, [sp, #0]
 8000510:	2304      	movs	r3, #4
 8000512:	214e      	movs	r1, #78	@ 0x4e
 8000514:	4803      	ldr	r0, [pc, #12]	@ (8000524 <lcd_send_cmd+0x5c>)
 8000516:	f000 ff2b 	bl	8001370 <HAL_I2C_Master_Transmit>
}
 800051a:	bf00      	nop
 800051c:	3710      	adds	r7, #16
 800051e:	46bd      	mov	sp, r7
 8000520:	bd80      	pop	{r7, pc}
 8000522:	bf00      	nop
 8000524:	20000028 	.word	0x20000028

08000528 <lcd_send_data>:

void lcd_send_data (char data)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b086      	sub	sp, #24
 800052c:	af02      	add	r7, sp, #8
 800052e:	4603      	mov	r3, r0
 8000530:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8000532:	79fb      	ldrb	r3, [r7, #7]
 8000534:	f023 030f 	bic.w	r3, r3, #15
 8000538:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 800053a:	79fb      	ldrb	r3, [r7, #7]
 800053c:	011b      	lsls	r3, r3, #4
 800053e:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0 -> bxxxx1101
 8000540:	7bfb      	ldrb	r3, [r7, #15]
 8000542:	f043 030d 	orr.w	r3, r3, #13
 8000546:	b2db      	uxtb	r3, r3
 8000548:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0 -> bxxxx1001
 800054a:	7bfb      	ldrb	r3, [r7, #15]
 800054c:	f043 0309 	orr.w	r3, r3, #9
 8000550:	b2db      	uxtb	r3, r3
 8000552:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0 -> bxxxx1101
 8000554:	7bbb      	ldrb	r3, [r7, #14]
 8000556:	f043 030d 	orr.w	r3, r3, #13
 800055a:	b2db      	uxtb	r3, r3
 800055c:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0 -> bxxxx1001
 800055e:	7bbb      	ldrb	r3, [r7, #14]
 8000560:	f043 0309 	orr.w	r3, r3, #9
 8000564:	b2db      	uxtb	r3, r3
 8000566:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000568:	f107 0208 	add.w	r2, r7, #8
 800056c:	2364      	movs	r3, #100	@ 0x64
 800056e:	9300      	str	r3, [sp, #0]
 8000570:	2304      	movs	r3, #4
 8000572:	214e      	movs	r1, #78	@ 0x4e
 8000574:	4803      	ldr	r0, [pc, #12]	@ (8000584 <lcd_send_data+0x5c>)
 8000576:	f000 fefb 	bl	8001370 <HAL_I2C_Master_Transmit>
}
 800057a:	bf00      	nop
 800057c:	3710      	adds	r7, #16
 800057e:	46bd      	mov	sp, r7
 8000580:	bd80      	pop	{r7, pc}
 8000582:	bf00      	nop
 8000584:	20000028 	.word	0x20000028

08000588 <lcd_put_cur>:
		lcd_send_data (' ');
	}
}

void lcd_put_cur(int row, int col)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b082      	sub	sp, #8
 800058c:	af00      	add	r7, sp, #0
 800058e:	6078      	str	r0, [r7, #4]
 8000590:	6039      	str	r1, [r7, #0]
    switch (row)
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	2b00      	cmp	r3, #0
 8000596:	d003      	beq.n	80005a0 <lcd_put_cur+0x18>
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	2b01      	cmp	r3, #1
 800059c:	d005      	beq.n	80005aa <lcd_put_cur+0x22>
 800059e:	e009      	b.n	80005b4 <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 80005a0:	683b      	ldr	r3, [r7, #0]
 80005a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80005a6:	603b      	str	r3, [r7, #0]
            break;
 80005a8:	e004      	b.n	80005b4 <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 80005aa:	683b      	ldr	r3, [r7, #0]
 80005ac:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80005b0:	603b      	str	r3, [r7, #0]
            break;
 80005b2:	bf00      	nop
    }

    lcd_send_cmd (col);
 80005b4:	683b      	ldr	r3, [r7, #0]
 80005b6:	b2db      	uxtb	r3, r3
 80005b8:	4618      	mov	r0, r3
 80005ba:	f7ff ff85 	bl	80004c8 <lcd_send_cmd>
}
 80005be:	bf00      	nop
 80005c0:	3708      	adds	r7, #8
 80005c2:	46bd      	mov	sp, r7
 80005c4:	bd80      	pop	{r7, pc}

080005c6 <lcd_init>:


void lcd_init (void)
{
 80005c6:	b580      	push	{r7, lr}
 80005c8:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 80005ca:	2032      	movs	r0, #50	@ 0x32
 80005cc:	f000 fae4 	bl	8000b98 <HAL_Delay>
	lcd_send_cmd (0x30);
 80005d0:	2030      	movs	r0, #48	@ 0x30
 80005d2:	f7ff ff79 	bl	80004c8 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 80005d6:	2005      	movs	r0, #5
 80005d8:	f000 fade 	bl	8000b98 <HAL_Delay>
	lcd_send_cmd (0x30);
 80005dc:	2030      	movs	r0, #48	@ 0x30
 80005de:	f7ff ff73 	bl	80004c8 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 80005e2:	2001      	movs	r0, #1
 80005e4:	f000 fad8 	bl	8000b98 <HAL_Delay>
	lcd_send_cmd (0x30);
 80005e8:	2030      	movs	r0, #48	@ 0x30
 80005ea:	f7ff ff6d 	bl	80004c8 <lcd_send_cmd>
	HAL_Delay(10);
 80005ee:	200a      	movs	r0, #10
 80005f0:	f000 fad2 	bl	8000b98 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 80005f4:	2020      	movs	r0, #32
 80005f6:	f7ff ff67 	bl	80004c8 <lcd_send_cmd>
	HAL_Delay(10);
 80005fa:	200a      	movs	r0, #10
 80005fc:	f000 facc 	bl	8000b98 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8000600:	2028      	movs	r0, #40	@ 0x28
 8000602:	f7ff ff61 	bl	80004c8 <lcd_send_cmd>
	HAL_Delay(1);
 8000606:	2001      	movs	r0, #1
 8000608:	f000 fac6 	bl	8000b98 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 800060c:	2008      	movs	r0, #8
 800060e:	f7ff ff5b 	bl	80004c8 <lcd_send_cmd>
	HAL_Delay(1);
 8000612:	2001      	movs	r0, #1
 8000614:	f000 fac0 	bl	8000b98 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 8000618:	2001      	movs	r0, #1
 800061a:	f7ff ff55 	bl	80004c8 <lcd_send_cmd>
	HAL_Delay(1);
 800061e:	2001      	movs	r0, #1
 8000620:	f000 faba 	bl	8000b98 <HAL_Delay>
	HAL_Delay(1);
 8000624:	2001      	movs	r0, #1
 8000626:	f000 fab7 	bl	8000b98 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 800062a:	2006      	movs	r0, #6
 800062c:	f7ff ff4c 	bl	80004c8 <lcd_send_cmd>
	HAL_Delay(1);
 8000630:	2001      	movs	r0, #1
 8000632:	f000 fab1 	bl	8000b98 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8000636:	200c      	movs	r0, #12
 8000638:	f7ff ff46 	bl	80004c8 <lcd_send_cmd>
}
 800063c:	bf00      	nop
 800063e:	bd80      	pop	{r7, pc}

08000640 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b082      	sub	sp, #8
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8000648:	e006      	b.n	8000658 <lcd_send_string+0x18>
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	1c5a      	adds	r2, r3, #1
 800064e:	607a      	str	r2, [r7, #4]
 8000650:	781b      	ldrb	r3, [r3, #0]
 8000652:	4618      	mov	r0, r3
 8000654:	f7ff ff68 	bl	8000528 <lcd_send_data>
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	781b      	ldrb	r3, [r3, #0]
 800065c:	2b00      	cmp	r3, #0
 800065e:	d1f4      	bne.n	800064a <lcd_send_string+0xa>
}
 8000660:	bf00      	nop
 8000662:	bf00      	nop
 8000664:	3708      	adds	r7, #8
 8000666:	46bd      	mov	sp, r7
 8000668:	bd80      	pop	{r7, pc}
	...

0800066c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b082      	sub	sp, #8
 8000670:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000672:	f000 fa1f 	bl	8000ab4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000676:	f000 f855 	bl	8000724 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800067a:	f000 f8e9 	bl	8000850 <MX_GPIO_Init>
  MX_I2C1_Init();
 800067e:	f000 f8b9 	bl	80007f4 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
lcd_init();
 8000682:	f7ff ffa0 	bl	80005c6 <lcd_init>

lcd_send_string("HELLO WORLD");
 8000686:	4823      	ldr	r0, [pc, #140]	@ (8000714 <main+0xa8>)
 8000688:	f7ff ffda 	bl	8000640 <lcd_send_string>

HAL_Delay(1000);
 800068c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000690:	f000 fa82 	bl	8000b98 <HAL_Delay>

//lcd_clear();

lcd_put_cur(1, 0);
 8000694:	2100      	movs	r1, #0
 8000696:	2001      	movs	r0, #1
 8000698:	f7ff ff76 	bl	8000588 <lcd_put_cur>

lcd_send_string("CONGRATULATIONS!");
 800069c:	481e      	ldr	r0, [pc, #120]	@ (8000718 <main+0xac>)
 800069e:	f7ff ffcf 	bl	8000640 <lcd_send_string>

HAL_Delay(2000);
 80006a2:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80006a6:	f000 fa77 	bl	8000b98 <HAL_Delay>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  for (int i = 0; i < 191; i++)
 80006aa:	2300      	movs	r3, #0
 80006ac:	607b      	str	r3, [r7, #4]
 80006ae:	e02c      	b.n	800070a <main+0x9e>
	  {
		  lcd_put_cur(row, col);
 80006b0:	4b1a      	ldr	r3, [pc, #104]	@ (800071c <main+0xb0>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	4a1a      	ldr	r2, [pc, #104]	@ (8000720 <main+0xb4>)
 80006b6:	6812      	ldr	r2, [r2, #0]
 80006b8:	4611      	mov	r1, r2
 80006ba:	4618      	mov	r0, r3
 80006bc:	f7ff ff64 	bl	8000588 <lcd_put_cur>
		  lcd_send_data(i+49);
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	b2db      	uxtb	r3, r3
 80006c4:	3331      	adds	r3, #49	@ 0x31
 80006c6:	b2db      	uxtb	r3, r3
 80006c8:	4618      	mov	r0, r3
 80006ca:	f7ff ff2d 	bl	8000528 <lcd_send_data>
		  col++;
 80006ce:	4b14      	ldr	r3, [pc, #80]	@ (8000720 <main+0xb4>)
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	3301      	adds	r3, #1
 80006d4:	4a12      	ldr	r2, [pc, #72]	@ (8000720 <main+0xb4>)
 80006d6:	6013      	str	r3, [r2, #0]

		  if (col > 15) {row++; col = 0;}
 80006d8:	4b11      	ldr	r3, [pc, #68]	@ (8000720 <main+0xb4>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	2b0f      	cmp	r3, #15
 80006de:	dd07      	ble.n	80006f0 <main+0x84>
 80006e0:	4b0e      	ldr	r3, [pc, #56]	@ (800071c <main+0xb0>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	3301      	adds	r3, #1
 80006e6:	4a0d      	ldr	r2, [pc, #52]	@ (800071c <main+0xb0>)
 80006e8:	6013      	str	r3, [r2, #0]
 80006ea:	4b0d      	ldr	r3, [pc, #52]	@ (8000720 <main+0xb4>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	601a      	str	r2, [r3, #0]
		  if (row > 1) row = 0;
 80006f0:	4b0a      	ldr	r3, [pc, #40]	@ (800071c <main+0xb0>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	2b01      	cmp	r3, #1
 80006f6:	dd02      	ble.n	80006fe <main+0x92>
 80006f8:	4b08      	ldr	r3, [pc, #32]	@ (800071c <main+0xb0>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	601a      	str	r2, [r3, #0]

		  HAL_Delay(250);
 80006fe:	20fa      	movs	r0, #250	@ 0xfa
 8000700:	f000 fa4a 	bl	8000b98 <HAL_Delay>
	  for (int i = 0; i < 191; i++)
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	3301      	adds	r3, #1
 8000708:	607b      	str	r3, [r7, #4]
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	2bbe      	cmp	r3, #190	@ 0xbe
 800070e:	ddcf      	ble.n	80006b0 <main+0x44>
 8000710:	e7cb      	b.n	80006aa <main+0x3e>
 8000712:	bf00      	nop
 8000714:	0800239c 	.word	0x0800239c
 8000718:	080023a8 	.word	0x080023a8
 800071c:	2000007c 	.word	0x2000007c
 8000720:	20000080 	.word	0x20000080

08000724 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b094      	sub	sp, #80	@ 0x50
 8000728:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800072a:	f107 0320 	add.w	r3, r7, #32
 800072e:	2230      	movs	r2, #48	@ 0x30
 8000730:	2100      	movs	r1, #0
 8000732:	4618      	mov	r0, r3
 8000734:	f001 fdfa 	bl	800232c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000738:	f107 030c 	add.w	r3, r7, #12
 800073c:	2200      	movs	r2, #0
 800073e:	601a      	str	r2, [r3, #0]
 8000740:	605a      	str	r2, [r3, #4]
 8000742:	609a      	str	r2, [r3, #8]
 8000744:	60da      	str	r2, [r3, #12]
 8000746:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000748:	2300      	movs	r3, #0
 800074a:	60bb      	str	r3, [r7, #8]
 800074c:	4b27      	ldr	r3, [pc, #156]	@ (80007ec <SystemClock_Config+0xc8>)
 800074e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000750:	4a26      	ldr	r2, [pc, #152]	@ (80007ec <SystemClock_Config+0xc8>)
 8000752:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000756:	6413      	str	r3, [r2, #64]	@ 0x40
 8000758:	4b24      	ldr	r3, [pc, #144]	@ (80007ec <SystemClock_Config+0xc8>)
 800075a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800075c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000760:	60bb      	str	r3, [r7, #8]
 8000762:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000764:	2300      	movs	r3, #0
 8000766:	607b      	str	r3, [r7, #4]
 8000768:	4b21      	ldr	r3, [pc, #132]	@ (80007f0 <SystemClock_Config+0xcc>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	4a20      	ldr	r2, [pc, #128]	@ (80007f0 <SystemClock_Config+0xcc>)
 800076e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000772:	6013      	str	r3, [r2, #0]
 8000774:	4b1e      	ldr	r3, [pc, #120]	@ (80007f0 <SystemClock_Config+0xcc>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800077c:	607b      	str	r3, [r7, #4]
 800077e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000780:	2301      	movs	r3, #1
 8000782:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000784:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000788:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800078a:	2302      	movs	r3, #2
 800078c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800078e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000792:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000794:	2304      	movs	r3, #4
 8000796:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8000798:	2364      	movs	r3, #100	@ 0x64
 800079a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800079c:	2302      	movs	r3, #2
 800079e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80007a0:	2304      	movs	r3, #4
 80007a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007a4:	f107 0320 	add.w	r3, r7, #32
 80007a8:	4618      	mov	r0, r3
 80007aa:	f001 f93b 	bl	8001a24 <HAL_RCC_OscConfig>
 80007ae:	4603      	mov	r3, r0
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d001      	beq.n	80007b8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80007b4:	f000 f89c 	bl	80008f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007b8:	230f      	movs	r3, #15
 80007ba:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007bc:	2302      	movs	r3, #2
 80007be:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007c0:	2300      	movs	r3, #0
 80007c2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007c4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007c8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007ca:	2300      	movs	r3, #0
 80007cc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80007ce:	f107 030c 	add.w	r3, r7, #12
 80007d2:	2103      	movs	r1, #3
 80007d4:	4618      	mov	r0, r3
 80007d6:	f001 fb9d 	bl	8001f14 <HAL_RCC_ClockConfig>
 80007da:	4603      	mov	r3, r0
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d001      	beq.n	80007e4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80007e0:	f000 f886 	bl	80008f0 <Error_Handler>
  }
}
 80007e4:	bf00      	nop
 80007e6:	3750      	adds	r7, #80	@ 0x50
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bd80      	pop	{r7, pc}
 80007ec:	40023800 	.word	0x40023800
 80007f0:	40007000 	.word	0x40007000

080007f4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007f8:	4b12      	ldr	r3, [pc, #72]	@ (8000844 <MX_I2C1_Init+0x50>)
 80007fa:	4a13      	ldr	r2, [pc, #76]	@ (8000848 <MX_I2C1_Init+0x54>)
 80007fc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80007fe:	4b11      	ldr	r3, [pc, #68]	@ (8000844 <MX_I2C1_Init+0x50>)
 8000800:	4a12      	ldr	r2, [pc, #72]	@ (800084c <MX_I2C1_Init+0x58>)
 8000802:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000804:	4b0f      	ldr	r3, [pc, #60]	@ (8000844 <MX_I2C1_Init+0x50>)
 8000806:	2200      	movs	r2, #0
 8000808:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800080a:	4b0e      	ldr	r3, [pc, #56]	@ (8000844 <MX_I2C1_Init+0x50>)
 800080c:	2200      	movs	r2, #0
 800080e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000810:	4b0c      	ldr	r3, [pc, #48]	@ (8000844 <MX_I2C1_Init+0x50>)
 8000812:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000816:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000818:	4b0a      	ldr	r3, [pc, #40]	@ (8000844 <MX_I2C1_Init+0x50>)
 800081a:	2200      	movs	r2, #0
 800081c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800081e:	4b09      	ldr	r3, [pc, #36]	@ (8000844 <MX_I2C1_Init+0x50>)
 8000820:	2200      	movs	r2, #0
 8000822:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000824:	4b07      	ldr	r3, [pc, #28]	@ (8000844 <MX_I2C1_Init+0x50>)
 8000826:	2200      	movs	r2, #0
 8000828:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800082a:	4b06      	ldr	r3, [pc, #24]	@ (8000844 <MX_I2C1_Init+0x50>)
 800082c:	2200      	movs	r2, #0
 800082e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000830:	4804      	ldr	r0, [pc, #16]	@ (8000844 <MX_I2C1_Init+0x50>)
 8000832:	f000 fc59 	bl	80010e8 <HAL_I2C_Init>
 8000836:	4603      	mov	r3, r0
 8000838:	2b00      	cmp	r3, #0
 800083a:	d001      	beq.n	8000840 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800083c:	f000 f858 	bl	80008f0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000840:	bf00      	nop
 8000842:	bd80      	pop	{r7, pc}
 8000844:	20000028 	.word	0x20000028
 8000848:	40005400 	.word	0x40005400
 800084c:	000186a0 	.word	0x000186a0

08000850 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b088      	sub	sp, #32
 8000854:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000856:	f107 030c 	add.w	r3, r7, #12
 800085a:	2200      	movs	r2, #0
 800085c:	601a      	str	r2, [r3, #0]
 800085e:	605a      	str	r2, [r3, #4]
 8000860:	609a      	str	r2, [r3, #8]
 8000862:	60da      	str	r2, [r3, #12]
 8000864:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000866:	2300      	movs	r3, #0
 8000868:	60bb      	str	r3, [r7, #8]
 800086a:	4b1f      	ldr	r3, [pc, #124]	@ (80008e8 <MX_GPIO_Init+0x98>)
 800086c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800086e:	4a1e      	ldr	r2, [pc, #120]	@ (80008e8 <MX_GPIO_Init+0x98>)
 8000870:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000874:	6313      	str	r3, [r2, #48]	@ 0x30
 8000876:	4b1c      	ldr	r3, [pc, #112]	@ (80008e8 <MX_GPIO_Init+0x98>)
 8000878:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800087a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800087e:	60bb      	str	r3, [r7, #8]
 8000880:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000882:	2300      	movs	r3, #0
 8000884:	607b      	str	r3, [r7, #4]
 8000886:	4b18      	ldr	r3, [pc, #96]	@ (80008e8 <MX_GPIO_Init+0x98>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800088a:	4a17      	ldr	r2, [pc, #92]	@ (80008e8 <MX_GPIO_Init+0x98>)
 800088c:	f043 0301 	orr.w	r3, r3, #1
 8000890:	6313      	str	r3, [r2, #48]	@ 0x30
 8000892:	4b15      	ldr	r3, [pc, #84]	@ (80008e8 <MX_GPIO_Init+0x98>)
 8000894:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000896:	f003 0301 	and.w	r3, r3, #1
 800089a:	607b      	str	r3, [r7, #4]
 800089c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800089e:	2300      	movs	r3, #0
 80008a0:	603b      	str	r3, [r7, #0]
 80008a2:	4b11      	ldr	r3, [pc, #68]	@ (80008e8 <MX_GPIO_Init+0x98>)
 80008a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008a6:	4a10      	ldr	r2, [pc, #64]	@ (80008e8 <MX_GPIO_Init+0x98>)
 80008a8:	f043 0302 	orr.w	r3, r3, #2
 80008ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80008ae:	4b0e      	ldr	r3, [pc, #56]	@ (80008e8 <MX_GPIO_Init+0x98>)
 80008b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008b2:	f003 0302 	and.w	r3, r3, #2
 80008b6:	603b      	str	r3, [r7, #0]
 80008b8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80008ba:	2200      	movs	r2, #0
 80008bc:	2120      	movs	r1, #32
 80008be:	480b      	ldr	r0, [pc, #44]	@ (80008ec <MX_GPIO_Init+0x9c>)
 80008c0:	f000 fbf8 	bl	80010b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80008c4:	2320      	movs	r3, #32
 80008c6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008c8:	2301      	movs	r3, #1
 80008ca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008cc:	2300      	movs	r3, #0
 80008ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d0:	2300      	movs	r3, #0
 80008d2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80008d4:	f107 030c 	add.w	r3, r7, #12
 80008d8:	4619      	mov	r1, r3
 80008da:	4804      	ldr	r0, [pc, #16]	@ (80008ec <MX_GPIO_Init+0x9c>)
 80008dc:	f000 fa66 	bl	8000dac <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008e0:	bf00      	nop
 80008e2:	3720      	adds	r7, #32
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bd80      	pop	{r7, pc}
 80008e8:	40023800 	.word	0x40023800
 80008ec:	40020000 	.word	0x40020000

080008f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008f4:	b672      	cpsid	i
}
 80008f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008f8:	bf00      	nop
 80008fa:	e7fd      	b.n	80008f8 <Error_Handler+0x8>

080008fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b082      	sub	sp, #8
 8000900:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000902:	2300      	movs	r3, #0
 8000904:	607b      	str	r3, [r7, #4]
 8000906:	4b10      	ldr	r3, [pc, #64]	@ (8000948 <HAL_MspInit+0x4c>)
 8000908:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800090a:	4a0f      	ldr	r2, [pc, #60]	@ (8000948 <HAL_MspInit+0x4c>)
 800090c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000910:	6453      	str	r3, [r2, #68]	@ 0x44
 8000912:	4b0d      	ldr	r3, [pc, #52]	@ (8000948 <HAL_MspInit+0x4c>)
 8000914:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000916:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800091a:	607b      	str	r3, [r7, #4]
 800091c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800091e:	2300      	movs	r3, #0
 8000920:	603b      	str	r3, [r7, #0]
 8000922:	4b09      	ldr	r3, [pc, #36]	@ (8000948 <HAL_MspInit+0x4c>)
 8000924:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000926:	4a08      	ldr	r2, [pc, #32]	@ (8000948 <HAL_MspInit+0x4c>)
 8000928:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800092c:	6413      	str	r3, [r2, #64]	@ 0x40
 800092e:	4b06      	ldr	r3, [pc, #24]	@ (8000948 <HAL_MspInit+0x4c>)
 8000930:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000932:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000936:	603b      	str	r3, [r7, #0]
 8000938:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800093a:	2007      	movs	r0, #7
 800093c:	f000 fa02 	bl	8000d44 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000940:	bf00      	nop
 8000942:	3708      	adds	r7, #8
 8000944:	46bd      	mov	sp, r7
 8000946:	bd80      	pop	{r7, pc}
 8000948:	40023800 	.word	0x40023800

0800094c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b08a      	sub	sp, #40	@ 0x28
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000954:	f107 0314 	add.w	r3, r7, #20
 8000958:	2200      	movs	r2, #0
 800095a:	601a      	str	r2, [r3, #0]
 800095c:	605a      	str	r2, [r3, #4]
 800095e:	609a      	str	r2, [r3, #8]
 8000960:	60da      	str	r2, [r3, #12]
 8000962:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	4a19      	ldr	r2, [pc, #100]	@ (80009d0 <HAL_I2C_MspInit+0x84>)
 800096a:	4293      	cmp	r3, r2
 800096c:	d12c      	bne.n	80009c8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800096e:	2300      	movs	r3, #0
 8000970:	613b      	str	r3, [r7, #16]
 8000972:	4b18      	ldr	r3, [pc, #96]	@ (80009d4 <HAL_I2C_MspInit+0x88>)
 8000974:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000976:	4a17      	ldr	r2, [pc, #92]	@ (80009d4 <HAL_I2C_MspInit+0x88>)
 8000978:	f043 0302 	orr.w	r3, r3, #2
 800097c:	6313      	str	r3, [r2, #48]	@ 0x30
 800097e:	4b15      	ldr	r3, [pc, #84]	@ (80009d4 <HAL_I2C_MspInit+0x88>)
 8000980:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000982:	f003 0302 	and.w	r3, r3, #2
 8000986:	613b      	str	r3, [r7, #16]
 8000988:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800098a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800098e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000990:	2312      	movs	r3, #18
 8000992:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000994:	2300      	movs	r3, #0
 8000996:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000998:	2303      	movs	r3, #3
 800099a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800099c:	2304      	movs	r3, #4
 800099e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009a0:	f107 0314 	add.w	r3, r7, #20
 80009a4:	4619      	mov	r1, r3
 80009a6:	480c      	ldr	r0, [pc, #48]	@ (80009d8 <HAL_I2C_MspInit+0x8c>)
 80009a8:	f000 fa00 	bl	8000dac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80009ac:	2300      	movs	r3, #0
 80009ae:	60fb      	str	r3, [r7, #12]
 80009b0:	4b08      	ldr	r3, [pc, #32]	@ (80009d4 <HAL_I2C_MspInit+0x88>)
 80009b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009b4:	4a07      	ldr	r2, [pc, #28]	@ (80009d4 <HAL_I2C_MspInit+0x88>)
 80009b6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80009ba:	6413      	str	r3, [r2, #64]	@ 0x40
 80009bc:	4b05      	ldr	r3, [pc, #20]	@ (80009d4 <HAL_I2C_MspInit+0x88>)
 80009be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009c0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80009c4:	60fb      	str	r3, [r7, #12]
 80009c6:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80009c8:	bf00      	nop
 80009ca:	3728      	adds	r7, #40	@ 0x28
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bd80      	pop	{r7, pc}
 80009d0:	40005400 	.word	0x40005400
 80009d4:	40023800 	.word	0x40023800
 80009d8:	40020400 	.word	0x40020400

080009dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009dc:	b480      	push	{r7}
 80009de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009e0:	bf00      	nop
 80009e2:	e7fd      	b.n	80009e0 <NMI_Handler+0x4>

080009e4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009e4:	b480      	push	{r7}
 80009e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009e8:	bf00      	nop
 80009ea:	e7fd      	b.n	80009e8 <HardFault_Handler+0x4>

080009ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009ec:	b480      	push	{r7}
 80009ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009f0:	bf00      	nop
 80009f2:	e7fd      	b.n	80009f0 <MemManage_Handler+0x4>

080009f4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009f8:	bf00      	nop
 80009fa:	e7fd      	b.n	80009f8 <BusFault_Handler+0x4>

080009fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009fc:	b480      	push	{r7}
 80009fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a00:	bf00      	nop
 8000a02:	e7fd      	b.n	8000a00 <UsageFault_Handler+0x4>

08000a04 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a08:	bf00      	nop
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a10:	4770      	bx	lr

08000a12 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a12:	b480      	push	{r7}
 8000a14:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a16:	bf00      	nop
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1e:	4770      	bx	lr

08000a20 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a24:	bf00      	nop
 8000a26:	46bd      	mov	sp, r7
 8000a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2c:	4770      	bx	lr

08000a2e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a2e:	b580      	push	{r7, lr}
 8000a30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a32:	f000 f891 	bl	8000b58 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a36:	bf00      	nop
 8000a38:	bd80      	pop	{r7, pc}
	...

08000a3c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a40:	4b06      	ldr	r3, [pc, #24]	@ (8000a5c <SystemInit+0x20>)
 8000a42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a46:	4a05      	ldr	r2, [pc, #20]	@ (8000a5c <SystemInit+0x20>)
 8000a48:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000a4c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a50:	bf00      	nop
 8000a52:	46bd      	mov	sp, r7
 8000a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop
 8000a5c:	e000ed00 	.word	0xe000ed00

08000a60 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000a60:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000a98 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000a64:	f7ff ffea 	bl	8000a3c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a68:	480c      	ldr	r0, [pc, #48]	@ (8000a9c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000a6a:	490d      	ldr	r1, [pc, #52]	@ (8000aa0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000a6c:	4a0d      	ldr	r2, [pc, #52]	@ (8000aa4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000a6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a70:	e002      	b.n	8000a78 <LoopCopyDataInit>

08000a72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a76:	3304      	adds	r3, #4

08000a78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a7c:	d3f9      	bcc.n	8000a72 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a7e:	4a0a      	ldr	r2, [pc, #40]	@ (8000aa8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000a80:	4c0a      	ldr	r4, [pc, #40]	@ (8000aac <LoopFillZerobss+0x22>)
  movs r3, #0
 8000a82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a84:	e001      	b.n	8000a8a <LoopFillZerobss>

08000a86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a88:	3204      	adds	r2, #4

08000a8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a8c:	d3fb      	bcc.n	8000a86 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a8e:	f001 fc55 	bl	800233c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a92:	f7ff fdeb 	bl	800066c <main>
  bx  lr    
 8000a96:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000a98:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000a9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000aa0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000aa4:	080023e4 	.word	0x080023e4
  ldr r2, =_sbss
 8000aa8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000aac:	20000088 	.word	0x20000088

08000ab0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ab0:	e7fe      	b.n	8000ab0 <ADC_IRQHandler>
	...

08000ab4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ab8:	4b0e      	ldr	r3, [pc, #56]	@ (8000af4 <HAL_Init+0x40>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	4a0d      	ldr	r2, [pc, #52]	@ (8000af4 <HAL_Init+0x40>)
 8000abe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000ac2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ac4:	4b0b      	ldr	r3, [pc, #44]	@ (8000af4 <HAL_Init+0x40>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	4a0a      	ldr	r2, [pc, #40]	@ (8000af4 <HAL_Init+0x40>)
 8000aca:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000ace:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ad0:	4b08      	ldr	r3, [pc, #32]	@ (8000af4 <HAL_Init+0x40>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	4a07      	ldr	r2, [pc, #28]	@ (8000af4 <HAL_Init+0x40>)
 8000ad6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000ada:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000adc:	2003      	movs	r0, #3
 8000ade:	f000 f931 	bl	8000d44 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ae2:	2000      	movs	r0, #0
 8000ae4:	f000 f808 	bl	8000af8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ae8:	f7ff ff08 	bl	80008fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000aec:	2300      	movs	r3, #0
}
 8000aee:	4618      	mov	r0, r3
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	40023c00 	.word	0x40023c00

08000af8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b082      	sub	sp, #8
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b00:	4b12      	ldr	r3, [pc, #72]	@ (8000b4c <HAL_InitTick+0x54>)
 8000b02:	681a      	ldr	r2, [r3, #0]
 8000b04:	4b12      	ldr	r3, [pc, #72]	@ (8000b50 <HAL_InitTick+0x58>)
 8000b06:	781b      	ldrb	r3, [r3, #0]
 8000b08:	4619      	mov	r1, r3
 8000b0a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b0e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b12:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b16:	4618      	mov	r0, r3
 8000b18:	f000 f93b 	bl	8000d92 <HAL_SYSTICK_Config>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d001      	beq.n	8000b26 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b22:	2301      	movs	r3, #1
 8000b24:	e00e      	b.n	8000b44 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	2b0f      	cmp	r3, #15
 8000b2a:	d80a      	bhi.n	8000b42 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	6879      	ldr	r1, [r7, #4]
 8000b30:	f04f 30ff 	mov.w	r0, #4294967295
 8000b34:	f000 f911 	bl	8000d5a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b38:	4a06      	ldr	r2, [pc, #24]	@ (8000b54 <HAL_InitTick+0x5c>)
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	e000      	b.n	8000b44 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b42:	2301      	movs	r3, #1
}
 8000b44:	4618      	mov	r0, r3
 8000b46:	3708      	adds	r7, #8
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bd80      	pop	{r7, pc}
 8000b4c:	20000000 	.word	0x20000000
 8000b50:	20000008 	.word	0x20000008
 8000b54:	20000004 	.word	0x20000004

08000b58 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b5c:	4b06      	ldr	r3, [pc, #24]	@ (8000b78 <HAL_IncTick+0x20>)
 8000b5e:	781b      	ldrb	r3, [r3, #0]
 8000b60:	461a      	mov	r2, r3
 8000b62:	4b06      	ldr	r3, [pc, #24]	@ (8000b7c <HAL_IncTick+0x24>)
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	4413      	add	r3, r2
 8000b68:	4a04      	ldr	r2, [pc, #16]	@ (8000b7c <HAL_IncTick+0x24>)
 8000b6a:	6013      	str	r3, [r2, #0]
}
 8000b6c:	bf00      	nop
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b74:	4770      	bx	lr
 8000b76:	bf00      	nop
 8000b78:	20000008 	.word	0x20000008
 8000b7c:	20000084 	.word	0x20000084

08000b80 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
  return uwTick;
 8000b84:	4b03      	ldr	r3, [pc, #12]	@ (8000b94 <HAL_GetTick+0x14>)
 8000b86:	681b      	ldr	r3, [r3, #0]
}
 8000b88:	4618      	mov	r0, r3
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b90:	4770      	bx	lr
 8000b92:	bf00      	nop
 8000b94:	20000084 	.word	0x20000084

08000b98 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b084      	sub	sp, #16
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ba0:	f7ff ffee 	bl	8000b80 <HAL_GetTick>
 8000ba4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000baa:	68fb      	ldr	r3, [r7, #12]
 8000bac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000bb0:	d005      	beq.n	8000bbe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000bb2:	4b0a      	ldr	r3, [pc, #40]	@ (8000bdc <HAL_Delay+0x44>)
 8000bb4:	781b      	ldrb	r3, [r3, #0]
 8000bb6:	461a      	mov	r2, r3
 8000bb8:	68fb      	ldr	r3, [r7, #12]
 8000bba:	4413      	add	r3, r2
 8000bbc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000bbe:	bf00      	nop
 8000bc0:	f7ff ffde 	bl	8000b80 <HAL_GetTick>
 8000bc4:	4602      	mov	r2, r0
 8000bc6:	68bb      	ldr	r3, [r7, #8]
 8000bc8:	1ad3      	subs	r3, r2, r3
 8000bca:	68fa      	ldr	r2, [r7, #12]
 8000bcc:	429a      	cmp	r2, r3
 8000bce:	d8f7      	bhi.n	8000bc0 <HAL_Delay+0x28>
  {
  }
}
 8000bd0:	bf00      	nop
 8000bd2:	bf00      	nop
 8000bd4:	3710      	adds	r7, #16
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	20000008 	.word	0x20000008

08000be0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000be0:	b480      	push	{r7}
 8000be2:	b085      	sub	sp, #20
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	f003 0307 	and.w	r3, r3, #7
 8000bee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bf0:	4b0c      	ldr	r3, [pc, #48]	@ (8000c24 <__NVIC_SetPriorityGrouping+0x44>)
 8000bf2:	68db      	ldr	r3, [r3, #12]
 8000bf4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bf6:	68ba      	ldr	r2, [r7, #8]
 8000bf8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000bfc:	4013      	ands	r3, r2
 8000bfe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c04:	68bb      	ldr	r3, [r7, #8]
 8000c06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c08:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000c0c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c12:	4a04      	ldr	r2, [pc, #16]	@ (8000c24 <__NVIC_SetPriorityGrouping+0x44>)
 8000c14:	68bb      	ldr	r3, [r7, #8]
 8000c16:	60d3      	str	r3, [r2, #12]
}
 8000c18:	bf00      	nop
 8000c1a:	3714      	adds	r7, #20
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c22:	4770      	bx	lr
 8000c24:	e000ed00 	.word	0xe000ed00

08000c28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c2c:	4b04      	ldr	r3, [pc, #16]	@ (8000c40 <__NVIC_GetPriorityGrouping+0x18>)
 8000c2e:	68db      	ldr	r3, [r3, #12]
 8000c30:	0a1b      	lsrs	r3, r3, #8
 8000c32:	f003 0307 	and.w	r3, r3, #7
}
 8000c36:	4618      	mov	r0, r3
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3e:	4770      	bx	lr
 8000c40:	e000ed00 	.word	0xe000ed00

08000c44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c44:	b480      	push	{r7}
 8000c46:	b083      	sub	sp, #12
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	6039      	str	r1, [r7, #0]
 8000c4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	db0a      	blt.n	8000c6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c58:	683b      	ldr	r3, [r7, #0]
 8000c5a:	b2da      	uxtb	r2, r3
 8000c5c:	490c      	ldr	r1, [pc, #48]	@ (8000c90 <__NVIC_SetPriority+0x4c>)
 8000c5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c62:	0112      	lsls	r2, r2, #4
 8000c64:	b2d2      	uxtb	r2, r2
 8000c66:	440b      	add	r3, r1
 8000c68:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c6c:	e00a      	b.n	8000c84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c6e:	683b      	ldr	r3, [r7, #0]
 8000c70:	b2da      	uxtb	r2, r3
 8000c72:	4908      	ldr	r1, [pc, #32]	@ (8000c94 <__NVIC_SetPriority+0x50>)
 8000c74:	79fb      	ldrb	r3, [r7, #7]
 8000c76:	f003 030f 	and.w	r3, r3, #15
 8000c7a:	3b04      	subs	r3, #4
 8000c7c:	0112      	lsls	r2, r2, #4
 8000c7e:	b2d2      	uxtb	r2, r2
 8000c80:	440b      	add	r3, r1
 8000c82:	761a      	strb	r2, [r3, #24]
}
 8000c84:	bf00      	nop
 8000c86:	370c      	adds	r7, #12
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8e:	4770      	bx	lr
 8000c90:	e000e100 	.word	0xe000e100
 8000c94:	e000ed00 	.word	0xe000ed00

08000c98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	b089      	sub	sp, #36	@ 0x24
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	60f8      	str	r0, [r7, #12]
 8000ca0:	60b9      	str	r1, [r7, #8]
 8000ca2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	f003 0307 	and.w	r3, r3, #7
 8000caa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cac:	69fb      	ldr	r3, [r7, #28]
 8000cae:	f1c3 0307 	rsb	r3, r3, #7
 8000cb2:	2b04      	cmp	r3, #4
 8000cb4:	bf28      	it	cs
 8000cb6:	2304      	movcs	r3, #4
 8000cb8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cba:	69fb      	ldr	r3, [r7, #28]
 8000cbc:	3304      	adds	r3, #4
 8000cbe:	2b06      	cmp	r3, #6
 8000cc0:	d902      	bls.n	8000cc8 <NVIC_EncodePriority+0x30>
 8000cc2:	69fb      	ldr	r3, [r7, #28]
 8000cc4:	3b03      	subs	r3, #3
 8000cc6:	e000      	b.n	8000cca <NVIC_EncodePriority+0x32>
 8000cc8:	2300      	movs	r3, #0
 8000cca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ccc:	f04f 32ff 	mov.w	r2, #4294967295
 8000cd0:	69bb      	ldr	r3, [r7, #24]
 8000cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd6:	43da      	mvns	r2, r3
 8000cd8:	68bb      	ldr	r3, [r7, #8]
 8000cda:	401a      	ands	r2, r3
 8000cdc:	697b      	ldr	r3, [r7, #20]
 8000cde:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ce0:	f04f 31ff 	mov.w	r1, #4294967295
 8000ce4:	697b      	ldr	r3, [r7, #20]
 8000ce6:	fa01 f303 	lsl.w	r3, r1, r3
 8000cea:	43d9      	mvns	r1, r3
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cf0:	4313      	orrs	r3, r2
         );
}
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	3724      	adds	r7, #36	@ 0x24
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfc:	4770      	bx	lr
	...

08000d00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b082      	sub	sp, #8
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	3b01      	subs	r3, #1
 8000d0c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000d10:	d301      	bcc.n	8000d16 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d12:	2301      	movs	r3, #1
 8000d14:	e00f      	b.n	8000d36 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d16:	4a0a      	ldr	r2, [pc, #40]	@ (8000d40 <SysTick_Config+0x40>)
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	3b01      	subs	r3, #1
 8000d1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d1e:	210f      	movs	r1, #15
 8000d20:	f04f 30ff 	mov.w	r0, #4294967295
 8000d24:	f7ff ff8e 	bl	8000c44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d28:	4b05      	ldr	r3, [pc, #20]	@ (8000d40 <SysTick_Config+0x40>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d2e:	4b04      	ldr	r3, [pc, #16]	@ (8000d40 <SysTick_Config+0x40>)
 8000d30:	2207      	movs	r2, #7
 8000d32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d34:	2300      	movs	r3, #0
}
 8000d36:	4618      	mov	r0, r3
 8000d38:	3708      	adds	r7, #8
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	e000e010 	.word	0xe000e010

08000d44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b082      	sub	sp, #8
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d4c:	6878      	ldr	r0, [r7, #4]
 8000d4e:	f7ff ff47 	bl	8000be0 <__NVIC_SetPriorityGrouping>
}
 8000d52:	bf00      	nop
 8000d54:	3708      	adds	r7, #8
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}

08000d5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d5a:	b580      	push	{r7, lr}
 8000d5c:	b086      	sub	sp, #24
 8000d5e:	af00      	add	r7, sp, #0
 8000d60:	4603      	mov	r3, r0
 8000d62:	60b9      	str	r1, [r7, #8]
 8000d64:	607a      	str	r2, [r7, #4]
 8000d66:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d6c:	f7ff ff5c 	bl	8000c28 <__NVIC_GetPriorityGrouping>
 8000d70:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d72:	687a      	ldr	r2, [r7, #4]
 8000d74:	68b9      	ldr	r1, [r7, #8]
 8000d76:	6978      	ldr	r0, [r7, #20]
 8000d78:	f7ff ff8e 	bl	8000c98 <NVIC_EncodePriority>
 8000d7c:	4602      	mov	r2, r0
 8000d7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d82:	4611      	mov	r1, r2
 8000d84:	4618      	mov	r0, r3
 8000d86:	f7ff ff5d 	bl	8000c44 <__NVIC_SetPriority>
}
 8000d8a:	bf00      	nop
 8000d8c:	3718      	adds	r7, #24
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}

08000d92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d92:	b580      	push	{r7, lr}
 8000d94:	b082      	sub	sp, #8
 8000d96:	af00      	add	r7, sp, #0
 8000d98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d9a:	6878      	ldr	r0, [r7, #4]
 8000d9c:	f7ff ffb0 	bl	8000d00 <SysTick_Config>
 8000da0:	4603      	mov	r3, r0
}
 8000da2:	4618      	mov	r0, r3
 8000da4:	3708      	adds	r7, #8
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}
	...

08000dac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000dac:	b480      	push	{r7}
 8000dae:	b089      	sub	sp, #36	@ 0x24
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
 8000db4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000db6:	2300      	movs	r3, #0
 8000db8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	61fb      	str	r3, [r7, #28]
 8000dc6:	e159      	b.n	800107c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000dc8:	2201      	movs	r2, #1
 8000dca:	69fb      	ldr	r3, [r7, #28]
 8000dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	697a      	ldr	r2, [r7, #20]
 8000dd8:	4013      	ands	r3, r2
 8000dda:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000ddc:	693a      	ldr	r2, [r7, #16]
 8000dde:	697b      	ldr	r3, [r7, #20]
 8000de0:	429a      	cmp	r2, r3
 8000de2:	f040 8148 	bne.w	8001076 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000de6:	683b      	ldr	r3, [r7, #0]
 8000de8:	685b      	ldr	r3, [r3, #4]
 8000dea:	f003 0303 	and.w	r3, r3, #3
 8000dee:	2b01      	cmp	r3, #1
 8000df0:	d005      	beq.n	8000dfe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000df2:	683b      	ldr	r3, [r7, #0]
 8000df4:	685b      	ldr	r3, [r3, #4]
 8000df6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000dfa:	2b02      	cmp	r3, #2
 8000dfc:	d130      	bne.n	8000e60 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	689b      	ldr	r3, [r3, #8]
 8000e02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e04:	69fb      	ldr	r3, [r7, #28]
 8000e06:	005b      	lsls	r3, r3, #1
 8000e08:	2203      	movs	r2, #3
 8000e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e0e:	43db      	mvns	r3, r3
 8000e10:	69ba      	ldr	r2, [r7, #24]
 8000e12:	4013      	ands	r3, r2
 8000e14:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e16:	683b      	ldr	r3, [r7, #0]
 8000e18:	68da      	ldr	r2, [r3, #12]
 8000e1a:	69fb      	ldr	r3, [r7, #28]
 8000e1c:	005b      	lsls	r3, r3, #1
 8000e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e22:	69ba      	ldr	r2, [r7, #24]
 8000e24:	4313      	orrs	r3, r2
 8000e26:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	69ba      	ldr	r2, [r7, #24]
 8000e2c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	685b      	ldr	r3, [r3, #4]
 8000e32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e34:	2201      	movs	r2, #1
 8000e36:	69fb      	ldr	r3, [r7, #28]
 8000e38:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3c:	43db      	mvns	r3, r3
 8000e3e:	69ba      	ldr	r2, [r7, #24]
 8000e40:	4013      	ands	r3, r2
 8000e42:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e44:	683b      	ldr	r3, [r7, #0]
 8000e46:	685b      	ldr	r3, [r3, #4]
 8000e48:	091b      	lsrs	r3, r3, #4
 8000e4a:	f003 0201 	and.w	r2, r3, #1
 8000e4e:	69fb      	ldr	r3, [r7, #28]
 8000e50:	fa02 f303 	lsl.w	r3, r2, r3
 8000e54:	69ba      	ldr	r2, [r7, #24]
 8000e56:	4313      	orrs	r3, r2
 8000e58:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	69ba      	ldr	r2, [r7, #24]
 8000e5e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e60:	683b      	ldr	r3, [r7, #0]
 8000e62:	685b      	ldr	r3, [r3, #4]
 8000e64:	f003 0303 	and.w	r3, r3, #3
 8000e68:	2b03      	cmp	r3, #3
 8000e6a:	d017      	beq.n	8000e9c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	68db      	ldr	r3, [r3, #12]
 8000e70:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e72:	69fb      	ldr	r3, [r7, #28]
 8000e74:	005b      	lsls	r3, r3, #1
 8000e76:	2203      	movs	r2, #3
 8000e78:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7c:	43db      	mvns	r3, r3
 8000e7e:	69ba      	ldr	r2, [r7, #24]
 8000e80:	4013      	ands	r3, r2
 8000e82:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e84:	683b      	ldr	r3, [r7, #0]
 8000e86:	689a      	ldr	r2, [r3, #8]
 8000e88:	69fb      	ldr	r3, [r7, #28]
 8000e8a:	005b      	lsls	r3, r3, #1
 8000e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e90:	69ba      	ldr	r2, [r7, #24]
 8000e92:	4313      	orrs	r3, r2
 8000e94:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	69ba      	ldr	r2, [r7, #24]
 8000e9a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	685b      	ldr	r3, [r3, #4]
 8000ea0:	f003 0303 	and.w	r3, r3, #3
 8000ea4:	2b02      	cmp	r3, #2
 8000ea6:	d123      	bne.n	8000ef0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000ea8:	69fb      	ldr	r3, [r7, #28]
 8000eaa:	08da      	lsrs	r2, r3, #3
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	3208      	adds	r2, #8
 8000eb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000eb4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000eb6:	69fb      	ldr	r3, [r7, #28]
 8000eb8:	f003 0307 	and.w	r3, r3, #7
 8000ebc:	009b      	lsls	r3, r3, #2
 8000ebe:	220f      	movs	r2, #15
 8000ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec4:	43db      	mvns	r3, r3
 8000ec6:	69ba      	ldr	r2, [r7, #24]
 8000ec8:	4013      	ands	r3, r2
 8000eca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	691a      	ldr	r2, [r3, #16]
 8000ed0:	69fb      	ldr	r3, [r7, #28]
 8000ed2:	f003 0307 	and.w	r3, r3, #7
 8000ed6:	009b      	lsls	r3, r3, #2
 8000ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8000edc:	69ba      	ldr	r2, [r7, #24]
 8000ede:	4313      	orrs	r3, r2
 8000ee0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000ee2:	69fb      	ldr	r3, [r7, #28]
 8000ee4:	08da      	lsrs	r2, r3, #3
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	3208      	adds	r2, #8
 8000eea:	69b9      	ldr	r1, [r7, #24]
 8000eec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000ef6:	69fb      	ldr	r3, [r7, #28]
 8000ef8:	005b      	lsls	r3, r3, #1
 8000efa:	2203      	movs	r2, #3
 8000efc:	fa02 f303 	lsl.w	r3, r2, r3
 8000f00:	43db      	mvns	r3, r3
 8000f02:	69ba      	ldr	r2, [r7, #24]
 8000f04:	4013      	ands	r3, r2
 8000f06:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	685b      	ldr	r3, [r3, #4]
 8000f0c:	f003 0203 	and.w	r2, r3, #3
 8000f10:	69fb      	ldr	r3, [r7, #28]
 8000f12:	005b      	lsls	r3, r3, #1
 8000f14:	fa02 f303 	lsl.w	r3, r2, r3
 8000f18:	69ba      	ldr	r2, [r7, #24]
 8000f1a:	4313      	orrs	r3, r2
 8000f1c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	69ba      	ldr	r2, [r7, #24]
 8000f22:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	685b      	ldr	r3, [r3, #4]
 8000f28:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	f000 80a2 	beq.w	8001076 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f32:	2300      	movs	r3, #0
 8000f34:	60fb      	str	r3, [r7, #12]
 8000f36:	4b57      	ldr	r3, [pc, #348]	@ (8001094 <HAL_GPIO_Init+0x2e8>)
 8000f38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f3a:	4a56      	ldr	r2, [pc, #344]	@ (8001094 <HAL_GPIO_Init+0x2e8>)
 8000f3c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f40:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f42:	4b54      	ldr	r3, [pc, #336]	@ (8001094 <HAL_GPIO_Init+0x2e8>)
 8000f44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f46:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f4a:	60fb      	str	r3, [r7, #12]
 8000f4c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f4e:	4a52      	ldr	r2, [pc, #328]	@ (8001098 <HAL_GPIO_Init+0x2ec>)
 8000f50:	69fb      	ldr	r3, [r7, #28]
 8000f52:	089b      	lsrs	r3, r3, #2
 8000f54:	3302      	adds	r3, #2
 8000f56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f5c:	69fb      	ldr	r3, [r7, #28]
 8000f5e:	f003 0303 	and.w	r3, r3, #3
 8000f62:	009b      	lsls	r3, r3, #2
 8000f64:	220f      	movs	r2, #15
 8000f66:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6a:	43db      	mvns	r3, r3
 8000f6c:	69ba      	ldr	r2, [r7, #24]
 8000f6e:	4013      	ands	r3, r2
 8000f70:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	4a49      	ldr	r2, [pc, #292]	@ (800109c <HAL_GPIO_Init+0x2f0>)
 8000f76:	4293      	cmp	r3, r2
 8000f78:	d019      	beq.n	8000fae <HAL_GPIO_Init+0x202>
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	4a48      	ldr	r2, [pc, #288]	@ (80010a0 <HAL_GPIO_Init+0x2f4>)
 8000f7e:	4293      	cmp	r3, r2
 8000f80:	d013      	beq.n	8000faa <HAL_GPIO_Init+0x1fe>
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	4a47      	ldr	r2, [pc, #284]	@ (80010a4 <HAL_GPIO_Init+0x2f8>)
 8000f86:	4293      	cmp	r3, r2
 8000f88:	d00d      	beq.n	8000fa6 <HAL_GPIO_Init+0x1fa>
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	4a46      	ldr	r2, [pc, #280]	@ (80010a8 <HAL_GPIO_Init+0x2fc>)
 8000f8e:	4293      	cmp	r3, r2
 8000f90:	d007      	beq.n	8000fa2 <HAL_GPIO_Init+0x1f6>
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	4a45      	ldr	r2, [pc, #276]	@ (80010ac <HAL_GPIO_Init+0x300>)
 8000f96:	4293      	cmp	r3, r2
 8000f98:	d101      	bne.n	8000f9e <HAL_GPIO_Init+0x1f2>
 8000f9a:	2304      	movs	r3, #4
 8000f9c:	e008      	b.n	8000fb0 <HAL_GPIO_Init+0x204>
 8000f9e:	2307      	movs	r3, #7
 8000fa0:	e006      	b.n	8000fb0 <HAL_GPIO_Init+0x204>
 8000fa2:	2303      	movs	r3, #3
 8000fa4:	e004      	b.n	8000fb0 <HAL_GPIO_Init+0x204>
 8000fa6:	2302      	movs	r3, #2
 8000fa8:	e002      	b.n	8000fb0 <HAL_GPIO_Init+0x204>
 8000faa:	2301      	movs	r3, #1
 8000fac:	e000      	b.n	8000fb0 <HAL_GPIO_Init+0x204>
 8000fae:	2300      	movs	r3, #0
 8000fb0:	69fa      	ldr	r2, [r7, #28]
 8000fb2:	f002 0203 	and.w	r2, r2, #3
 8000fb6:	0092      	lsls	r2, r2, #2
 8000fb8:	4093      	lsls	r3, r2
 8000fba:	69ba      	ldr	r2, [r7, #24]
 8000fbc:	4313      	orrs	r3, r2
 8000fbe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000fc0:	4935      	ldr	r1, [pc, #212]	@ (8001098 <HAL_GPIO_Init+0x2ec>)
 8000fc2:	69fb      	ldr	r3, [r7, #28]
 8000fc4:	089b      	lsrs	r3, r3, #2
 8000fc6:	3302      	adds	r3, #2
 8000fc8:	69ba      	ldr	r2, [r7, #24]
 8000fca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000fce:	4b38      	ldr	r3, [pc, #224]	@ (80010b0 <HAL_GPIO_Init+0x304>)
 8000fd0:	689b      	ldr	r3, [r3, #8]
 8000fd2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fd4:	693b      	ldr	r3, [r7, #16]
 8000fd6:	43db      	mvns	r3, r3
 8000fd8:	69ba      	ldr	r2, [r7, #24]
 8000fda:	4013      	ands	r3, r2
 8000fdc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	685b      	ldr	r3, [r3, #4]
 8000fe2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d003      	beq.n	8000ff2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000fea:	69ba      	ldr	r2, [r7, #24]
 8000fec:	693b      	ldr	r3, [r7, #16]
 8000fee:	4313      	orrs	r3, r2
 8000ff0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000ff2:	4a2f      	ldr	r2, [pc, #188]	@ (80010b0 <HAL_GPIO_Init+0x304>)
 8000ff4:	69bb      	ldr	r3, [r7, #24]
 8000ff6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000ff8:	4b2d      	ldr	r3, [pc, #180]	@ (80010b0 <HAL_GPIO_Init+0x304>)
 8000ffa:	68db      	ldr	r3, [r3, #12]
 8000ffc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ffe:	693b      	ldr	r3, [r7, #16]
 8001000:	43db      	mvns	r3, r3
 8001002:	69ba      	ldr	r2, [r7, #24]
 8001004:	4013      	ands	r3, r2
 8001006:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	685b      	ldr	r3, [r3, #4]
 800100c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001010:	2b00      	cmp	r3, #0
 8001012:	d003      	beq.n	800101c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001014:	69ba      	ldr	r2, [r7, #24]
 8001016:	693b      	ldr	r3, [r7, #16]
 8001018:	4313      	orrs	r3, r2
 800101a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800101c:	4a24      	ldr	r2, [pc, #144]	@ (80010b0 <HAL_GPIO_Init+0x304>)
 800101e:	69bb      	ldr	r3, [r7, #24]
 8001020:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001022:	4b23      	ldr	r3, [pc, #140]	@ (80010b0 <HAL_GPIO_Init+0x304>)
 8001024:	685b      	ldr	r3, [r3, #4]
 8001026:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001028:	693b      	ldr	r3, [r7, #16]
 800102a:	43db      	mvns	r3, r3
 800102c:	69ba      	ldr	r2, [r7, #24]
 800102e:	4013      	ands	r3, r2
 8001030:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	685b      	ldr	r3, [r3, #4]
 8001036:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800103a:	2b00      	cmp	r3, #0
 800103c:	d003      	beq.n	8001046 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800103e:	69ba      	ldr	r2, [r7, #24]
 8001040:	693b      	ldr	r3, [r7, #16]
 8001042:	4313      	orrs	r3, r2
 8001044:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001046:	4a1a      	ldr	r2, [pc, #104]	@ (80010b0 <HAL_GPIO_Init+0x304>)
 8001048:	69bb      	ldr	r3, [r7, #24]
 800104a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800104c:	4b18      	ldr	r3, [pc, #96]	@ (80010b0 <HAL_GPIO_Init+0x304>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001052:	693b      	ldr	r3, [r7, #16]
 8001054:	43db      	mvns	r3, r3
 8001056:	69ba      	ldr	r2, [r7, #24]
 8001058:	4013      	ands	r3, r2
 800105a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	685b      	ldr	r3, [r3, #4]
 8001060:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001064:	2b00      	cmp	r3, #0
 8001066:	d003      	beq.n	8001070 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001068:	69ba      	ldr	r2, [r7, #24]
 800106a:	693b      	ldr	r3, [r7, #16]
 800106c:	4313      	orrs	r3, r2
 800106e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001070:	4a0f      	ldr	r2, [pc, #60]	@ (80010b0 <HAL_GPIO_Init+0x304>)
 8001072:	69bb      	ldr	r3, [r7, #24]
 8001074:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001076:	69fb      	ldr	r3, [r7, #28]
 8001078:	3301      	adds	r3, #1
 800107a:	61fb      	str	r3, [r7, #28]
 800107c:	69fb      	ldr	r3, [r7, #28]
 800107e:	2b0f      	cmp	r3, #15
 8001080:	f67f aea2 	bls.w	8000dc8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001084:	bf00      	nop
 8001086:	bf00      	nop
 8001088:	3724      	adds	r7, #36	@ 0x24
 800108a:	46bd      	mov	sp, r7
 800108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop
 8001094:	40023800 	.word	0x40023800
 8001098:	40013800 	.word	0x40013800
 800109c:	40020000 	.word	0x40020000
 80010a0:	40020400 	.word	0x40020400
 80010a4:	40020800 	.word	0x40020800
 80010a8:	40020c00 	.word	0x40020c00
 80010ac:	40021000 	.word	0x40021000
 80010b0:	40013c00 	.word	0x40013c00

080010b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010b4:	b480      	push	{r7}
 80010b6:	b083      	sub	sp, #12
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
 80010bc:	460b      	mov	r3, r1
 80010be:	807b      	strh	r3, [r7, #2]
 80010c0:	4613      	mov	r3, r2
 80010c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80010c4:	787b      	ldrb	r3, [r7, #1]
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d003      	beq.n	80010d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80010ca:	887a      	ldrh	r2, [r7, #2]
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80010d0:	e003      	b.n	80010da <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80010d2:	887b      	ldrh	r3, [r7, #2]
 80010d4:	041a      	lsls	r2, r3, #16
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	619a      	str	r2, [r3, #24]
}
 80010da:	bf00      	nop
 80010dc:	370c      	adds	r7, #12
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr
	...

080010e8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b084      	sub	sp, #16
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d101      	bne.n	80010fa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80010f6:	2301      	movs	r3, #1
 80010f8:	e12b      	b.n	8001352 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001100:	b2db      	uxtb	r3, r3
 8001102:	2b00      	cmp	r3, #0
 8001104:	d106      	bne.n	8001114 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	2200      	movs	r2, #0
 800110a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800110e:	6878      	ldr	r0, [r7, #4]
 8001110:	f7ff fc1c 	bl	800094c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	2224      	movs	r2, #36	@ 0x24
 8001118:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	681a      	ldr	r2, [r3, #0]
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	f022 0201 	bic.w	r2, r2, #1
 800112a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	681a      	ldr	r2, [r3, #0]
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800113a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	681a      	ldr	r2, [r3, #0]
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800114a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800114c:	f001 f8da 	bl	8002304 <HAL_RCC_GetPCLK1Freq>
 8001150:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	685b      	ldr	r3, [r3, #4]
 8001156:	4a81      	ldr	r2, [pc, #516]	@ (800135c <HAL_I2C_Init+0x274>)
 8001158:	4293      	cmp	r3, r2
 800115a:	d807      	bhi.n	800116c <HAL_I2C_Init+0x84>
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	4a80      	ldr	r2, [pc, #512]	@ (8001360 <HAL_I2C_Init+0x278>)
 8001160:	4293      	cmp	r3, r2
 8001162:	bf94      	ite	ls
 8001164:	2301      	movls	r3, #1
 8001166:	2300      	movhi	r3, #0
 8001168:	b2db      	uxtb	r3, r3
 800116a:	e006      	b.n	800117a <HAL_I2C_Init+0x92>
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	4a7d      	ldr	r2, [pc, #500]	@ (8001364 <HAL_I2C_Init+0x27c>)
 8001170:	4293      	cmp	r3, r2
 8001172:	bf94      	ite	ls
 8001174:	2301      	movls	r3, #1
 8001176:	2300      	movhi	r3, #0
 8001178:	b2db      	uxtb	r3, r3
 800117a:	2b00      	cmp	r3, #0
 800117c:	d001      	beq.n	8001182 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800117e:	2301      	movs	r3, #1
 8001180:	e0e7      	b.n	8001352 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	4a78      	ldr	r2, [pc, #480]	@ (8001368 <HAL_I2C_Init+0x280>)
 8001186:	fba2 2303 	umull	r2, r3, r2, r3
 800118a:	0c9b      	lsrs	r3, r3, #18
 800118c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	685b      	ldr	r3, [r3, #4]
 8001194:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	68ba      	ldr	r2, [r7, #8]
 800119e:	430a      	orrs	r2, r1
 80011a0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	6a1b      	ldr	r3, [r3, #32]
 80011a8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	685b      	ldr	r3, [r3, #4]
 80011b0:	4a6a      	ldr	r2, [pc, #424]	@ (800135c <HAL_I2C_Init+0x274>)
 80011b2:	4293      	cmp	r3, r2
 80011b4:	d802      	bhi.n	80011bc <HAL_I2C_Init+0xd4>
 80011b6:	68bb      	ldr	r3, [r7, #8]
 80011b8:	3301      	adds	r3, #1
 80011ba:	e009      	b.n	80011d0 <HAL_I2C_Init+0xe8>
 80011bc:	68bb      	ldr	r3, [r7, #8]
 80011be:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80011c2:	fb02 f303 	mul.w	r3, r2, r3
 80011c6:	4a69      	ldr	r2, [pc, #420]	@ (800136c <HAL_I2C_Init+0x284>)
 80011c8:	fba2 2303 	umull	r2, r3, r2, r3
 80011cc:	099b      	lsrs	r3, r3, #6
 80011ce:	3301      	adds	r3, #1
 80011d0:	687a      	ldr	r2, [r7, #4]
 80011d2:	6812      	ldr	r2, [r2, #0]
 80011d4:	430b      	orrs	r3, r1
 80011d6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	69db      	ldr	r3, [r3, #28]
 80011de:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80011e2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	685b      	ldr	r3, [r3, #4]
 80011ea:	495c      	ldr	r1, [pc, #368]	@ (800135c <HAL_I2C_Init+0x274>)
 80011ec:	428b      	cmp	r3, r1
 80011ee:	d819      	bhi.n	8001224 <HAL_I2C_Init+0x13c>
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	1e59      	subs	r1, r3, #1
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	685b      	ldr	r3, [r3, #4]
 80011f8:	005b      	lsls	r3, r3, #1
 80011fa:	fbb1 f3f3 	udiv	r3, r1, r3
 80011fe:	1c59      	adds	r1, r3, #1
 8001200:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001204:	400b      	ands	r3, r1
 8001206:	2b00      	cmp	r3, #0
 8001208:	d00a      	beq.n	8001220 <HAL_I2C_Init+0x138>
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	1e59      	subs	r1, r3, #1
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	685b      	ldr	r3, [r3, #4]
 8001212:	005b      	lsls	r3, r3, #1
 8001214:	fbb1 f3f3 	udiv	r3, r1, r3
 8001218:	3301      	adds	r3, #1
 800121a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800121e:	e051      	b.n	80012c4 <HAL_I2C_Init+0x1dc>
 8001220:	2304      	movs	r3, #4
 8001222:	e04f      	b.n	80012c4 <HAL_I2C_Init+0x1dc>
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	689b      	ldr	r3, [r3, #8]
 8001228:	2b00      	cmp	r3, #0
 800122a:	d111      	bne.n	8001250 <HAL_I2C_Init+0x168>
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	1e58      	subs	r0, r3, #1
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	6859      	ldr	r1, [r3, #4]
 8001234:	460b      	mov	r3, r1
 8001236:	005b      	lsls	r3, r3, #1
 8001238:	440b      	add	r3, r1
 800123a:	fbb0 f3f3 	udiv	r3, r0, r3
 800123e:	3301      	adds	r3, #1
 8001240:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001244:	2b00      	cmp	r3, #0
 8001246:	bf0c      	ite	eq
 8001248:	2301      	moveq	r3, #1
 800124a:	2300      	movne	r3, #0
 800124c:	b2db      	uxtb	r3, r3
 800124e:	e012      	b.n	8001276 <HAL_I2C_Init+0x18e>
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	1e58      	subs	r0, r3, #1
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	6859      	ldr	r1, [r3, #4]
 8001258:	460b      	mov	r3, r1
 800125a:	009b      	lsls	r3, r3, #2
 800125c:	440b      	add	r3, r1
 800125e:	0099      	lsls	r1, r3, #2
 8001260:	440b      	add	r3, r1
 8001262:	fbb0 f3f3 	udiv	r3, r0, r3
 8001266:	3301      	adds	r3, #1
 8001268:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800126c:	2b00      	cmp	r3, #0
 800126e:	bf0c      	ite	eq
 8001270:	2301      	moveq	r3, #1
 8001272:	2300      	movne	r3, #0
 8001274:	b2db      	uxtb	r3, r3
 8001276:	2b00      	cmp	r3, #0
 8001278:	d001      	beq.n	800127e <HAL_I2C_Init+0x196>
 800127a:	2301      	movs	r3, #1
 800127c:	e022      	b.n	80012c4 <HAL_I2C_Init+0x1dc>
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	689b      	ldr	r3, [r3, #8]
 8001282:	2b00      	cmp	r3, #0
 8001284:	d10e      	bne.n	80012a4 <HAL_I2C_Init+0x1bc>
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	1e58      	subs	r0, r3, #1
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	6859      	ldr	r1, [r3, #4]
 800128e:	460b      	mov	r3, r1
 8001290:	005b      	lsls	r3, r3, #1
 8001292:	440b      	add	r3, r1
 8001294:	fbb0 f3f3 	udiv	r3, r0, r3
 8001298:	3301      	adds	r3, #1
 800129a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800129e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80012a2:	e00f      	b.n	80012c4 <HAL_I2C_Init+0x1dc>
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	1e58      	subs	r0, r3, #1
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	6859      	ldr	r1, [r3, #4]
 80012ac:	460b      	mov	r3, r1
 80012ae:	009b      	lsls	r3, r3, #2
 80012b0:	440b      	add	r3, r1
 80012b2:	0099      	lsls	r1, r3, #2
 80012b4:	440b      	add	r3, r1
 80012b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80012ba:	3301      	adds	r3, #1
 80012bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80012c0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80012c4:	6879      	ldr	r1, [r7, #4]
 80012c6:	6809      	ldr	r1, [r1, #0]
 80012c8:	4313      	orrs	r3, r2
 80012ca:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	69da      	ldr	r2, [r3, #28]
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	6a1b      	ldr	r3, [r3, #32]
 80012de:	431a      	orrs	r2, r3
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	430a      	orrs	r2, r1
 80012e6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	689b      	ldr	r3, [r3, #8]
 80012ee:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80012f2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80012f6:	687a      	ldr	r2, [r7, #4]
 80012f8:	6911      	ldr	r1, [r2, #16]
 80012fa:	687a      	ldr	r2, [r7, #4]
 80012fc:	68d2      	ldr	r2, [r2, #12]
 80012fe:	4311      	orrs	r1, r2
 8001300:	687a      	ldr	r2, [r7, #4]
 8001302:	6812      	ldr	r2, [r2, #0]
 8001304:	430b      	orrs	r3, r1
 8001306:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	68db      	ldr	r3, [r3, #12]
 800130e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	695a      	ldr	r2, [r3, #20]
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	699b      	ldr	r3, [r3, #24]
 800131a:	431a      	orrs	r2, r3
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	430a      	orrs	r2, r1
 8001322:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	681a      	ldr	r2, [r3, #0]
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f042 0201 	orr.w	r2, r2, #1
 8001332:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	2200      	movs	r2, #0
 8001338:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	2220      	movs	r2, #32
 800133e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	2200      	movs	r2, #0
 8001346:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	2200      	movs	r2, #0
 800134c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001350:	2300      	movs	r3, #0
}
 8001352:	4618      	mov	r0, r3
 8001354:	3710      	adds	r7, #16
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	000186a0 	.word	0x000186a0
 8001360:	001e847f 	.word	0x001e847f
 8001364:	003d08ff 	.word	0x003d08ff
 8001368:	431bde83 	.word	0x431bde83
 800136c:	10624dd3 	.word	0x10624dd3

08001370 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b088      	sub	sp, #32
 8001374:	af02      	add	r7, sp, #8
 8001376:	60f8      	str	r0, [r7, #12]
 8001378:	607a      	str	r2, [r7, #4]
 800137a:	461a      	mov	r2, r3
 800137c:	460b      	mov	r3, r1
 800137e:	817b      	strh	r3, [r7, #10]
 8001380:	4613      	mov	r3, r2
 8001382:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001384:	f7ff fbfc 	bl	8000b80 <HAL_GetTick>
 8001388:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001390:	b2db      	uxtb	r3, r3
 8001392:	2b20      	cmp	r3, #32
 8001394:	f040 80e0 	bne.w	8001558 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001398:	697b      	ldr	r3, [r7, #20]
 800139a:	9300      	str	r3, [sp, #0]
 800139c:	2319      	movs	r3, #25
 800139e:	2201      	movs	r2, #1
 80013a0:	4970      	ldr	r1, [pc, #448]	@ (8001564 <HAL_I2C_Master_Transmit+0x1f4>)
 80013a2:	68f8      	ldr	r0, [r7, #12]
 80013a4:	f000 f964 	bl	8001670 <I2C_WaitOnFlagUntilTimeout>
 80013a8:	4603      	mov	r3, r0
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d001      	beq.n	80013b2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80013ae:	2302      	movs	r3, #2
 80013b0:	e0d3      	b.n	800155a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80013b8:	2b01      	cmp	r3, #1
 80013ba:	d101      	bne.n	80013c0 <HAL_I2C_Master_Transmit+0x50>
 80013bc:	2302      	movs	r3, #2
 80013be:	e0cc      	b.n	800155a <HAL_I2C_Master_Transmit+0x1ea>
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	2201      	movs	r2, #1
 80013c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f003 0301 	and.w	r3, r3, #1
 80013d2:	2b01      	cmp	r3, #1
 80013d4:	d007      	beq.n	80013e6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	681a      	ldr	r2, [r3, #0]
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f042 0201 	orr.w	r2, r2, #1
 80013e4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	681a      	ldr	r2, [r3, #0]
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80013f4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	2221      	movs	r2, #33	@ 0x21
 80013fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	2210      	movs	r2, #16
 8001402:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	2200      	movs	r2, #0
 800140a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	687a      	ldr	r2, [r7, #4]
 8001410:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	893a      	ldrh	r2, [r7, #8]
 8001416:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800141c:	b29a      	uxth	r2, r3
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	4a50      	ldr	r2, [pc, #320]	@ (8001568 <HAL_I2C_Master_Transmit+0x1f8>)
 8001426:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001428:	8979      	ldrh	r1, [r7, #10]
 800142a:	697b      	ldr	r3, [r7, #20]
 800142c:	6a3a      	ldr	r2, [r7, #32]
 800142e:	68f8      	ldr	r0, [r7, #12]
 8001430:	f000 f89c 	bl	800156c <I2C_MasterRequestWrite>
 8001434:	4603      	mov	r3, r0
 8001436:	2b00      	cmp	r3, #0
 8001438:	d001      	beq.n	800143e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800143a:	2301      	movs	r3, #1
 800143c:	e08d      	b.n	800155a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800143e:	2300      	movs	r3, #0
 8001440:	613b      	str	r3, [r7, #16]
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	695b      	ldr	r3, [r3, #20]
 8001448:	613b      	str	r3, [r7, #16]
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	699b      	ldr	r3, [r3, #24]
 8001450:	613b      	str	r3, [r7, #16]
 8001452:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001454:	e066      	b.n	8001524 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001456:	697a      	ldr	r2, [r7, #20]
 8001458:	6a39      	ldr	r1, [r7, #32]
 800145a:	68f8      	ldr	r0, [r7, #12]
 800145c:	f000 fa22 	bl	80018a4 <I2C_WaitOnTXEFlagUntilTimeout>
 8001460:	4603      	mov	r3, r0
 8001462:	2b00      	cmp	r3, #0
 8001464:	d00d      	beq.n	8001482 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800146a:	2b04      	cmp	r3, #4
 800146c:	d107      	bne.n	800147e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	681a      	ldr	r2, [r3, #0]
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800147c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800147e:	2301      	movs	r3, #1
 8001480:	e06b      	b.n	800155a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001486:	781a      	ldrb	r2, [r3, #0]
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001492:	1c5a      	adds	r2, r3, #1
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800149c:	b29b      	uxth	r3, r3
 800149e:	3b01      	subs	r3, #1
 80014a0:	b29a      	uxth	r2, r3
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80014aa:	3b01      	subs	r3, #1
 80014ac:	b29a      	uxth	r2, r3
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	695b      	ldr	r3, [r3, #20]
 80014b8:	f003 0304 	and.w	r3, r3, #4
 80014bc:	2b04      	cmp	r3, #4
 80014be:	d11b      	bne.n	80014f8 <HAL_I2C_Master_Transmit+0x188>
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d017      	beq.n	80014f8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014cc:	781a      	ldrb	r2, [r3, #0]
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014d8:	1c5a      	adds	r2, r3, #1
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80014e2:	b29b      	uxth	r3, r3
 80014e4:	3b01      	subs	r3, #1
 80014e6:	b29a      	uxth	r2, r3
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80014f0:	3b01      	subs	r3, #1
 80014f2:	b29a      	uxth	r2, r3
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80014f8:	697a      	ldr	r2, [r7, #20]
 80014fa:	6a39      	ldr	r1, [r7, #32]
 80014fc:	68f8      	ldr	r0, [r7, #12]
 80014fe:	f000 fa19 	bl	8001934 <I2C_WaitOnBTFFlagUntilTimeout>
 8001502:	4603      	mov	r3, r0
 8001504:	2b00      	cmp	r3, #0
 8001506:	d00d      	beq.n	8001524 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800150c:	2b04      	cmp	r3, #4
 800150e:	d107      	bne.n	8001520 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	681a      	ldr	r2, [r3, #0]
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800151e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001520:	2301      	movs	r3, #1
 8001522:	e01a      	b.n	800155a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001528:	2b00      	cmp	r3, #0
 800152a:	d194      	bne.n	8001456 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	681a      	ldr	r2, [r3, #0]
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800153a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	2220      	movs	r2, #32
 8001540:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	2200      	movs	r2, #0
 8001548:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	2200      	movs	r2, #0
 8001550:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001554:	2300      	movs	r3, #0
 8001556:	e000      	b.n	800155a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001558:	2302      	movs	r3, #2
  }
}
 800155a:	4618      	mov	r0, r3
 800155c:	3718      	adds	r7, #24
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	00100002 	.word	0x00100002
 8001568:	ffff0000 	.word	0xffff0000

0800156c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b088      	sub	sp, #32
 8001570:	af02      	add	r7, sp, #8
 8001572:	60f8      	str	r0, [r7, #12]
 8001574:	607a      	str	r2, [r7, #4]
 8001576:	603b      	str	r3, [r7, #0]
 8001578:	460b      	mov	r3, r1
 800157a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001580:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001582:	697b      	ldr	r3, [r7, #20]
 8001584:	2b08      	cmp	r3, #8
 8001586:	d006      	beq.n	8001596 <I2C_MasterRequestWrite+0x2a>
 8001588:	697b      	ldr	r3, [r7, #20]
 800158a:	2b01      	cmp	r3, #1
 800158c:	d003      	beq.n	8001596 <I2C_MasterRequestWrite+0x2a>
 800158e:	697b      	ldr	r3, [r7, #20]
 8001590:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001594:	d108      	bne.n	80015a8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	681a      	ldr	r2, [r3, #0]
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80015a4:	601a      	str	r2, [r3, #0]
 80015a6:	e00b      	b.n	80015c0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ac:	2b12      	cmp	r3, #18
 80015ae:	d107      	bne.n	80015c0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	681a      	ldr	r2, [r3, #0]
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80015be:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	9300      	str	r3, [sp, #0]
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	2200      	movs	r2, #0
 80015c8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80015cc:	68f8      	ldr	r0, [r7, #12]
 80015ce:	f000 f84f 	bl	8001670 <I2C_WaitOnFlagUntilTimeout>
 80015d2:	4603      	mov	r3, r0
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d00d      	beq.n	80015f4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80015e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80015e6:	d103      	bne.n	80015f0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80015ee:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80015f0:	2303      	movs	r3, #3
 80015f2:	e035      	b.n	8001660 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	691b      	ldr	r3, [r3, #16]
 80015f8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80015fc:	d108      	bne.n	8001610 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80015fe:	897b      	ldrh	r3, [r7, #10]
 8001600:	b2db      	uxtb	r3, r3
 8001602:	461a      	mov	r2, r3
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800160c:	611a      	str	r2, [r3, #16]
 800160e:	e01b      	b.n	8001648 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001610:	897b      	ldrh	r3, [r7, #10]
 8001612:	11db      	asrs	r3, r3, #7
 8001614:	b2db      	uxtb	r3, r3
 8001616:	f003 0306 	and.w	r3, r3, #6
 800161a:	b2db      	uxtb	r3, r3
 800161c:	f063 030f 	orn	r3, r3, #15
 8001620:	b2da      	uxtb	r2, r3
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	687a      	ldr	r2, [r7, #4]
 800162c:	490e      	ldr	r1, [pc, #56]	@ (8001668 <I2C_MasterRequestWrite+0xfc>)
 800162e:	68f8      	ldr	r0, [r7, #12]
 8001630:	f000 f898 	bl	8001764 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001634:	4603      	mov	r3, r0
 8001636:	2b00      	cmp	r3, #0
 8001638:	d001      	beq.n	800163e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800163a:	2301      	movs	r3, #1
 800163c:	e010      	b.n	8001660 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800163e:	897b      	ldrh	r3, [r7, #10]
 8001640:	b2da      	uxtb	r2, r3
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	687a      	ldr	r2, [r7, #4]
 800164c:	4907      	ldr	r1, [pc, #28]	@ (800166c <I2C_MasterRequestWrite+0x100>)
 800164e:	68f8      	ldr	r0, [r7, #12]
 8001650:	f000 f888 	bl	8001764 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001654:	4603      	mov	r3, r0
 8001656:	2b00      	cmp	r3, #0
 8001658:	d001      	beq.n	800165e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800165a:	2301      	movs	r3, #1
 800165c:	e000      	b.n	8001660 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800165e:	2300      	movs	r3, #0
}
 8001660:	4618      	mov	r0, r3
 8001662:	3718      	adds	r7, #24
 8001664:	46bd      	mov	sp, r7
 8001666:	bd80      	pop	{r7, pc}
 8001668:	00010008 	.word	0x00010008
 800166c:	00010002 	.word	0x00010002

08001670 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b084      	sub	sp, #16
 8001674:	af00      	add	r7, sp, #0
 8001676:	60f8      	str	r0, [r7, #12]
 8001678:	60b9      	str	r1, [r7, #8]
 800167a:	603b      	str	r3, [r7, #0]
 800167c:	4613      	mov	r3, r2
 800167e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001680:	e048      	b.n	8001714 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001688:	d044      	beq.n	8001714 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800168a:	f7ff fa79 	bl	8000b80 <HAL_GetTick>
 800168e:	4602      	mov	r2, r0
 8001690:	69bb      	ldr	r3, [r7, #24]
 8001692:	1ad3      	subs	r3, r2, r3
 8001694:	683a      	ldr	r2, [r7, #0]
 8001696:	429a      	cmp	r2, r3
 8001698:	d302      	bcc.n	80016a0 <I2C_WaitOnFlagUntilTimeout+0x30>
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	2b00      	cmp	r3, #0
 800169e:	d139      	bne.n	8001714 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80016a0:	68bb      	ldr	r3, [r7, #8]
 80016a2:	0c1b      	lsrs	r3, r3, #16
 80016a4:	b2db      	uxtb	r3, r3
 80016a6:	2b01      	cmp	r3, #1
 80016a8:	d10d      	bne.n	80016c6 <I2C_WaitOnFlagUntilTimeout+0x56>
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	695b      	ldr	r3, [r3, #20]
 80016b0:	43da      	mvns	r2, r3
 80016b2:	68bb      	ldr	r3, [r7, #8]
 80016b4:	4013      	ands	r3, r2
 80016b6:	b29b      	uxth	r3, r3
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	bf0c      	ite	eq
 80016bc:	2301      	moveq	r3, #1
 80016be:	2300      	movne	r3, #0
 80016c0:	b2db      	uxtb	r3, r3
 80016c2:	461a      	mov	r2, r3
 80016c4:	e00c      	b.n	80016e0 <I2C_WaitOnFlagUntilTimeout+0x70>
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	699b      	ldr	r3, [r3, #24]
 80016cc:	43da      	mvns	r2, r3
 80016ce:	68bb      	ldr	r3, [r7, #8]
 80016d0:	4013      	ands	r3, r2
 80016d2:	b29b      	uxth	r3, r3
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	bf0c      	ite	eq
 80016d8:	2301      	moveq	r3, #1
 80016da:	2300      	movne	r3, #0
 80016dc:	b2db      	uxtb	r3, r3
 80016de:	461a      	mov	r2, r3
 80016e0:	79fb      	ldrb	r3, [r7, #7]
 80016e2:	429a      	cmp	r2, r3
 80016e4:	d116      	bne.n	8001714 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	2200      	movs	r2, #0
 80016ea:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	2220      	movs	r2, #32
 80016f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	2200      	movs	r2, #0
 80016f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001700:	f043 0220 	orr.w	r2, r3, #32
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	2200      	movs	r2, #0
 800170c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001710:	2301      	movs	r3, #1
 8001712:	e023      	b.n	800175c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001714:	68bb      	ldr	r3, [r7, #8]
 8001716:	0c1b      	lsrs	r3, r3, #16
 8001718:	b2db      	uxtb	r3, r3
 800171a:	2b01      	cmp	r3, #1
 800171c:	d10d      	bne.n	800173a <I2C_WaitOnFlagUntilTimeout+0xca>
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	695b      	ldr	r3, [r3, #20]
 8001724:	43da      	mvns	r2, r3
 8001726:	68bb      	ldr	r3, [r7, #8]
 8001728:	4013      	ands	r3, r2
 800172a:	b29b      	uxth	r3, r3
 800172c:	2b00      	cmp	r3, #0
 800172e:	bf0c      	ite	eq
 8001730:	2301      	moveq	r3, #1
 8001732:	2300      	movne	r3, #0
 8001734:	b2db      	uxtb	r3, r3
 8001736:	461a      	mov	r2, r3
 8001738:	e00c      	b.n	8001754 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	699b      	ldr	r3, [r3, #24]
 8001740:	43da      	mvns	r2, r3
 8001742:	68bb      	ldr	r3, [r7, #8]
 8001744:	4013      	ands	r3, r2
 8001746:	b29b      	uxth	r3, r3
 8001748:	2b00      	cmp	r3, #0
 800174a:	bf0c      	ite	eq
 800174c:	2301      	moveq	r3, #1
 800174e:	2300      	movne	r3, #0
 8001750:	b2db      	uxtb	r3, r3
 8001752:	461a      	mov	r2, r3
 8001754:	79fb      	ldrb	r3, [r7, #7]
 8001756:	429a      	cmp	r2, r3
 8001758:	d093      	beq.n	8001682 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800175a:	2300      	movs	r3, #0
}
 800175c:	4618      	mov	r0, r3
 800175e:	3710      	adds	r7, #16
 8001760:	46bd      	mov	sp, r7
 8001762:	bd80      	pop	{r7, pc}

08001764 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b084      	sub	sp, #16
 8001768:	af00      	add	r7, sp, #0
 800176a:	60f8      	str	r0, [r7, #12]
 800176c:	60b9      	str	r1, [r7, #8]
 800176e:	607a      	str	r2, [r7, #4]
 8001770:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001772:	e071      	b.n	8001858 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	695b      	ldr	r3, [r3, #20]
 800177a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800177e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001782:	d123      	bne.n	80017cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	681a      	ldr	r2, [r3, #0]
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001792:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800179c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	2200      	movs	r2, #0
 80017a2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	2220      	movs	r2, #32
 80017a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	2200      	movs	r2, #0
 80017b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017b8:	f043 0204 	orr.w	r2, r3, #4
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	2200      	movs	r2, #0
 80017c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80017c8:	2301      	movs	r3, #1
 80017ca:	e067      	b.n	800189c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017d2:	d041      	beq.n	8001858 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80017d4:	f7ff f9d4 	bl	8000b80 <HAL_GetTick>
 80017d8:	4602      	mov	r2, r0
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	1ad3      	subs	r3, r2, r3
 80017de:	687a      	ldr	r2, [r7, #4]
 80017e0:	429a      	cmp	r2, r3
 80017e2:	d302      	bcc.n	80017ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d136      	bne.n	8001858 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80017ea:	68bb      	ldr	r3, [r7, #8]
 80017ec:	0c1b      	lsrs	r3, r3, #16
 80017ee:	b2db      	uxtb	r3, r3
 80017f0:	2b01      	cmp	r3, #1
 80017f2:	d10c      	bne.n	800180e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	695b      	ldr	r3, [r3, #20]
 80017fa:	43da      	mvns	r2, r3
 80017fc:	68bb      	ldr	r3, [r7, #8]
 80017fe:	4013      	ands	r3, r2
 8001800:	b29b      	uxth	r3, r3
 8001802:	2b00      	cmp	r3, #0
 8001804:	bf14      	ite	ne
 8001806:	2301      	movne	r3, #1
 8001808:	2300      	moveq	r3, #0
 800180a:	b2db      	uxtb	r3, r3
 800180c:	e00b      	b.n	8001826 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	699b      	ldr	r3, [r3, #24]
 8001814:	43da      	mvns	r2, r3
 8001816:	68bb      	ldr	r3, [r7, #8]
 8001818:	4013      	ands	r3, r2
 800181a:	b29b      	uxth	r3, r3
 800181c:	2b00      	cmp	r3, #0
 800181e:	bf14      	ite	ne
 8001820:	2301      	movne	r3, #1
 8001822:	2300      	moveq	r3, #0
 8001824:	b2db      	uxtb	r3, r3
 8001826:	2b00      	cmp	r3, #0
 8001828:	d016      	beq.n	8001858 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	2200      	movs	r2, #0
 800182e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	2220      	movs	r2, #32
 8001834:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	2200      	movs	r2, #0
 800183c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001844:	f043 0220 	orr.w	r2, r3, #32
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	2200      	movs	r2, #0
 8001850:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001854:	2301      	movs	r3, #1
 8001856:	e021      	b.n	800189c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001858:	68bb      	ldr	r3, [r7, #8]
 800185a:	0c1b      	lsrs	r3, r3, #16
 800185c:	b2db      	uxtb	r3, r3
 800185e:	2b01      	cmp	r3, #1
 8001860:	d10c      	bne.n	800187c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	695b      	ldr	r3, [r3, #20]
 8001868:	43da      	mvns	r2, r3
 800186a:	68bb      	ldr	r3, [r7, #8]
 800186c:	4013      	ands	r3, r2
 800186e:	b29b      	uxth	r3, r3
 8001870:	2b00      	cmp	r3, #0
 8001872:	bf14      	ite	ne
 8001874:	2301      	movne	r3, #1
 8001876:	2300      	moveq	r3, #0
 8001878:	b2db      	uxtb	r3, r3
 800187a:	e00b      	b.n	8001894 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	699b      	ldr	r3, [r3, #24]
 8001882:	43da      	mvns	r2, r3
 8001884:	68bb      	ldr	r3, [r7, #8]
 8001886:	4013      	ands	r3, r2
 8001888:	b29b      	uxth	r3, r3
 800188a:	2b00      	cmp	r3, #0
 800188c:	bf14      	ite	ne
 800188e:	2301      	movne	r3, #1
 8001890:	2300      	moveq	r3, #0
 8001892:	b2db      	uxtb	r3, r3
 8001894:	2b00      	cmp	r3, #0
 8001896:	f47f af6d 	bne.w	8001774 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800189a:	2300      	movs	r3, #0
}
 800189c:	4618      	mov	r0, r3
 800189e:	3710      	adds	r7, #16
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}

080018a4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b084      	sub	sp, #16
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	60f8      	str	r0, [r7, #12]
 80018ac:	60b9      	str	r1, [r7, #8]
 80018ae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80018b0:	e034      	b.n	800191c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80018b2:	68f8      	ldr	r0, [r7, #12]
 80018b4:	f000 f886 	bl	80019c4 <I2C_IsAcknowledgeFailed>
 80018b8:	4603      	mov	r3, r0
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d001      	beq.n	80018c2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80018be:	2301      	movs	r3, #1
 80018c0:	e034      	b.n	800192c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80018c2:	68bb      	ldr	r3, [r7, #8]
 80018c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018c8:	d028      	beq.n	800191c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80018ca:	f7ff f959 	bl	8000b80 <HAL_GetTick>
 80018ce:	4602      	mov	r2, r0
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	1ad3      	subs	r3, r2, r3
 80018d4:	68ba      	ldr	r2, [r7, #8]
 80018d6:	429a      	cmp	r2, r3
 80018d8:	d302      	bcc.n	80018e0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80018da:	68bb      	ldr	r3, [r7, #8]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d11d      	bne.n	800191c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	695b      	ldr	r3, [r3, #20]
 80018e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80018ea:	2b80      	cmp	r3, #128	@ 0x80
 80018ec:	d016      	beq.n	800191c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	2200      	movs	r2, #0
 80018f2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	2220      	movs	r2, #32
 80018f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	2200      	movs	r2, #0
 8001900:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001908:	f043 0220 	orr.w	r2, r3, #32
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	2200      	movs	r2, #0
 8001914:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001918:	2301      	movs	r3, #1
 800191a:	e007      	b.n	800192c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	695b      	ldr	r3, [r3, #20]
 8001922:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001926:	2b80      	cmp	r3, #128	@ 0x80
 8001928:	d1c3      	bne.n	80018b2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800192a:	2300      	movs	r3, #0
}
 800192c:	4618      	mov	r0, r3
 800192e:	3710      	adds	r7, #16
 8001930:	46bd      	mov	sp, r7
 8001932:	bd80      	pop	{r7, pc}

08001934 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b084      	sub	sp, #16
 8001938:	af00      	add	r7, sp, #0
 800193a:	60f8      	str	r0, [r7, #12]
 800193c:	60b9      	str	r1, [r7, #8]
 800193e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001940:	e034      	b.n	80019ac <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001942:	68f8      	ldr	r0, [r7, #12]
 8001944:	f000 f83e 	bl	80019c4 <I2C_IsAcknowledgeFailed>
 8001948:	4603      	mov	r3, r0
 800194a:	2b00      	cmp	r3, #0
 800194c:	d001      	beq.n	8001952 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800194e:	2301      	movs	r3, #1
 8001950:	e034      	b.n	80019bc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001952:	68bb      	ldr	r3, [r7, #8]
 8001954:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001958:	d028      	beq.n	80019ac <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800195a:	f7ff f911 	bl	8000b80 <HAL_GetTick>
 800195e:	4602      	mov	r2, r0
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	1ad3      	subs	r3, r2, r3
 8001964:	68ba      	ldr	r2, [r7, #8]
 8001966:	429a      	cmp	r2, r3
 8001968:	d302      	bcc.n	8001970 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800196a:	68bb      	ldr	r3, [r7, #8]
 800196c:	2b00      	cmp	r3, #0
 800196e:	d11d      	bne.n	80019ac <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	695b      	ldr	r3, [r3, #20]
 8001976:	f003 0304 	and.w	r3, r3, #4
 800197a:	2b04      	cmp	r3, #4
 800197c:	d016      	beq.n	80019ac <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	2200      	movs	r2, #0
 8001982:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	2220      	movs	r2, #32
 8001988:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	2200      	movs	r2, #0
 8001990:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001998:	f043 0220 	orr.w	r2, r3, #32
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	2200      	movs	r2, #0
 80019a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80019a8:	2301      	movs	r3, #1
 80019aa:	e007      	b.n	80019bc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	695b      	ldr	r3, [r3, #20]
 80019b2:	f003 0304 	and.w	r3, r3, #4
 80019b6:	2b04      	cmp	r3, #4
 80019b8:	d1c3      	bne.n	8001942 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80019ba:	2300      	movs	r3, #0
}
 80019bc:	4618      	mov	r0, r3
 80019be:	3710      	adds	r7, #16
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bd80      	pop	{r7, pc}

080019c4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80019c4:	b480      	push	{r7}
 80019c6:	b083      	sub	sp, #12
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	695b      	ldr	r3, [r3, #20]
 80019d2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80019d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80019da:	d11b      	bne.n	8001a14 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80019e4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	2200      	movs	r2, #0
 80019ea:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	2220      	movs	r2, #32
 80019f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	2200      	movs	r2, #0
 80019f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a00:	f043 0204 	orr.w	r2, r3, #4
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8001a10:	2301      	movs	r3, #1
 8001a12:	e000      	b.n	8001a16 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001a14:	2300      	movs	r3, #0
}
 8001a16:	4618      	mov	r0, r3
 8001a18:	370c      	adds	r7, #12
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a20:	4770      	bx	lr
	...

08001a24 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b086      	sub	sp, #24
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d101      	bne.n	8001a36 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a32:	2301      	movs	r3, #1
 8001a34:	e267      	b.n	8001f06 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f003 0301 	and.w	r3, r3, #1
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d075      	beq.n	8001b2e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001a42:	4b88      	ldr	r3, [pc, #544]	@ (8001c64 <HAL_RCC_OscConfig+0x240>)
 8001a44:	689b      	ldr	r3, [r3, #8]
 8001a46:	f003 030c 	and.w	r3, r3, #12
 8001a4a:	2b04      	cmp	r3, #4
 8001a4c:	d00c      	beq.n	8001a68 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a4e:	4b85      	ldr	r3, [pc, #532]	@ (8001c64 <HAL_RCC_OscConfig+0x240>)
 8001a50:	689b      	ldr	r3, [r3, #8]
 8001a52:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001a56:	2b08      	cmp	r3, #8
 8001a58:	d112      	bne.n	8001a80 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a5a:	4b82      	ldr	r3, [pc, #520]	@ (8001c64 <HAL_RCC_OscConfig+0x240>)
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001a62:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001a66:	d10b      	bne.n	8001a80 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a68:	4b7e      	ldr	r3, [pc, #504]	@ (8001c64 <HAL_RCC_OscConfig+0x240>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d05b      	beq.n	8001b2c <HAL_RCC_OscConfig+0x108>
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d157      	bne.n	8001b2c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	e242      	b.n	8001f06 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001a88:	d106      	bne.n	8001a98 <HAL_RCC_OscConfig+0x74>
 8001a8a:	4b76      	ldr	r3, [pc, #472]	@ (8001c64 <HAL_RCC_OscConfig+0x240>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4a75      	ldr	r2, [pc, #468]	@ (8001c64 <HAL_RCC_OscConfig+0x240>)
 8001a90:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a94:	6013      	str	r3, [r2, #0]
 8001a96:	e01d      	b.n	8001ad4 <HAL_RCC_OscConfig+0xb0>
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001aa0:	d10c      	bne.n	8001abc <HAL_RCC_OscConfig+0x98>
 8001aa2:	4b70      	ldr	r3, [pc, #448]	@ (8001c64 <HAL_RCC_OscConfig+0x240>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4a6f      	ldr	r2, [pc, #444]	@ (8001c64 <HAL_RCC_OscConfig+0x240>)
 8001aa8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001aac:	6013      	str	r3, [r2, #0]
 8001aae:	4b6d      	ldr	r3, [pc, #436]	@ (8001c64 <HAL_RCC_OscConfig+0x240>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4a6c      	ldr	r2, [pc, #432]	@ (8001c64 <HAL_RCC_OscConfig+0x240>)
 8001ab4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ab8:	6013      	str	r3, [r2, #0]
 8001aba:	e00b      	b.n	8001ad4 <HAL_RCC_OscConfig+0xb0>
 8001abc:	4b69      	ldr	r3, [pc, #420]	@ (8001c64 <HAL_RCC_OscConfig+0x240>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4a68      	ldr	r2, [pc, #416]	@ (8001c64 <HAL_RCC_OscConfig+0x240>)
 8001ac2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001ac6:	6013      	str	r3, [r2, #0]
 8001ac8:	4b66      	ldr	r3, [pc, #408]	@ (8001c64 <HAL_RCC_OscConfig+0x240>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4a65      	ldr	r2, [pc, #404]	@ (8001c64 <HAL_RCC_OscConfig+0x240>)
 8001ace:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001ad2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d013      	beq.n	8001b04 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001adc:	f7ff f850 	bl	8000b80 <HAL_GetTick>
 8001ae0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ae2:	e008      	b.n	8001af6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ae4:	f7ff f84c 	bl	8000b80 <HAL_GetTick>
 8001ae8:	4602      	mov	r2, r0
 8001aea:	693b      	ldr	r3, [r7, #16]
 8001aec:	1ad3      	subs	r3, r2, r3
 8001aee:	2b64      	cmp	r3, #100	@ 0x64
 8001af0:	d901      	bls.n	8001af6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001af2:	2303      	movs	r3, #3
 8001af4:	e207      	b.n	8001f06 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001af6:	4b5b      	ldr	r3, [pc, #364]	@ (8001c64 <HAL_RCC_OscConfig+0x240>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d0f0      	beq.n	8001ae4 <HAL_RCC_OscConfig+0xc0>
 8001b02:	e014      	b.n	8001b2e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b04:	f7ff f83c 	bl	8000b80 <HAL_GetTick>
 8001b08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b0a:	e008      	b.n	8001b1e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b0c:	f7ff f838 	bl	8000b80 <HAL_GetTick>
 8001b10:	4602      	mov	r2, r0
 8001b12:	693b      	ldr	r3, [r7, #16]
 8001b14:	1ad3      	subs	r3, r2, r3
 8001b16:	2b64      	cmp	r3, #100	@ 0x64
 8001b18:	d901      	bls.n	8001b1e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001b1a:	2303      	movs	r3, #3
 8001b1c:	e1f3      	b.n	8001f06 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b1e:	4b51      	ldr	r3, [pc, #324]	@ (8001c64 <HAL_RCC_OscConfig+0x240>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d1f0      	bne.n	8001b0c <HAL_RCC_OscConfig+0xe8>
 8001b2a:	e000      	b.n	8001b2e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f003 0302 	and.w	r3, r3, #2
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d063      	beq.n	8001c02 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001b3a:	4b4a      	ldr	r3, [pc, #296]	@ (8001c64 <HAL_RCC_OscConfig+0x240>)
 8001b3c:	689b      	ldr	r3, [r3, #8]
 8001b3e:	f003 030c 	and.w	r3, r3, #12
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d00b      	beq.n	8001b5e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b46:	4b47      	ldr	r3, [pc, #284]	@ (8001c64 <HAL_RCC_OscConfig+0x240>)
 8001b48:	689b      	ldr	r3, [r3, #8]
 8001b4a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001b4e:	2b08      	cmp	r3, #8
 8001b50:	d11c      	bne.n	8001b8c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b52:	4b44      	ldr	r3, [pc, #272]	@ (8001c64 <HAL_RCC_OscConfig+0x240>)
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d116      	bne.n	8001b8c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b5e:	4b41      	ldr	r3, [pc, #260]	@ (8001c64 <HAL_RCC_OscConfig+0x240>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f003 0302 	and.w	r3, r3, #2
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d005      	beq.n	8001b76 <HAL_RCC_OscConfig+0x152>
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	68db      	ldr	r3, [r3, #12]
 8001b6e:	2b01      	cmp	r3, #1
 8001b70:	d001      	beq.n	8001b76 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001b72:	2301      	movs	r3, #1
 8001b74:	e1c7      	b.n	8001f06 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b76:	4b3b      	ldr	r3, [pc, #236]	@ (8001c64 <HAL_RCC_OscConfig+0x240>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	691b      	ldr	r3, [r3, #16]
 8001b82:	00db      	lsls	r3, r3, #3
 8001b84:	4937      	ldr	r1, [pc, #220]	@ (8001c64 <HAL_RCC_OscConfig+0x240>)
 8001b86:	4313      	orrs	r3, r2
 8001b88:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b8a:	e03a      	b.n	8001c02 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	68db      	ldr	r3, [r3, #12]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d020      	beq.n	8001bd6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b94:	4b34      	ldr	r3, [pc, #208]	@ (8001c68 <HAL_RCC_OscConfig+0x244>)
 8001b96:	2201      	movs	r2, #1
 8001b98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b9a:	f7fe fff1 	bl	8000b80 <HAL_GetTick>
 8001b9e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ba0:	e008      	b.n	8001bb4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ba2:	f7fe ffed 	bl	8000b80 <HAL_GetTick>
 8001ba6:	4602      	mov	r2, r0
 8001ba8:	693b      	ldr	r3, [r7, #16]
 8001baa:	1ad3      	subs	r3, r2, r3
 8001bac:	2b02      	cmp	r3, #2
 8001bae:	d901      	bls.n	8001bb4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001bb0:	2303      	movs	r3, #3
 8001bb2:	e1a8      	b.n	8001f06 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bb4:	4b2b      	ldr	r3, [pc, #172]	@ (8001c64 <HAL_RCC_OscConfig+0x240>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f003 0302 	and.w	r3, r3, #2
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d0f0      	beq.n	8001ba2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bc0:	4b28      	ldr	r3, [pc, #160]	@ (8001c64 <HAL_RCC_OscConfig+0x240>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	691b      	ldr	r3, [r3, #16]
 8001bcc:	00db      	lsls	r3, r3, #3
 8001bce:	4925      	ldr	r1, [pc, #148]	@ (8001c64 <HAL_RCC_OscConfig+0x240>)
 8001bd0:	4313      	orrs	r3, r2
 8001bd2:	600b      	str	r3, [r1, #0]
 8001bd4:	e015      	b.n	8001c02 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001bd6:	4b24      	ldr	r3, [pc, #144]	@ (8001c68 <HAL_RCC_OscConfig+0x244>)
 8001bd8:	2200      	movs	r2, #0
 8001bda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bdc:	f7fe ffd0 	bl	8000b80 <HAL_GetTick>
 8001be0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001be2:	e008      	b.n	8001bf6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001be4:	f7fe ffcc 	bl	8000b80 <HAL_GetTick>
 8001be8:	4602      	mov	r2, r0
 8001bea:	693b      	ldr	r3, [r7, #16]
 8001bec:	1ad3      	subs	r3, r2, r3
 8001bee:	2b02      	cmp	r3, #2
 8001bf0:	d901      	bls.n	8001bf6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001bf2:	2303      	movs	r3, #3
 8001bf4:	e187      	b.n	8001f06 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bf6:	4b1b      	ldr	r3, [pc, #108]	@ (8001c64 <HAL_RCC_OscConfig+0x240>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f003 0302 	and.w	r3, r3, #2
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d1f0      	bne.n	8001be4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f003 0308 	and.w	r3, r3, #8
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d036      	beq.n	8001c7c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	695b      	ldr	r3, [r3, #20]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d016      	beq.n	8001c44 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c16:	4b15      	ldr	r3, [pc, #84]	@ (8001c6c <HAL_RCC_OscConfig+0x248>)
 8001c18:	2201      	movs	r2, #1
 8001c1a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c1c:	f7fe ffb0 	bl	8000b80 <HAL_GetTick>
 8001c20:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c22:	e008      	b.n	8001c36 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c24:	f7fe ffac 	bl	8000b80 <HAL_GetTick>
 8001c28:	4602      	mov	r2, r0
 8001c2a:	693b      	ldr	r3, [r7, #16]
 8001c2c:	1ad3      	subs	r3, r2, r3
 8001c2e:	2b02      	cmp	r3, #2
 8001c30:	d901      	bls.n	8001c36 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001c32:	2303      	movs	r3, #3
 8001c34:	e167      	b.n	8001f06 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c36:	4b0b      	ldr	r3, [pc, #44]	@ (8001c64 <HAL_RCC_OscConfig+0x240>)
 8001c38:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001c3a:	f003 0302 	and.w	r3, r3, #2
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d0f0      	beq.n	8001c24 <HAL_RCC_OscConfig+0x200>
 8001c42:	e01b      	b.n	8001c7c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c44:	4b09      	ldr	r3, [pc, #36]	@ (8001c6c <HAL_RCC_OscConfig+0x248>)
 8001c46:	2200      	movs	r2, #0
 8001c48:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c4a:	f7fe ff99 	bl	8000b80 <HAL_GetTick>
 8001c4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c50:	e00e      	b.n	8001c70 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c52:	f7fe ff95 	bl	8000b80 <HAL_GetTick>
 8001c56:	4602      	mov	r2, r0
 8001c58:	693b      	ldr	r3, [r7, #16]
 8001c5a:	1ad3      	subs	r3, r2, r3
 8001c5c:	2b02      	cmp	r3, #2
 8001c5e:	d907      	bls.n	8001c70 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001c60:	2303      	movs	r3, #3
 8001c62:	e150      	b.n	8001f06 <HAL_RCC_OscConfig+0x4e2>
 8001c64:	40023800 	.word	0x40023800
 8001c68:	42470000 	.word	0x42470000
 8001c6c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c70:	4b88      	ldr	r3, [pc, #544]	@ (8001e94 <HAL_RCC_OscConfig+0x470>)
 8001c72:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001c74:	f003 0302 	and.w	r3, r3, #2
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d1ea      	bne.n	8001c52 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f003 0304 	and.w	r3, r3, #4
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	f000 8097 	beq.w	8001db8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c8e:	4b81      	ldr	r3, [pc, #516]	@ (8001e94 <HAL_RCC_OscConfig+0x470>)
 8001c90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c92:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d10f      	bne.n	8001cba <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	60bb      	str	r3, [r7, #8]
 8001c9e:	4b7d      	ldr	r3, [pc, #500]	@ (8001e94 <HAL_RCC_OscConfig+0x470>)
 8001ca0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ca2:	4a7c      	ldr	r2, [pc, #496]	@ (8001e94 <HAL_RCC_OscConfig+0x470>)
 8001ca4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ca8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001caa:	4b7a      	ldr	r3, [pc, #488]	@ (8001e94 <HAL_RCC_OscConfig+0x470>)
 8001cac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cb2:	60bb      	str	r3, [r7, #8]
 8001cb4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cba:	4b77      	ldr	r3, [pc, #476]	@ (8001e98 <HAL_RCC_OscConfig+0x474>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d118      	bne.n	8001cf8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001cc6:	4b74      	ldr	r3, [pc, #464]	@ (8001e98 <HAL_RCC_OscConfig+0x474>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4a73      	ldr	r2, [pc, #460]	@ (8001e98 <HAL_RCC_OscConfig+0x474>)
 8001ccc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001cd0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001cd2:	f7fe ff55 	bl	8000b80 <HAL_GetTick>
 8001cd6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cd8:	e008      	b.n	8001cec <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cda:	f7fe ff51 	bl	8000b80 <HAL_GetTick>
 8001cde:	4602      	mov	r2, r0
 8001ce0:	693b      	ldr	r3, [r7, #16]
 8001ce2:	1ad3      	subs	r3, r2, r3
 8001ce4:	2b02      	cmp	r3, #2
 8001ce6:	d901      	bls.n	8001cec <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001ce8:	2303      	movs	r3, #3
 8001cea:	e10c      	b.n	8001f06 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cec:	4b6a      	ldr	r3, [pc, #424]	@ (8001e98 <HAL_RCC_OscConfig+0x474>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d0f0      	beq.n	8001cda <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	689b      	ldr	r3, [r3, #8]
 8001cfc:	2b01      	cmp	r3, #1
 8001cfe:	d106      	bne.n	8001d0e <HAL_RCC_OscConfig+0x2ea>
 8001d00:	4b64      	ldr	r3, [pc, #400]	@ (8001e94 <HAL_RCC_OscConfig+0x470>)
 8001d02:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d04:	4a63      	ldr	r2, [pc, #396]	@ (8001e94 <HAL_RCC_OscConfig+0x470>)
 8001d06:	f043 0301 	orr.w	r3, r3, #1
 8001d0a:	6713      	str	r3, [r2, #112]	@ 0x70
 8001d0c:	e01c      	b.n	8001d48 <HAL_RCC_OscConfig+0x324>
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	689b      	ldr	r3, [r3, #8]
 8001d12:	2b05      	cmp	r3, #5
 8001d14:	d10c      	bne.n	8001d30 <HAL_RCC_OscConfig+0x30c>
 8001d16:	4b5f      	ldr	r3, [pc, #380]	@ (8001e94 <HAL_RCC_OscConfig+0x470>)
 8001d18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d1a:	4a5e      	ldr	r2, [pc, #376]	@ (8001e94 <HAL_RCC_OscConfig+0x470>)
 8001d1c:	f043 0304 	orr.w	r3, r3, #4
 8001d20:	6713      	str	r3, [r2, #112]	@ 0x70
 8001d22:	4b5c      	ldr	r3, [pc, #368]	@ (8001e94 <HAL_RCC_OscConfig+0x470>)
 8001d24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d26:	4a5b      	ldr	r2, [pc, #364]	@ (8001e94 <HAL_RCC_OscConfig+0x470>)
 8001d28:	f043 0301 	orr.w	r3, r3, #1
 8001d2c:	6713      	str	r3, [r2, #112]	@ 0x70
 8001d2e:	e00b      	b.n	8001d48 <HAL_RCC_OscConfig+0x324>
 8001d30:	4b58      	ldr	r3, [pc, #352]	@ (8001e94 <HAL_RCC_OscConfig+0x470>)
 8001d32:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d34:	4a57      	ldr	r2, [pc, #348]	@ (8001e94 <HAL_RCC_OscConfig+0x470>)
 8001d36:	f023 0301 	bic.w	r3, r3, #1
 8001d3a:	6713      	str	r3, [r2, #112]	@ 0x70
 8001d3c:	4b55      	ldr	r3, [pc, #340]	@ (8001e94 <HAL_RCC_OscConfig+0x470>)
 8001d3e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d40:	4a54      	ldr	r2, [pc, #336]	@ (8001e94 <HAL_RCC_OscConfig+0x470>)
 8001d42:	f023 0304 	bic.w	r3, r3, #4
 8001d46:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	689b      	ldr	r3, [r3, #8]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d015      	beq.n	8001d7c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d50:	f7fe ff16 	bl	8000b80 <HAL_GetTick>
 8001d54:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d56:	e00a      	b.n	8001d6e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d58:	f7fe ff12 	bl	8000b80 <HAL_GetTick>
 8001d5c:	4602      	mov	r2, r0
 8001d5e:	693b      	ldr	r3, [r7, #16]
 8001d60:	1ad3      	subs	r3, r2, r3
 8001d62:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d901      	bls.n	8001d6e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001d6a:	2303      	movs	r3, #3
 8001d6c:	e0cb      	b.n	8001f06 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d6e:	4b49      	ldr	r3, [pc, #292]	@ (8001e94 <HAL_RCC_OscConfig+0x470>)
 8001d70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d72:	f003 0302 	and.w	r3, r3, #2
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d0ee      	beq.n	8001d58 <HAL_RCC_OscConfig+0x334>
 8001d7a:	e014      	b.n	8001da6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d7c:	f7fe ff00 	bl	8000b80 <HAL_GetTick>
 8001d80:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d82:	e00a      	b.n	8001d9a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d84:	f7fe fefc 	bl	8000b80 <HAL_GetTick>
 8001d88:	4602      	mov	r2, r0
 8001d8a:	693b      	ldr	r3, [r7, #16]
 8001d8c:	1ad3      	subs	r3, r2, r3
 8001d8e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d901      	bls.n	8001d9a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001d96:	2303      	movs	r3, #3
 8001d98:	e0b5      	b.n	8001f06 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d9a:	4b3e      	ldr	r3, [pc, #248]	@ (8001e94 <HAL_RCC_OscConfig+0x470>)
 8001d9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d9e:	f003 0302 	and.w	r3, r3, #2
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d1ee      	bne.n	8001d84 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001da6:	7dfb      	ldrb	r3, [r7, #23]
 8001da8:	2b01      	cmp	r3, #1
 8001daa:	d105      	bne.n	8001db8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001dac:	4b39      	ldr	r3, [pc, #228]	@ (8001e94 <HAL_RCC_OscConfig+0x470>)
 8001dae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001db0:	4a38      	ldr	r2, [pc, #224]	@ (8001e94 <HAL_RCC_OscConfig+0x470>)
 8001db2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001db6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	699b      	ldr	r3, [r3, #24]
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	f000 80a1 	beq.w	8001f04 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001dc2:	4b34      	ldr	r3, [pc, #208]	@ (8001e94 <HAL_RCC_OscConfig+0x470>)
 8001dc4:	689b      	ldr	r3, [r3, #8]
 8001dc6:	f003 030c 	and.w	r3, r3, #12
 8001dca:	2b08      	cmp	r3, #8
 8001dcc:	d05c      	beq.n	8001e88 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	699b      	ldr	r3, [r3, #24]
 8001dd2:	2b02      	cmp	r3, #2
 8001dd4:	d141      	bne.n	8001e5a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dd6:	4b31      	ldr	r3, [pc, #196]	@ (8001e9c <HAL_RCC_OscConfig+0x478>)
 8001dd8:	2200      	movs	r2, #0
 8001dda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ddc:	f7fe fed0 	bl	8000b80 <HAL_GetTick>
 8001de0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001de2:	e008      	b.n	8001df6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001de4:	f7fe fecc 	bl	8000b80 <HAL_GetTick>
 8001de8:	4602      	mov	r2, r0
 8001dea:	693b      	ldr	r3, [r7, #16]
 8001dec:	1ad3      	subs	r3, r2, r3
 8001dee:	2b02      	cmp	r3, #2
 8001df0:	d901      	bls.n	8001df6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001df2:	2303      	movs	r3, #3
 8001df4:	e087      	b.n	8001f06 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001df6:	4b27      	ldr	r3, [pc, #156]	@ (8001e94 <HAL_RCC_OscConfig+0x470>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d1f0      	bne.n	8001de4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	69da      	ldr	r2, [r3, #28]
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6a1b      	ldr	r3, [r3, #32]
 8001e0a:	431a      	orrs	r2, r3
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e10:	019b      	lsls	r3, r3, #6
 8001e12:	431a      	orrs	r2, r3
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e18:	085b      	lsrs	r3, r3, #1
 8001e1a:	3b01      	subs	r3, #1
 8001e1c:	041b      	lsls	r3, r3, #16
 8001e1e:	431a      	orrs	r2, r3
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e24:	061b      	lsls	r3, r3, #24
 8001e26:	491b      	ldr	r1, [pc, #108]	@ (8001e94 <HAL_RCC_OscConfig+0x470>)
 8001e28:	4313      	orrs	r3, r2
 8001e2a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e2c:	4b1b      	ldr	r3, [pc, #108]	@ (8001e9c <HAL_RCC_OscConfig+0x478>)
 8001e2e:	2201      	movs	r2, #1
 8001e30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e32:	f7fe fea5 	bl	8000b80 <HAL_GetTick>
 8001e36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e38:	e008      	b.n	8001e4c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e3a:	f7fe fea1 	bl	8000b80 <HAL_GetTick>
 8001e3e:	4602      	mov	r2, r0
 8001e40:	693b      	ldr	r3, [r7, #16]
 8001e42:	1ad3      	subs	r3, r2, r3
 8001e44:	2b02      	cmp	r3, #2
 8001e46:	d901      	bls.n	8001e4c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001e48:	2303      	movs	r3, #3
 8001e4a:	e05c      	b.n	8001f06 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e4c:	4b11      	ldr	r3, [pc, #68]	@ (8001e94 <HAL_RCC_OscConfig+0x470>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d0f0      	beq.n	8001e3a <HAL_RCC_OscConfig+0x416>
 8001e58:	e054      	b.n	8001f04 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e5a:	4b10      	ldr	r3, [pc, #64]	@ (8001e9c <HAL_RCC_OscConfig+0x478>)
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e60:	f7fe fe8e 	bl	8000b80 <HAL_GetTick>
 8001e64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e66:	e008      	b.n	8001e7a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e68:	f7fe fe8a 	bl	8000b80 <HAL_GetTick>
 8001e6c:	4602      	mov	r2, r0
 8001e6e:	693b      	ldr	r3, [r7, #16]
 8001e70:	1ad3      	subs	r3, r2, r3
 8001e72:	2b02      	cmp	r3, #2
 8001e74:	d901      	bls.n	8001e7a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001e76:	2303      	movs	r3, #3
 8001e78:	e045      	b.n	8001f06 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e7a:	4b06      	ldr	r3, [pc, #24]	@ (8001e94 <HAL_RCC_OscConfig+0x470>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d1f0      	bne.n	8001e68 <HAL_RCC_OscConfig+0x444>
 8001e86:	e03d      	b.n	8001f04 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	699b      	ldr	r3, [r3, #24]
 8001e8c:	2b01      	cmp	r3, #1
 8001e8e:	d107      	bne.n	8001ea0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001e90:	2301      	movs	r3, #1
 8001e92:	e038      	b.n	8001f06 <HAL_RCC_OscConfig+0x4e2>
 8001e94:	40023800 	.word	0x40023800
 8001e98:	40007000 	.word	0x40007000
 8001e9c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001ea0:	4b1b      	ldr	r3, [pc, #108]	@ (8001f10 <HAL_RCC_OscConfig+0x4ec>)
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	699b      	ldr	r3, [r3, #24]
 8001eaa:	2b01      	cmp	r3, #1
 8001eac:	d028      	beq.n	8001f00 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001eb8:	429a      	cmp	r2, r3
 8001eba:	d121      	bne.n	8001f00 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ec6:	429a      	cmp	r2, r3
 8001ec8:	d11a      	bne.n	8001f00 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001eca:	68fa      	ldr	r2, [r7, #12]
 8001ecc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	687a      	ldr	r2, [r7, #4]
 8001ed4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001ed6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d111      	bne.n	8001f00 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ee6:	085b      	lsrs	r3, r3, #1
 8001ee8:	3b01      	subs	r3, #1
 8001eea:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001eec:	429a      	cmp	r2, r3
 8001eee:	d107      	bne.n	8001f00 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001efa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001efc:	429a      	cmp	r2, r3
 8001efe:	d001      	beq.n	8001f04 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001f00:	2301      	movs	r3, #1
 8001f02:	e000      	b.n	8001f06 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001f04:	2300      	movs	r3, #0
}
 8001f06:	4618      	mov	r0, r3
 8001f08:	3718      	adds	r7, #24
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}
 8001f0e:	bf00      	nop
 8001f10:	40023800 	.word	0x40023800

08001f14 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b084      	sub	sp, #16
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
 8001f1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d101      	bne.n	8001f28 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f24:	2301      	movs	r3, #1
 8001f26:	e0cc      	b.n	80020c2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f28:	4b68      	ldr	r3, [pc, #416]	@ (80020cc <HAL_RCC_ClockConfig+0x1b8>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f003 0307 	and.w	r3, r3, #7
 8001f30:	683a      	ldr	r2, [r7, #0]
 8001f32:	429a      	cmp	r2, r3
 8001f34:	d90c      	bls.n	8001f50 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f36:	4b65      	ldr	r3, [pc, #404]	@ (80020cc <HAL_RCC_ClockConfig+0x1b8>)
 8001f38:	683a      	ldr	r2, [r7, #0]
 8001f3a:	b2d2      	uxtb	r2, r2
 8001f3c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f3e:	4b63      	ldr	r3, [pc, #396]	@ (80020cc <HAL_RCC_ClockConfig+0x1b8>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f003 0307 	and.w	r3, r3, #7
 8001f46:	683a      	ldr	r2, [r7, #0]
 8001f48:	429a      	cmp	r2, r3
 8001f4a:	d001      	beq.n	8001f50 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	e0b8      	b.n	80020c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f003 0302 	and.w	r3, r3, #2
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d020      	beq.n	8001f9e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f003 0304 	and.w	r3, r3, #4
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d005      	beq.n	8001f74 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f68:	4b59      	ldr	r3, [pc, #356]	@ (80020d0 <HAL_RCC_ClockConfig+0x1bc>)
 8001f6a:	689b      	ldr	r3, [r3, #8]
 8001f6c:	4a58      	ldr	r2, [pc, #352]	@ (80020d0 <HAL_RCC_ClockConfig+0x1bc>)
 8001f6e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001f72:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f003 0308 	and.w	r3, r3, #8
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d005      	beq.n	8001f8c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f80:	4b53      	ldr	r3, [pc, #332]	@ (80020d0 <HAL_RCC_ClockConfig+0x1bc>)
 8001f82:	689b      	ldr	r3, [r3, #8]
 8001f84:	4a52      	ldr	r2, [pc, #328]	@ (80020d0 <HAL_RCC_ClockConfig+0x1bc>)
 8001f86:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001f8a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f8c:	4b50      	ldr	r3, [pc, #320]	@ (80020d0 <HAL_RCC_ClockConfig+0x1bc>)
 8001f8e:	689b      	ldr	r3, [r3, #8]
 8001f90:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	689b      	ldr	r3, [r3, #8]
 8001f98:	494d      	ldr	r1, [pc, #308]	@ (80020d0 <HAL_RCC_ClockConfig+0x1bc>)
 8001f9a:	4313      	orrs	r3, r2
 8001f9c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f003 0301 	and.w	r3, r3, #1
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d044      	beq.n	8002034 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	2b01      	cmp	r3, #1
 8001fb0:	d107      	bne.n	8001fc2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fb2:	4b47      	ldr	r3, [pc, #284]	@ (80020d0 <HAL_RCC_ClockConfig+0x1bc>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d119      	bne.n	8001ff2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	e07f      	b.n	80020c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	2b02      	cmp	r3, #2
 8001fc8:	d003      	beq.n	8001fd2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001fce:	2b03      	cmp	r3, #3
 8001fd0:	d107      	bne.n	8001fe2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fd2:	4b3f      	ldr	r3, [pc, #252]	@ (80020d0 <HAL_RCC_ClockConfig+0x1bc>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d109      	bne.n	8001ff2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	e06f      	b.n	80020c2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fe2:	4b3b      	ldr	r3, [pc, #236]	@ (80020d0 <HAL_RCC_ClockConfig+0x1bc>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f003 0302 	and.w	r3, r3, #2
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d101      	bne.n	8001ff2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fee:	2301      	movs	r3, #1
 8001ff0:	e067      	b.n	80020c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ff2:	4b37      	ldr	r3, [pc, #220]	@ (80020d0 <HAL_RCC_ClockConfig+0x1bc>)
 8001ff4:	689b      	ldr	r3, [r3, #8]
 8001ff6:	f023 0203 	bic.w	r2, r3, #3
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	4934      	ldr	r1, [pc, #208]	@ (80020d0 <HAL_RCC_ClockConfig+0x1bc>)
 8002000:	4313      	orrs	r3, r2
 8002002:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002004:	f7fe fdbc 	bl	8000b80 <HAL_GetTick>
 8002008:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800200a:	e00a      	b.n	8002022 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800200c:	f7fe fdb8 	bl	8000b80 <HAL_GetTick>
 8002010:	4602      	mov	r2, r0
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	1ad3      	subs	r3, r2, r3
 8002016:	f241 3288 	movw	r2, #5000	@ 0x1388
 800201a:	4293      	cmp	r3, r2
 800201c:	d901      	bls.n	8002022 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800201e:	2303      	movs	r3, #3
 8002020:	e04f      	b.n	80020c2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002022:	4b2b      	ldr	r3, [pc, #172]	@ (80020d0 <HAL_RCC_ClockConfig+0x1bc>)
 8002024:	689b      	ldr	r3, [r3, #8]
 8002026:	f003 020c 	and.w	r2, r3, #12
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	009b      	lsls	r3, r3, #2
 8002030:	429a      	cmp	r2, r3
 8002032:	d1eb      	bne.n	800200c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002034:	4b25      	ldr	r3, [pc, #148]	@ (80020cc <HAL_RCC_ClockConfig+0x1b8>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f003 0307 	and.w	r3, r3, #7
 800203c:	683a      	ldr	r2, [r7, #0]
 800203e:	429a      	cmp	r2, r3
 8002040:	d20c      	bcs.n	800205c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002042:	4b22      	ldr	r3, [pc, #136]	@ (80020cc <HAL_RCC_ClockConfig+0x1b8>)
 8002044:	683a      	ldr	r2, [r7, #0]
 8002046:	b2d2      	uxtb	r2, r2
 8002048:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800204a:	4b20      	ldr	r3, [pc, #128]	@ (80020cc <HAL_RCC_ClockConfig+0x1b8>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f003 0307 	and.w	r3, r3, #7
 8002052:	683a      	ldr	r2, [r7, #0]
 8002054:	429a      	cmp	r2, r3
 8002056:	d001      	beq.n	800205c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002058:	2301      	movs	r3, #1
 800205a:	e032      	b.n	80020c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f003 0304 	and.w	r3, r3, #4
 8002064:	2b00      	cmp	r3, #0
 8002066:	d008      	beq.n	800207a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002068:	4b19      	ldr	r3, [pc, #100]	@ (80020d0 <HAL_RCC_ClockConfig+0x1bc>)
 800206a:	689b      	ldr	r3, [r3, #8]
 800206c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	68db      	ldr	r3, [r3, #12]
 8002074:	4916      	ldr	r1, [pc, #88]	@ (80020d0 <HAL_RCC_ClockConfig+0x1bc>)
 8002076:	4313      	orrs	r3, r2
 8002078:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f003 0308 	and.w	r3, r3, #8
 8002082:	2b00      	cmp	r3, #0
 8002084:	d009      	beq.n	800209a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002086:	4b12      	ldr	r3, [pc, #72]	@ (80020d0 <HAL_RCC_ClockConfig+0x1bc>)
 8002088:	689b      	ldr	r3, [r3, #8]
 800208a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	691b      	ldr	r3, [r3, #16]
 8002092:	00db      	lsls	r3, r3, #3
 8002094:	490e      	ldr	r1, [pc, #56]	@ (80020d0 <HAL_RCC_ClockConfig+0x1bc>)
 8002096:	4313      	orrs	r3, r2
 8002098:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800209a:	f000 f821 	bl	80020e0 <HAL_RCC_GetSysClockFreq>
 800209e:	4602      	mov	r2, r0
 80020a0:	4b0b      	ldr	r3, [pc, #44]	@ (80020d0 <HAL_RCC_ClockConfig+0x1bc>)
 80020a2:	689b      	ldr	r3, [r3, #8]
 80020a4:	091b      	lsrs	r3, r3, #4
 80020a6:	f003 030f 	and.w	r3, r3, #15
 80020aa:	490a      	ldr	r1, [pc, #40]	@ (80020d4 <HAL_RCC_ClockConfig+0x1c0>)
 80020ac:	5ccb      	ldrb	r3, [r1, r3]
 80020ae:	fa22 f303 	lsr.w	r3, r2, r3
 80020b2:	4a09      	ldr	r2, [pc, #36]	@ (80020d8 <HAL_RCC_ClockConfig+0x1c4>)
 80020b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80020b6:	4b09      	ldr	r3, [pc, #36]	@ (80020dc <HAL_RCC_ClockConfig+0x1c8>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4618      	mov	r0, r3
 80020bc:	f7fe fd1c 	bl	8000af8 <HAL_InitTick>

  return HAL_OK;
 80020c0:	2300      	movs	r3, #0
}
 80020c2:	4618      	mov	r0, r3
 80020c4:	3710      	adds	r7, #16
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}
 80020ca:	bf00      	nop
 80020cc:	40023c00 	.word	0x40023c00
 80020d0:	40023800 	.word	0x40023800
 80020d4:	080023bc 	.word	0x080023bc
 80020d8:	20000000 	.word	0x20000000
 80020dc:	20000004 	.word	0x20000004

080020e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80020e4:	b094      	sub	sp, #80	@ 0x50
 80020e6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80020e8:	2300      	movs	r3, #0
 80020ea:	647b      	str	r3, [r7, #68]	@ 0x44
 80020ec:	2300      	movs	r3, #0
 80020ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80020f0:	2300      	movs	r3, #0
 80020f2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80020f4:	2300      	movs	r3, #0
 80020f6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80020f8:	4b79      	ldr	r3, [pc, #484]	@ (80022e0 <HAL_RCC_GetSysClockFreq+0x200>)
 80020fa:	689b      	ldr	r3, [r3, #8]
 80020fc:	f003 030c 	and.w	r3, r3, #12
 8002100:	2b08      	cmp	r3, #8
 8002102:	d00d      	beq.n	8002120 <HAL_RCC_GetSysClockFreq+0x40>
 8002104:	2b08      	cmp	r3, #8
 8002106:	f200 80e1 	bhi.w	80022cc <HAL_RCC_GetSysClockFreq+0x1ec>
 800210a:	2b00      	cmp	r3, #0
 800210c:	d002      	beq.n	8002114 <HAL_RCC_GetSysClockFreq+0x34>
 800210e:	2b04      	cmp	r3, #4
 8002110:	d003      	beq.n	800211a <HAL_RCC_GetSysClockFreq+0x3a>
 8002112:	e0db      	b.n	80022cc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002114:	4b73      	ldr	r3, [pc, #460]	@ (80022e4 <HAL_RCC_GetSysClockFreq+0x204>)
 8002116:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8002118:	e0db      	b.n	80022d2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800211a:	4b73      	ldr	r3, [pc, #460]	@ (80022e8 <HAL_RCC_GetSysClockFreq+0x208>)
 800211c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800211e:	e0d8      	b.n	80022d2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002120:	4b6f      	ldr	r3, [pc, #444]	@ (80022e0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002128:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800212a:	4b6d      	ldr	r3, [pc, #436]	@ (80022e0 <HAL_RCC_GetSysClockFreq+0x200>)
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002132:	2b00      	cmp	r3, #0
 8002134:	d063      	beq.n	80021fe <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002136:	4b6a      	ldr	r3, [pc, #424]	@ (80022e0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	099b      	lsrs	r3, r3, #6
 800213c:	2200      	movs	r2, #0
 800213e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002140:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002142:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002144:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002148:	633b      	str	r3, [r7, #48]	@ 0x30
 800214a:	2300      	movs	r3, #0
 800214c:	637b      	str	r3, [r7, #52]	@ 0x34
 800214e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002152:	4622      	mov	r2, r4
 8002154:	462b      	mov	r3, r5
 8002156:	f04f 0000 	mov.w	r0, #0
 800215a:	f04f 0100 	mov.w	r1, #0
 800215e:	0159      	lsls	r1, r3, #5
 8002160:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002164:	0150      	lsls	r0, r2, #5
 8002166:	4602      	mov	r2, r0
 8002168:	460b      	mov	r3, r1
 800216a:	4621      	mov	r1, r4
 800216c:	1a51      	subs	r1, r2, r1
 800216e:	6139      	str	r1, [r7, #16]
 8002170:	4629      	mov	r1, r5
 8002172:	eb63 0301 	sbc.w	r3, r3, r1
 8002176:	617b      	str	r3, [r7, #20]
 8002178:	f04f 0200 	mov.w	r2, #0
 800217c:	f04f 0300 	mov.w	r3, #0
 8002180:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002184:	4659      	mov	r1, fp
 8002186:	018b      	lsls	r3, r1, #6
 8002188:	4651      	mov	r1, sl
 800218a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800218e:	4651      	mov	r1, sl
 8002190:	018a      	lsls	r2, r1, #6
 8002192:	4651      	mov	r1, sl
 8002194:	ebb2 0801 	subs.w	r8, r2, r1
 8002198:	4659      	mov	r1, fp
 800219a:	eb63 0901 	sbc.w	r9, r3, r1
 800219e:	f04f 0200 	mov.w	r2, #0
 80021a2:	f04f 0300 	mov.w	r3, #0
 80021a6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80021aa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80021ae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80021b2:	4690      	mov	r8, r2
 80021b4:	4699      	mov	r9, r3
 80021b6:	4623      	mov	r3, r4
 80021b8:	eb18 0303 	adds.w	r3, r8, r3
 80021bc:	60bb      	str	r3, [r7, #8]
 80021be:	462b      	mov	r3, r5
 80021c0:	eb49 0303 	adc.w	r3, r9, r3
 80021c4:	60fb      	str	r3, [r7, #12]
 80021c6:	f04f 0200 	mov.w	r2, #0
 80021ca:	f04f 0300 	mov.w	r3, #0
 80021ce:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80021d2:	4629      	mov	r1, r5
 80021d4:	024b      	lsls	r3, r1, #9
 80021d6:	4621      	mov	r1, r4
 80021d8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80021dc:	4621      	mov	r1, r4
 80021de:	024a      	lsls	r2, r1, #9
 80021e0:	4610      	mov	r0, r2
 80021e2:	4619      	mov	r1, r3
 80021e4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80021e6:	2200      	movs	r2, #0
 80021e8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80021ea:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80021ec:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80021f0:	f7fd fff2 	bl	80001d8 <__aeabi_uldivmod>
 80021f4:	4602      	mov	r2, r0
 80021f6:	460b      	mov	r3, r1
 80021f8:	4613      	mov	r3, r2
 80021fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80021fc:	e058      	b.n	80022b0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80021fe:	4b38      	ldr	r3, [pc, #224]	@ (80022e0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	099b      	lsrs	r3, r3, #6
 8002204:	2200      	movs	r2, #0
 8002206:	4618      	mov	r0, r3
 8002208:	4611      	mov	r1, r2
 800220a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800220e:	623b      	str	r3, [r7, #32]
 8002210:	2300      	movs	r3, #0
 8002212:	627b      	str	r3, [r7, #36]	@ 0x24
 8002214:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002218:	4642      	mov	r2, r8
 800221a:	464b      	mov	r3, r9
 800221c:	f04f 0000 	mov.w	r0, #0
 8002220:	f04f 0100 	mov.w	r1, #0
 8002224:	0159      	lsls	r1, r3, #5
 8002226:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800222a:	0150      	lsls	r0, r2, #5
 800222c:	4602      	mov	r2, r0
 800222e:	460b      	mov	r3, r1
 8002230:	4641      	mov	r1, r8
 8002232:	ebb2 0a01 	subs.w	sl, r2, r1
 8002236:	4649      	mov	r1, r9
 8002238:	eb63 0b01 	sbc.w	fp, r3, r1
 800223c:	f04f 0200 	mov.w	r2, #0
 8002240:	f04f 0300 	mov.w	r3, #0
 8002244:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002248:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800224c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002250:	ebb2 040a 	subs.w	r4, r2, sl
 8002254:	eb63 050b 	sbc.w	r5, r3, fp
 8002258:	f04f 0200 	mov.w	r2, #0
 800225c:	f04f 0300 	mov.w	r3, #0
 8002260:	00eb      	lsls	r3, r5, #3
 8002262:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002266:	00e2      	lsls	r2, r4, #3
 8002268:	4614      	mov	r4, r2
 800226a:	461d      	mov	r5, r3
 800226c:	4643      	mov	r3, r8
 800226e:	18e3      	adds	r3, r4, r3
 8002270:	603b      	str	r3, [r7, #0]
 8002272:	464b      	mov	r3, r9
 8002274:	eb45 0303 	adc.w	r3, r5, r3
 8002278:	607b      	str	r3, [r7, #4]
 800227a:	f04f 0200 	mov.w	r2, #0
 800227e:	f04f 0300 	mov.w	r3, #0
 8002282:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002286:	4629      	mov	r1, r5
 8002288:	028b      	lsls	r3, r1, #10
 800228a:	4621      	mov	r1, r4
 800228c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002290:	4621      	mov	r1, r4
 8002292:	028a      	lsls	r2, r1, #10
 8002294:	4610      	mov	r0, r2
 8002296:	4619      	mov	r1, r3
 8002298:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800229a:	2200      	movs	r2, #0
 800229c:	61bb      	str	r3, [r7, #24]
 800229e:	61fa      	str	r2, [r7, #28]
 80022a0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80022a4:	f7fd ff98 	bl	80001d8 <__aeabi_uldivmod>
 80022a8:	4602      	mov	r2, r0
 80022aa:	460b      	mov	r3, r1
 80022ac:	4613      	mov	r3, r2
 80022ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80022b0:	4b0b      	ldr	r3, [pc, #44]	@ (80022e0 <HAL_RCC_GetSysClockFreq+0x200>)
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	0c1b      	lsrs	r3, r3, #16
 80022b6:	f003 0303 	and.w	r3, r3, #3
 80022ba:	3301      	adds	r3, #1
 80022bc:	005b      	lsls	r3, r3, #1
 80022be:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 80022c0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80022c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80022c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80022c8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80022ca:	e002      	b.n	80022d2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80022cc:	4b05      	ldr	r3, [pc, #20]	@ (80022e4 <HAL_RCC_GetSysClockFreq+0x204>)
 80022ce:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80022d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80022d2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80022d4:	4618      	mov	r0, r3
 80022d6:	3750      	adds	r7, #80	@ 0x50
 80022d8:	46bd      	mov	sp, r7
 80022da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80022de:	bf00      	nop
 80022e0:	40023800 	.word	0x40023800
 80022e4:	00f42400 	.word	0x00f42400
 80022e8:	007a1200 	.word	0x007a1200

080022ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80022ec:	b480      	push	{r7}
 80022ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80022f0:	4b03      	ldr	r3, [pc, #12]	@ (8002300 <HAL_RCC_GetHCLKFreq+0x14>)
 80022f2:	681b      	ldr	r3, [r3, #0]
}
 80022f4:	4618      	mov	r0, r3
 80022f6:	46bd      	mov	sp, r7
 80022f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fc:	4770      	bx	lr
 80022fe:	bf00      	nop
 8002300:	20000000 	.word	0x20000000

08002304 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002308:	f7ff fff0 	bl	80022ec <HAL_RCC_GetHCLKFreq>
 800230c:	4602      	mov	r2, r0
 800230e:	4b05      	ldr	r3, [pc, #20]	@ (8002324 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002310:	689b      	ldr	r3, [r3, #8]
 8002312:	0a9b      	lsrs	r3, r3, #10
 8002314:	f003 0307 	and.w	r3, r3, #7
 8002318:	4903      	ldr	r1, [pc, #12]	@ (8002328 <HAL_RCC_GetPCLK1Freq+0x24>)
 800231a:	5ccb      	ldrb	r3, [r1, r3]
 800231c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002320:	4618      	mov	r0, r3
 8002322:	bd80      	pop	{r7, pc}
 8002324:	40023800 	.word	0x40023800
 8002328:	080023cc 	.word	0x080023cc

0800232c <memset>:
 800232c:	4402      	add	r2, r0
 800232e:	4603      	mov	r3, r0
 8002330:	4293      	cmp	r3, r2
 8002332:	d100      	bne.n	8002336 <memset+0xa>
 8002334:	4770      	bx	lr
 8002336:	f803 1b01 	strb.w	r1, [r3], #1
 800233a:	e7f9      	b.n	8002330 <memset+0x4>

0800233c <__libc_init_array>:
 800233c:	b570      	push	{r4, r5, r6, lr}
 800233e:	4d0d      	ldr	r5, [pc, #52]	@ (8002374 <__libc_init_array+0x38>)
 8002340:	4c0d      	ldr	r4, [pc, #52]	@ (8002378 <__libc_init_array+0x3c>)
 8002342:	1b64      	subs	r4, r4, r5
 8002344:	10a4      	asrs	r4, r4, #2
 8002346:	2600      	movs	r6, #0
 8002348:	42a6      	cmp	r6, r4
 800234a:	d109      	bne.n	8002360 <__libc_init_array+0x24>
 800234c:	4d0b      	ldr	r5, [pc, #44]	@ (800237c <__libc_init_array+0x40>)
 800234e:	4c0c      	ldr	r4, [pc, #48]	@ (8002380 <__libc_init_array+0x44>)
 8002350:	f000 f818 	bl	8002384 <_init>
 8002354:	1b64      	subs	r4, r4, r5
 8002356:	10a4      	asrs	r4, r4, #2
 8002358:	2600      	movs	r6, #0
 800235a:	42a6      	cmp	r6, r4
 800235c:	d105      	bne.n	800236a <__libc_init_array+0x2e>
 800235e:	bd70      	pop	{r4, r5, r6, pc}
 8002360:	f855 3b04 	ldr.w	r3, [r5], #4
 8002364:	4798      	blx	r3
 8002366:	3601      	adds	r6, #1
 8002368:	e7ee      	b.n	8002348 <__libc_init_array+0xc>
 800236a:	f855 3b04 	ldr.w	r3, [r5], #4
 800236e:	4798      	blx	r3
 8002370:	3601      	adds	r6, #1
 8002372:	e7f2      	b.n	800235a <__libc_init_array+0x1e>
 8002374:	080023dc 	.word	0x080023dc
 8002378:	080023dc 	.word	0x080023dc
 800237c:	080023dc 	.word	0x080023dc
 8002380:	080023e0 	.word	0x080023e0

08002384 <_init>:
 8002384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002386:	bf00      	nop
 8002388:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800238a:	bc08      	pop	{r3}
 800238c:	469e      	mov	lr, r3
 800238e:	4770      	bx	lr

08002390 <_fini>:
 8002390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002392:	bf00      	nop
 8002394:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002396:	bc08      	pop	{r3}
 8002398:	469e      	mov	lr, r3
 800239a:	4770      	bx	lr
