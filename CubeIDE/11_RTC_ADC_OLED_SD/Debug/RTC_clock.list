
RTC_clock.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010cec  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000012e8  08010e8c  08010e8c  00011e8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012174  08012174  0001416c  2**0
                  CONTENTS
  4 .ARM          00000008  08012174  08012174  00013174  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801217c  0801217c  0001416c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801217c  0801217c  0001317c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08012180  08012180  00013180  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000016c  20000000  08012184  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000188c  2000016c  080122f0  0001416c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200019f8  080122f0  000149f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001416c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002057f  00000000  00000000  0001419c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005365  00000000  00000000  0003471b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001b60  00000000  00000000  00039a80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000014ff  00000000  00000000  0003b5e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001eff8  00000000  00000000  0003cadf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00029f8c  00000000  00000000  0005bad7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a3004  00000000  00000000  00085a63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00128a67  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007768  00000000  00000000  00128aac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  00130214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000016c 	.word	0x2000016c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08010e74 	.word	0x08010e74

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000170 	.word	0x20000170
 80001dc:	08010e74 	.word	0x08010e74

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_dmul>:
 8000280:	b570      	push	{r4, r5, r6, lr}
 8000282:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000286:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800028a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800028e:	bf1d      	ittte	ne
 8000290:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000294:	ea94 0f0c 	teqne	r4, ip
 8000298:	ea95 0f0c 	teqne	r5, ip
 800029c:	f000 f8de 	bleq	800045c <__aeabi_dmul+0x1dc>
 80002a0:	442c      	add	r4, r5
 80002a2:	ea81 0603 	eor.w	r6, r1, r3
 80002a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002b2:	bf18      	it	ne
 80002b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002bc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80002c0:	d038      	beq.n	8000334 <__aeabi_dmul+0xb4>
 80002c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002c6:	f04f 0500 	mov.w	r5, #0
 80002ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002ce:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80002d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002d6:	f04f 0600 	mov.w	r6, #0
 80002da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002de:	f09c 0f00 	teq	ip, #0
 80002e2:	bf18      	it	ne
 80002e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002e8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80002ec:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80002f0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80002f4:	d204      	bcs.n	8000300 <__aeabi_dmul+0x80>
 80002f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002fa:	416d      	adcs	r5, r5
 80002fc:	eb46 0606 	adc.w	r6, r6, r6
 8000300:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000304:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000308:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800030c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000310:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000314:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000318:	bf88      	it	hi
 800031a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800031e:	d81e      	bhi.n	800035e <__aeabi_dmul+0xde>
 8000320:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	bd70      	pop	{r4, r5, r6, pc}
 8000334:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000338:	ea46 0101 	orr.w	r1, r6, r1
 800033c:	ea40 0002 	orr.w	r0, r0, r2
 8000340:	ea81 0103 	eor.w	r1, r1, r3
 8000344:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000348:	bfc2      	ittt	gt
 800034a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800034e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000352:	bd70      	popgt	{r4, r5, r6, pc}
 8000354:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000358:	f04f 0e00 	mov.w	lr, #0
 800035c:	3c01      	subs	r4, #1
 800035e:	f300 80ab 	bgt.w	80004b8 <__aeabi_dmul+0x238>
 8000362:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000366:	bfde      	ittt	le
 8000368:	2000      	movle	r0, #0
 800036a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800036e:	bd70      	pople	{r4, r5, r6, pc}
 8000370:	f1c4 0400 	rsb	r4, r4, #0
 8000374:	3c20      	subs	r4, #32
 8000376:	da35      	bge.n	80003e4 <__aeabi_dmul+0x164>
 8000378:	340c      	adds	r4, #12
 800037a:	dc1b      	bgt.n	80003b4 <__aeabi_dmul+0x134>
 800037c:	f104 0414 	add.w	r4, r4, #20
 8000380:	f1c4 0520 	rsb	r5, r4, #32
 8000384:	fa00 f305 	lsl.w	r3, r0, r5
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f205 	lsl.w	r2, r1, r5
 8000390:	ea40 0002 	orr.w	r0, r0, r2
 8000394:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000398:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800039c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003a0:	fa21 f604 	lsr.w	r6, r1, r4
 80003a4:	eb42 0106 	adc.w	r1, r2, r6
 80003a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ac:	bf08      	it	eq
 80003ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003b2:	bd70      	pop	{r4, r5, r6, pc}
 80003b4:	f1c4 040c 	rsb	r4, r4, #12
 80003b8:	f1c4 0520 	rsb	r5, r4, #32
 80003bc:	fa00 f304 	lsl.w	r3, r0, r4
 80003c0:	fa20 f005 	lsr.w	r0, r0, r5
 80003c4:	fa01 f204 	lsl.w	r2, r1, r4
 80003c8:	ea40 0002 	orr.w	r0, r0, r2
 80003cc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003d4:	f141 0100 	adc.w	r1, r1, #0
 80003d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003dc:	bf08      	it	eq
 80003de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003e2:	bd70      	pop	{r4, r5, r6, pc}
 80003e4:	f1c4 0520 	rsb	r5, r4, #32
 80003e8:	fa00 f205 	lsl.w	r2, r0, r5
 80003ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80003f0:	fa20 f304 	lsr.w	r3, r0, r4
 80003f4:	fa01 f205 	lsl.w	r2, r1, r5
 80003f8:	ea43 0302 	orr.w	r3, r3, r2
 80003fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000404:	fa21 f204 	lsr.w	r2, r1, r4
 8000408:	ea20 0002 	bic.w	r0, r0, r2
 800040c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000410:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000414:	bf08      	it	eq
 8000416:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800041a:	bd70      	pop	{r4, r5, r6, pc}
 800041c:	f094 0f00 	teq	r4, #0
 8000420:	d10f      	bne.n	8000442 <__aeabi_dmul+0x1c2>
 8000422:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000426:	0040      	lsls	r0, r0, #1
 8000428:	eb41 0101 	adc.w	r1, r1, r1
 800042c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000430:	bf08      	it	eq
 8000432:	3c01      	subeq	r4, #1
 8000434:	d0f7      	beq.n	8000426 <__aeabi_dmul+0x1a6>
 8000436:	ea41 0106 	orr.w	r1, r1, r6
 800043a:	f095 0f00 	teq	r5, #0
 800043e:	bf18      	it	ne
 8000440:	4770      	bxne	lr
 8000442:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000446:	0052      	lsls	r2, r2, #1
 8000448:	eb43 0303 	adc.w	r3, r3, r3
 800044c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000450:	bf08      	it	eq
 8000452:	3d01      	subeq	r5, #1
 8000454:	d0f7      	beq.n	8000446 <__aeabi_dmul+0x1c6>
 8000456:	ea43 0306 	orr.w	r3, r3, r6
 800045a:	4770      	bx	lr
 800045c:	ea94 0f0c 	teq	r4, ip
 8000460:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000464:	bf18      	it	ne
 8000466:	ea95 0f0c 	teqne	r5, ip
 800046a:	d00c      	beq.n	8000486 <__aeabi_dmul+0x206>
 800046c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000470:	bf18      	it	ne
 8000472:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000476:	d1d1      	bne.n	800041c <__aeabi_dmul+0x19c>
 8000478:	ea81 0103 	eor.w	r1, r1, r3
 800047c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000480:	f04f 0000 	mov.w	r0, #0
 8000484:	bd70      	pop	{r4, r5, r6, pc}
 8000486:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800048a:	bf06      	itte	eq
 800048c:	4610      	moveq	r0, r2
 800048e:	4619      	moveq	r1, r3
 8000490:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000494:	d019      	beq.n	80004ca <__aeabi_dmul+0x24a>
 8000496:	ea94 0f0c 	teq	r4, ip
 800049a:	d102      	bne.n	80004a2 <__aeabi_dmul+0x222>
 800049c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004a0:	d113      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004a2:	ea95 0f0c 	teq	r5, ip
 80004a6:	d105      	bne.n	80004b4 <__aeabi_dmul+0x234>
 80004a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004ac:	bf1c      	itt	ne
 80004ae:	4610      	movne	r0, r2
 80004b0:	4619      	movne	r1, r3
 80004b2:	d10a      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004b4:	ea81 0103 	eor.w	r1, r1, r3
 80004b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80004bc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd70      	pop	{r4, r5, r6, pc}
 80004ca:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004ce:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80004d2:	bd70      	pop	{r4, r5, r6, pc}

080004d4 <__aeabi_drsub>:
 80004d4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80004d8:	e002      	b.n	80004e0 <__adddf3>
 80004da:	bf00      	nop

080004dc <__aeabi_dsub>:
 80004dc:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080004e0 <__adddf3>:
 80004e0:	b530      	push	{r4, r5, lr}
 80004e2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004e6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004ea:	ea94 0f05 	teq	r4, r5
 80004ee:	bf08      	it	eq
 80004f0:	ea90 0f02 	teqeq	r0, r2
 80004f4:	bf1f      	itttt	ne
 80004f6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004fa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004fe:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000502:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000506:	f000 80e2 	beq.w	80006ce <__adddf3+0x1ee>
 800050a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800050e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000512:	bfb8      	it	lt
 8000514:	426d      	neglt	r5, r5
 8000516:	dd0c      	ble.n	8000532 <__adddf3+0x52>
 8000518:	442c      	add	r4, r5
 800051a:	ea80 0202 	eor.w	r2, r0, r2
 800051e:	ea81 0303 	eor.w	r3, r1, r3
 8000522:	ea82 0000 	eor.w	r0, r2, r0
 8000526:	ea83 0101 	eor.w	r1, r3, r1
 800052a:	ea80 0202 	eor.w	r2, r0, r2
 800052e:	ea81 0303 	eor.w	r3, r1, r3
 8000532:	2d36      	cmp	r5, #54	@ 0x36
 8000534:	bf88      	it	hi
 8000536:	bd30      	pophi	{r4, r5, pc}
 8000538:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800053c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000540:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000544:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000548:	d002      	beq.n	8000550 <__adddf3+0x70>
 800054a:	4240      	negs	r0, r0
 800054c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000550:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000554:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000558:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800055c:	d002      	beq.n	8000564 <__adddf3+0x84>
 800055e:	4252      	negs	r2, r2
 8000560:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000564:	ea94 0f05 	teq	r4, r5
 8000568:	f000 80a7 	beq.w	80006ba <__adddf3+0x1da>
 800056c:	f1a4 0401 	sub.w	r4, r4, #1
 8000570:	f1d5 0e20 	rsbs	lr, r5, #32
 8000574:	db0d      	blt.n	8000592 <__adddf3+0xb2>
 8000576:	fa02 fc0e 	lsl.w	ip, r2, lr
 800057a:	fa22 f205 	lsr.w	r2, r2, r5
 800057e:	1880      	adds	r0, r0, r2
 8000580:	f141 0100 	adc.w	r1, r1, #0
 8000584:	fa03 f20e 	lsl.w	r2, r3, lr
 8000588:	1880      	adds	r0, r0, r2
 800058a:	fa43 f305 	asr.w	r3, r3, r5
 800058e:	4159      	adcs	r1, r3
 8000590:	e00e      	b.n	80005b0 <__adddf3+0xd0>
 8000592:	f1a5 0520 	sub.w	r5, r5, #32
 8000596:	f10e 0e20 	add.w	lr, lr, #32
 800059a:	2a01      	cmp	r2, #1
 800059c:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005a0:	bf28      	it	cs
 80005a2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005a6:	fa43 f305 	asr.w	r3, r3, r5
 80005aa:	18c0      	adds	r0, r0, r3
 80005ac:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005b4:	d507      	bpl.n	80005c6 <__adddf3+0xe6>
 80005b6:	f04f 0e00 	mov.w	lr, #0
 80005ba:	f1dc 0c00 	rsbs	ip, ip, #0
 80005be:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005c2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005c6:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80005ca:	d31b      	bcc.n	8000604 <__adddf3+0x124>
 80005cc:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80005d0:	d30c      	bcc.n	80005ec <__adddf3+0x10c>
 80005d2:	0849      	lsrs	r1, r1, #1
 80005d4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005d8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005dc:	f104 0401 	add.w	r4, r4, #1
 80005e0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005e4:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80005e8:	f080 809a 	bcs.w	8000720 <__adddf3+0x240>
 80005ec:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80005f0:	bf08      	it	eq
 80005f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005f6:	f150 0000 	adcs.w	r0, r0, #0
 80005fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fe:	ea41 0105 	orr.w	r1, r1, r5
 8000602:	bd30      	pop	{r4, r5, pc}
 8000604:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000608:	4140      	adcs	r0, r0
 800060a:	eb41 0101 	adc.w	r1, r1, r1
 800060e:	3c01      	subs	r4, #1
 8000610:	bf28      	it	cs
 8000612:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000616:	d2e9      	bcs.n	80005ec <__adddf3+0x10c>
 8000618:	f091 0f00 	teq	r1, #0
 800061c:	bf04      	itt	eq
 800061e:	4601      	moveq	r1, r0
 8000620:	2000      	moveq	r0, #0
 8000622:	fab1 f381 	clz	r3, r1
 8000626:	bf08      	it	eq
 8000628:	3320      	addeq	r3, #32
 800062a:	f1a3 030b 	sub.w	r3, r3, #11
 800062e:	f1b3 0220 	subs.w	r2, r3, #32
 8000632:	da0c      	bge.n	800064e <__adddf3+0x16e>
 8000634:	320c      	adds	r2, #12
 8000636:	dd08      	ble.n	800064a <__adddf3+0x16a>
 8000638:	f102 0c14 	add.w	ip, r2, #20
 800063c:	f1c2 020c 	rsb	r2, r2, #12
 8000640:	fa01 f00c 	lsl.w	r0, r1, ip
 8000644:	fa21 f102 	lsr.w	r1, r1, r2
 8000648:	e00c      	b.n	8000664 <__adddf3+0x184>
 800064a:	f102 0214 	add.w	r2, r2, #20
 800064e:	bfd8      	it	le
 8000650:	f1c2 0c20 	rsble	ip, r2, #32
 8000654:	fa01 f102 	lsl.w	r1, r1, r2
 8000658:	fa20 fc0c 	lsr.w	ip, r0, ip
 800065c:	bfdc      	itt	le
 800065e:	ea41 010c 	orrle.w	r1, r1, ip
 8000662:	4090      	lslle	r0, r2
 8000664:	1ae4      	subs	r4, r4, r3
 8000666:	bfa2      	ittt	ge
 8000668:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800066c:	4329      	orrge	r1, r5
 800066e:	bd30      	popge	{r4, r5, pc}
 8000670:	ea6f 0404 	mvn.w	r4, r4
 8000674:	3c1f      	subs	r4, #31
 8000676:	da1c      	bge.n	80006b2 <__adddf3+0x1d2>
 8000678:	340c      	adds	r4, #12
 800067a:	dc0e      	bgt.n	800069a <__adddf3+0x1ba>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0220 	rsb	r2, r4, #32
 8000684:	fa20 f004 	lsr.w	r0, r0, r4
 8000688:	fa01 f302 	lsl.w	r3, r1, r2
 800068c:	ea40 0003 	orr.w	r0, r0, r3
 8000690:	fa21 f304 	lsr.w	r3, r1, r4
 8000694:	ea45 0103 	orr.w	r1, r5, r3
 8000698:	bd30      	pop	{r4, r5, pc}
 800069a:	f1c4 040c 	rsb	r4, r4, #12
 800069e:	f1c4 0220 	rsb	r2, r4, #32
 80006a2:	fa20 f002 	lsr.w	r0, r0, r2
 80006a6:	fa01 f304 	lsl.w	r3, r1, r4
 80006aa:	ea40 0003 	orr.w	r0, r0, r3
 80006ae:	4629      	mov	r1, r5
 80006b0:	bd30      	pop	{r4, r5, pc}
 80006b2:	fa21 f004 	lsr.w	r0, r1, r4
 80006b6:	4629      	mov	r1, r5
 80006b8:	bd30      	pop	{r4, r5, pc}
 80006ba:	f094 0f00 	teq	r4, #0
 80006be:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80006c2:	bf06      	itte	eq
 80006c4:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80006c8:	3401      	addeq	r4, #1
 80006ca:	3d01      	subne	r5, #1
 80006cc:	e74e      	b.n	800056c <__adddf3+0x8c>
 80006ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006d2:	bf18      	it	ne
 80006d4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006d8:	d029      	beq.n	800072e <__adddf3+0x24e>
 80006da:	ea94 0f05 	teq	r4, r5
 80006de:	bf08      	it	eq
 80006e0:	ea90 0f02 	teqeq	r0, r2
 80006e4:	d005      	beq.n	80006f2 <__adddf3+0x212>
 80006e6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006ea:	bf04      	itt	eq
 80006ec:	4619      	moveq	r1, r3
 80006ee:	4610      	moveq	r0, r2
 80006f0:	bd30      	pop	{r4, r5, pc}
 80006f2:	ea91 0f03 	teq	r1, r3
 80006f6:	bf1e      	ittt	ne
 80006f8:	2100      	movne	r1, #0
 80006fa:	2000      	movne	r0, #0
 80006fc:	bd30      	popne	{r4, r5, pc}
 80006fe:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000702:	d105      	bne.n	8000710 <__adddf3+0x230>
 8000704:	0040      	lsls	r0, r0, #1
 8000706:	4149      	adcs	r1, r1
 8000708:	bf28      	it	cs
 800070a:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800070e:	bd30      	pop	{r4, r5, pc}
 8000710:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000714:	bf3c      	itt	cc
 8000716:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800071a:	bd30      	popcc	{r4, r5, pc}
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000720:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000724:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000728:	f04f 0000 	mov.w	r0, #0
 800072c:	bd30      	pop	{r4, r5, pc}
 800072e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000732:	bf1a      	itte	ne
 8000734:	4619      	movne	r1, r3
 8000736:	4610      	movne	r0, r2
 8000738:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800073c:	bf1c      	itt	ne
 800073e:	460b      	movne	r3, r1
 8000740:	4602      	movne	r2, r0
 8000742:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000746:	bf06      	itte	eq
 8000748:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800074c:	ea91 0f03 	teqeq	r1, r3
 8000750:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000754:	bd30      	pop	{r4, r5, pc}
 8000756:	bf00      	nop

08000758 <__aeabi_ui2d>:
 8000758:	f090 0f00 	teq	r0, #0
 800075c:	bf04      	itt	eq
 800075e:	2100      	moveq	r1, #0
 8000760:	4770      	bxeq	lr
 8000762:	b530      	push	{r4, r5, lr}
 8000764:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000768:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800076c:	f04f 0500 	mov.w	r5, #0
 8000770:	f04f 0100 	mov.w	r1, #0
 8000774:	e750      	b.n	8000618 <__adddf3+0x138>
 8000776:	bf00      	nop

08000778 <__aeabi_i2d>:
 8000778:	f090 0f00 	teq	r0, #0
 800077c:	bf04      	itt	eq
 800077e:	2100      	moveq	r1, #0
 8000780:	4770      	bxeq	lr
 8000782:	b530      	push	{r4, r5, lr}
 8000784:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000788:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800078c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000790:	bf48      	it	mi
 8000792:	4240      	negmi	r0, r0
 8000794:	f04f 0100 	mov.w	r1, #0
 8000798:	e73e      	b.n	8000618 <__adddf3+0x138>
 800079a:	bf00      	nop

0800079c <__aeabi_f2d>:
 800079c:	0042      	lsls	r2, r0, #1
 800079e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007a2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007a6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007aa:	bf1f      	itttt	ne
 80007ac:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80007b0:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80007b4:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80007b8:	4770      	bxne	lr
 80007ba:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80007be:	bf08      	it	eq
 80007c0:	4770      	bxeq	lr
 80007c2:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80007c6:	bf04      	itt	eq
 80007c8:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80007cc:	4770      	bxeq	lr
 80007ce:	b530      	push	{r4, r5, lr}
 80007d0:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80007d4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80007d8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80007dc:	e71c      	b.n	8000618 <__adddf3+0x138>
 80007de:	bf00      	nop

080007e0 <__aeabi_ul2d>:
 80007e0:	ea50 0201 	orrs.w	r2, r0, r1
 80007e4:	bf08      	it	eq
 80007e6:	4770      	bxeq	lr
 80007e8:	b530      	push	{r4, r5, lr}
 80007ea:	f04f 0500 	mov.w	r5, #0
 80007ee:	e00a      	b.n	8000806 <__aeabi_l2d+0x16>

080007f0 <__aeabi_l2d>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	b530      	push	{r4, r5, lr}
 80007fa:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80007fe:	d502      	bpl.n	8000806 <__aeabi_l2d+0x16>
 8000800:	4240      	negs	r0, r0
 8000802:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000806:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800080a:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800080e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000812:	f43f aed8 	beq.w	80005c6 <__adddf3+0xe6>
 8000816:	f04f 0203 	mov.w	r2, #3
 800081a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800081e:	bf18      	it	ne
 8000820:	3203      	addne	r2, #3
 8000822:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000826:	bf18      	it	ne
 8000828:	3203      	addne	r2, #3
 800082a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800082e:	f1c2 0320 	rsb	r3, r2, #32
 8000832:	fa00 fc03 	lsl.w	ip, r0, r3
 8000836:	fa20 f002 	lsr.w	r0, r0, r2
 800083a:	fa01 fe03 	lsl.w	lr, r1, r3
 800083e:	ea40 000e 	orr.w	r0, r0, lr
 8000842:	fa21 f102 	lsr.w	r1, r1, r2
 8000846:	4414      	add	r4, r2
 8000848:	e6bd      	b.n	80005c6 <__adddf3+0xe6>
 800084a:	bf00      	nop

0800084c <__aeabi_d2f>:
 800084c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000850:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000854:	bf24      	itt	cs
 8000856:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 800085a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 800085e:	d90d      	bls.n	800087c <__aeabi_d2f+0x30>
 8000860:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000864:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000868:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800086c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000870:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000874:	bf08      	it	eq
 8000876:	f020 0001 	biceq.w	r0, r0, #1
 800087a:	4770      	bx	lr
 800087c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000880:	d121      	bne.n	80008c6 <__aeabi_d2f+0x7a>
 8000882:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000886:	bfbc      	itt	lt
 8000888:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 800088c:	4770      	bxlt	lr
 800088e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000892:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000896:	f1c2 0218 	rsb	r2, r2, #24
 800089a:	f1c2 0c20 	rsb	ip, r2, #32
 800089e:	fa10 f30c 	lsls.w	r3, r0, ip
 80008a2:	fa20 f002 	lsr.w	r0, r0, r2
 80008a6:	bf18      	it	ne
 80008a8:	f040 0001 	orrne.w	r0, r0, #1
 80008ac:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80008b0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80008b4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80008b8:	ea40 000c 	orr.w	r0, r0, ip
 80008bc:	fa23 f302 	lsr.w	r3, r3, r2
 80008c0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80008c4:	e7cc      	b.n	8000860 <__aeabi_d2f+0x14>
 80008c6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80008ca:	d107      	bne.n	80008dc <__aeabi_d2f+0x90>
 80008cc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80008d0:	bf1e      	ittt	ne
 80008d2:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 80008d6:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 80008da:	4770      	bxne	lr
 80008dc:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 80008e0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80008e4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80008e8:	4770      	bx	lr
 80008ea:	bf00      	nop

080008ec <__aeabi_uldivmod>:
 80008ec:	b953      	cbnz	r3, 8000904 <__aeabi_uldivmod+0x18>
 80008ee:	b94a      	cbnz	r2, 8000904 <__aeabi_uldivmod+0x18>
 80008f0:	2900      	cmp	r1, #0
 80008f2:	bf08      	it	eq
 80008f4:	2800      	cmpeq	r0, #0
 80008f6:	bf1c      	itt	ne
 80008f8:	f04f 31ff 	movne.w	r1, #4294967295
 80008fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000900:	f000 b96a 	b.w	8000bd8 <__aeabi_idiv0>
 8000904:	f1ad 0c08 	sub.w	ip, sp, #8
 8000908:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800090c:	f000 f806 	bl	800091c <__udivmoddi4>
 8000910:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000914:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000918:	b004      	add	sp, #16
 800091a:	4770      	bx	lr

0800091c <__udivmoddi4>:
 800091c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000920:	9d08      	ldr	r5, [sp, #32]
 8000922:	460c      	mov	r4, r1
 8000924:	2b00      	cmp	r3, #0
 8000926:	d14e      	bne.n	80009c6 <__udivmoddi4+0xaa>
 8000928:	4694      	mov	ip, r2
 800092a:	458c      	cmp	ip, r1
 800092c:	4686      	mov	lr, r0
 800092e:	fab2 f282 	clz	r2, r2
 8000932:	d962      	bls.n	80009fa <__udivmoddi4+0xde>
 8000934:	b14a      	cbz	r2, 800094a <__udivmoddi4+0x2e>
 8000936:	f1c2 0320 	rsb	r3, r2, #32
 800093a:	4091      	lsls	r1, r2
 800093c:	fa20 f303 	lsr.w	r3, r0, r3
 8000940:	fa0c fc02 	lsl.w	ip, ip, r2
 8000944:	4319      	orrs	r1, r3
 8000946:	fa00 fe02 	lsl.w	lr, r0, r2
 800094a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800094e:	fa1f f68c 	uxth.w	r6, ip
 8000952:	fbb1 f4f7 	udiv	r4, r1, r7
 8000956:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800095a:	fb07 1114 	mls	r1, r7, r4, r1
 800095e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000962:	fb04 f106 	mul.w	r1, r4, r6
 8000966:	4299      	cmp	r1, r3
 8000968:	d90a      	bls.n	8000980 <__udivmoddi4+0x64>
 800096a:	eb1c 0303 	adds.w	r3, ip, r3
 800096e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000972:	f080 8112 	bcs.w	8000b9a <__udivmoddi4+0x27e>
 8000976:	4299      	cmp	r1, r3
 8000978:	f240 810f 	bls.w	8000b9a <__udivmoddi4+0x27e>
 800097c:	3c02      	subs	r4, #2
 800097e:	4463      	add	r3, ip
 8000980:	1a59      	subs	r1, r3, r1
 8000982:	fa1f f38e 	uxth.w	r3, lr
 8000986:	fbb1 f0f7 	udiv	r0, r1, r7
 800098a:	fb07 1110 	mls	r1, r7, r0, r1
 800098e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000992:	fb00 f606 	mul.w	r6, r0, r6
 8000996:	429e      	cmp	r6, r3
 8000998:	d90a      	bls.n	80009b0 <__udivmoddi4+0x94>
 800099a:	eb1c 0303 	adds.w	r3, ip, r3
 800099e:	f100 31ff 	add.w	r1, r0, #4294967295
 80009a2:	f080 80fc 	bcs.w	8000b9e <__udivmoddi4+0x282>
 80009a6:	429e      	cmp	r6, r3
 80009a8:	f240 80f9 	bls.w	8000b9e <__udivmoddi4+0x282>
 80009ac:	4463      	add	r3, ip
 80009ae:	3802      	subs	r0, #2
 80009b0:	1b9b      	subs	r3, r3, r6
 80009b2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80009b6:	2100      	movs	r1, #0
 80009b8:	b11d      	cbz	r5, 80009c2 <__udivmoddi4+0xa6>
 80009ba:	40d3      	lsrs	r3, r2
 80009bc:	2200      	movs	r2, #0
 80009be:	e9c5 3200 	strd	r3, r2, [r5]
 80009c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009c6:	428b      	cmp	r3, r1
 80009c8:	d905      	bls.n	80009d6 <__udivmoddi4+0xba>
 80009ca:	b10d      	cbz	r5, 80009d0 <__udivmoddi4+0xb4>
 80009cc:	e9c5 0100 	strd	r0, r1, [r5]
 80009d0:	2100      	movs	r1, #0
 80009d2:	4608      	mov	r0, r1
 80009d4:	e7f5      	b.n	80009c2 <__udivmoddi4+0xa6>
 80009d6:	fab3 f183 	clz	r1, r3
 80009da:	2900      	cmp	r1, #0
 80009dc:	d146      	bne.n	8000a6c <__udivmoddi4+0x150>
 80009de:	42a3      	cmp	r3, r4
 80009e0:	d302      	bcc.n	80009e8 <__udivmoddi4+0xcc>
 80009e2:	4290      	cmp	r0, r2
 80009e4:	f0c0 80f0 	bcc.w	8000bc8 <__udivmoddi4+0x2ac>
 80009e8:	1a86      	subs	r6, r0, r2
 80009ea:	eb64 0303 	sbc.w	r3, r4, r3
 80009ee:	2001      	movs	r0, #1
 80009f0:	2d00      	cmp	r5, #0
 80009f2:	d0e6      	beq.n	80009c2 <__udivmoddi4+0xa6>
 80009f4:	e9c5 6300 	strd	r6, r3, [r5]
 80009f8:	e7e3      	b.n	80009c2 <__udivmoddi4+0xa6>
 80009fa:	2a00      	cmp	r2, #0
 80009fc:	f040 8090 	bne.w	8000b20 <__udivmoddi4+0x204>
 8000a00:	eba1 040c 	sub.w	r4, r1, ip
 8000a04:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a08:	fa1f f78c 	uxth.w	r7, ip
 8000a0c:	2101      	movs	r1, #1
 8000a0e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000a12:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000a16:	fb08 4416 	mls	r4, r8, r6, r4
 8000a1a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000a1e:	fb07 f006 	mul.w	r0, r7, r6
 8000a22:	4298      	cmp	r0, r3
 8000a24:	d908      	bls.n	8000a38 <__udivmoddi4+0x11c>
 8000a26:	eb1c 0303 	adds.w	r3, ip, r3
 8000a2a:	f106 34ff 	add.w	r4, r6, #4294967295
 8000a2e:	d202      	bcs.n	8000a36 <__udivmoddi4+0x11a>
 8000a30:	4298      	cmp	r0, r3
 8000a32:	f200 80cd 	bhi.w	8000bd0 <__udivmoddi4+0x2b4>
 8000a36:	4626      	mov	r6, r4
 8000a38:	1a1c      	subs	r4, r3, r0
 8000a3a:	fa1f f38e 	uxth.w	r3, lr
 8000a3e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000a42:	fb08 4410 	mls	r4, r8, r0, r4
 8000a46:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000a4a:	fb00 f707 	mul.w	r7, r0, r7
 8000a4e:	429f      	cmp	r7, r3
 8000a50:	d908      	bls.n	8000a64 <__udivmoddi4+0x148>
 8000a52:	eb1c 0303 	adds.w	r3, ip, r3
 8000a56:	f100 34ff 	add.w	r4, r0, #4294967295
 8000a5a:	d202      	bcs.n	8000a62 <__udivmoddi4+0x146>
 8000a5c:	429f      	cmp	r7, r3
 8000a5e:	f200 80b0 	bhi.w	8000bc2 <__udivmoddi4+0x2a6>
 8000a62:	4620      	mov	r0, r4
 8000a64:	1bdb      	subs	r3, r3, r7
 8000a66:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000a6a:	e7a5      	b.n	80009b8 <__udivmoddi4+0x9c>
 8000a6c:	f1c1 0620 	rsb	r6, r1, #32
 8000a70:	408b      	lsls	r3, r1
 8000a72:	fa22 f706 	lsr.w	r7, r2, r6
 8000a76:	431f      	orrs	r7, r3
 8000a78:	fa20 fc06 	lsr.w	ip, r0, r6
 8000a7c:	fa04 f301 	lsl.w	r3, r4, r1
 8000a80:	ea43 030c 	orr.w	r3, r3, ip
 8000a84:	40f4      	lsrs	r4, r6
 8000a86:	fa00 f801 	lsl.w	r8, r0, r1
 8000a8a:	0c38      	lsrs	r0, r7, #16
 8000a8c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000a90:	fbb4 fef0 	udiv	lr, r4, r0
 8000a94:	fa1f fc87 	uxth.w	ip, r7
 8000a98:	fb00 441e 	mls	r4, r0, lr, r4
 8000a9c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000aa0:	fb0e f90c 	mul.w	r9, lr, ip
 8000aa4:	45a1      	cmp	r9, r4
 8000aa6:	fa02 f201 	lsl.w	r2, r2, r1
 8000aaa:	d90a      	bls.n	8000ac2 <__udivmoddi4+0x1a6>
 8000aac:	193c      	adds	r4, r7, r4
 8000aae:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000ab2:	f080 8084 	bcs.w	8000bbe <__udivmoddi4+0x2a2>
 8000ab6:	45a1      	cmp	r9, r4
 8000ab8:	f240 8081 	bls.w	8000bbe <__udivmoddi4+0x2a2>
 8000abc:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ac0:	443c      	add	r4, r7
 8000ac2:	eba4 0409 	sub.w	r4, r4, r9
 8000ac6:	fa1f f983 	uxth.w	r9, r3
 8000aca:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ace:	fb00 4413 	mls	r4, r0, r3, r4
 8000ad2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ad6:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ada:	45a4      	cmp	ip, r4
 8000adc:	d907      	bls.n	8000aee <__udivmoddi4+0x1d2>
 8000ade:	193c      	adds	r4, r7, r4
 8000ae0:	f103 30ff 	add.w	r0, r3, #4294967295
 8000ae4:	d267      	bcs.n	8000bb6 <__udivmoddi4+0x29a>
 8000ae6:	45a4      	cmp	ip, r4
 8000ae8:	d965      	bls.n	8000bb6 <__udivmoddi4+0x29a>
 8000aea:	3b02      	subs	r3, #2
 8000aec:	443c      	add	r4, r7
 8000aee:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000af2:	fba0 9302 	umull	r9, r3, r0, r2
 8000af6:	eba4 040c 	sub.w	r4, r4, ip
 8000afa:	429c      	cmp	r4, r3
 8000afc:	46ce      	mov	lr, r9
 8000afe:	469c      	mov	ip, r3
 8000b00:	d351      	bcc.n	8000ba6 <__udivmoddi4+0x28a>
 8000b02:	d04e      	beq.n	8000ba2 <__udivmoddi4+0x286>
 8000b04:	b155      	cbz	r5, 8000b1c <__udivmoddi4+0x200>
 8000b06:	ebb8 030e 	subs.w	r3, r8, lr
 8000b0a:	eb64 040c 	sbc.w	r4, r4, ip
 8000b0e:	fa04 f606 	lsl.w	r6, r4, r6
 8000b12:	40cb      	lsrs	r3, r1
 8000b14:	431e      	orrs	r6, r3
 8000b16:	40cc      	lsrs	r4, r1
 8000b18:	e9c5 6400 	strd	r6, r4, [r5]
 8000b1c:	2100      	movs	r1, #0
 8000b1e:	e750      	b.n	80009c2 <__udivmoddi4+0xa6>
 8000b20:	f1c2 0320 	rsb	r3, r2, #32
 8000b24:	fa20 f103 	lsr.w	r1, r0, r3
 8000b28:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b2c:	fa24 f303 	lsr.w	r3, r4, r3
 8000b30:	4094      	lsls	r4, r2
 8000b32:	430c      	orrs	r4, r1
 8000b34:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b38:	fa00 fe02 	lsl.w	lr, r0, r2
 8000b3c:	fa1f f78c 	uxth.w	r7, ip
 8000b40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b44:	fb08 3110 	mls	r1, r8, r0, r3
 8000b48:	0c23      	lsrs	r3, r4, #16
 8000b4a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b4e:	fb00 f107 	mul.w	r1, r0, r7
 8000b52:	4299      	cmp	r1, r3
 8000b54:	d908      	bls.n	8000b68 <__udivmoddi4+0x24c>
 8000b56:	eb1c 0303 	adds.w	r3, ip, r3
 8000b5a:	f100 36ff 	add.w	r6, r0, #4294967295
 8000b5e:	d22c      	bcs.n	8000bba <__udivmoddi4+0x29e>
 8000b60:	4299      	cmp	r1, r3
 8000b62:	d92a      	bls.n	8000bba <__udivmoddi4+0x29e>
 8000b64:	3802      	subs	r0, #2
 8000b66:	4463      	add	r3, ip
 8000b68:	1a5b      	subs	r3, r3, r1
 8000b6a:	b2a4      	uxth	r4, r4
 8000b6c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000b70:	fb08 3311 	mls	r3, r8, r1, r3
 8000b74:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b78:	fb01 f307 	mul.w	r3, r1, r7
 8000b7c:	42a3      	cmp	r3, r4
 8000b7e:	d908      	bls.n	8000b92 <__udivmoddi4+0x276>
 8000b80:	eb1c 0404 	adds.w	r4, ip, r4
 8000b84:	f101 36ff 	add.w	r6, r1, #4294967295
 8000b88:	d213      	bcs.n	8000bb2 <__udivmoddi4+0x296>
 8000b8a:	42a3      	cmp	r3, r4
 8000b8c:	d911      	bls.n	8000bb2 <__udivmoddi4+0x296>
 8000b8e:	3902      	subs	r1, #2
 8000b90:	4464      	add	r4, ip
 8000b92:	1ae4      	subs	r4, r4, r3
 8000b94:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000b98:	e739      	b.n	8000a0e <__udivmoddi4+0xf2>
 8000b9a:	4604      	mov	r4, r0
 8000b9c:	e6f0      	b.n	8000980 <__udivmoddi4+0x64>
 8000b9e:	4608      	mov	r0, r1
 8000ba0:	e706      	b.n	80009b0 <__udivmoddi4+0x94>
 8000ba2:	45c8      	cmp	r8, r9
 8000ba4:	d2ae      	bcs.n	8000b04 <__udivmoddi4+0x1e8>
 8000ba6:	ebb9 0e02 	subs.w	lr, r9, r2
 8000baa:	eb63 0c07 	sbc.w	ip, r3, r7
 8000bae:	3801      	subs	r0, #1
 8000bb0:	e7a8      	b.n	8000b04 <__udivmoddi4+0x1e8>
 8000bb2:	4631      	mov	r1, r6
 8000bb4:	e7ed      	b.n	8000b92 <__udivmoddi4+0x276>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	e799      	b.n	8000aee <__udivmoddi4+0x1d2>
 8000bba:	4630      	mov	r0, r6
 8000bbc:	e7d4      	b.n	8000b68 <__udivmoddi4+0x24c>
 8000bbe:	46d6      	mov	lr, sl
 8000bc0:	e77f      	b.n	8000ac2 <__udivmoddi4+0x1a6>
 8000bc2:	4463      	add	r3, ip
 8000bc4:	3802      	subs	r0, #2
 8000bc6:	e74d      	b.n	8000a64 <__udivmoddi4+0x148>
 8000bc8:	4606      	mov	r6, r0
 8000bca:	4623      	mov	r3, r4
 8000bcc:	4608      	mov	r0, r1
 8000bce:	e70f      	b.n	80009f0 <__udivmoddi4+0xd4>
 8000bd0:	3e02      	subs	r6, #2
 8000bd2:	4463      	add	r3, ip
 8000bd4:	e730      	b.n	8000a38 <__udivmoddi4+0x11c>
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_idiv0>:
 8000bd8:	4770      	bx	lr
 8000bda:	bf00      	nop

08000bdc <get_time_date>:
		Error_Handler();
	}
}

void get_time_date(char *time, char *date)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b08a      	sub	sp, #40	@ 0x28
 8000be0:	af02      	add	r7, sp, #8
 8000be2:	6078      	str	r0, [r7, #4]
 8000be4:	6039      	str	r1, [r7, #0]
  RTC_DateTypeDef gDate;
  RTC_TimeTypeDef gTime;

  /* Get the RTC current Time */
  HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BIN);
 8000be6:	f107 0308 	add.w	r3, r7, #8
 8000bea:	2200      	movs	r2, #0
 8000bec:	4619      	mov	r1, r3
 8000bee:	4813      	ldr	r0, [pc, #76]	@ (8000c3c <get_time_date+0x60>)
 8000bf0:	f005 fb0f 	bl	8006212 <HAL_RTC_GetTime>
  /* Get the RTC current Date */
  HAL_RTC_GetDate(&hrtc, &gDate, RTC_FORMAT_BIN);
 8000bf4:	f107 031c 	add.w	r3, r7, #28
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	480f      	ldr	r0, [pc, #60]	@ (8000c3c <get_time_date+0x60>)
 8000bfe:	f005 fbea 	bl	80063d6 <HAL_RTC_GetDate>

  /* Display time Format: hh:mm:ss */
  sprintf((char*)time,"%02d:%02d:%02d",gTime.Hours, gTime.Minutes, gTime.Seconds);
 8000c02:	7a3b      	ldrb	r3, [r7, #8]
 8000c04:	461a      	mov	r2, r3
 8000c06:	7a7b      	ldrb	r3, [r7, #9]
 8000c08:	4619      	mov	r1, r3
 8000c0a:	7abb      	ldrb	r3, [r7, #10]
 8000c0c:	9300      	str	r3, [sp, #0]
 8000c0e:	460b      	mov	r3, r1
 8000c10:	490b      	ldr	r1, [pc, #44]	@ (8000c40 <get_time_date+0x64>)
 8000c12:	6878      	ldr	r0, [r7, #4]
 8000c14:	f00f fc8e 	bl	8010534 <siprintf>

  /* Display date Format: dd-mm-yyyy */
  sprintf((char*)date,"%02d-%02d-%2d",gDate.Date, gDate.Month, 2000 + gDate.Year);
 8000c18:	7fbb      	ldrb	r3, [r7, #30]
 8000c1a:	461a      	mov	r2, r3
 8000c1c:	7f7b      	ldrb	r3, [r7, #29]
 8000c1e:	4619      	mov	r1, r3
 8000c20:	7ffb      	ldrb	r3, [r7, #31]
 8000c22:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 8000c26:	9300      	str	r3, [sp, #0]
 8000c28:	460b      	mov	r3, r1
 8000c2a:	4906      	ldr	r1, [pc, #24]	@ (8000c44 <get_time_date+0x68>)
 8000c2c:	6838      	ldr	r0, [r7, #0]
 8000c2e:	f00f fc81 	bl	8010534 <siprintf>
}
 8000c32:	bf00      	nop
 8000c34:	3720      	adds	r7, #32
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	20000224 	.word	0x20000224
 8000c40:	08010e8c 	.word	0x08010e8c
 8000c44:	08010e9c 	.word	0x08010e9c

08000c48 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	f5ad 7d20 	sub.w	sp, sp, #640	@ 0x280
 8000c4e:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c50:	f001 f8d6 	bl	8001e00 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c54:	f000 f930 	bl	8000eb8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c58:	f000 fafc 	bl	8001254 <MX_GPIO_Init>
  MX_DMA_Init();
 8000c5c:	f000 fad2 	bl	8001204 <MX_DMA_Init>
  MX_RTC_Init();
 8000c60:	f000 fa16 	bl	8001090 <MX_RTC_Init>
  MX_USART1_UART_Init();
 8000c64:	f000 faa4 	bl	80011b0 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8000c68:	f000 f9e4 	bl	8001034 <MX_I2C1_Init>
  MX_ADC1_Init();
 8000c6c:	f000 f990 	bl	8000f90 <MX_ADC1_Init>
  MX_SPI2_Init();
 8000c70:	f000 fa68 	bl	8001144 <MX_SPI2_Init>
  MX_FATFS_Init();
 8000c74:	f007 fed0 	bl	8008a18 <MX_FATFS_Init>
  MX_USB_DEVICE_Init();
 8000c78:	f00e ff8e 	bl	800fb98 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  SSD1306_Init();
 8000c7c:	f000 fb64 	bl	8001348 <SSD1306_Init>
  uint16_t result = 0;
 8000c80:	2300      	movs	r3, #0
 8000c82:	f8a7 3274 	strh.w	r3, [r7, #628]	@ 0x274
  float V;
  uint16_t measurement = 0;
 8000c86:	2300      	movs	r3, #0
 8000c88:	f8a7 3276 	strh.w	r3, [r7, #630]	@ 0x276
  int second;

  FIL file;
  FRESULT res1;
  char testBuffer[31];
  uint8_t space[1] = "\n";
 8000c8c:	f507 731e 	add.w	r3, r7, #632	@ 0x278
 8000c90:	f5a3 731d 	sub.w	r3, r3, #628	@ 0x274
 8000c94:	220a      	movs	r2, #10
 8000c96:	701a      	strb	r2, [r3, #0]
  UINT bw;

  if (f_mount(&USERFatFS, USERPath, 0)!=FR_OK) // маунтим карточку
 8000c98:	2200      	movs	r2, #0
 8000c9a:	497b      	ldr	r1, [pc, #492]	@ (8000e88 <main+0x240>)
 8000c9c:	487b      	ldr	r0, [pc, #492]	@ (8000e8c <main+0x244>)
 8000c9e:	f00e f833 	bl	800ed08 <f_mount>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d009      	beq.n	8000cbc <main+0x74>
    {										   // если не ОК, тогда мигаем долго
  	 while (1)
  	 {
  		 HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000ca8:	2120      	movs	r1, #32
 8000caa:	4879      	ldr	r0, [pc, #484]	@ (8000e90 <main+0x248>)
 8000cac:	f002 fbbf 	bl	800342e <HAL_GPIO_TogglePin>
  		 HAL_Delay(500);
 8000cb0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000cb4:	f001 f916 	bl	8001ee4 <HAL_Delay>
  		 HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000cb8:	bf00      	nop
 8000cba:	e7f5      	b.n	8000ca8 <main+0x60>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  SSD1306_Clear();
 8000cbc:	f000 fd67 	bl	800178e <SSD1306_Clear>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  get_time_date(timeData, dateData);
 8000cc0:	4974      	ldr	r1, [pc, #464]	@ (8000e94 <main+0x24c>)
 8000cc2:	4875      	ldr	r0, [pc, #468]	@ (8000e98 <main+0x250>)
 8000cc4:	f7ff ff8a 	bl	8000bdc <get_time_date>
	  SSD1306_GotoXY(0,0);
 8000cc8:	2100      	movs	r1, #0
 8000cca:	2000      	movs	r0, #0
 8000ccc:	f000 fca6 	bl	800161c <SSD1306_GotoXY>
	  SSD1306_Puts(timeData, &Font_11x18, 1);  //доступные шрифты Font_7x10, Font_11x18, Font_16x26
 8000cd0:	2201      	movs	r2, #1
 8000cd2:	4972      	ldr	r1, [pc, #456]	@ (8000e9c <main+0x254>)
 8000cd4:	4870      	ldr	r0, [pc, #448]	@ (8000e98 <main+0x250>)
 8000cd6:	f000 fd35 	bl	8001744 <SSD1306_Puts>
	  SSD1306_GotoXY(0,22);
 8000cda:	2116      	movs	r1, #22
 8000cdc:	2000      	movs	r0, #0
 8000cde:	f000 fc9d 	bl	800161c <SSD1306_GotoXY>
	  SSD1306_Puts(dateData, &Font_11x18, 1);
 8000ce2:	2201      	movs	r2, #1
 8000ce4:	496d      	ldr	r1, [pc, #436]	@ (8000e9c <main+0x254>)
 8000ce6:	486b      	ldr	r0, [pc, #428]	@ (8000e94 <main+0x24c>)
 8000ce8:	f000 fd2c 	bl	8001744 <SSD1306_Puts>

	  HAL_ADC_Start(&hadc1);
 8000cec:	486c      	ldr	r0, [pc, #432]	@ (8000ea0 <main+0x258>)
 8000cee:	f001 f961 	bl	8001fb4 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, 100);
 8000cf2:	2164      	movs	r1, #100	@ 0x64
 8000cf4:	486a      	ldr	r0, [pc, #424]	@ (8000ea0 <main+0x258>)
 8000cf6:	f001 fa44 	bl	8002182 <HAL_ADC_PollForConversion>
	  result = HAL_ADC_GetValue(&hadc1);
 8000cfa:	4869      	ldr	r0, [pc, #420]	@ (8000ea0 <main+0x258>)
 8000cfc:	f001 facc 	bl	8002298 <HAL_ADC_GetValue>
 8000d00:	4603      	mov	r3, r0
 8000d02:	f8a7 3274 	strh.w	r3, [r7, #628]	@ 0x274
	  HAL_ADC_Stop(&hadc1);
 8000d06:	4866      	ldr	r0, [pc, #408]	@ (8000ea0 <main+0x258>)
 8000d08:	f001 fa08 	bl	800211c <HAL_ADC_Stop>
	  V = ((float)result / (float)4090) * 3.3;
 8000d0c:	f8b7 3274 	ldrh.w	r3, [r7, #628]	@ 0x274
 8000d10:	ee07 3a90 	vmov	s15, r3
 8000d14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000d18:	ed9f 7a62 	vldr	s14, [pc, #392]	@ 8000ea4 <main+0x25c>
 8000d1c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8000d20:	ee16 0a90 	vmov	r0, s13
 8000d24:	f7ff fd3a 	bl	800079c <__aeabi_f2d>
 8000d28:	a355      	add	r3, pc, #340	@ (adr r3, 8000e80 <main+0x238>)
 8000d2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d2e:	f7ff faa7 	bl	8000280 <__aeabi_dmul>
 8000d32:	4602      	mov	r2, r0
 8000d34:	460b      	mov	r3, r1
 8000d36:	4610      	mov	r0, r2
 8000d38:	4619      	mov	r1, r3
 8000d3a:	f7ff fd87 	bl	800084c <__aeabi_d2f>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	f8c7 3270 	str.w	r3, [r7, #624]	@ 0x270
	  measurement++;
 8000d44:	f8b7 3276 	ldrh.w	r3, [r7, #630]	@ 0x276
 8000d48:	3301      	adds	r3, #1
 8000d4a:	f8a7 3276 	strh.w	r3, [r7, #630]	@ 0x276

	  first = (int)V;
 8000d4e:	edd7 7a9c 	vldr	s15, [r7, #624]	@ 0x270
 8000d52:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000d56:	ee17 3a90 	vmov	r3, s15
 8000d5a:	f8c7 326c 	str.w	r3, [r7, #620]	@ 0x26c
	  second = (int)((V-(int)V)*100);
 8000d5e:	edd7 7a9c 	vldr	s15, [r7, #624]	@ 0x270
 8000d62:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000d66:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d6a:	ed97 7a9c 	vldr	s14, [r7, #624]	@ 0x270
 8000d6e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000d72:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 8000ea8 <main+0x260>
 8000d76:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000d7a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000d7e:	ee17 3a90 	vmov	r3, s15
 8000d82:	f8c7 3268 	str.w	r3, [r7, #616]	@ 0x268
	  sprintf(volt, "VOLT = %d.%d", first, second);
 8000d86:	f507 7016 	add.w	r0, r7, #600	@ 0x258
 8000d8a:	f8d7 3268 	ldr.w	r3, [r7, #616]	@ 0x268
 8000d8e:	f8d7 226c 	ldr.w	r2, [r7, #620]	@ 0x26c
 8000d92:	4946      	ldr	r1, [pc, #280]	@ (8000eac <main+0x264>)
 8000d94:	f00f fbce 	bl	8010534 <siprintf>

	  SSD1306_GotoXY(0,44);
 8000d98:	212c      	movs	r1, #44	@ 0x2c
 8000d9a:	2000      	movs	r0, #0
 8000d9c:	f000 fc3e 	bl	800161c <SSD1306_GotoXY>
	  SSD1306_Puts(volt, &Font_11x18, 1);  //доступные шрифты Font_7x10, Font_11x18, Font_16x26
 8000da0:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8000da4:	2201      	movs	r2, #1
 8000da6:	493d      	ldr	r1, [pc, #244]	@ (8000e9c <main+0x254>)
 8000da8:	4618      	mov	r0, r3
 8000daa:	f000 fccb 	bl	8001744 <SSD1306_Puts>

	  res1 = f_open(&file, "logs.txt", FA_WRITE);  // пробуем открыть файл на карточке и разрешаем запись
 8000dae:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000db2:	2202      	movs	r2, #2
 8000db4:	493e      	ldr	r1, [pc, #248]	@ (8000eb0 <main+0x268>)
 8000db6:	4618      	mov	r0, r3
 8000db8:	f00d ffec 	bl	800ed94 <f_open>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
	    if (res1!=FR_OK) 							   // если не ОК, тогда мигаем долго
 8000dc2:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d008      	beq.n	8000ddc <main+0x194>
	      {
	    	  while (1)
	    	  {
	    		 HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000dca:	2120      	movs	r1, #32
 8000dcc:	4830      	ldr	r0, [pc, #192]	@ (8000e90 <main+0x248>)
 8000dce:	f002 fb2e 	bl	800342e <HAL_GPIO_TogglePin>
	    		 HAL_Delay(100);
 8000dd2:	2064      	movs	r0, #100	@ 0x64
 8000dd4:	f001 f886 	bl	8001ee4 <HAL_Delay>
	    		 HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000dd8:	bf00      	nop
 8000dda:	e7f6      	b.n	8000dca <main+0x182>
	    	  }
	      }

	  res1 = f_lseek(&file, f_size(&file)); 	   // переносим курсор в конец файла, чтобы не стирать при записи старую запись
 8000ddc:	f507 731e 	add.w	r3, r7, #632	@ 0x278
 8000de0:	f5a3 7314 	sub.w	r3, r3, #592	@ 0x250
 8000de4:	68da      	ldr	r2, [r3, #12]
 8000de6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000dea:	4611      	mov	r1, r2
 8000dec:	4618      	mov	r0, r3
 8000dee:	f00e fba8 	bl	800f542 <f_lseek>
 8000df2:	4603      	mov	r3, r0
 8000df4:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267

	  sprintf(testBuffer, "%s %s %s", timeData, dateData, volt);
 8000df8:	f107 0008 	add.w	r0, r7, #8
 8000dfc:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8000e00:	9300      	str	r3, [sp, #0]
 8000e02:	4b24      	ldr	r3, [pc, #144]	@ (8000e94 <main+0x24c>)
 8000e04:	4a24      	ldr	r2, [pc, #144]	@ (8000e98 <main+0x250>)
 8000e06:	492b      	ldr	r1, [pc, #172]	@ (8000eb4 <main+0x26c>)
 8000e08:	f00f fb94 	bl	8010534 <siprintf>

	  if (f_size(&file) >= 1) {            		   // если что-то уже записано, тогда переходим ниже и пишем
 8000e0c:	f507 731e 	add.w	r3, r7, #632	@ 0x278
 8000e10:	f5a3 7314 	sub.w	r3, r3, #592	@ 0x250
 8000e14:	68db      	ldr	r3, [r3, #12]
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d014      	beq.n	8000e44 <main+0x1fc>
	    	  res1 = f_write(&file, space, 1, &bw);
 8000e1a:	463b      	mov	r3, r7
 8000e1c:	1d39      	adds	r1, r7, #4
 8000e1e:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 8000e22:	2201      	movs	r2, #1
 8000e24:	f00e f970 	bl	800f108 <f_write>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
	    	  res1 = f_write(&file, testBuffer, 31, &bw);
 8000e2e:	463b      	mov	r3, r7
 8000e30:	f107 0108 	add.w	r1, r7, #8
 8000e34:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 8000e38:	221f      	movs	r2, #31
 8000e3a:	f00e f965 	bl	800f108 <f_write>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
	      }
	  if (f_size(&file) < 1) res1 = f_write(&file, testBuffer, 24, &bw); // если еще ничего не записано, тогда записываем без отступа
 8000e44:	f507 731e 	add.w	r3, r7, #632	@ 0x278
 8000e48:	f5a3 7314 	sub.w	r3, r3, #592	@ 0x250
 8000e4c:	68db      	ldr	r3, [r3, #12]
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d10a      	bne.n	8000e68 <main+0x220>
 8000e52:	463b      	mov	r3, r7
 8000e54:	f107 0108 	add.w	r1, r7, #8
 8000e58:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 8000e5c:	2218      	movs	r2, #24
 8000e5e:	f00e f953 	bl	800f108 <f_write>
 8000e62:	4603      	mov	r3, r0
 8000e64:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267

	  f_close(&file); 							   // после записи закрываем файл
 8000e68:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f00e fb3e 	bl	800f4ee <f_close>

	  HAL_Delay(100);
 8000e72:	2064      	movs	r0, #100	@ 0x64
 8000e74:	f001 f836 	bl	8001ee4 <HAL_Delay>
	  SSD1306_UpdateScreen();
 8000e78:	f000 fb2a 	bl	80014d0 <SSD1306_UpdateScreen>
	  get_time_date(timeData, dateData);
 8000e7c:	e720      	b.n	8000cc0 <main+0x78>
 8000e7e:	bf00      	nop
 8000e80:	66666666 	.word	0x66666666
 8000e84:	400a6666 	.word	0x400a6666
 8000e88:	200007d8 	.word	0x200007d8
 8000e8c:	200007dc 	.word	0x200007dc
 8000e90:	40020000 	.word	0x40020000
 8000e94:	200003b4 	.word	0x200003b4
 8000e98:	200003a4 	.word	0x200003a4
 8000e9c:	20000000 	.word	0x20000000
 8000ea0:	20000188 	.word	0x20000188
 8000ea4:	457fa000 	.word	0x457fa000
 8000ea8:	42c80000 	.word	0x42c80000
 8000eac:	08010eac 	.word	0x08010eac
 8000eb0:	08010ebc 	.word	0x08010ebc
 8000eb4:	08010ec8 	.word	0x08010ec8

08000eb8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b094      	sub	sp, #80	@ 0x50
 8000ebc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ebe:	f107 0320 	add.w	r3, r7, #32
 8000ec2:	2230      	movs	r2, #48	@ 0x30
 8000ec4:	2100      	movs	r1, #0
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	f00f fb54 	bl	8010574 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ecc:	f107 030c 	add.w	r3, r7, #12
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	601a      	str	r2, [r3, #0]
 8000ed4:	605a      	str	r2, [r3, #4]
 8000ed6:	609a      	str	r2, [r3, #8]
 8000ed8:	60da      	str	r2, [r3, #12]
 8000eda:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000edc:	2300      	movs	r3, #0
 8000ede:	60bb      	str	r3, [r7, #8]
 8000ee0:	4b29      	ldr	r3, [pc, #164]	@ (8000f88 <SystemClock_Config+0xd0>)
 8000ee2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ee4:	4a28      	ldr	r2, [pc, #160]	@ (8000f88 <SystemClock_Config+0xd0>)
 8000ee6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000eea:	6413      	str	r3, [r2, #64]	@ 0x40
 8000eec:	4b26      	ldr	r3, [pc, #152]	@ (8000f88 <SystemClock_Config+0xd0>)
 8000eee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ef0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ef4:	60bb      	str	r3, [r7, #8]
 8000ef6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ef8:	2300      	movs	r3, #0
 8000efa:	607b      	str	r3, [r7, #4]
 8000efc:	4b23      	ldr	r3, [pc, #140]	@ (8000f8c <SystemClock_Config+0xd4>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	4a22      	ldr	r2, [pc, #136]	@ (8000f8c <SystemClock_Config+0xd4>)
 8000f02:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000f06:	6013      	str	r3, [r2, #0]
 8000f08:	4b20      	ldr	r3, [pc, #128]	@ (8000f8c <SystemClock_Config+0xd4>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000f10:	607b      	str	r3, [r7, #4]
 8000f12:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8000f14:	2305      	movs	r3, #5
 8000f16:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f18:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000f1c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000f1e:	2301      	movs	r3, #1
 8000f20:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f22:	2302      	movs	r3, #2
 8000f24:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f26:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000f2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000f2c:	2319      	movs	r3, #25
 8000f2e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000f30:	23c0      	movs	r3, #192	@ 0xc0
 8000f32:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f34:	2302      	movs	r3, #2
 8000f36:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000f38:	2304      	movs	r3, #4
 8000f3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f3c:	f107 0320 	add.w	r3, r7, #32
 8000f40:	4618      	mov	r0, r3
 8000f42:	f004 fad9 	bl	80054f8 <HAL_RCC_OscConfig>
 8000f46:	4603      	mov	r3, r0
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d001      	beq.n	8000f50 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000f4c:	f000 f9f6 	bl	800133c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f50:	230f      	movs	r3, #15
 8000f52:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f54:	2302      	movs	r3, #2
 8000f56:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f5c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f60:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f62:	2300      	movs	r3, #0
 8000f64:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000f66:	f107 030c 	add.w	r3, r7, #12
 8000f6a:	2103      	movs	r1, #3
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f004 fd3b 	bl	80059e8 <HAL_RCC_ClockConfig>
 8000f72:	4603      	mov	r3, r0
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d001      	beq.n	8000f7c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000f78:	f000 f9e0 	bl	800133c <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8000f7c:	f004 fe1a 	bl	8005bb4 <HAL_RCC_EnableCSS>
}
 8000f80:	bf00      	nop
 8000f82:	3750      	adds	r7, #80	@ 0x50
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}
 8000f88:	40023800 	.word	0x40023800
 8000f8c:	40007000 	.word	0x40007000

08000f90 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b084      	sub	sp, #16
 8000f94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f96:	463b      	mov	r3, r7
 8000f98:	2200      	movs	r2, #0
 8000f9a:	601a      	str	r2, [r3, #0]
 8000f9c:	605a      	str	r2, [r3, #4]
 8000f9e:	609a      	str	r2, [r3, #8]
 8000fa0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000fa2:	4b21      	ldr	r3, [pc, #132]	@ (8001028 <MX_ADC1_Init+0x98>)
 8000fa4:	4a21      	ldr	r2, [pc, #132]	@ (800102c <MX_ADC1_Init+0x9c>)
 8000fa6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000fa8:	4b1f      	ldr	r3, [pc, #124]	@ (8001028 <MX_ADC1_Init+0x98>)
 8000faa:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000fae:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000fb0:	4b1d      	ldr	r3, [pc, #116]	@ (8001028 <MX_ADC1_Init+0x98>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000fb6:	4b1c      	ldr	r3, [pc, #112]	@ (8001028 <MX_ADC1_Init+0x98>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000fbc:	4b1a      	ldr	r3, [pc, #104]	@ (8001028 <MX_ADC1_Init+0x98>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000fc2:	4b19      	ldr	r3, [pc, #100]	@ (8001028 <MX_ADC1_Init+0x98>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000fca:	4b17      	ldr	r3, [pc, #92]	@ (8001028 <MX_ADC1_Init+0x98>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000fd0:	4b15      	ldr	r3, [pc, #84]	@ (8001028 <MX_ADC1_Init+0x98>)
 8000fd2:	4a17      	ldr	r2, [pc, #92]	@ (8001030 <MX_ADC1_Init+0xa0>)
 8000fd4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000fd6:	4b14      	ldr	r3, [pc, #80]	@ (8001028 <MX_ADC1_Init+0x98>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000fdc:	4b12      	ldr	r3, [pc, #72]	@ (8001028 <MX_ADC1_Init+0x98>)
 8000fde:	2201      	movs	r2, #1
 8000fe0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000fe2:	4b11      	ldr	r3, [pc, #68]	@ (8001028 <MX_ADC1_Init+0x98>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000fea:	4b0f      	ldr	r3, [pc, #60]	@ (8001028 <MX_ADC1_Init+0x98>)
 8000fec:	2201      	movs	r2, #1
 8000fee:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ff0:	480d      	ldr	r0, [pc, #52]	@ (8001028 <MX_ADC1_Init+0x98>)
 8000ff2:	f000 ff9b 	bl	8001f2c <HAL_ADC_Init>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d001      	beq.n	8001000 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000ffc:	f000 f99e 	bl	800133c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001000:	2300      	movs	r3, #0
 8001002:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001004:	2301      	movs	r3, #1
 8001006:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001008:	2300      	movs	r3, #0
 800100a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800100c:	463b      	mov	r3, r7
 800100e:	4619      	mov	r1, r3
 8001010:	4805      	ldr	r0, [pc, #20]	@ (8001028 <MX_ADC1_Init+0x98>)
 8001012:	f001 f94f 	bl	80022b4 <HAL_ADC_ConfigChannel>
 8001016:	4603      	mov	r3, r0
 8001018:	2b00      	cmp	r3, #0
 800101a:	d001      	beq.n	8001020 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800101c:	f000 f98e 	bl	800133c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001020:	bf00      	nop
 8001022:	3710      	adds	r7, #16
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}
 8001028:	20000188 	.word	0x20000188
 800102c:	40012000 	.word	0x40012000
 8001030:	0f000001 	.word	0x0f000001

08001034 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001038:	4b12      	ldr	r3, [pc, #72]	@ (8001084 <MX_I2C1_Init+0x50>)
 800103a:	4a13      	ldr	r2, [pc, #76]	@ (8001088 <MX_I2C1_Init+0x54>)
 800103c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800103e:	4b11      	ldr	r3, [pc, #68]	@ (8001084 <MX_I2C1_Init+0x50>)
 8001040:	4a12      	ldr	r2, [pc, #72]	@ (800108c <MX_I2C1_Init+0x58>)
 8001042:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001044:	4b0f      	ldr	r3, [pc, #60]	@ (8001084 <MX_I2C1_Init+0x50>)
 8001046:	2200      	movs	r2, #0
 8001048:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800104a:	4b0e      	ldr	r3, [pc, #56]	@ (8001084 <MX_I2C1_Init+0x50>)
 800104c:	2200      	movs	r2, #0
 800104e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001050:	4b0c      	ldr	r3, [pc, #48]	@ (8001084 <MX_I2C1_Init+0x50>)
 8001052:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001056:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001058:	4b0a      	ldr	r3, [pc, #40]	@ (8001084 <MX_I2C1_Init+0x50>)
 800105a:	2200      	movs	r2, #0
 800105c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800105e:	4b09      	ldr	r3, [pc, #36]	@ (8001084 <MX_I2C1_Init+0x50>)
 8001060:	2200      	movs	r2, #0
 8001062:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001064:	4b07      	ldr	r3, [pc, #28]	@ (8001084 <MX_I2C1_Init+0x50>)
 8001066:	2200      	movs	r2, #0
 8001068:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800106a:	4b06      	ldr	r3, [pc, #24]	@ (8001084 <MX_I2C1_Init+0x50>)
 800106c:	2200      	movs	r2, #0
 800106e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001070:	4804      	ldr	r0, [pc, #16]	@ (8001084 <MX_I2C1_Init+0x50>)
 8001072:	f002 f9f7 	bl	8003464 <HAL_I2C_Init>
 8001076:	4603      	mov	r3, r0
 8001078:	2b00      	cmp	r3, #0
 800107a:	d001      	beq.n	8001080 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800107c:	f000 f95e 	bl	800133c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001080:	bf00      	nop
 8001082:	bd80      	pop	{r7, pc}
 8001084:	200001d0 	.word	0x200001d0
 8001088:	40005400 	.word	0x40005400
 800108c:	00061a80 	.word	0x00061a80

08001090 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b086      	sub	sp, #24
 8001094:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001096:	1d3b      	adds	r3, r7, #4
 8001098:	2200      	movs	r2, #0
 800109a:	601a      	str	r2, [r3, #0]
 800109c:	605a      	str	r2, [r3, #4]
 800109e:	609a      	str	r2, [r3, #8]
 80010a0:	60da      	str	r2, [r3, #12]
 80010a2:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80010a4:	2300      	movs	r3, #0
 80010a6:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80010a8:	4b24      	ldr	r3, [pc, #144]	@ (800113c <MX_RTC_Init+0xac>)
 80010aa:	4a25      	ldr	r2, [pc, #148]	@ (8001140 <MX_RTC_Init+0xb0>)
 80010ac:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80010ae:	4b23      	ldr	r3, [pc, #140]	@ (800113c <MX_RTC_Init+0xac>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80010b4:	4b21      	ldr	r3, [pc, #132]	@ (800113c <MX_RTC_Init+0xac>)
 80010b6:	227f      	movs	r2, #127	@ 0x7f
 80010b8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80010ba:	4b20      	ldr	r3, [pc, #128]	@ (800113c <MX_RTC_Init+0xac>)
 80010bc:	22ff      	movs	r2, #255	@ 0xff
 80010be:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80010c0:	4b1e      	ldr	r3, [pc, #120]	@ (800113c <MX_RTC_Init+0xac>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80010c6:	4b1d      	ldr	r3, [pc, #116]	@ (800113c <MX_RTC_Init+0xac>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80010cc:	4b1b      	ldr	r3, [pc, #108]	@ (800113c <MX_RTC_Init+0xac>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80010d2:	481a      	ldr	r0, [pc, #104]	@ (800113c <MX_RTC_Init+0xac>)
 80010d4:	f004 ff80 	bl	8005fd8 <HAL_RTC_Init>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d001      	beq.n	80010e2 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 80010de:	f000 f92d 	bl	800133c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x17;
 80010e2:	2317      	movs	r3, #23
 80010e4:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x44;
 80010e6:	2344      	movs	r3, #68	@ 0x44
 80010e8:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 80010ea:	2300      	movs	r3, #0
 80010ec:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80010ee:	2300      	movs	r3, #0
 80010f0:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80010f2:	2300      	movs	r3, #0
 80010f4:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80010f6:	1d3b      	adds	r3, r7, #4
 80010f8:	2201      	movs	r2, #1
 80010fa:	4619      	mov	r1, r3
 80010fc:	480f      	ldr	r0, [pc, #60]	@ (800113c <MX_RTC_Init+0xac>)
 80010fe:	f004 ffee 	bl	80060de <HAL_RTC_SetTime>
 8001102:	4603      	mov	r3, r0
 8001104:	2b00      	cmp	r3, #0
 8001106:	d001      	beq.n	800110c <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8001108:	f000 f918 	bl	800133c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_FRIDAY;
 800110c:	2305      	movs	r3, #5
 800110e:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_SEPTEMBER;
 8001110:	2309      	movs	r3, #9
 8001112:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x6;
 8001114:	2306      	movs	r3, #6
 8001116:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x24;
 8001118:	2324      	movs	r3, #36	@ 0x24
 800111a:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800111c:	463b      	mov	r3, r7
 800111e:	2201      	movs	r2, #1
 8001120:	4619      	mov	r1, r3
 8001122:	4806      	ldr	r0, [pc, #24]	@ (800113c <MX_RTC_Init+0xac>)
 8001124:	f005 f8d3 	bl	80062ce <HAL_RTC_SetDate>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d001      	beq.n	8001132 <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 800112e:	f000 f905 	bl	800133c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001132:	bf00      	nop
 8001134:	3718      	adds	r7, #24
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	20000224 	.word	0x20000224
 8001140:	40002800 	.word	0x40002800

08001144 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001148:	4b17      	ldr	r3, [pc, #92]	@ (80011a8 <MX_SPI2_Init+0x64>)
 800114a:	4a18      	ldr	r2, [pc, #96]	@ (80011ac <MX_SPI2_Init+0x68>)
 800114c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800114e:	4b16      	ldr	r3, [pc, #88]	@ (80011a8 <MX_SPI2_Init+0x64>)
 8001150:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001154:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001156:	4b14      	ldr	r3, [pc, #80]	@ (80011a8 <MX_SPI2_Init+0x64>)
 8001158:	2200      	movs	r2, #0
 800115a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800115c:	4b12      	ldr	r3, [pc, #72]	@ (80011a8 <MX_SPI2_Init+0x64>)
 800115e:	2200      	movs	r2, #0
 8001160:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001162:	4b11      	ldr	r3, [pc, #68]	@ (80011a8 <MX_SPI2_Init+0x64>)
 8001164:	2200      	movs	r2, #0
 8001166:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001168:	4b0f      	ldr	r3, [pc, #60]	@ (80011a8 <MX_SPI2_Init+0x64>)
 800116a:	2200      	movs	r2, #0
 800116c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800116e:	4b0e      	ldr	r3, [pc, #56]	@ (80011a8 <MX_SPI2_Init+0x64>)
 8001170:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001174:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8001176:	4b0c      	ldr	r3, [pc, #48]	@ (80011a8 <MX_SPI2_Init+0x64>)
 8001178:	2230      	movs	r2, #48	@ 0x30
 800117a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800117c:	4b0a      	ldr	r3, [pc, #40]	@ (80011a8 <MX_SPI2_Init+0x64>)
 800117e:	2200      	movs	r2, #0
 8001180:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001182:	4b09      	ldr	r3, [pc, #36]	@ (80011a8 <MX_SPI2_Init+0x64>)
 8001184:	2200      	movs	r2, #0
 8001186:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001188:	4b07      	ldr	r3, [pc, #28]	@ (80011a8 <MX_SPI2_Init+0x64>)
 800118a:	2200      	movs	r2, #0
 800118c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 800118e:	4b06      	ldr	r3, [pc, #24]	@ (80011a8 <MX_SPI2_Init+0x64>)
 8001190:	220a      	movs	r2, #10
 8001192:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001194:	4804      	ldr	r0, [pc, #16]	@ (80011a8 <MX_SPI2_Init+0x64>)
 8001196:	f005 fa2b 	bl	80065f0 <HAL_SPI_Init>
 800119a:	4603      	mov	r3, r0
 800119c:	2b00      	cmp	r3, #0
 800119e:	d001      	beq.n	80011a4 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80011a0:	f000 f8cc 	bl	800133c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80011a4:	bf00      	nop
 80011a6:	bd80      	pop	{r7, pc}
 80011a8:	20000244 	.word	0x20000244
 80011ac:	40003800 	.word	0x40003800

080011b0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80011b4:	4b11      	ldr	r3, [pc, #68]	@ (80011fc <MX_USART1_UART_Init+0x4c>)
 80011b6:	4a12      	ldr	r2, [pc, #72]	@ (8001200 <MX_USART1_UART_Init+0x50>)
 80011b8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80011ba:	4b10      	ldr	r3, [pc, #64]	@ (80011fc <MX_USART1_UART_Init+0x4c>)
 80011bc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80011c0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80011c2:	4b0e      	ldr	r3, [pc, #56]	@ (80011fc <MX_USART1_UART_Init+0x4c>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80011c8:	4b0c      	ldr	r3, [pc, #48]	@ (80011fc <MX_USART1_UART_Init+0x4c>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80011ce:	4b0b      	ldr	r3, [pc, #44]	@ (80011fc <MX_USART1_UART_Init+0x4c>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80011d4:	4b09      	ldr	r3, [pc, #36]	@ (80011fc <MX_USART1_UART_Init+0x4c>)
 80011d6:	220c      	movs	r2, #12
 80011d8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011da:	4b08      	ldr	r3, [pc, #32]	@ (80011fc <MX_USART1_UART_Init+0x4c>)
 80011dc:	2200      	movs	r2, #0
 80011de:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80011e0:	4b06      	ldr	r3, [pc, #24]	@ (80011fc <MX_USART1_UART_Init+0x4c>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80011e6:	4805      	ldr	r0, [pc, #20]	@ (80011fc <MX_USART1_UART_Init+0x4c>)
 80011e8:	f005 fe0a 	bl	8006e00 <HAL_UART_Init>
 80011ec:	4603      	mov	r3, r0
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d001      	beq.n	80011f6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80011f2:	f000 f8a3 	bl	800133c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80011f6:	bf00      	nop
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	2000035c 	.word	0x2000035c
 8001200:	40011000 	.word	0x40011000

08001204 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b082      	sub	sp, #8
 8001208:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800120a:	2300      	movs	r3, #0
 800120c:	607b      	str	r3, [r7, #4]
 800120e:	4b10      	ldr	r3, [pc, #64]	@ (8001250 <MX_DMA_Init+0x4c>)
 8001210:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001212:	4a0f      	ldr	r2, [pc, #60]	@ (8001250 <MX_DMA_Init+0x4c>)
 8001214:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001218:	6313      	str	r3, [r2, #48]	@ 0x30
 800121a:	4b0d      	ldr	r3, [pc, #52]	@ (8001250 <MX_DMA_Init+0x4c>)
 800121c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800121e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001222:	607b      	str	r3, [r7, #4]
 8001224:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8001226:	2200      	movs	r2, #0
 8001228:	2100      	movs	r1, #0
 800122a:	200e      	movs	r0, #14
 800122c:	f001 fb4b 	bl	80028c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8001230:	200e      	movs	r0, #14
 8001232:	f001 fb64 	bl	80028fe <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8001236:	2200      	movs	r2, #0
 8001238:	2100      	movs	r1, #0
 800123a:	200f      	movs	r0, #15
 800123c:	f001 fb43 	bl	80028c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8001240:	200f      	movs	r0, #15
 8001242:	f001 fb5c 	bl	80028fe <HAL_NVIC_EnableIRQ>

}
 8001246:	bf00      	nop
 8001248:	3708      	adds	r7, #8
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	40023800 	.word	0x40023800

08001254 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b08a      	sub	sp, #40	@ 0x28
 8001258:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800125a:	f107 0314 	add.w	r3, r7, #20
 800125e:	2200      	movs	r2, #0
 8001260:	601a      	str	r2, [r3, #0]
 8001262:	605a      	str	r2, [r3, #4]
 8001264:	609a      	str	r2, [r3, #8]
 8001266:	60da      	str	r2, [r3, #12]
 8001268:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800126a:	2300      	movs	r3, #0
 800126c:	613b      	str	r3, [r7, #16]
 800126e:	4b30      	ldr	r3, [pc, #192]	@ (8001330 <MX_GPIO_Init+0xdc>)
 8001270:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001272:	4a2f      	ldr	r2, [pc, #188]	@ (8001330 <MX_GPIO_Init+0xdc>)
 8001274:	f043 0304 	orr.w	r3, r3, #4
 8001278:	6313      	str	r3, [r2, #48]	@ 0x30
 800127a:	4b2d      	ldr	r3, [pc, #180]	@ (8001330 <MX_GPIO_Init+0xdc>)
 800127c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800127e:	f003 0304 	and.w	r3, r3, #4
 8001282:	613b      	str	r3, [r7, #16]
 8001284:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001286:	2300      	movs	r3, #0
 8001288:	60fb      	str	r3, [r7, #12]
 800128a:	4b29      	ldr	r3, [pc, #164]	@ (8001330 <MX_GPIO_Init+0xdc>)
 800128c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800128e:	4a28      	ldr	r2, [pc, #160]	@ (8001330 <MX_GPIO_Init+0xdc>)
 8001290:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001294:	6313      	str	r3, [r2, #48]	@ 0x30
 8001296:	4b26      	ldr	r3, [pc, #152]	@ (8001330 <MX_GPIO_Init+0xdc>)
 8001298:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800129a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800129e:	60fb      	str	r3, [r7, #12]
 80012a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012a2:	2300      	movs	r3, #0
 80012a4:	60bb      	str	r3, [r7, #8]
 80012a6:	4b22      	ldr	r3, [pc, #136]	@ (8001330 <MX_GPIO_Init+0xdc>)
 80012a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012aa:	4a21      	ldr	r2, [pc, #132]	@ (8001330 <MX_GPIO_Init+0xdc>)
 80012ac:	f043 0301 	orr.w	r3, r3, #1
 80012b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80012b2:	4b1f      	ldr	r3, [pc, #124]	@ (8001330 <MX_GPIO_Init+0xdc>)
 80012b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012b6:	f003 0301 	and.w	r3, r3, #1
 80012ba:	60bb      	str	r3, [r7, #8]
 80012bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012be:	2300      	movs	r3, #0
 80012c0:	607b      	str	r3, [r7, #4]
 80012c2:	4b1b      	ldr	r3, [pc, #108]	@ (8001330 <MX_GPIO_Init+0xdc>)
 80012c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012c6:	4a1a      	ldr	r2, [pc, #104]	@ (8001330 <MX_GPIO_Init+0xdc>)
 80012c8:	f043 0302 	orr.w	r3, r3, #2
 80012cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80012ce:	4b18      	ldr	r3, [pc, #96]	@ (8001330 <MX_GPIO_Init+0xdc>)
 80012d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012d2:	f003 0302 	and.w	r3, r3, #2
 80012d6:	607b      	str	r3, [r7, #4]
 80012d8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80012da:	2200      	movs	r2, #0
 80012dc:	2120      	movs	r1, #32
 80012de:	4815      	ldr	r0, [pc, #84]	@ (8001334 <MX_GPIO_Init+0xe0>)
 80012e0:	f002 f88c 	bl	80033fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 80012e4:	2200      	movs	r2, #0
 80012e6:	2110      	movs	r1, #16
 80012e8:	4813      	ldr	r0, [pc, #76]	@ (8001338 <MX_GPIO_Init+0xe4>)
 80012ea:	f002 f887 	bl	80033fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80012ee:	2320      	movs	r3, #32
 80012f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012f2:	2301      	movs	r3, #1
 80012f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f6:	2300      	movs	r3, #0
 80012f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012fa:	2300      	movs	r3, #0
 80012fc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80012fe:	f107 0314 	add.w	r3, r7, #20
 8001302:	4619      	mov	r1, r3
 8001304:	480b      	ldr	r0, [pc, #44]	@ (8001334 <MX_GPIO_Init+0xe0>)
 8001306:	f001 fef5 	bl	80030f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_CS_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 800130a:	2310      	movs	r3, #16
 800130c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800130e:	2301      	movs	r3, #1
 8001310:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001312:	2300      	movs	r3, #0
 8001314:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001316:	2300      	movs	r3, #0
 8001318:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 800131a:	f107 0314 	add.w	r3, r7, #20
 800131e:	4619      	mov	r1, r3
 8001320:	4805      	ldr	r0, [pc, #20]	@ (8001338 <MX_GPIO_Init+0xe4>)
 8001322:	f001 fee7 	bl	80030f4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001326:	bf00      	nop
 8001328:	3728      	adds	r7, #40	@ 0x28
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	40023800 	.word	0x40023800
 8001334:	40020000 	.word	0x40020000
 8001338:	40020800 	.word	0x40020800

0800133c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800133c:	b480      	push	{r7}
 800133e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001340:	b672      	cpsid	i
}
 8001342:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001344:	bf00      	nop
 8001346:	e7fd      	b.n	8001344 <Error_Handler+0x8>

08001348 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8001348:	b580      	push	{r7, lr}
 800134a:	b082      	sub	sp, #8
 800134c:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 800134e:	f000 fa27 	bl	80017a0 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8001352:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8001356:	2201      	movs	r2, #1
 8001358:	2178      	movs	r1, #120	@ 0x78
 800135a:	485b      	ldr	r0, [pc, #364]	@ (80014c8 <SSD1306_Init+0x180>)
 800135c:	f002 fac4 	bl	80038e8 <HAL_I2C_IsDeviceReady>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d001      	beq.n	800136a <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8001366:	2300      	movs	r3, #0
 8001368:	e0a9      	b.n	80014be <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 800136a:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 800136e:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001370:	e002      	b.n	8001378 <SSD1306_Init+0x30>
		p--;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	3b01      	subs	r3, #1
 8001376:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	2b00      	cmp	r3, #0
 800137c:	d1f9      	bne.n	8001372 <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 800137e:	22ae      	movs	r2, #174	@ 0xae
 8001380:	2100      	movs	r1, #0
 8001382:	2078      	movs	r0, #120	@ 0x78
 8001384:	f000 fa88 	bl	8001898 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8001388:	2220      	movs	r2, #32
 800138a:	2100      	movs	r1, #0
 800138c:	2078      	movs	r0, #120	@ 0x78
 800138e:	f000 fa83 	bl	8001898 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8001392:	2210      	movs	r2, #16
 8001394:	2100      	movs	r1, #0
 8001396:	2078      	movs	r0, #120	@ 0x78
 8001398:	f000 fa7e 	bl	8001898 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 800139c:	22b0      	movs	r2, #176	@ 0xb0
 800139e:	2100      	movs	r1, #0
 80013a0:	2078      	movs	r0, #120	@ 0x78
 80013a2:	f000 fa79 	bl	8001898 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 80013a6:	22c8      	movs	r2, #200	@ 0xc8
 80013a8:	2100      	movs	r1, #0
 80013aa:	2078      	movs	r0, #120	@ 0x78
 80013ac:	f000 fa74 	bl	8001898 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 80013b0:	2200      	movs	r2, #0
 80013b2:	2100      	movs	r1, #0
 80013b4:	2078      	movs	r0, #120	@ 0x78
 80013b6:	f000 fa6f 	bl	8001898 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 80013ba:	2210      	movs	r2, #16
 80013bc:	2100      	movs	r1, #0
 80013be:	2078      	movs	r0, #120	@ 0x78
 80013c0:	f000 fa6a 	bl	8001898 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 80013c4:	2240      	movs	r2, #64	@ 0x40
 80013c6:	2100      	movs	r1, #0
 80013c8:	2078      	movs	r0, #120	@ 0x78
 80013ca:	f000 fa65 	bl	8001898 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 80013ce:	2281      	movs	r2, #129	@ 0x81
 80013d0:	2100      	movs	r1, #0
 80013d2:	2078      	movs	r0, #120	@ 0x78
 80013d4:	f000 fa60 	bl	8001898 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 80013d8:	22ff      	movs	r2, #255	@ 0xff
 80013da:	2100      	movs	r1, #0
 80013dc:	2078      	movs	r0, #120	@ 0x78
 80013de:	f000 fa5b 	bl	8001898 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 80013e2:	22a1      	movs	r2, #161	@ 0xa1
 80013e4:	2100      	movs	r1, #0
 80013e6:	2078      	movs	r0, #120	@ 0x78
 80013e8:	f000 fa56 	bl	8001898 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 80013ec:	22a6      	movs	r2, #166	@ 0xa6
 80013ee:	2100      	movs	r1, #0
 80013f0:	2078      	movs	r0, #120	@ 0x78
 80013f2:	f000 fa51 	bl	8001898 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 80013f6:	22a8      	movs	r2, #168	@ 0xa8
 80013f8:	2100      	movs	r1, #0
 80013fa:	2078      	movs	r0, #120	@ 0x78
 80013fc:	f000 fa4c 	bl	8001898 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8001400:	223f      	movs	r2, #63	@ 0x3f
 8001402:	2100      	movs	r1, #0
 8001404:	2078      	movs	r0, #120	@ 0x78
 8001406:	f000 fa47 	bl	8001898 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800140a:	22a4      	movs	r2, #164	@ 0xa4
 800140c:	2100      	movs	r1, #0
 800140e:	2078      	movs	r0, #120	@ 0x78
 8001410:	f000 fa42 	bl	8001898 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8001414:	22d3      	movs	r2, #211	@ 0xd3
 8001416:	2100      	movs	r1, #0
 8001418:	2078      	movs	r0, #120	@ 0x78
 800141a:	f000 fa3d 	bl	8001898 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 800141e:	2200      	movs	r2, #0
 8001420:	2100      	movs	r1, #0
 8001422:	2078      	movs	r0, #120	@ 0x78
 8001424:	f000 fa38 	bl	8001898 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8001428:	22d5      	movs	r2, #213	@ 0xd5
 800142a:	2100      	movs	r1, #0
 800142c:	2078      	movs	r0, #120	@ 0x78
 800142e:	f000 fa33 	bl	8001898 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8001432:	22f0      	movs	r2, #240	@ 0xf0
 8001434:	2100      	movs	r1, #0
 8001436:	2078      	movs	r0, #120	@ 0x78
 8001438:	f000 fa2e 	bl	8001898 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 800143c:	22d9      	movs	r2, #217	@ 0xd9
 800143e:	2100      	movs	r1, #0
 8001440:	2078      	movs	r0, #120	@ 0x78
 8001442:	f000 fa29 	bl	8001898 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8001446:	2222      	movs	r2, #34	@ 0x22
 8001448:	2100      	movs	r1, #0
 800144a:	2078      	movs	r0, #120	@ 0x78
 800144c:	f000 fa24 	bl	8001898 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8001450:	22da      	movs	r2, #218	@ 0xda
 8001452:	2100      	movs	r1, #0
 8001454:	2078      	movs	r0, #120	@ 0x78
 8001456:	f000 fa1f 	bl	8001898 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 800145a:	2212      	movs	r2, #18
 800145c:	2100      	movs	r1, #0
 800145e:	2078      	movs	r0, #120	@ 0x78
 8001460:	f000 fa1a 	bl	8001898 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8001464:	22db      	movs	r2, #219	@ 0xdb
 8001466:	2100      	movs	r1, #0
 8001468:	2078      	movs	r0, #120	@ 0x78
 800146a:	f000 fa15 	bl	8001898 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 800146e:	2220      	movs	r2, #32
 8001470:	2100      	movs	r1, #0
 8001472:	2078      	movs	r0, #120	@ 0x78
 8001474:	f000 fa10 	bl	8001898 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8001478:	228d      	movs	r2, #141	@ 0x8d
 800147a:	2100      	movs	r1, #0
 800147c:	2078      	movs	r0, #120	@ 0x78
 800147e:	f000 fa0b 	bl	8001898 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8001482:	2214      	movs	r2, #20
 8001484:	2100      	movs	r1, #0
 8001486:	2078      	movs	r0, #120	@ 0x78
 8001488:	f000 fa06 	bl	8001898 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 800148c:	22af      	movs	r2, #175	@ 0xaf
 800148e:	2100      	movs	r1, #0
 8001490:	2078      	movs	r0, #120	@ 0x78
 8001492:	f000 fa01 	bl	8001898 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8001496:	222e      	movs	r2, #46	@ 0x2e
 8001498:	2100      	movs	r1, #0
 800149a:	2078      	movs	r0, #120	@ 0x78
 800149c:	f000 f9fc 	bl	8001898 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 80014a0:	2000      	movs	r0, #0
 80014a2:	f000 f843 	bl	800152c <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 80014a6:	f000 f813 	bl	80014d0 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 80014aa:	4b08      	ldr	r3, [pc, #32]	@ (80014cc <SSD1306_Init+0x184>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 80014b0:	4b06      	ldr	r3, [pc, #24]	@ (80014cc <SSD1306_Init+0x184>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 80014b6:	4b05      	ldr	r3, [pc, #20]	@ (80014cc <SSD1306_Init+0x184>)
 80014b8:	2201      	movs	r2, #1
 80014ba:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 80014bc:	2301      	movs	r3, #1
}
 80014be:	4618      	mov	r0, r3
 80014c0:	3708      	adds	r7, #8
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	200001d0 	.word	0x200001d0
 80014cc:	200007c4 	.word	0x200007c4

080014d0 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b082      	sub	sp, #8
 80014d4:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 80014d6:	2300      	movs	r3, #0
 80014d8:	71fb      	strb	r3, [r7, #7]
 80014da:	e01d      	b.n	8001518 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 80014dc:	79fb      	ldrb	r3, [r7, #7]
 80014de:	3b50      	subs	r3, #80	@ 0x50
 80014e0:	b2db      	uxtb	r3, r3
 80014e2:	461a      	mov	r2, r3
 80014e4:	2100      	movs	r1, #0
 80014e6:	2078      	movs	r0, #120	@ 0x78
 80014e8:	f000 f9d6 	bl	8001898 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 80014ec:	2200      	movs	r2, #0
 80014ee:	2100      	movs	r1, #0
 80014f0:	2078      	movs	r0, #120	@ 0x78
 80014f2:	f000 f9d1 	bl	8001898 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 80014f6:	2210      	movs	r2, #16
 80014f8:	2100      	movs	r1, #0
 80014fa:	2078      	movs	r0, #120	@ 0x78
 80014fc:	f000 f9cc 	bl	8001898 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8001500:	79fb      	ldrb	r3, [r7, #7]
 8001502:	01db      	lsls	r3, r3, #7
 8001504:	4a08      	ldr	r2, [pc, #32]	@ (8001528 <SSD1306_UpdateScreen+0x58>)
 8001506:	441a      	add	r2, r3
 8001508:	2380      	movs	r3, #128	@ 0x80
 800150a:	2140      	movs	r1, #64	@ 0x40
 800150c:	2078      	movs	r0, #120	@ 0x78
 800150e:	f000 f95d 	bl	80017cc <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8001512:	79fb      	ldrb	r3, [r7, #7]
 8001514:	3301      	adds	r3, #1
 8001516:	71fb      	strb	r3, [r7, #7]
 8001518:	79fb      	ldrb	r3, [r7, #7]
 800151a:	2b07      	cmp	r3, #7
 800151c:	d9de      	bls.n	80014dc <SSD1306_UpdateScreen+0xc>
	}
}
 800151e:	bf00      	nop
 8001520:	bf00      	nop
 8001522:	3708      	adds	r7, #8
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}
 8001528:	200003c4 	.word	0x200003c4

0800152c <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 800152c:	b580      	push	{r7, lr}
 800152e:	b082      	sub	sp, #8
 8001530:	af00      	add	r7, sp, #0
 8001532:	4603      	mov	r3, r0
 8001534:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8001536:	79fb      	ldrb	r3, [r7, #7]
 8001538:	2b00      	cmp	r3, #0
 800153a:	d101      	bne.n	8001540 <SSD1306_Fill+0x14>
 800153c:	2300      	movs	r3, #0
 800153e:	e000      	b.n	8001542 <SSD1306_Fill+0x16>
 8001540:	23ff      	movs	r3, #255	@ 0xff
 8001542:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001546:	4619      	mov	r1, r3
 8001548:	4803      	ldr	r0, [pc, #12]	@ (8001558 <SSD1306_Fill+0x2c>)
 800154a:	f00f f813 	bl	8010574 <memset>
}
 800154e:	bf00      	nop
 8001550:	3708      	adds	r7, #8
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	200003c4 	.word	0x200003c4

0800155c <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 800155c:	b480      	push	{r7}
 800155e:	b083      	sub	sp, #12
 8001560:	af00      	add	r7, sp, #0
 8001562:	4603      	mov	r3, r0
 8001564:	80fb      	strh	r3, [r7, #6]
 8001566:	460b      	mov	r3, r1
 8001568:	80bb      	strh	r3, [r7, #4]
 800156a:	4613      	mov	r3, r2
 800156c:	70fb      	strb	r3, [r7, #3]
	if (
 800156e:	88fb      	ldrh	r3, [r7, #6]
 8001570:	2b7f      	cmp	r3, #127	@ 0x7f
 8001572:	d848      	bhi.n	8001606 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8001574:	88bb      	ldrh	r3, [r7, #4]
 8001576:	2b3f      	cmp	r3, #63	@ 0x3f
 8001578:	d845      	bhi.n	8001606 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 800157a:	4b26      	ldr	r3, [pc, #152]	@ (8001614 <SSD1306_DrawPixel+0xb8>)
 800157c:	791b      	ldrb	r3, [r3, #4]
 800157e:	2b00      	cmp	r3, #0
 8001580:	d006      	beq.n	8001590 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8001582:	78fb      	ldrb	r3, [r7, #3]
 8001584:	2b00      	cmp	r3, #0
 8001586:	bf0c      	ite	eq
 8001588:	2301      	moveq	r3, #1
 800158a:	2300      	movne	r3, #0
 800158c:	b2db      	uxtb	r3, r3
 800158e:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8001590:	78fb      	ldrb	r3, [r7, #3]
 8001592:	2b01      	cmp	r3, #1
 8001594:	d11a      	bne.n	80015cc <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001596:	88fa      	ldrh	r2, [r7, #6]
 8001598:	88bb      	ldrh	r3, [r7, #4]
 800159a:	08db      	lsrs	r3, r3, #3
 800159c:	b298      	uxth	r0, r3
 800159e:	4603      	mov	r3, r0
 80015a0:	01db      	lsls	r3, r3, #7
 80015a2:	4413      	add	r3, r2
 80015a4:	4a1c      	ldr	r2, [pc, #112]	@ (8001618 <SSD1306_DrawPixel+0xbc>)
 80015a6:	5cd3      	ldrb	r3, [r2, r3]
 80015a8:	b25a      	sxtb	r2, r3
 80015aa:	88bb      	ldrh	r3, [r7, #4]
 80015ac:	f003 0307 	and.w	r3, r3, #7
 80015b0:	2101      	movs	r1, #1
 80015b2:	fa01 f303 	lsl.w	r3, r1, r3
 80015b6:	b25b      	sxtb	r3, r3
 80015b8:	4313      	orrs	r3, r2
 80015ba:	b259      	sxtb	r1, r3
 80015bc:	88fa      	ldrh	r2, [r7, #6]
 80015be:	4603      	mov	r3, r0
 80015c0:	01db      	lsls	r3, r3, #7
 80015c2:	4413      	add	r3, r2
 80015c4:	b2c9      	uxtb	r1, r1
 80015c6:	4a14      	ldr	r2, [pc, #80]	@ (8001618 <SSD1306_DrawPixel+0xbc>)
 80015c8:	54d1      	strb	r1, [r2, r3]
 80015ca:	e01d      	b.n	8001608 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80015cc:	88fa      	ldrh	r2, [r7, #6]
 80015ce:	88bb      	ldrh	r3, [r7, #4]
 80015d0:	08db      	lsrs	r3, r3, #3
 80015d2:	b298      	uxth	r0, r3
 80015d4:	4603      	mov	r3, r0
 80015d6:	01db      	lsls	r3, r3, #7
 80015d8:	4413      	add	r3, r2
 80015da:	4a0f      	ldr	r2, [pc, #60]	@ (8001618 <SSD1306_DrawPixel+0xbc>)
 80015dc:	5cd3      	ldrb	r3, [r2, r3]
 80015de:	b25a      	sxtb	r2, r3
 80015e0:	88bb      	ldrh	r3, [r7, #4]
 80015e2:	f003 0307 	and.w	r3, r3, #7
 80015e6:	2101      	movs	r1, #1
 80015e8:	fa01 f303 	lsl.w	r3, r1, r3
 80015ec:	b25b      	sxtb	r3, r3
 80015ee:	43db      	mvns	r3, r3
 80015f0:	b25b      	sxtb	r3, r3
 80015f2:	4013      	ands	r3, r2
 80015f4:	b259      	sxtb	r1, r3
 80015f6:	88fa      	ldrh	r2, [r7, #6]
 80015f8:	4603      	mov	r3, r0
 80015fa:	01db      	lsls	r3, r3, #7
 80015fc:	4413      	add	r3, r2
 80015fe:	b2c9      	uxtb	r1, r1
 8001600:	4a05      	ldr	r2, [pc, #20]	@ (8001618 <SSD1306_DrawPixel+0xbc>)
 8001602:	54d1      	strb	r1, [r2, r3]
 8001604:	e000      	b.n	8001608 <SSD1306_DrawPixel+0xac>
		return;
 8001606:	bf00      	nop
	}
}
 8001608:	370c      	adds	r7, #12
 800160a:	46bd      	mov	sp, r7
 800160c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001610:	4770      	bx	lr
 8001612:	bf00      	nop
 8001614:	200007c4 	.word	0x200007c4
 8001618:	200003c4 	.word	0x200003c4

0800161c <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 800161c:	b480      	push	{r7}
 800161e:	b083      	sub	sp, #12
 8001620:	af00      	add	r7, sp, #0
 8001622:	4603      	mov	r3, r0
 8001624:	460a      	mov	r2, r1
 8001626:	80fb      	strh	r3, [r7, #6]
 8001628:	4613      	mov	r3, r2
 800162a:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 800162c:	4a05      	ldr	r2, [pc, #20]	@ (8001644 <SSD1306_GotoXY+0x28>)
 800162e:	88fb      	ldrh	r3, [r7, #6]
 8001630:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8001632:	4a04      	ldr	r2, [pc, #16]	@ (8001644 <SSD1306_GotoXY+0x28>)
 8001634:	88bb      	ldrh	r3, [r7, #4]
 8001636:	8053      	strh	r3, [r2, #2]
}
 8001638:	bf00      	nop
 800163a:	370c      	adds	r7, #12
 800163c:	46bd      	mov	sp, r7
 800163e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001642:	4770      	bx	lr
 8001644:	200007c4 	.word	0x200007c4

08001648 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001648:	b580      	push	{r7, lr}
 800164a:	b086      	sub	sp, #24
 800164c:	af00      	add	r7, sp, #0
 800164e:	4603      	mov	r3, r0
 8001650:	6039      	str	r1, [r7, #0]
 8001652:	71fb      	strb	r3, [r7, #7]
 8001654:	4613      	mov	r3, r2
 8001656:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001658:	4b39      	ldr	r3, [pc, #228]	@ (8001740 <SSD1306_Putc+0xf8>)
 800165a:	881b      	ldrh	r3, [r3, #0]
 800165c:	461a      	mov	r2, r3
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	781b      	ldrb	r3, [r3, #0]
 8001662:	4413      	add	r3, r2
	if (
 8001664:	2b7f      	cmp	r3, #127	@ 0x7f
 8001666:	dc07      	bgt.n	8001678 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8001668:	4b35      	ldr	r3, [pc, #212]	@ (8001740 <SSD1306_Putc+0xf8>)
 800166a:	885b      	ldrh	r3, [r3, #2]
 800166c:	461a      	mov	r2, r3
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	785b      	ldrb	r3, [r3, #1]
 8001672:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001674:	2b3f      	cmp	r3, #63	@ 0x3f
 8001676:	dd01      	ble.n	800167c <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8001678:	2300      	movs	r3, #0
 800167a:	e05d      	b.n	8001738 <SSD1306_Putc+0xf0>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 800167c:	2300      	movs	r3, #0
 800167e:	617b      	str	r3, [r7, #20]
 8001680:	e04b      	b.n	800171a <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	685a      	ldr	r2, [r3, #4]
 8001686:	79fb      	ldrb	r3, [r7, #7]
 8001688:	3b20      	subs	r3, #32
 800168a:	6839      	ldr	r1, [r7, #0]
 800168c:	7849      	ldrb	r1, [r1, #1]
 800168e:	fb01 f303 	mul.w	r3, r1, r3
 8001692:	4619      	mov	r1, r3
 8001694:	697b      	ldr	r3, [r7, #20]
 8001696:	440b      	add	r3, r1
 8001698:	005b      	lsls	r3, r3, #1
 800169a:	4413      	add	r3, r2
 800169c:	881b      	ldrh	r3, [r3, #0]
 800169e:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 80016a0:	2300      	movs	r3, #0
 80016a2:	613b      	str	r3, [r7, #16]
 80016a4:	e030      	b.n	8001708 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 80016a6:	68fa      	ldr	r2, [r7, #12]
 80016a8:	693b      	ldr	r3, [r7, #16]
 80016aa:	fa02 f303 	lsl.w	r3, r2, r3
 80016ae:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d010      	beq.n	80016d8 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 80016b6:	4b22      	ldr	r3, [pc, #136]	@ (8001740 <SSD1306_Putc+0xf8>)
 80016b8:	881a      	ldrh	r2, [r3, #0]
 80016ba:	693b      	ldr	r3, [r7, #16]
 80016bc:	b29b      	uxth	r3, r3
 80016be:	4413      	add	r3, r2
 80016c0:	b298      	uxth	r0, r3
 80016c2:	4b1f      	ldr	r3, [pc, #124]	@ (8001740 <SSD1306_Putc+0xf8>)
 80016c4:	885a      	ldrh	r2, [r3, #2]
 80016c6:	697b      	ldr	r3, [r7, #20]
 80016c8:	b29b      	uxth	r3, r3
 80016ca:	4413      	add	r3, r2
 80016cc:	b29b      	uxth	r3, r3
 80016ce:	79ba      	ldrb	r2, [r7, #6]
 80016d0:	4619      	mov	r1, r3
 80016d2:	f7ff ff43 	bl	800155c <SSD1306_DrawPixel>
 80016d6:	e014      	b.n	8001702 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 80016d8:	4b19      	ldr	r3, [pc, #100]	@ (8001740 <SSD1306_Putc+0xf8>)
 80016da:	881a      	ldrh	r2, [r3, #0]
 80016dc:	693b      	ldr	r3, [r7, #16]
 80016de:	b29b      	uxth	r3, r3
 80016e0:	4413      	add	r3, r2
 80016e2:	b298      	uxth	r0, r3
 80016e4:	4b16      	ldr	r3, [pc, #88]	@ (8001740 <SSD1306_Putc+0xf8>)
 80016e6:	885a      	ldrh	r2, [r3, #2]
 80016e8:	697b      	ldr	r3, [r7, #20]
 80016ea:	b29b      	uxth	r3, r3
 80016ec:	4413      	add	r3, r2
 80016ee:	b299      	uxth	r1, r3
 80016f0:	79bb      	ldrb	r3, [r7, #6]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	bf0c      	ite	eq
 80016f6:	2301      	moveq	r3, #1
 80016f8:	2300      	movne	r3, #0
 80016fa:	b2db      	uxtb	r3, r3
 80016fc:	461a      	mov	r2, r3
 80016fe:	f7ff ff2d 	bl	800155c <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8001702:	693b      	ldr	r3, [r7, #16]
 8001704:	3301      	adds	r3, #1
 8001706:	613b      	str	r3, [r7, #16]
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	781b      	ldrb	r3, [r3, #0]
 800170c:	461a      	mov	r2, r3
 800170e:	693b      	ldr	r3, [r7, #16]
 8001710:	4293      	cmp	r3, r2
 8001712:	d3c8      	bcc.n	80016a6 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8001714:	697b      	ldr	r3, [r7, #20]
 8001716:	3301      	adds	r3, #1
 8001718:	617b      	str	r3, [r7, #20]
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	785b      	ldrb	r3, [r3, #1]
 800171e:	461a      	mov	r2, r3
 8001720:	697b      	ldr	r3, [r7, #20]
 8001722:	4293      	cmp	r3, r2
 8001724:	d3ad      	bcc.n	8001682 <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8001726:	4b06      	ldr	r3, [pc, #24]	@ (8001740 <SSD1306_Putc+0xf8>)
 8001728:	881b      	ldrh	r3, [r3, #0]
 800172a:	683a      	ldr	r2, [r7, #0]
 800172c:	7812      	ldrb	r2, [r2, #0]
 800172e:	4413      	add	r3, r2
 8001730:	b29a      	uxth	r2, r3
 8001732:	4b03      	ldr	r3, [pc, #12]	@ (8001740 <SSD1306_Putc+0xf8>)
 8001734:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 8001736:	79fb      	ldrb	r3, [r7, #7]
}
 8001738:	4618      	mov	r0, r3
 800173a:	3718      	adds	r7, #24
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}
 8001740:	200007c4 	.word	0x200007c4

08001744 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001744:	b580      	push	{r7, lr}
 8001746:	b084      	sub	sp, #16
 8001748:	af00      	add	r7, sp, #0
 800174a:	60f8      	str	r0, [r7, #12]
 800174c:	60b9      	str	r1, [r7, #8]
 800174e:	4613      	mov	r3, r2
 8001750:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8001752:	e012      	b.n	800177a <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	781b      	ldrb	r3, [r3, #0]
 8001758:	79fa      	ldrb	r2, [r7, #7]
 800175a:	68b9      	ldr	r1, [r7, #8]
 800175c:	4618      	mov	r0, r3
 800175e:	f7ff ff73 	bl	8001648 <SSD1306_Putc>
 8001762:	4603      	mov	r3, r0
 8001764:	461a      	mov	r2, r3
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	781b      	ldrb	r3, [r3, #0]
 800176a:	429a      	cmp	r2, r3
 800176c:	d002      	beq.n	8001774 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	781b      	ldrb	r3, [r3, #0]
 8001772:	e008      	b.n	8001786 <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	3301      	adds	r3, #1
 8001778:	60fb      	str	r3, [r7, #12]
	while (*str) {
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	781b      	ldrb	r3, [r3, #0]
 800177e:	2b00      	cmp	r3, #0
 8001780:	d1e8      	bne.n	8001754 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	781b      	ldrb	r3, [r3, #0]
}
 8001786:	4618      	mov	r0, r3
 8001788:	3710      	adds	r7, #16
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}

0800178e <SSD1306_Clear>:
}
 


void SSD1306_Clear (void)
{
 800178e:	b580      	push	{r7, lr}
 8001790:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 8001792:	2000      	movs	r0, #0
 8001794:	f7ff feca 	bl	800152c <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8001798:	f7ff fe9a 	bl	80014d0 <SSD1306_UpdateScreen>
}
 800179c:	bf00      	nop
 800179e:	bd80      	pop	{r7, pc}

080017a0 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 80017a0:	b480      	push	{r7}
 80017a2:	b083      	sub	sp, #12
 80017a4:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 80017a6:	4b08      	ldr	r3, [pc, #32]	@ (80017c8 <ssd1306_I2C_Init+0x28>)
 80017a8:	607b      	str	r3, [r7, #4]
	while(p>0)
 80017aa:	e002      	b.n	80017b2 <ssd1306_I2C_Init+0x12>
		p--;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	3b01      	subs	r3, #1
 80017b0:	607b      	str	r3, [r7, #4]
	while(p>0)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d1f9      	bne.n	80017ac <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 80017b8:	bf00      	nop
 80017ba:	bf00      	nop
 80017bc:	370c      	adds	r7, #12
 80017be:	46bd      	mov	sp, r7
 80017c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c4:	4770      	bx	lr
 80017c6:	bf00      	nop
 80017c8:	0003d090 	.word	0x0003d090

080017cc <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 80017cc:	b590      	push	{r4, r7, lr}
 80017ce:	b0c7      	sub	sp, #284	@ 0x11c
 80017d0:	af02      	add	r7, sp, #8
 80017d2:	4604      	mov	r4, r0
 80017d4:	4608      	mov	r0, r1
 80017d6:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 80017da:	f5a1 7188 	sub.w	r1, r1, #272	@ 0x110
 80017de:	600a      	str	r2, [r1, #0]
 80017e0:	4619      	mov	r1, r3
 80017e2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80017e6:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 80017ea:	4622      	mov	r2, r4
 80017ec:	701a      	strb	r2, [r3, #0]
 80017ee:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80017f2:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 80017f6:	4602      	mov	r2, r0
 80017f8:	701a      	strb	r2, [r3, #0]
 80017fa:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80017fe:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001802:	460a      	mov	r2, r1
 8001804:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8001806:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800180a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800180e:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001812:	f5a2 7285 	sub.w	r2, r2, #266	@ 0x10a
 8001816:	7812      	ldrb	r2, [r2, #0]
 8001818:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 800181a:	2300      	movs	r3, #0
 800181c:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8001820:	e015      	b.n	800184e <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 8001822:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8001826:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800182a:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 800182e:	6812      	ldr	r2, [r2, #0]
 8001830:	441a      	add	r2, r3
 8001832:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8001836:	3301      	adds	r3, #1
 8001838:	7811      	ldrb	r1, [r2, #0]
 800183a:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800183e:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 8001842:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8001844:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8001848:	3301      	adds	r3, #1
 800184a:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 800184e:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8001852:	b29b      	uxth	r3, r3
 8001854:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001858:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 800185c:	8812      	ldrh	r2, [r2, #0]
 800185e:	429a      	cmp	r2, r3
 8001860:	d8df      	bhi.n	8001822 <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8001862:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001866:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 800186a:	781b      	ldrb	r3, [r3, #0]
 800186c:	b299      	uxth	r1, r3
 800186e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001872:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001876:	881b      	ldrh	r3, [r3, #0]
 8001878:	3301      	adds	r3, #1
 800187a:	b29b      	uxth	r3, r3
 800187c:	f107 020c 	add.w	r2, r7, #12
 8001880:	200a      	movs	r0, #10
 8001882:	9000      	str	r0, [sp, #0]
 8001884:	4803      	ldr	r0, [pc, #12]	@ (8001894 <ssd1306_I2C_WriteMulti+0xc8>)
 8001886:	f001 ff31 	bl	80036ec <HAL_I2C_Master_Transmit>
}
 800188a:	bf00      	nop
 800188c:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 8001890:	46bd      	mov	sp, r7
 8001892:	bd90      	pop	{r4, r7, pc}
 8001894:	200001d0 	.word	0x200001d0

08001898 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8001898:	b580      	push	{r7, lr}
 800189a:	b086      	sub	sp, #24
 800189c:	af02      	add	r7, sp, #8
 800189e:	4603      	mov	r3, r0
 80018a0:	71fb      	strb	r3, [r7, #7]
 80018a2:	460b      	mov	r3, r1
 80018a4:	71bb      	strb	r3, [r7, #6]
 80018a6:	4613      	mov	r3, r2
 80018a8:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 80018aa:	79bb      	ldrb	r3, [r7, #6]
 80018ac:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 80018ae:	797b      	ldrb	r3, [r7, #5]
 80018b0:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 80018b2:	79fb      	ldrb	r3, [r7, #7]
 80018b4:	b299      	uxth	r1, r3
 80018b6:	f107 020c 	add.w	r2, r7, #12
 80018ba:	230a      	movs	r3, #10
 80018bc:	9300      	str	r3, [sp, #0]
 80018be:	2302      	movs	r3, #2
 80018c0:	4803      	ldr	r0, [pc, #12]	@ (80018d0 <ssd1306_I2C_Write+0x38>)
 80018c2:	f001 ff13 	bl	80036ec <HAL_I2C_Master_Transmit>
}
 80018c6:	bf00      	nop
 80018c8:	3710      	adds	r7, #16
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	bf00      	nop
 80018d0:	200001d0 	.word	0x200001d0

080018d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018d4:	b480      	push	{r7}
 80018d6:	b083      	sub	sp, #12
 80018d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018da:	2300      	movs	r3, #0
 80018dc:	607b      	str	r3, [r7, #4]
 80018de:	4b10      	ldr	r3, [pc, #64]	@ (8001920 <HAL_MspInit+0x4c>)
 80018e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018e2:	4a0f      	ldr	r2, [pc, #60]	@ (8001920 <HAL_MspInit+0x4c>)
 80018e4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80018e8:	6453      	str	r3, [r2, #68]	@ 0x44
 80018ea:	4b0d      	ldr	r3, [pc, #52]	@ (8001920 <HAL_MspInit+0x4c>)
 80018ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018ee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80018f2:	607b      	str	r3, [r7, #4]
 80018f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018f6:	2300      	movs	r3, #0
 80018f8:	603b      	str	r3, [r7, #0]
 80018fa:	4b09      	ldr	r3, [pc, #36]	@ (8001920 <HAL_MspInit+0x4c>)
 80018fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018fe:	4a08      	ldr	r2, [pc, #32]	@ (8001920 <HAL_MspInit+0x4c>)
 8001900:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001904:	6413      	str	r3, [r2, #64]	@ 0x40
 8001906:	4b06      	ldr	r3, [pc, #24]	@ (8001920 <HAL_MspInit+0x4c>)
 8001908:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800190a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800190e:	603b      	str	r3, [r7, #0]
 8001910:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001912:	bf00      	nop
 8001914:	370c      	adds	r7, #12
 8001916:	46bd      	mov	sp, r7
 8001918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191c:	4770      	bx	lr
 800191e:	bf00      	nop
 8001920:	40023800 	.word	0x40023800

08001924 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b08a      	sub	sp, #40	@ 0x28
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800192c:	f107 0314 	add.w	r3, r7, #20
 8001930:	2200      	movs	r2, #0
 8001932:	601a      	str	r2, [r3, #0]
 8001934:	605a      	str	r2, [r3, #4]
 8001936:	609a      	str	r2, [r3, #8]
 8001938:	60da      	str	r2, [r3, #12]
 800193a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4a17      	ldr	r2, [pc, #92]	@ (80019a0 <HAL_ADC_MspInit+0x7c>)
 8001942:	4293      	cmp	r3, r2
 8001944:	d127      	bne.n	8001996 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001946:	2300      	movs	r3, #0
 8001948:	613b      	str	r3, [r7, #16]
 800194a:	4b16      	ldr	r3, [pc, #88]	@ (80019a4 <HAL_ADC_MspInit+0x80>)
 800194c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800194e:	4a15      	ldr	r2, [pc, #84]	@ (80019a4 <HAL_ADC_MspInit+0x80>)
 8001950:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001954:	6453      	str	r3, [r2, #68]	@ 0x44
 8001956:	4b13      	ldr	r3, [pc, #76]	@ (80019a4 <HAL_ADC_MspInit+0x80>)
 8001958:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800195a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800195e:	613b      	str	r3, [r7, #16]
 8001960:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001962:	2300      	movs	r3, #0
 8001964:	60fb      	str	r3, [r7, #12]
 8001966:	4b0f      	ldr	r3, [pc, #60]	@ (80019a4 <HAL_ADC_MspInit+0x80>)
 8001968:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800196a:	4a0e      	ldr	r2, [pc, #56]	@ (80019a4 <HAL_ADC_MspInit+0x80>)
 800196c:	f043 0301 	orr.w	r3, r3, #1
 8001970:	6313      	str	r3, [r2, #48]	@ 0x30
 8001972:	4b0c      	ldr	r3, [pc, #48]	@ (80019a4 <HAL_ADC_MspInit+0x80>)
 8001974:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001976:	f003 0301 	and.w	r3, r3, #1
 800197a:	60fb      	str	r3, [r7, #12]
 800197c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800197e:	2301      	movs	r3, #1
 8001980:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001982:	2303      	movs	r3, #3
 8001984:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001986:	2300      	movs	r3, #0
 8001988:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800198a:	f107 0314 	add.w	r3, r7, #20
 800198e:	4619      	mov	r1, r3
 8001990:	4805      	ldr	r0, [pc, #20]	@ (80019a8 <HAL_ADC_MspInit+0x84>)
 8001992:	f001 fbaf 	bl	80030f4 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001996:	bf00      	nop
 8001998:	3728      	adds	r7, #40	@ 0x28
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}
 800199e:	bf00      	nop
 80019a0:	40012000 	.word	0x40012000
 80019a4:	40023800 	.word	0x40023800
 80019a8:	40020000 	.word	0x40020000

080019ac <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b08a      	sub	sp, #40	@ 0x28
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019b4:	f107 0314 	add.w	r3, r7, #20
 80019b8:	2200      	movs	r2, #0
 80019ba:	601a      	str	r2, [r3, #0]
 80019bc:	605a      	str	r2, [r3, #4]
 80019be:	609a      	str	r2, [r3, #8]
 80019c0:	60da      	str	r2, [r3, #12]
 80019c2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4a19      	ldr	r2, [pc, #100]	@ (8001a30 <HAL_I2C_MspInit+0x84>)
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d12c      	bne.n	8001a28 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019ce:	2300      	movs	r3, #0
 80019d0:	613b      	str	r3, [r7, #16]
 80019d2:	4b18      	ldr	r3, [pc, #96]	@ (8001a34 <HAL_I2C_MspInit+0x88>)
 80019d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019d6:	4a17      	ldr	r2, [pc, #92]	@ (8001a34 <HAL_I2C_MspInit+0x88>)
 80019d8:	f043 0302 	orr.w	r3, r3, #2
 80019dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80019de:	4b15      	ldr	r3, [pc, #84]	@ (8001a34 <HAL_I2C_MspInit+0x88>)
 80019e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019e2:	f003 0302 	and.w	r3, r3, #2
 80019e6:	613b      	str	r3, [r7, #16]
 80019e8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80019ea:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80019ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80019f0:	2312      	movs	r3, #18
 80019f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f4:	2300      	movs	r3, #0
 80019f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019f8:	2303      	movs	r3, #3
 80019fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80019fc:	2304      	movs	r3, #4
 80019fe:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a00:	f107 0314 	add.w	r3, r7, #20
 8001a04:	4619      	mov	r1, r3
 8001a06:	480c      	ldr	r0, [pc, #48]	@ (8001a38 <HAL_I2C_MspInit+0x8c>)
 8001a08:	f001 fb74 	bl	80030f4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	60fb      	str	r3, [r7, #12]
 8001a10:	4b08      	ldr	r3, [pc, #32]	@ (8001a34 <HAL_I2C_MspInit+0x88>)
 8001a12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a14:	4a07      	ldr	r2, [pc, #28]	@ (8001a34 <HAL_I2C_MspInit+0x88>)
 8001a16:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001a1a:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a1c:	4b05      	ldr	r3, [pc, #20]	@ (8001a34 <HAL_I2C_MspInit+0x88>)
 8001a1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a20:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a24:	60fb      	str	r3, [r7, #12]
 8001a26:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001a28:	bf00      	nop
 8001a2a:	3728      	adds	r7, #40	@ 0x28
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bd80      	pop	{r7, pc}
 8001a30:	40005400 	.word	0x40005400
 8001a34:	40023800 	.word	0x40023800
 8001a38:	40020400 	.word	0x40020400

08001a3c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b088      	sub	sp, #32
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a44:	f107 0308 	add.w	r3, r7, #8
 8001a48:	2200      	movs	r2, #0
 8001a4a:	601a      	str	r2, [r3, #0]
 8001a4c:	605a      	str	r2, [r3, #4]
 8001a4e:	609a      	str	r2, [r3, #8]
 8001a50:	60da      	str	r2, [r3, #12]
 8001a52:	611a      	str	r2, [r3, #16]
 8001a54:	615a      	str	r2, [r3, #20]
  if(hrtc->Instance==RTC)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4a0c      	ldr	r2, [pc, #48]	@ (8001a8c <HAL_RTC_MspInit+0x50>)
 8001a5c:	4293      	cmp	r3, r2
 8001a5e:	d111      	bne.n	8001a84 <HAL_RTC_MspInit+0x48>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001a60:	2302      	movs	r3, #2
 8001a62:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001a64:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001a68:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a6a:	f107 0308 	add.w	r3, r7, #8
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f004 f9c2 	bl	8005df8 <HAL_RCCEx_PeriphCLKConfig>
 8001a74:	4603      	mov	r3, r0
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d001      	beq.n	8001a7e <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8001a7a:	f7ff fc5f 	bl	800133c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001a7e:	4b04      	ldr	r3, [pc, #16]	@ (8001a90 <HAL_RTC_MspInit+0x54>)
 8001a80:	2201      	movs	r2, #1
 8001a82:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTC_MspInit 1 */

  }

}
 8001a84:	bf00      	nop
 8001a86:	3720      	adds	r7, #32
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bd80      	pop	{r7, pc}
 8001a8c:	40002800 	.word	0x40002800
 8001a90:	42470e3c 	.word	0x42470e3c

08001a94 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b08a      	sub	sp, #40	@ 0x28
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a9c:	f107 0314 	add.w	r3, r7, #20
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	601a      	str	r2, [r3, #0]
 8001aa4:	605a      	str	r2, [r3, #4]
 8001aa6:	609a      	str	r2, [r3, #8]
 8001aa8:	60da      	str	r2, [r3, #12]
 8001aaa:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4a47      	ldr	r2, [pc, #284]	@ (8001bd0 <HAL_SPI_MspInit+0x13c>)
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	f040 8087 	bne.w	8001bc6 <HAL_SPI_MspInit+0x132>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001ab8:	2300      	movs	r3, #0
 8001aba:	613b      	str	r3, [r7, #16]
 8001abc:	4b45      	ldr	r3, [pc, #276]	@ (8001bd4 <HAL_SPI_MspInit+0x140>)
 8001abe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ac0:	4a44      	ldr	r2, [pc, #272]	@ (8001bd4 <HAL_SPI_MspInit+0x140>)
 8001ac2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001ac6:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ac8:	4b42      	ldr	r3, [pc, #264]	@ (8001bd4 <HAL_SPI_MspInit+0x140>)
 8001aca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001acc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001ad0:	613b      	str	r3, [r7, #16]
 8001ad2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	60fb      	str	r3, [r7, #12]
 8001ad8:	4b3e      	ldr	r3, [pc, #248]	@ (8001bd4 <HAL_SPI_MspInit+0x140>)
 8001ada:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001adc:	4a3d      	ldr	r2, [pc, #244]	@ (8001bd4 <HAL_SPI_MspInit+0x140>)
 8001ade:	f043 0302 	orr.w	r3, r3, #2
 8001ae2:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ae4:	4b3b      	ldr	r3, [pc, #236]	@ (8001bd4 <HAL_SPI_MspInit+0x140>)
 8001ae6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ae8:	f003 0302 	and.w	r3, r3, #2
 8001aec:	60fb      	str	r3, [r7, #12]
 8001aee:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = SD_CLK_Pin|SD_MISO_Pin|SD_MOSI_Pin;
 8001af0:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8001af4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001af6:	2302      	movs	r3, #2
 8001af8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001afa:	2300      	movs	r3, #0
 8001afc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001afe:	2303      	movs	r3, #3
 8001b00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001b02:	2305      	movs	r3, #5
 8001b04:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b06:	f107 0314 	add.w	r3, r7, #20
 8001b0a:	4619      	mov	r1, r3
 8001b0c:	4832      	ldr	r0, [pc, #200]	@ (8001bd8 <HAL_SPI_MspInit+0x144>)
 8001b0e:	f001 faf1 	bl	80030f4 <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Stream3;
 8001b12:	4b32      	ldr	r3, [pc, #200]	@ (8001bdc <HAL_SPI_MspInit+0x148>)
 8001b14:	4a32      	ldr	r2, [pc, #200]	@ (8001be0 <HAL_SPI_MspInit+0x14c>)
 8001b16:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 8001b18:	4b30      	ldr	r3, [pc, #192]	@ (8001bdc <HAL_SPI_MspInit+0x148>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001b1e:	4b2f      	ldr	r3, [pc, #188]	@ (8001bdc <HAL_SPI_MspInit+0x148>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b24:	4b2d      	ldr	r3, [pc, #180]	@ (8001bdc <HAL_SPI_MspInit+0x148>)
 8001b26:	2200      	movs	r2, #0
 8001b28:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001b2a:	4b2c      	ldr	r3, [pc, #176]	@ (8001bdc <HAL_SPI_MspInit+0x148>)
 8001b2c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001b30:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001b32:	4b2a      	ldr	r3, [pc, #168]	@ (8001bdc <HAL_SPI_MspInit+0x148>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001b38:	4b28      	ldr	r3, [pc, #160]	@ (8001bdc <HAL_SPI_MspInit+0x148>)
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 8001b3e:	4b27      	ldr	r3, [pc, #156]	@ (8001bdc <HAL_SPI_MspInit+0x148>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001b44:	4b25      	ldr	r3, [pc, #148]	@ (8001bdc <HAL_SPI_MspInit+0x148>)
 8001b46:	2200      	movs	r2, #0
 8001b48:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001b4a:	4b24      	ldr	r3, [pc, #144]	@ (8001bdc <HAL_SPI_MspInit+0x148>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8001b50:	4822      	ldr	r0, [pc, #136]	@ (8001bdc <HAL_SPI_MspInit+0x148>)
 8001b52:	f000 feef 	bl	8002934 <HAL_DMA_Init>
 8001b56:	4603      	mov	r3, r0
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d001      	beq.n	8001b60 <HAL_SPI_MspInit+0xcc>
    {
      Error_Handler();
 8001b5c:	f7ff fbee 	bl	800133c <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	4a1e      	ldr	r2, [pc, #120]	@ (8001bdc <HAL_SPI_MspInit+0x148>)
 8001b64:	64da      	str	r2, [r3, #76]	@ 0x4c
 8001b66:	4a1d      	ldr	r2, [pc, #116]	@ (8001bdc <HAL_SPI_MspInit+0x148>)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8001b6c:	4b1d      	ldr	r3, [pc, #116]	@ (8001be4 <HAL_SPI_MspInit+0x150>)
 8001b6e:	4a1e      	ldr	r2, [pc, #120]	@ (8001be8 <HAL_SPI_MspInit+0x154>)
 8001b70:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8001b72:	4b1c      	ldr	r3, [pc, #112]	@ (8001be4 <HAL_SPI_MspInit+0x150>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001b78:	4b1a      	ldr	r3, [pc, #104]	@ (8001be4 <HAL_SPI_MspInit+0x150>)
 8001b7a:	2240      	movs	r2, #64	@ 0x40
 8001b7c:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b7e:	4b19      	ldr	r3, [pc, #100]	@ (8001be4 <HAL_SPI_MspInit+0x150>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001b84:	4b17      	ldr	r3, [pc, #92]	@ (8001be4 <HAL_SPI_MspInit+0x150>)
 8001b86:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001b8a:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001b8c:	4b15      	ldr	r3, [pc, #84]	@ (8001be4 <HAL_SPI_MspInit+0x150>)
 8001b8e:	2200      	movs	r2, #0
 8001b90:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001b92:	4b14      	ldr	r3, [pc, #80]	@ (8001be4 <HAL_SPI_MspInit+0x150>)
 8001b94:	2200      	movs	r2, #0
 8001b96:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8001b98:	4b12      	ldr	r3, [pc, #72]	@ (8001be4 <HAL_SPI_MspInit+0x150>)
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001b9e:	4b11      	ldr	r3, [pc, #68]	@ (8001be4 <HAL_SPI_MspInit+0x150>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001ba4:	4b0f      	ldr	r3, [pc, #60]	@ (8001be4 <HAL_SPI_MspInit+0x150>)
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8001baa:	480e      	ldr	r0, [pc, #56]	@ (8001be4 <HAL_SPI_MspInit+0x150>)
 8001bac:	f000 fec2 	bl	8002934 <HAL_DMA_Init>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d001      	beq.n	8001bba <HAL_SPI_MspInit+0x126>
    {
      Error_Handler();
 8001bb6:	f7ff fbc1 	bl	800133c <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	4a09      	ldr	r2, [pc, #36]	@ (8001be4 <HAL_SPI_MspInit+0x150>)
 8001bbe:	649a      	str	r2, [r3, #72]	@ 0x48
 8001bc0:	4a08      	ldr	r2, [pc, #32]	@ (8001be4 <HAL_SPI_MspInit+0x150>)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE END SPI2_MspInit 1 */

  }

}
 8001bc6:	bf00      	nop
 8001bc8:	3728      	adds	r7, #40	@ 0x28
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}
 8001bce:	bf00      	nop
 8001bd0:	40003800 	.word	0x40003800
 8001bd4:	40023800 	.word	0x40023800
 8001bd8:	40020400 	.word	0x40020400
 8001bdc:	2000029c 	.word	0x2000029c
 8001be0:	40026058 	.word	0x40026058
 8001be4:	200002fc 	.word	0x200002fc
 8001be8:	40026070 	.word	0x40026070

08001bec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b08a      	sub	sp, #40	@ 0x28
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bf4:	f107 0314 	add.w	r3, r7, #20
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	601a      	str	r2, [r3, #0]
 8001bfc:	605a      	str	r2, [r3, #4]
 8001bfe:	609a      	str	r2, [r3, #8]
 8001c00:	60da      	str	r2, [r3, #12]
 8001c02:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a19      	ldr	r2, [pc, #100]	@ (8001c70 <HAL_UART_MspInit+0x84>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d12c      	bne.n	8001c68 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001c0e:	2300      	movs	r3, #0
 8001c10:	613b      	str	r3, [r7, #16]
 8001c12:	4b18      	ldr	r3, [pc, #96]	@ (8001c74 <HAL_UART_MspInit+0x88>)
 8001c14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c16:	4a17      	ldr	r2, [pc, #92]	@ (8001c74 <HAL_UART_MspInit+0x88>)
 8001c18:	f043 0310 	orr.w	r3, r3, #16
 8001c1c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c1e:	4b15      	ldr	r3, [pc, #84]	@ (8001c74 <HAL_UART_MspInit+0x88>)
 8001c20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c22:	f003 0310 	and.w	r3, r3, #16
 8001c26:	613b      	str	r3, [r7, #16]
 8001c28:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	60fb      	str	r3, [r7, #12]
 8001c2e:	4b11      	ldr	r3, [pc, #68]	@ (8001c74 <HAL_UART_MspInit+0x88>)
 8001c30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c32:	4a10      	ldr	r2, [pc, #64]	@ (8001c74 <HAL_UART_MspInit+0x88>)
 8001c34:	f043 0301 	orr.w	r3, r3, #1
 8001c38:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c3a:	4b0e      	ldr	r3, [pc, #56]	@ (8001c74 <HAL_UART_MspInit+0x88>)
 8001c3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c3e:	f003 0301 	and.w	r3, r3, #1
 8001c42:	60fb      	str	r3, [r7, #12]
 8001c44:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001c46:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001c4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c4c:	2302      	movs	r3, #2
 8001c4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c50:	2300      	movs	r3, #0
 8001c52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c54:	2303      	movs	r3, #3
 8001c56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001c58:	2307      	movs	r3, #7
 8001c5a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c5c:	f107 0314 	add.w	r3, r7, #20
 8001c60:	4619      	mov	r1, r3
 8001c62:	4805      	ldr	r0, [pc, #20]	@ (8001c78 <HAL_UART_MspInit+0x8c>)
 8001c64:	f001 fa46 	bl	80030f4 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8001c68:	bf00      	nop
 8001c6a:	3728      	adds	r7, #40	@ 0x28
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bd80      	pop	{r7, pc}
 8001c70:	40011000 	.word	0x40011000
 8001c74:	40023800 	.word	0x40023800
 8001c78:	40020000 	.word	0x40020000

08001c7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8001c80:	f004 f89e 	bl	8005dc0 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001c84:	bf00      	nop
 8001c86:	e7fd      	b.n	8001c84 <NMI_Handler+0x8>

08001c88 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c8c:	bf00      	nop
 8001c8e:	e7fd      	b.n	8001c8c <HardFault_Handler+0x4>

08001c90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c90:	b480      	push	{r7}
 8001c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c94:	bf00      	nop
 8001c96:	e7fd      	b.n	8001c94 <MemManage_Handler+0x4>

08001c98 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c9c:	bf00      	nop
 8001c9e:	e7fd      	b.n	8001c9c <BusFault_Handler+0x4>

08001ca0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ca4:	bf00      	nop
 8001ca6:	e7fd      	b.n	8001ca4 <UsageFault_Handler+0x4>

08001ca8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001cac:	bf00      	nop
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb4:	4770      	bx	lr

08001cb6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001cb6:	b480      	push	{r7}
 8001cb8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001cba:	bf00      	nop
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc2:	4770      	bx	lr

08001cc4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001cc8:	bf00      	nop
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd0:	4770      	bx	lr

08001cd2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001cd2:	b580      	push	{r7, lr}
 8001cd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001cd6:	f000 f8e5 	bl	8001ea4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001cda:	bf00      	nop
 8001cdc:	bd80      	pop	{r7, pc}
	...

08001ce0 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8001ce4:	4802      	ldr	r0, [pc, #8]	@ (8001cf0 <DMA1_Stream3_IRQHandler+0x10>)
 8001ce6:	f000 ff9b 	bl	8002c20 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8001cea:	bf00      	nop
 8001cec:	bd80      	pop	{r7, pc}
 8001cee:	bf00      	nop
 8001cf0:	2000029c 	.word	0x2000029c

08001cf4 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8001cf8:	4802      	ldr	r0, [pc, #8]	@ (8001d04 <DMA1_Stream4_IRQHandler+0x10>)
 8001cfa:	f000 ff91 	bl	8002c20 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8001cfe:	bf00      	nop
 8001d00:	bd80      	pop	{r7, pc}
 8001d02:	bf00      	nop
 8001d04:	200002fc 	.word	0x200002fc

08001d08 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001d0c:	4802      	ldr	r0, [pc, #8]	@ (8001d18 <OTG_FS_IRQHandler+0x10>)
 8001d0e:	f002 fab8 	bl	8004282 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001d12:	bf00      	nop
 8001d14:	bd80      	pop	{r7, pc}
 8001d16:	bf00      	nop
 8001d18:	20001154 	.word	0x20001154

08001d1c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b086      	sub	sp, #24
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d24:	4a14      	ldr	r2, [pc, #80]	@ (8001d78 <_sbrk+0x5c>)
 8001d26:	4b15      	ldr	r3, [pc, #84]	@ (8001d7c <_sbrk+0x60>)
 8001d28:	1ad3      	subs	r3, r2, r3
 8001d2a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d2c:	697b      	ldr	r3, [r7, #20]
 8001d2e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d30:	4b13      	ldr	r3, [pc, #76]	@ (8001d80 <_sbrk+0x64>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d102      	bne.n	8001d3e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d38:	4b11      	ldr	r3, [pc, #68]	@ (8001d80 <_sbrk+0x64>)
 8001d3a:	4a12      	ldr	r2, [pc, #72]	@ (8001d84 <_sbrk+0x68>)
 8001d3c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d3e:	4b10      	ldr	r3, [pc, #64]	@ (8001d80 <_sbrk+0x64>)
 8001d40:	681a      	ldr	r2, [r3, #0]
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	4413      	add	r3, r2
 8001d46:	693a      	ldr	r2, [r7, #16]
 8001d48:	429a      	cmp	r2, r3
 8001d4a:	d207      	bcs.n	8001d5c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d4c:	f00e fc1a 	bl	8010584 <__errno>
 8001d50:	4603      	mov	r3, r0
 8001d52:	220c      	movs	r2, #12
 8001d54:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d56:	f04f 33ff 	mov.w	r3, #4294967295
 8001d5a:	e009      	b.n	8001d70 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d5c:	4b08      	ldr	r3, [pc, #32]	@ (8001d80 <_sbrk+0x64>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d62:	4b07      	ldr	r3, [pc, #28]	@ (8001d80 <_sbrk+0x64>)
 8001d64:	681a      	ldr	r2, [r3, #0]
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	4413      	add	r3, r2
 8001d6a:	4a05      	ldr	r2, [pc, #20]	@ (8001d80 <_sbrk+0x64>)
 8001d6c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d6e:	68fb      	ldr	r3, [r7, #12]
}
 8001d70:	4618      	mov	r0, r3
 8001d72:	3718      	adds	r7, #24
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bd80      	pop	{r7, pc}
 8001d78:	20020000 	.word	0x20020000
 8001d7c:	00000400 	.word	0x00000400
 8001d80:	200007cc 	.word	0x200007cc
 8001d84:	200019f8 	.word	0x200019f8

08001d88 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d8c:	4b06      	ldr	r3, [pc, #24]	@ (8001da8 <SystemInit+0x20>)
 8001d8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001d92:	4a05      	ldr	r2, [pc, #20]	@ (8001da8 <SystemInit+0x20>)
 8001d94:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001d98:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d9c:	bf00      	nop
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da4:	4770      	bx	lr
 8001da6:	bf00      	nop
 8001da8:	e000ed00 	.word	0xe000ed00

08001dac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001dac:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001de4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001db0:	f7ff ffea 	bl	8001d88 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001db4:	480c      	ldr	r0, [pc, #48]	@ (8001de8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001db6:	490d      	ldr	r1, [pc, #52]	@ (8001dec <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001db8:	4a0d      	ldr	r2, [pc, #52]	@ (8001df0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001dba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001dbc:	e002      	b.n	8001dc4 <LoopCopyDataInit>

08001dbe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001dbe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001dc0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001dc2:	3304      	adds	r3, #4

08001dc4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001dc4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001dc6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001dc8:	d3f9      	bcc.n	8001dbe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001dca:	4a0a      	ldr	r2, [pc, #40]	@ (8001df4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001dcc:	4c0a      	ldr	r4, [pc, #40]	@ (8001df8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001dce:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001dd0:	e001      	b.n	8001dd6 <LoopFillZerobss>

08001dd2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001dd2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001dd4:	3204      	adds	r2, #4

08001dd6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001dd6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001dd8:	d3fb      	bcc.n	8001dd2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001dda:	f00e fbd9 	bl	8010590 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001dde:	f7fe ff33 	bl	8000c48 <main>
  bx  lr    
 8001de2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001de4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001de8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001dec:	2000016c 	.word	0x2000016c
  ldr r2, =_sidata
 8001df0:	08012184 	.word	0x08012184
  ldr r2, =_sbss
 8001df4:	2000016c 	.word	0x2000016c
  ldr r4, =_ebss
 8001df8:	200019f8 	.word	0x200019f8

08001dfc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001dfc:	e7fe      	b.n	8001dfc <ADC_IRQHandler>
	...

08001e00 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001e04:	4b0e      	ldr	r3, [pc, #56]	@ (8001e40 <HAL_Init+0x40>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4a0d      	ldr	r2, [pc, #52]	@ (8001e40 <HAL_Init+0x40>)
 8001e0a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001e0e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001e10:	4b0b      	ldr	r3, [pc, #44]	@ (8001e40 <HAL_Init+0x40>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4a0a      	ldr	r2, [pc, #40]	@ (8001e40 <HAL_Init+0x40>)
 8001e16:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001e1a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e1c:	4b08      	ldr	r3, [pc, #32]	@ (8001e40 <HAL_Init+0x40>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4a07      	ldr	r2, [pc, #28]	@ (8001e40 <HAL_Init+0x40>)
 8001e22:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e26:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e28:	2003      	movs	r0, #3
 8001e2a:	f000 fd41 	bl	80028b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e2e:	200f      	movs	r0, #15
 8001e30:	f000 f808 	bl	8001e44 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e34:	f7ff fd4e 	bl	80018d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e38:	2300      	movs	r3, #0
}
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	40023c00 	.word	0x40023c00

08001e44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b082      	sub	sp, #8
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e4c:	4b12      	ldr	r3, [pc, #72]	@ (8001e98 <HAL_InitTick+0x54>)
 8001e4e:	681a      	ldr	r2, [r3, #0]
 8001e50:	4b12      	ldr	r3, [pc, #72]	@ (8001e9c <HAL_InitTick+0x58>)
 8001e52:	781b      	ldrb	r3, [r3, #0]
 8001e54:	4619      	mov	r1, r3
 8001e56:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e5a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e62:	4618      	mov	r0, r3
 8001e64:	f000 fd59 	bl	800291a <HAL_SYSTICK_Config>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d001      	beq.n	8001e72 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e6e:	2301      	movs	r3, #1
 8001e70:	e00e      	b.n	8001e90 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	2b0f      	cmp	r3, #15
 8001e76:	d80a      	bhi.n	8001e8e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e78:	2200      	movs	r2, #0
 8001e7a:	6879      	ldr	r1, [r7, #4]
 8001e7c:	f04f 30ff 	mov.w	r0, #4294967295
 8001e80:	f000 fd21 	bl	80028c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e84:	4a06      	ldr	r2, [pc, #24]	@ (8001ea0 <HAL_InitTick+0x5c>)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	e000      	b.n	8001e90 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e8e:	2301      	movs	r3, #1
}
 8001e90:	4618      	mov	r0, r3
 8001e92:	3708      	adds	r7, #8
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bd80      	pop	{r7, pc}
 8001e98:	20000008 	.word	0x20000008
 8001e9c:	20000010 	.word	0x20000010
 8001ea0:	2000000c 	.word	0x2000000c

08001ea4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ea8:	4b06      	ldr	r3, [pc, #24]	@ (8001ec4 <HAL_IncTick+0x20>)
 8001eaa:	781b      	ldrb	r3, [r3, #0]
 8001eac:	461a      	mov	r2, r3
 8001eae:	4b06      	ldr	r3, [pc, #24]	@ (8001ec8 <HAL_IncTick+0x24>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4413      	add	r3, r2
 8001eb4:	4a04      	ldr	r2, [pc, #16]	@ (8001ec8 <HAL_IncTick+0x24>)
 8001eb6:	6013      	str	r3, [r2, #0]
}
 8001eb8:	bf00      	nop
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec0:	4770      	bx	lr
 8001ec2:	bf00      	nop
 8001ec4:	20000010 	.word	0x20000010
 8001ec8:	200007d0 	.word	0x200007d0

08001ecc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	af00      	add	r7, sp, #0
  return uwTick;
 8001ed0:	4b03      	ldr	r3, [pc, #12]	@ (8001ee0 <HAL_GetTick+0x14>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
}
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001edc:	4770      	bx	lr
 8001ede:	bf00      	nop
 8001ee0:	200007d0 	.word	0x200007d0

08001ee4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b084      	sub	sp, #16
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001eec:	f7ff ffee 	bl	8001ecc <HAL_GetTick>
 8001ef0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001efc:	d005      	beq.n	8001f0a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001efe:	4b0a      	ldr	r3, [pc, #40]	@ (8001f28 <HAL_Delay+0x44>)
 8001f00:	781b      	ldrb	r3, [r3, #0]
 8001f02:	461a      	mov	r2, r3
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	4413      	add	r3, r2
 8001f08:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001f0a:	bf00      	nop
 8001f0c:	f7ff ffde 	bl	8001ecc <HAL_GetTick>
 8001f10:	4602      	mov	r2, r0
 8001f12:	68bb      	ldr	r3, [r7, #8]
 8001f14:	1ad3      	subs	r3, r2, r3
 8001f16:	68fa      	ldr	r2, [r7, #12]
 8001f18:	429a      	cmp	r2, r3
 8001f1a:	d8f7      	bhi.n	8001f0c <HAL_Delay+0x28>
  {
  }
}
 8001f1c:	bf00      	nop
 8001f1e:	bf00      	nop
 8001f20:	3710      	adds	r7, #16
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}
 8001f26:	bf00      	nop
 8001f28:	20000010 	.word	0x20000010

08001f2c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b084      	sub	sp, #16
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f34:	2300      	movs	r3, #0
 8001f36:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d101      	bne.n	8001f42 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001f3e:	2301      	movs	r3, #1
 8001f40:	e033      	b.n	8001faa <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d109      	bne.n	8001f5e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001f4a:	6878      	ldr	r0, [r7, #4]
 8001f4c:	f7ff fcea 	bl	8001924 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2200      	movs	r2, #0
 8001f54:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2200      	movs	r2, #0
 8001f5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f62:	f003 0310 	and.w	r3, r3, #16
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d118      	bne.n	8001f9c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f6e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001f72:	f023 0302 	bic.w	r3, r3, #2
 8001f76:	f043 0202 	orr.w	r2, r3, #2
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001f7e:	6878      	ldr	r0, [r7, #4]
 8001f80:	f000 faca 	bl	8002518 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2200      	movs	r2, #0
 8001f88:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f8e:	f023 0303 	bic.w	r3, r3, #3
 8001f92:	f043 0201 	orr.w	r2, r3, #1
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	641a      	str	r2, [r3, #64]	@ 0x40
 8001f9a:	e001      	b.n	8001fa0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001fa8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001faa:	4618      	mov	r0, r3
 8001fac:	3710      	adds	r7, #16
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}
	...

08001fb4 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	b085      	sub	sp, #20
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001fc6:	2b01      	cmp	r3, #1
 8001fc8:	d101      	bne.n	8001fce <HAL_ADC_Start+0x1a>
 8001fca:	2302      	movs	r3, #2
 8001fcc:	e097      	b.n	80020fe <HAL_ADC_Start+0x14a>
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2201      	movs	r2, #1
 8001fd2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	689b      	ldr	r3, [r3, #8]
 8001fdc:	f003 0301 	and.w	r3, r3, #1
 8001fe0:	2b01      	cmp	r3, #1
 8001fe2:	d018      	beq.n	8002016 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	689a      	ldr	r2, [r3, #8]
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f042 0201 	orr.w	r2, r2, #1
 8001ff2:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001ff4:	4b45      	ldr	r3, [pc, #276]	@ (800210c <HAL_ADC_Start+0x158>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a45      	ldr	r2, [pc, #276]	@ (8002110 <HAL_ADC_Start+0x15c>)
 8001ffa:	fba2 2303 	umull	r2, r3, r2, r3
 8001ffe:	0c9a      	lsrs	r2, r3, #18
 8002000:	4613      	mov	r3, r2
 8002002:	005b      	lsls	r3, r3, #1
 8002004:	4413      	add	r3, r2
 8002006:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8002008:	e002      	b.n	8002010 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800200a:	68bb      	ldr	r3, [r7, #8]
 800200c:	3b01      	subs	r3, #1
 800200e:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8002010:	68bb      	ldr	r3, [r7, #8]
 8002012:	2b00      	cmp	r3, #0
 8002014:	d1f9      	bne.n	800200a <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	689b      	ldr	r3, [r3, #8]
 800201c:	f003 0301 	and.w	r3, r3, #1
 8002020:	2b01      	cmp	r3, #1
 8002022:	d15f      	bne.n	80020e4 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002028:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800202c:	f023 0301 	bic.w	r3, r3, #1
 8002030:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	685b      	ldr	r3, [r3, #4]
 800203e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002042:	2b00      	cmp	r3, #0
 8002044:	d007      	beq.n	8002056 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800204a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800204e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800205a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800205e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002062:	d106      	bne.n	8002072 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002068:	f023 0206 	bic.w	r2, r3, #6
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	645a      	str	r2, [r3, #68]	@ 0x44
 8002070:	e002      	b.n	8002078 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2200      	movs	r2, #0
 8002076:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2200      	movs	r2, #0
 800207c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002080:	4b24      	ldr	r3, [pc, #144]	@ (8002114 <HAL_ADC_Start+0x160>)
 8002082:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 800208c:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	f003 031f 	and.w	r3, r3, #31
 8002096:	2b00      	cmp	r3, #0
 8002098:	d10f      	bne.n	80020ba <HAL_ADC_Start+0x106>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	689b      	ldr	r3, [r3, #8]
 80020a0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d129      	bne.n	80020fc <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	689a      	ldr	r2, [r3, #8]
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80020b6:	609a      	str	r2, [r3, #8]
 80020b8:	e020      	b.n	80020fc <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	4a16      	ldr	r2, [pc, #88]	@ (8002118 <HAL_ADC_Start+0x164>)
 80020c0:	4293      	cmp	r3, r2
 80020c2:	d11b      	bne.n	80020fc <HAL_ADC_Start+0x148>
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	689b      	ldr	r3, [r3, #8]
 80020ca:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d114      	bne.n	80020fc <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	689a      	ldr	r2, [r3, #8]
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80020e0:	609a      	str	r2, [r3, #8]
 80020e2:	e00b      	b.n	80020fc <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020e8:	f043 0210 	orr.w	r2, r3, #16
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020f4:	f043 0201 	orr.w	r2, r3, #1
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 80020fc:	2300      	movs	r3, #0
}
 80020fe:	4618      	mov	r0, r3
 8002100:	3714      	adds	r7, #20
 8002102:	46bd      	mov	sp, r7
 8002104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002108:	4770      	bx	lr
 800210a:	bf00      	nop
 800210c:	20000008 	.word	0x20000008
 8002110:	431bde83 	.word	0x431bde83
 8002114:	40012300 	.word	0x40012300
 8002118:	40012000 	.word	0x40012000

0800211c <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 800211c:	b480      	push	{r7}
 800211e:	b083      	sub	sp, #12
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800212a:	2b01      	cmp	r3, #1
 800212c:	d101      	bne.n	8002132 <HAL_ADC_Stop+0x16>
 800212e:	2302      	movs	r3, #2
 8002130:	e021      	b.n	8002176 <HAL_ADC_Stop+0x5a>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2201      	movs	r2, #1
 8002136:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	689a      	ldr	r2, [r3, #8]
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f022 0201 	bic.w	r2, r2, #1
 8002148:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	689b      	ldr	r3, [r3, #8]
 8002150:	f003 0301 	and.w	r3, r3, #1
 8002154:	2b00      	cmp	r3, #0
 8002156:	d109      	bne.n	800216c <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800215c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002160:	f023 0301 	bic.w	r3, r3, #1
 8002164:	f043 0201 	orr.w	r2, r3, #1
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2200      	movs	r2, #0
 8002170:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002174:	2300      	movs	r3, #0
}
 8002176:	4618      	mov	r0, r3
 8002178:	370c      	adds	r7, #12
 800217a:	46bd      	mov	sp, r7
 800217c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002180:	4770      	bx	lr

08002182 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002182:	b580      	push	{r7, lr}
 8002184:	b084      	sub	sp, #16
 8002186:	af00      	add	r7, sp, #0
 8002188:	6078      	str	r0, [r7, #4]
 800218a:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800218c:	2300      	movs	r3, #0
 800218e:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	689b      	ldr	r3, [r3, #8]
 8002196:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800219a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800219e:	d113      	bne.n	80021c8 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	689b      	ldr	r3, [r3, #8]
 80021a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80021aa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80021ae:	d10b      	bne.n	80021c8 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021b4:	f043 0220 	orr.w	r2, r3, #32
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2200      	movs	r2, #0
 80021c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80021c4:	2301      	movs	r3, #1
 80021c6:	e063      	b.n	8002290 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 80021c8:	f7ff fe80 	bl	8001ecc <HAL_GetTick>
 80021cc:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80021ce:	e021      	b.n	8002214 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021d6:	d01d      	beq.n	8002214 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d007      	beq.n	80021ee <HAL_ADC_PollForConversion+0x6c>
 80021de:	f7ff fe75 	bl	8001ecc <HAL_GetTick>
 80021e2:	4602      	mov	r2, r0
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	1ad3      	subs	r3, r2, r3
 80021e8:	683a      	ldr	r2, [r7, #0]
 80021ea:	429a      	cmp	r2, r3
 80021ec:	d212      	bcs.n	8002214 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f003 0302 	and.w	r3, r3, #2
 80021f8:	2b02      	cmp	r3, #2
 80021fa:	d00b      	beq.n	8002214 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002200:	f043 0204 	orr.w	r2, r3, #4
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2200      	movs	r2, #0
 800220c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8002210:	2303      	movs	r3, #3
 8002212:	e03d      	b.n	8002290 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f003 0302 	and.w	r3, r3, #2
 800221e:	2b02      	cmp	r3, #2
 8002220:	d1d6      	bne.n	80021d0 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f06f 0212 	mvn.w	r2, #18
 800222a:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002230:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	689b      	ldr	r3, [r3, #8]
 800223e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002242:	2b00      	cmp	r3, #0
 8002244:	d123      	bne.n	800228e <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800224a:	2b00      	cmp	r3, #0
 800224c:	d11f      	bne.n	800228e <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002254:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002258:	2b00      	cmp	r3, #0
 800225a:	d006      	beq.n	800226a <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	689b      	ldr	r3, [r3, #8]
 8002262:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002266:	2b00      	cmp	r3, #0
 8002268:	d111      	bne.n	800228e <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800226e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800227a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800227e:	2b00      	cmp	r3, #0
 8002280:	d105      	bne.n	800228e <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002286:	f043 0201 	orr.w	r2, r3, #1
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 800228e:	2300      	movs	r3, #0
}
 8002290:	4618      	mov	r0, r3
 8002292:	3710      	adds	r7, #16
 8002294:	46bd      	mov	sp, r7
 8002296:	bd80      	pop	{r7, pc}

08002298 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002298:	b480      	push	{r7}
 800229a:	b083      	sub	sp, #12
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 80022a6:	4618      	mov	r0, r3
 80022a8:	370c      	adds	r7, #12
 80022aa:	46bd      	mov	sp, r7
 80022ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b0:	4770      	bx	lr
	...

080022b4 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80022b4:	b480      	push	{r7}
 80022b6:	b085      	sub	sp, #20
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
 80022bc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80022be:	2300      	movs	r3, #0
 80022c0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80022c8:	2b01      	cmp	r3, #1
 80022ca:	d101      	bne.n	80022d0 <HAL_ADC_ConfigChannel+0x1c>
 80022cc:	2302      	movs	r3, #2
 80022ce:	e113      	b.n	80024f8 <HAL_ADC_ConfigChannel+0x244>
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2201      	movs	r2, #1
 80022d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	2b09      	cmp	r3, #9
 80022de:	d925      	bls.n	800232c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	68d9      	ldr	r1, [r3, #12]
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	b29b      	uxth	r3, r3
 80022ec:	461a      	mov	r2, r3
 80022ee:	4613      	mov	r3, r2
 80022f0:	005b      	lsls	r3, r3, #1
 80022f2:	4413      	add	r3, r2
 80022f4:	3b1e      	subs	r3, #30
 80022f6:	2207      	movs	r2, #7
 80022f8:	fa02 f303 	lsl.w	r3, r2, r3
 80022fc:	43da      	mvns	r2, r3
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	400a      	ands	r2, r1
 8002304:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	68d9      	ldr	r1, [r3, #12]
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	689a      	ldr	r2, [r3, #8]
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	b29b      	uxth	r3, r3
 8002316:	4618      	mov	r0, r3
 8002318:	4603      	mov	r3, r0
 800231a:	005b      	lsls	r3, r3, #1
 800231c:	4403      	add	r3, r0
 800231e:	3b1e      	subs	r3, #30
 8002320:	409a      	lsls	r2, r3
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	430a      	orrs	r2, r1
 8002328:	60da      	str	r2, [r3, #12]
 800232a:	e022      	b.n	8002372 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	6919      	ldr	r1, [r3, #16]
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	b29b      	uxth	r3, r3
 8002338:	461a      	mov	r2, r3
 800233a:	4613      	mov	r3, r2
 800233c:	005b      	lsls	r3, r3, #1
 800233e:	4413      	add	r3, r2
 8002340:	2207      	movs	r2, #7
 8002342:	fa02 f303 	lsl.w	r3, r2, r3
 8002346:	43da      	mvns	r2, r3
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	400a      	ands	r2, r1
 800234e:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	6919      	ldr	r1, [r3, #16]
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	689a      	ldr	r2, [r3, #8]
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	b29b      	uxth	r3, r3
 8002360:	4618      	mov	r0, r3
 8002362:	4603      	mov	r3, r0
 8002364:	005b      	lsls	r3, r3, #1
 8002366:	4403      	add	r3, r0
 8002368:	409a      	lsls	r2, r3
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	430a      	orrs	r2, r1
 8002370:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	2b06      	cmp	r3, #6
 8002378:	d824      	bhi.n	80023c4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	685a      	ldr	r2, [r3, #4]
 8002384:	4613      	mov	r3, r2
 8002386:	009b      	lsls	r3, r3, #2
 8002388:	4413      	add	r3, r2
 800238a:	3b05      	subs	r3, #5
 800238c:	221f      	movs	r2, #31
 800238e:	fa02 f303 	lsl.w	r3, r2, r3
 8002392:	43da      	mvns	r2, r3
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	400a      	ands	r2, r1
 800239a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	b29b      	uxth	r3, r3
 80023a8:	4618      	mov	r0, r3
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	685a      	ldr	r2, [r3, #4]
 80023ae:	4613      	mov	r3, r2
 80023b0:	009b      	lsls	r3, r3, #2
 80023b2:	4413      	add	r3, r2
 80023b4:	3b05      	subs	r3, #5
 80023b6:	fa00 f203 	lsl.w	r2, r0, r3
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	430a      	orrs	r2, r1
 80023c0:	635a      	str	r2, [r3, #52]	@ 0x34
 80023c2:	e04c      	b.n	800245e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	2b0c      	cmp	r3, #12
 80023ca:	d824      	bhi.n	8002416 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	685a      	ldr	r2, [r3, #4]
 80023d6:	4613      	mov	r3, r2
 80023d8:	009b      	lsls	r3, r3, #2
 80023da:	4413      	add	r3, r2
 80023dc:	3b23      	subs	r3, #35	@ 0x23
 80023de:	221f      	movs	r2, #31
 80023e0:	fa02 f303 	lsl.w	r3, r2, r3
 80023e4:	43da      	mvns	r2, r3
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	400a      	ands	r2, r1
 80023ec:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	b29b      	uxth	r3, r3
 80023fa:	4618      	mov	r0, r3
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	685a      	ldr	r2, [r3, #4]
 8002400:	4613      	mov	r3, r2
 8002402:	009b      	lsls	r3, r3, #2
 8002404:	4413      	add	r3, r2
 8002406:	3b23      	subs	r3, #35	@ 0x23
 8002408:	fa00 f203 	lsl.w	r2, r0, r3
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	430a      	orrs	r2, r1
 8002412:	631a      	str	r2, [r3, #48]	@ 0x30
 8002414:	e023      	b.n	800245e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	685a      	ldr	r2, [r3, #4]
 8002420:	4613      	mov	r3, r2
 8002422:	009b      	lsls	r3, r3, #2
 8002424:	4413      	add	r3, r2
 8002426:	3b41      	subs	r3, #65	@ 0x41
 8002428:	221f      	movs	r2, #31
 800242a:	fa02 f303 	lsl.w	r3, r2, r3
 800242e:	43da      	mvns	r2, r3
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	400a      	ands	r2, r1
 8002436:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	b29b      	uxth	r3, r3
 8002444:	4618      	mov	r0, r3
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	685a      	ldr	r2, [r3, #4]
 800244a:	4613      	mov	r3, r2
 800244c:	009b      	lsls	r3, r3, #2
 800244e:	4413      	add	r3, r2
 8002450:	3b41      	subs	r3, #65	@ 0x41
 8002452:	fa00 f203 	lsl.w	r2, r0, r3
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	430a      	orrs	r2, r1
 800245c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800245e:	4b29      	ldr	r3, [pc, #164]	@ (8002504 <HAL_ADC_ConfigChannel+0x250>)
 8002460:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4a28      	ldr	r2, [pc, #160]	@ (8002508 <HAL_ADC_ConfigChannel+0x254>)
 8002468:	4293      	cmp	r3, r2
 800246a:	d10f      	bne.n	800248c <HAL_ADC_ConfigChannel+0x1d8>
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	2b12      	cmp	r3, #18
 8002472:	d10b      	bne.n	800248c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4a1d      	ldr	r2, [pc, #116]	@ (8002508 <HAL_ADC_ConfigChannel+0x254>)
 8002492:	4293      	cmp	r3, r2
 8002494:	d12b      	bne.n	80024ee <HAL_ADC_ConfigChannel+0x23a>
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4a1c      	ldr	r2, [pc, #112]	@ (800250c <HAL_ADC_ConfigChannel+0x258>)
 800249c:	4293      	cmp	r3, r2
 800249e:	d003      	beq.n	80024a8 <HAL_ADC_ConfigChannel+0x1f4>
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	2b11      	cmp	r3, #17
 80024a6:	d122      	bne.n	80024ee <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4a11      	ldr	r2, [pc, #68]	@ (800250c <HAL_ADC_ConfigChannel+0x258>)
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d111      	bne.n	80024ee <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80024ca:	4b11      	ldr	r3, [pc, #68]	@ (8002510 <HAL_ADC_ConfigChannel+0x25c>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4a11      	ldr	r2, [pc, #68]	@ (8002514 <HAL_ADC_ConfigChannel+0x260>)
 80024d0:	fba2 2303 	umull	r2, r3, r2, r3
 80024d4:	0c9a      	lsrs	r2, r3, #18
 80024d6:	4613      	mov	r3, r2
 80024d8:	009b      	lsls	r3, r3, #2
 80024da:	4413      	add	r3, r2
 80024dc:	005b      	lsls	r3, r3, #1
 80024de:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80024e0:	e002      	b.n	80024e8 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80024e2:	68bb      	ldr	r3, [r7, #8]
 80024e4:	3b01      	subs	r3, #1
 80024e6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80024e8:	68bb      	ldr	r3, [r7, #8]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d1f9      	bne.n	80024e2 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	2200      	movs	r2, #0
 80024f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80024f6:	2300      	movs	r3, #0
}
 80024f8:	4618      	mov	r0, r3
 80024fa:	3714      	adds	r7, #20
 80024fc:	46bd      	mov	sp, r7
 80024fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002502:	4770      	bx	lr
 8002504:	40012300 	.word	0x40012300
 8002508:	40012000 	.word	0x40012000
 800250c:	10000012 	.word	0x10000012
 8002510:	20000008 	.word	0x20000008
 8002514:	431bde83 	.word	0x431bde83

08002518 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002518:	b480      	push	{r7}
 800251a:	b085      	sub	sp, #20
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002520:	4b79      	ldr	r3, [pc, #484]	@ (8002708 <ADC_Init+0x1f0>)
 8002522:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	685a      	ldr	r2, [r3, #4]
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	431a      	orrs	r2, r3
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	685a      	ldr	r2, [r3, #4]
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800254c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	6859      	ldr	r1, [r3, #4]
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	691b      	ldr	r3, [r3, #16]
 8002558:	021a      	lsls	r2, r3, #8
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	430a      	orrs	r2, r1
 8002560:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	685a      	ldr	r2, [r3, #4]
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002570:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	6859      	ldr	r1, [r3, #4]
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	689a      	ldr	r2, [r3, #8]
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	430a      	orrs	r2, r1
 8002582:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	689a      	ldr	r2, [r3, #8]
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002592:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	6899      	ldr	r1, [r3, #8]
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	68da      	ldr	r2, [r3, #12]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	430a      	orrs	r2, r1
 80025a4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025aa:	4a58      	ldr	r2, [pc, #352]	@ (800270c <ADC_Init+0x1f4>)
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d022      	beq.n	80025f6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	689a      	ldr	r2, [r3, #8]
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80025be:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	6899      	ldr	r1, [r3, #8]
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	430a      	orrs	r2, r1
 80025d0:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	689a      	ldr	r2, [r3, #8]
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80025e0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	6899      	ldr	r1, [r3, #8]
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	430a      	orrs	r2, r1
 80025f2:	609a      	str	r2, [r3, #8]
 80025f4:	e00f      	b.n	8002616 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	689a      	ldr	r2, [r3, #8]
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002604:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	689a      	ldr	r2, [r3, #8]
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002614:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	689a      	ldr	r2, [r3, #8]
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f022 0202 	bic.w	r2, r2, #2
 8002624:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	6899      	ldr	r1, [r3, #8]
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	7e1b      	ldrb	r3, [r3, #24]
 8002630:	005a      	lsls	r2, r3, #1
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	430a      	orrs	r2, r1
 8002638:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d01b      	beq.n	800267c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	685a      	ldr	r2, [r3, #4]
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002652:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	685a      	ldr	r2, [r3, #4]
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002662:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	6859      	ldr	r1, [r3, #4]
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800266e:	3b01      	subs	r3, #1
 8002670:	035a      	lsls	r2, r3, #13
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	430a      	orrs	r2, r1
 8002678:	605a      	str	r2, [r3, #4]
 800267a:	e007      	b.n	800268c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	685a      	ldr	r2, [r3, #4]
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800268a:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800269a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	69db      	ldr	r3, [r3, #28]
 80026a6:	3b01      	subs	r3, #1
 80026a8:	051a      	lsls	r2, r3, #20
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	430a      	orrs	r2, r1
 80026b0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	689a      	ldr	r2, [r3, #8]
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80026c0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	6899      	ldr	r1, [r3, #8]
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80026ce:	025a      	lsls	r2, r3, #9
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	430a      	orrs	r2, r1
 80026d6:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	689a      	ldr	r2, [r3, #8]
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80026e6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	6899      	ldr	r1, [r3, #8]
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	695b      	ldr	r3, [r3, #20]
 80026f2:	029a      	lsls	r2, r3, #10
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	430a      	orrs	r2, r1
 80026fa:	609a      	str	r2, [r3, #8]
}
 80026fc:	bf00      	nop
 80026fe:	3714      	adds	r7, #20
 8002700:	46bd      	mov	sp, r7
 8002702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002706:	4770      	bx	lr
 8002708:	40012300 	.word	0x40012300
 800270c:	0f000001 	.word	0x0f000001

08002710 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002710:	b480      	push	{r7}
 8002712:	b085      	sub	sp, #20
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	f003 0307 	and.w	r3, r3, #7
 800271e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002720:	4b0c      	ldr	r3, [pc, #48]	@ (8002754 <__NVIC_SetPriorityGrouping+0x44>)
 8002722:	68db      	ldr	r3, [r3, #12]
 8002724:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002726:	68ba      	ldr	r2, [r7, #8]
 8002728:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800272c:	4013      	ands	r3, r2
 800272e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002734:	68bb      	ldr	r3, [r7, #8]
 8002736:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002738:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800273c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002740:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002742:	4a04      	ldr	r2, [pc, #16]	@ (8002754 <__NVIC_SetPriorityGrouping+0x44>)
 8002744:	68bb      	ldr	r3, [r7, #8]
 8002746:	60d3      	str	r3, [r2, #12]
}
 8002748:	bf00      	nop
 800274a:	3714      	adds	r7, #20
 800274c:	46bd      	mov	sp, r7
 800274e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002752:	4770      	bx	lr
 8002754:	e000ed00 	.word	0xe000ed00

08002758 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002758:	b480      	push	{r7}
 800275a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800275c:	4b04      	ldr	r3, [pc, #16]	@ (8002770 <__NVIC_GetPriorityGrouping+0x18>)
 800275e:	68db      	ldr	r3, [r3, #12]
 8002760:	0a1b      	lsrs	r3, r3, #8
 8002762:	f003 0307 	and.w	r3, r3, #7
}
 8002766:	4618      	mov	r0, r3
 8002768:	46bd      	mov	sp, r7
 800276a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276e:	4770      	bx	lr
 8002770:	e000ed00 	.word	0xe000ed00

08002774 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002774:	b480      	push	{r7}
 8002776:	b083      	sub	sp, #12
 8002778:	af00      	add	r7, sp, #0
 800277a:	4603      	mov	r3, r0
 800277c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800277e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002782:	2b00      	cmp	r3, #0
 8002784:	db0b      	blt.n	800279e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002786:	79fb      	ldrb	r3, [r7, #7]
 8002788:	f003 021f 	and.w	r2, r3, #31
 800278c:	4907      	ldr	r1, [pc, #28]	@ (80027ac <__NVIC_EnableIRQ+0x38>)
 800278e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002792:	095b      	lsrs	r3, r3, #5
 8002794:	2001      	movs	r0, #1
 8002796:	fa00 f202 	lsl.w	r2, r0, r2
 800279a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800279e:	bf00      	nop
 80027a0:	370c      	adds	r7, #12
 80027a2:	46bd      	mov	sp, r7
 80027a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a8:	4770      	bx	lr
 80027aa:	bf00      	nop
 80027ac:	e000e100 	.word	0xe000e100

080027b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80027b0:	b480      	push	{r7}
 80027b2:	b083      	sub	sp, #12
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	4603      	mov	r3, r0
 80027b8:	6039      	str	r1, [r7, #0]
 80027ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	db0a      	blt.n	80027da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	b2da      	uxtb	r2, r3
 80027c8:	490c      	ldr	r1, [pc, #48]	@ (80027fc <__NVIC_SetPriority+0x4c>)
 80027ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027ce:	0112      	lsls	r2, r2, #4
 80027d0:	b2d2      	uxtb	r2, r2
 80027d2:	440b      	add	r3, r1
 80027d4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80027d8:	e00a      	b.n	80027f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	b2da      	uxtb	r2, r3
 80027de:	4908      	ldr	r1, [pc, #32]	@ (8002800 <__NVIC_SetPriority+0x50>)
 80027e0:	79fb      	ldrb	r3, [r7, #7]
 80027e2:	f003 030f 	and.w	r3, r3, #15
 80027e6:	3b04      	subs	r3, #4
 80027e8:	0112      	lsls	r2, r2, #4
 80027ea:	b2d2      	uxtb	r2, r2
 80027ec:	440b      	add	r3, r1
 80027ee:	761a      	strb	r2, [r3, #24]
}
 80027f0:	bf00      	nop
 80027f2:	370c      	adds	r7, #12
 80027f4:	46bd      	mov	sp, r7
 80027f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fa:	4770      	bx	lr
 80027fc:	e000e100 	.word	0xe000e100
 8002800:	e000ed00 	.word	0xe000ed00

08002804 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002804:	b480      	push	{r7}
 8002806:	b089      	sub	sp, #36	@ 0x24
 8002808:	af00      	add	r7, sp, #0
 800280a:	60f8      	str	r0, [r7, #12]
 800280c:	60b9      	str	r1, [r7, #8]
 800280e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	f003 0307 	and.w	r3, r3, #7
 8002816:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002818:	69fb      	ldr	r3, [r7, #28]
 800281a:	f1c3 0307 	rsb	r3, r3, #7
 800281e:	2b04      	cmp	r3, #4
 8002820:	bf28      	it	cs
 8002822:	2304      	movcs	r3, #4
 8002824:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002826:	69fb      	ldr	r3, [r7, #28]
 8002828:	3304      	adds	r3, #4
 800282a:	2b06      	cmp	r3, #6
 800282c:	d902      	bls.n	8002834 <NVIC_EncodePriority+0x30>
 800282e:	69fb      	ldr	r3, [r7, #28]
 8002830:	3b03      	subs	r3, #3
 8002832:	e000      	b.n	8002836 <NVIC_EncodePriority+0x32>
 8002834:	2300      	movs	r3, #0
 8002836:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002838:	f04f 32ff 	mov.w	r2, #4294967295
 800283c:	69bb      	ldr	r3, [r7, #24]
 800283e:	fa02 f303 	lsl.w	r3, r2, r3
 8002842:	43da      	mvns	r2, r3
 8002844:	68bb      	ldr	r3, [r7, #8]
 8002846:	401a      	ands	r2, r3
 8002848:	697b      	ldr	r3, [r7, #20]
 800284a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800284c:	f04f 31ff 	mov.w	r1, #4294967295
 8002850:	697b      	ldr	r3, [r7, #20]
 8002852:	fa01 f303 	lsl.w	r3, r1, r3
 8002856:	43d9      	mvns	r1, r3
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800285c:	4313      	orrs	r3, r2
         );
}
 800285e:	4618      	mov	r0, r3
 8002860:	3724      	adds	r7, #36	@ 0x24
 8002862:	46bd      	mov	sp, r7
 8002864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002868:	4770      	bx	lr
	...

0800286c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b082      	sub	sp, #8
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	3b01      	subs	r3, #1
 8002878:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800287c:	d301      	bcc.n	8002882 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800287e:	2301      	movs	r3, #1
 8002880:	e00f      	b.n	80028a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002882:	4a0a      	ldr	r2, [pc, #40]	@ (80028ac <SysTick_Config+0x40>)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	3b01      	subs	r3, #1
 8002888:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800288a:	210f      	movs	r1, #15
 800288c:	f04f 30ff 	mov.w	r0, #4294967295
 8002890:	f7ff ff8e 	bl	80027b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002894:	4b05      	ldr	r3, [pc, #20]	@ (80028ac <SysTick_Config+0x40>)
 8002896:	2200      	movs	r2, #0
 8002898:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800289a:	4b04      	ldr	r3, [pc, #16]	@ (80028ac <SysTick_Config+0x40>)
 800289c:	2207      	movs	r2, #7
 800289e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80028a0:	2300      	movs	r3, #0
}
 80028a2:	4618      	mov	r0, r3
 80028a4:	3708      	adds	r7, #8
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bd80      	pop	{r7, pc}
 80028aa:	bf00      	nop
 80028ac:	e000e010 	.word	0xe000e010

080028b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b082      	sub	sp, #8
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80028b8:	6878      	ldr	r0, [r7, #4]
 80028ba:	f7ff ff29 	bl	8002710 <__NVIC_SetPriorityGrouping>
}
 80028be:	bf00      	nop
 80028c0:	3708      	adds	r7, #8
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bd80      	pop	{r7, pc}

080028c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80028c6:	b580      	push	{r7, lr}
 80028c8:	b086      	sub	sp, #24
 80028ca:	af00      	add	r7, sp, #0
 80028cc:	4603      	mov	r3, r0
 80028ce:	60b9      	str	r1, [r7, #8]
 80028d0:	607a      	str	r2, [r7, #4]
 80028d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80028d4:	2300      	movs	r3, #0
 80028d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80028d8:	f7ff ff3e 	bl	8002758 <__NVIC_GetPriorityGrouping>
 80028dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80028de:	687a      	ldr	r2, [r7, #4]
 80028e0:	68b9      	ldr	r1, [r7, #8]
 80028e2:	6978      	ldr	r0, [r7, #20]
 80028e4:	f7ff ff8e 	bl	8002804 <NVIC_EncodePriority>
 80028e8:	4602      	mov	r2, r0
 80028ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028ee:	4611      	mov	r1, r2
 80028f0:	4618      	mov	r0, r3
 80028f2:	f7ff ff5d 	bl	80027b0 <__NVIC_SetPriority>
}
 80028f6:	bf00      	nop
 80028f8:	3718      	adds	r7, #24
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bd80      	pop	{r7, pc}

080028fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028fe:	b580      	push	{r7, lr}
 8002900:	b082      	sub	sp, #8
 8002902:	af00      	add	r7, sp, #0
 8002904:	4603      	mov	r3, r0
 8002906:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002908:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800290c:	4618      	mov	r0, r3
 800290e:	f7ff ff31 	bl	8002774 <__NVIC_EnableIRQ>
}
 8002912:	bf00      	nop
 8002914:	3708      	adds	r7, #8
 8002916:	46bd      	mov	sp, r7
 8002918:	bd80      	pop	{r7, pc}

0800291a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800291a:	b580      	push	{r7, lr}
 800291c:	b082      	sub	sp, #8
 800291e:	af00      	add	r7, sp, #0
 8002920:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002922:	6878      	ldr	r0, [r7, #4]
 8002924:	f7ff ffa2 	bl	800286c <SysTick_Config>
 8002928:	4603      	mov	r3, r0
}
 800292a:	4618      	mov	r0, r3
 800292c:	3708      	adds	r7, #8
 800292e:	46bd      	mov	sp, r7
 8002930:	bd80      	pop	{r7, pc}
	...

08002934 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b086      	sub	sp, #24
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800293c:	2300      	movs	r3, #0
 800293e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002940:	f7ff fac4 	bl	8001ecc <HAL_GetTick>
 8002944:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d101      	bne.n	8002950 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800294c:	2301      	movs	r3, #1
 800294e:	e099      	b.n	8002a84 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2202      	movs	r2, #2
 8002954:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2200      	movs	r2, #0
 800295c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	681a      	ldr	r2, [r3, #0]
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f022 0201 	bic.w	r2, r2, #1
 800296e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002970:	e00f      	b.n	8002992 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002972:	f7ff faab 	bl	8001ecc <HAL_GetTick>
 8002976:	4602      	mov	r2, r0
 8002978:	693b      	ldr	r3, [r7, #16]
 800297a:	1ad3      	subs	r3, r2, r3
 800297c:	2b05      	cmp	r3, #5
 800297e:	d908      	bls.n	8002992 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2220      	movs	r2, #32
 8002984:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	2203      	movs	r2, #3
 800298a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800298e:	2303      	movs	r3, #3
 8002990:	e078      	b.n	8002a84 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f003 0301 	and.w	r3, r3, #1
 800299c:	2b00      	cmp	r3, #0
 800299e:	d1e8      	bne.n	8002972 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80029a8:	697a      	ldr	r2, [r7, #20]
 80029aa:	4b38      	ldr	r3, [pc, #224]	@ (8002a8c <HAL_DMA_Init+0x158>)
 80029ac:	4013      	ands	r3, r2
 80029ae:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	685a      	ldr	r2, [r3, #4]
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	689b      	ldr	r3, [r3, #8]
 80029b8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80029be:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	691b      	ldr	r3, [r3, #16]
 80029c4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029ca:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	699b      	ldr	r3, [r3, #24]
 80029d0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029d6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6a1b      	ldr	r3, [r3, #32]
 80029dc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80029de:	697a      	ldr	r2, [r7, #20]
 80029e0:	4313      	orrs	r3, r2
 80029e2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029e8:	2b04      	cmp	r3, #4
 80029ea:	d107      	bne.n	80029fc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029f4:	4313      	orrs	r3, r2
 80029f6:	697a      	ldr	r2, [r7, #20]
 80029f8:	4313      	orrs	r3, r2
 80029fa:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	697a      	ldr	r2, [r7, #20]
 8002a02:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	695b      	ldr	r3, [r3, #20]
 8002a0a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002a0c:	697b      	ldr	r3, [r7, #20]
 8002a0e:	f023 0307 	bic.w	r3, r3, #7
 8002a12:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a18:	697a      	ldr	r2, [r7, #20]
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a22:	2b04      	cmp	r3, #4
 8002a24:	d117      	bne.n	8002a56 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a2a:	697a      	ldr	r2, [r7, #20]
 8002a2c:	4313      	orrs	r3, r2
 8002a2e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d00e      	beq.n	8002a56 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002a38:	6878      	ldr	r0, [r7, #4]
 8002a3a:	f000 fadf 	bl	8002ffc <DMA_CheckFifoParam>
 8002a3e:	4603      	mov	r3, r0
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d008      	beq.n	8002a56 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2240      	movs	r2, #64	@ 0x40
 8002a48:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2201      	movs	r2, #1
 8002a4e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002a52:	2301      	movs	r3, #1
 8002a54:	e016      	b.n	8002a84 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	697a      	ldr	r2, [r7, #20]
 8002a5c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002a5e:	6878      	ldr	r0, [r7, #4]
 8002a60:	f000 fa96 	bl	8002f90 <DMA_CalcBaseAndBitshift>
 8002a64:	4603      	mov	r3, r0
 8002a66:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a6c:	223f      	movs	r2, #63	@ 0x3f
 8002a6e:	409a      	lsls	r2, r3
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2200      	movs	r2, #0
 8002a78:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2201      	movs	r2, #1
 8002a7e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002a82:	2300      	movs	r3, #0
}
 8002a84:	4618      	mov	r0, r3
 8002a86:	3718      	adds	r7, #24
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	bd80      	pop	{r7, pc}
 8002a8c:	f010803f 	.word	0xf010803f

08002a90 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b086      	sub	sp, #24
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	60f8      	str	r0, [r7, #12]
 8002a98:	60b9      	str	r1, [r7, #8]
 8002a9a:	607a      	str	r2, [r7, #4]
 8002a9c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002aa6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002aae:	2b01      	cmp	r3, #1
 8002ab0:	d101      	bne.n	8002ab6 <HAL_DMA_Start_IT+0x26>
 8002ab2:	2302      	movs	r3, #2
 8002ab4:	e040      	b.n	8002b38 <HAL_DMA_Start_IT+0xa8>
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	2201      	movs	r2, #1
 8002aba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002ac4:	b2db      	uxtb	r3, r3
 8002ac6:	2b01      	cmp	r3, #1
 8002ac8:	d12f      	bne.n	8002b2a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	2202      	movs	r2, #2
 8002ace:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	687a      	ldr	r2, [r7, #4]
 8002adc:	68b9      	ldr	r1, [r7, #8]
 8002ade:	68f8      	ldr	r0, [r7, #12]
 8002ae0:	f000 fa28 	bl	8002f34 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ae8:	223f      	movs	r2, #63	@ 0x3f
 8002aea:	409a      	lsls	r2, r3
 8002aec:	693b      	ldr	r3, [r7, #16]
 8002aee:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	681a      	ldr	r2, [r3, #0]
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f042 0216 	orr.w	r2, r2, #22
 8002afe:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d007      	beq.n	8002b18 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	681a      	ldr	r2, [r3, #0]
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f042 0208 	orr.w	r2, r2, #8
 8002b16:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	681a      	ldr	r2, [r3, #0]
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f042 0201 	orr.w	r2, r2, #1
 8002b26:	601a      	str	r2, [r3, #0]
 8002b28:	e005      	b.n	8002b36 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002b32:	2302      	movs	r3, #2
 8002b34:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002b36:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b38:	4618      	mov	r0, r3
 8002b3a:	3718      	adds	r7, #24
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	bd80      	pop	{r7, pc}

08002b40 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b084      	sub	sp, #16
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b4c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002b4e:	f7ff f9bd 	bl	8001ecc <HAL_GetTick>
 8002b52:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002b5a:	b2db      	uxtb	r3, r3
 8002b5c:	2b02      	cmp	r3, #2
 8002b5e:	d008      	beq.n	8002b72 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2280      	movs	r2, #128	@ 0x80
 8002b64:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2200      	movs	r2, #0
 8002b6a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	e052      	b.n	8002c18 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	681a      	ldr	r2, [r3, #0]
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f022 0216 	bic.w	r2, r2, #22
 8002b80:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	695a      	ldr	r2, [r3, #20]
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002b90:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d103      	bne.n	8002ba2 <HAL_DMA_Abort+0x62>
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d007      	beq.n	8002bb2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	681a      	ldr	r2, [r3, #0]
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f022 0208 	bic.w	r2, r2, #8
 8002bb0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	681a      	ldr	r2, [r3, #0]
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f022 0201 	bic.w	r2, r2, #1
 8002bc0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002bc2:	e013      	b.n	8002bec <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002bc4:	f7ff f982 	bl	8001ecc <HAL_GetTick>
 8002bc8:	4602      	mov	r2, r0
 8002bca:	68bb      	ldr	r3, [r7, #8]
 8002bcc:	1ad3      	subs	r3, r2, r3
 8002bce:	2b05      	cmp	r3, #5
 8002bd0:	d90c      	bls.n	8002bec <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2220      	movs	r2, #32
 8002bd6:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2203      	movs	r2, #3
 8002bdc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2200      	movs	r2, #0
 8002be4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002be8:	2303      	movs	r3, #3
 8002bea:	e015      	b.n	8002c18 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f003 0301 	and.w	r3, r3, #1
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d1e4      	bne.n	8002bc4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bfe:	223f      	movs	r2, #63	@ 0x3f
 8002c00:	409a      	lsls	r2, r3
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2201      	movs	r2, #1
 8002c0a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2200      	movs	r2, #0
 8002c12:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002c16:	2300      	movs	r3, #0
}
 8002c18:	4618      	mov	r0, r3
 8002c1a:	3710      	adds	r7, #16
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	bd80      	pop	{r7, pc}

08002c20 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b086      	sub	sp, #24
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002c28:	2300      	movs	r3, #0
 8002c2a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002c2c:	4b8e      	ldr	r3, [pc, #568]	@ (8002e68 <HAL_DMA_IRQHandler+0x248>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4a8e      	ldr	r2, [pc, #568]	@ (8002e6c <HAL_DMA_IRQHandler+0x24c>)
 8002c32:	fba2 2303 	umull	r2, r3, r2, r3
 8002c36:	0a9b      	lsrs	r3, r3, #10
 8002c38:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c3e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002c40:	693b      	ldr	r3, [r7, #16]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c4a:	2208      	movs	r2, #8
 8002c4c:	409a      	lsls	r2, r3
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	4013      	ands	r3, r2
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d01a      	beq.n	8002c8c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f003 0304 	and.w	r3, r3, #4
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d013      	beq.n	8002c8c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	681a      	ldr	r2, [r3, #0]
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f022 0204 	bic.w	r2, r2, #4
 8002c72:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c78:	2208      	movs	r2, #8
 8002c7a:	409a      	lsls	r2, r3
 8002c7c:	693b      	ldr	r3, [r7, #16]
 8002c7e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c84:	f043 0201 	orr.w	r2, r3, #1
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c90:	2201      	movs	r2, #1
 8002c92:	409a      	lsls	r2, r3
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	4013      	ands	r3, r2
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d012      	beq.n	8002cc2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	695b      	ldr	r3, [r3, #20]
 8002ca2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d00b      	beq.n	8002cc2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cae:	2201      	movs	r2, #1
 8002cb0:	409a      	lsls	r2, r3
 8002cb2:	693b      	ldr	r3, [r7, #16]
 8002cb4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cba:	f043 0202 	orr.w	r2, r3, #2
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cc6:	2204      	movs	r2, #4
 8002cc8:	409a      	lsls	r2, r3
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	4013      	ands	r3, r2
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d012      	beq.n	8002cf8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f003 0302 	and.w	r3, r3, #2
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d00b      	beq.n	8002cf8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ce4:	2204      	movs	r2, #4
 8002ce6:	409a      	lsls	r2, r3
 8002ce8:	693b      	ldr	r3, [r7, #16]
 8002cea:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cf0:	f043 0204 	orr.w	r2, r3, #4
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cfc:	2210      	movs	r2, #16
 8002cfe:	409a      	lsls	r2, r3
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	4013      	ands	r3, r2
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d043      	beq.n	8002d90 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f003 0308 	and.w	r3, r3, #8
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d03c      	beq.n	8002d90 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d1a:	2210      	movs	r2, #16
 8002d1c:	409a      	lsls	r2, r3
 8002d1e:	693b      	ldr	r3, [r7, #16]
 8002d20:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d018      	beq.n	8002d62 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d108      	bne.n	8002d50 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d024      	beq.n	8002d90 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d4a:	6878      	ldr	r0, [r7, #4]
 8002d4c:	4798      	blx	r3
 8002d4e:	e01f      	b.n	8002d90 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d01b      	beq.n	8002d90 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d5c:	6878      	ldr	r0, [r7, #4]
 8002d5e:	4798      	blx	r3
 8002d60:	e016      	b.n	8002d90 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d107      	bne.n	8002d80 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	681a      	ldr	r2, [r3, #0]
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f022 0208 	bic.w	r2, r2, #8
 8002d7e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d003      	beq.n	8002d90 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d8c:	6878      	ldr	r0, [r7, #4]
 8002d8e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d94:	2220      	movs	r2, #32
 8002d96:	409a      	lsls	r2, r3
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	4013      	ands	r3, r2
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	f000 808f 	beq.w	8002ec0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f003 0310 	and.w	r3, r3, #16
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	f000 8087 	beq.w	8002ec0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002db6:	2220      	movs	r2, #32
 8002db8:	409a      	lsls	r2, r3
 8002dba:	693b      	ldr	r3, [r7, #16]
 8002dbc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002dc4:	b2db      	uxtb	r3, r3
 8002dc6:	2b05      	cmp	r3, #5
 8002dc8:	d136      	bne.n	8002e38 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	681a      	ldr	r2, [r3, #0]
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f022 0216 	bic.w	r2, r2, #22
 8002dd8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	695a      	ldr	r2, [r3, #20]
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002de8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d103      	bne.n	8002dfa <HAL_DMA_IRQHandler+0x1da>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d007      	beq.n	8002e0a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	681a      	ldr	r2, [r3, #0]
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f022 0208 	bic.w	r2, r2, #8
 8002e08:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e0e:	223f      	movs	r2, #63	@ 0x3f
 8002e10:	409a      	lsls	r2, r3
 8002e12:	693b      	ldr	r3, [r7, #16]
 8002e14:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2201      	movs	r2, #1
 8002e1a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2200      	movs	r2, #0
 8002e22:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d07e      	beq.n	8002f2c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002e32:	6878      	ldr	r0, [r7, #4]
 8002e34:	4798      	blx	r3
        }
        return;
 8002e36:	e079      	b.n	8002f2c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d01d      	beq.n	8002e82 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d10d      	bne.n	8002e70 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d031      	beq.n	8002ec0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e60:	6878      	ldr	r0, [r7, #4]
 8002e62:	4798      	blx	r3
 8002e64:	e02c      	b.n	8002ec0 <HAL_DMA_IRQHandler+0x2a0>
 8002e66:	bf00      	nop
 8002e68:	20000008 	.word	0x20000008
 8002e6c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d023      	beq.n	8002ec0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e7c:	6878      	ldr	r0, [r7, #4]
 8002e7e:	4798      	blx	r3
 8002e80:	e01e      	b.n	8002ec0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d10f      	bne.n	8002eb0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	681a      	ldr	r2, [r3, #0]
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f022 0210 	bic.w	r2, r2, #16
 8002e9e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2201      	movs	r2, #1
 8002ea4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2200      	movs	r2, #0
 8002eac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d003      	beq.n	8002ec0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ebc:	6878      	ldr	r0, [r7, #4]
 8002ebe:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d032      	beq.n	8002f2e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ecc:	f003 0301 	and.w	r3, r3, #1
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d022      	beq.n	8002f1a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2205      	movs	r2, #5
 8002ed8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	681a      	ldr	r2, [r3, #0]
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f022 0201 	bic.w	r2, r2, #1
 8002eea:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002eec:	68bb      	ldr	r3, [r7, #8]
 8002eee:	3301      	adds	r3, #1
 8002ef0:	60bb      	str	r3, [r7, #8]
 8002ef2:	697a      	ldr	r2, [r7, #20]
 8002ef4:	429a      	cmp	r2, r3
 8002ef6:	d307      	bcc.n	8002f08 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f003 0301 	and.w	r3, r3, #1
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d1f2      	bne.n	8002eec <HAL_DMA_IRQHandler+0x2cc>
 8002f06:	e000      	b.n	8002f0a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002f08:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2201      	movs	r2, #1
 8002f0e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2200      	movs	r2, #0
 8002f16:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d005      	beq.n	8002f2e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f26:	6878      	ldr	r0, [r7, #4]
 8002f28:	4798      	blx	r3
 8002f2a:	e000      	b.n	8002f2e <HAL_DMA_IRQHandler+0x30e>
        return;
 8002f2c:	bf00      	nop
    }
  }
}
 8002f2e:	3718      	adds	r7, #24
 8002f30:	46bd      	mov	sp, r7
 8002f32:	bd80      	pop	{r7, pc}

08002f34 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002f34:	b480      	push	{r7}
 8002f36:	b085      	sub	sp, #20
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	60f8      	str	r0, [r7, #12]
 8002f3c:	60b9      	str	r1, [r7, #8]
 8002f3e:	607a      	str	r2, [r7, #4]
 8002f40:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	681a      	ldr	r2, [r3, #0]
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002f50:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	683a      	ldr	r2, [r7, #0]
 8002f58:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	689b      	ldr	r3, [r3, #8]
 8002f5e:	2b40      	cmp	r3, #64	@ 0x40
 8002f60:	d108      	bne.n	8002f74 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	687a      	ldr	r2, [r7, #4]
 8002f68:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	68ba      	ldr	r2, [r7, #8]
 8002f70:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002f72:	e007      	b.n	8002f84 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	68ba      	ldr	r2, [r7, #8]
 8002f7a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	687a      	ldr	r2, [r7, #4]
 8002f82:	60da      	str	r2, [r3, #12]
}
 8002f84:	bf00      	nop
 8002f86:	3714      	adds	r7, #20
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8e:	4770      	bx	lr

08002f90 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002f90:	b480      	push	{r7}
 8002f92:	b085      	sub	sp, #20
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	b2db      	uxtb	r3, r3
 8002f9e:	3b10      	subs	r3, #16
 8002fa0:	4a14      	ldr	r2, [pc, #80]	@ (8002ff4 <DMA_CalcBaseAndBitshift+0x64>)
 8002fa2:	fba2 2303 	umull	r2, r3, r2, r3
 8002fa6:	091b      	lsrs	r3, r3, #4
 8002fa8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002faa:	4a13      	ldr	r2, [pc, #76]	@ (8002ff8 <DMA_CalcBaseAndBitshift+0x68>)
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	4413      	add	r3, r2
 8002fb0:	781b      	ldrb	r3, [r3, #0]
 8002fb2:	461a      	mov	r2, r3
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	2b03      	cmp	r3, #3
 8002fbc:	d909      	bls.n	8002fd2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002fc6:	f023 0303 	bic.w	r3, r3, #3
 8002fca:	1d1a      	adds	r2, r3, #4
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	659a      	str	r2, [r3, #88]	@ 0x58
 8002fd0:	e007      	b.n	8002fe2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002fda:	f023 0303 	bic.w	r3, r3, #3
 8002fde:	687a      	ldr	r2, [r7, #4]
 8002fe0:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	3714      	adds	r7, #20
 8002fea:	46bd      	mov	sp, r7
 8002fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff0:	4770      	bx	lr
 8002ff2:	bf00      	nop
 8002ff4:	aaaaaaab 	.word	0xaaaaaaab
 8002ff8:	08011cd4 	.word	0x08011cd4

08002ffc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	b085      	sub	sp, #20
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003004:	2300      	movs	r3, #0
 8003006:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800300c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	699b      	ldr	r3, [r3, #24]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d11f      	bne.n	8003056 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003016:	68bb      	ldr	r3, [r7, #8]
 8003018:	2b03      	cmp	r3, #3
 800301a:	d856      	bhi.n	80030ca <DMA_CheckFifoParam+0xce>
 800301c:	a201      	add	r2, pc, #4	@ (adr r2, 8003024 <DMA_CheckFifoParam+0x28>)
 800301e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003022:	bf00      	nop
 8003024:	08003035 	.word	0x08003035
 8003028:	08003047 	.word	0x08003047
 800302c:	08003035 	.word	0x08003035
 8003030:	080030cb 	.word	0x080030cb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003038:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800303c:	2b00      	cmp	r3, #0
 800303e:	d046      	beq.n	80030ce <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003040:	2301      	movs	r3, #1
 8003042:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003044:	e043      	b.n	80030ce <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800304a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800304e:	d140      	bne.n	80030d2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003050:	2301      	movs	r3, #1
 8003052:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003054:	e03d      	b.n	80030d2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	699b      	ldr	r3, [r3, #24]
 800305a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800305e:	d121      	bne.n	80030a4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003060:	68bb      	ldr	r3, [r7, #8]
 8003062:	2b03      	cmp	r3, #3
 8003064:	d837      	bhi.n	80030d6 <DMA_CheckFifoParam+0xda>
 8003066:	a201      	add	r2, pc, #4	@ (adr r2, 800306c <DMA_CheckFifoParam+0x70>)
 8003068:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800306c:	0800307d 	.word	0x0800307d
 8003070:	08003083 	.word	0x08003083
 8003074:	0800307d 	.word	0x0800307d
 8003078:	08003095 	.word	0x08003095
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800307c:	2301      	movs	r3, #1
 800307e:	73fb      	strb	r3, [r7, #15]
      break;
 8003080:	e030      	b.n	80030e4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003086:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800308a:	2b00      	cmp	r3, #0
 800308c:	d025      	beq.n	80030da <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800308e:	2301      	movs	r3, #1
 8003090:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003092:	e022      	b.n	80030da <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003098:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800309c:	d11f      	bne.n	80030de <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800309e:	2301      	movs	r3, #1
 80030a0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80030a2:	e01c      	b.n	80030de <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80030a4:	68bb      	ldr	r3, [r7, #8]
 80030a6:	2b02      	cmp	r3, #2
 80030a8:	d903      	bls.n	80030b2 <DMA_CheckFifoParam+0xb6>
 80030aa:	68bb      	ldr	r3, [r7, #8]
 80030ac:	2b03      	cmp	r3, #3
 80030ae:	d003      	beq.n	80030b8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80030b0:	e018      	b.n	80030e4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80030b2:	2301      	movs	r3, #1
 80030b4:	73fb      	strb	r3, [r7, #15]
      break;
 80030b6:	e015      	b.n	80030e4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030bc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d00e      	beq.n	80030e2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80030c4:	2301      	movs	r3, #1
 80030c6:	73fb      	strb	r3, [r7, #15]
      break;
 80030c8:	e00b      	b.n	80030e2 <DMA_CheckFifoParam+0xe6>
      break;
 80030ca:	bf00      	nop
 80030cc:	e00a      	b.n	80030e4 <DMA_CheckFifoParam+0xe8>
      break;
 80030ce:	bf00      	nop
 80030d0:	e008      	b.n	80030e4 <DMA_CheckFifoParam+0xe8>
      break;
 80030d2:	bf00      	nop
 80030d4:	e006      	b.n	80030e4 <DMA_CheckFifoParam+0xe8>
      break;
 80030d6:	bf00      	nop
 80030d8:	e004      	b.n	80030e4 <DMA_CheckFifoParam+0xe8>
      break;
 80030da:	bf00      	nop
 80030dc:	e002      	b.n	80030e4 <DMA_CheckFifoParam+0xe8>
      break;   
 80030de:	bf00      	nop
 80030e0:	e000      	b.n	80030e4 <DMA_CheckFifoParam+0xe8>
      break;
 80030e2:	bf00      	nop
    }
  } 
  
  return status; 
 80030e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80030e6:	4618      	mov	r0, r3
 80030e8:	3714      	adds	r7, #20
 80030ea:	46bd      	mov	sp, r7
 80030ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f0:	4770      	bx	lr
 80030f2:	bf00      	nop

080030f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80030f4:	b480      	push	{r7}
 80030f6:	b089      	sub	sp, #36	@ 0x24
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
 80030fc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80030fe:	2300      	movs	r3, #0
 8003100:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003102:	2300      	movs	r3, #0
 8003104:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003106:	2300      	movs	r3, #0
 8003108:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800310a:	2300      	movs	r3, #0
 800310c:	61fb      	str	r3, [r7, #28]
 800310e:	e159      	b.n	80033c4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003110:	2201      	movs	r2, #1
 8003112:	69fb      	ldr	r3, [r7, #28]
 8003114:	fa02 f303 	lsl.w	r3, r2, r3
 8003118:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	697a      	ldr	r2, [r7, #20]
 8003120:	4013      	ands	r3, r2
 8003122:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003124:	693a      	ldr	r2, [r7, #16]
 8003126:	697b      	ldr	r3, [r7, #20]
 8003128:	429a      	cmp	r2, r3
 800312a:	f040 8148 	bne.w	80033be <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	685b      	ldr	r3, [r3, #4]
 8003132:	f003 0303 	and.w	r3, r3, #3
 8003136:	2b01      	cmp	r3, #1
 8003138:	d005      	beq.n	8003146 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003142:	2b02      	cmp	r3, #2
 8003144:	d130      	bne.n	80031a8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	689b      	ldr	r3, [r3, #8]
 800314a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800314c:	69fb      	ldr	r3, [r7, #28]
 800314e:	005b      	lsls	r3, r3, #1
 8003150:	2203      	movs	r2, #3
 8003152:	fa02 f303 	lsl.w	r3, r2, r3
 8003156:	43db      	mvns	r3, r3
 8003158:	69ba      	ldr	r2, [r7, #24]
 800315a:	4013      	ands	r3, r2
 800315c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	68da      	ldr	r2, [r3, #12]
 8003162:	69fb      	ldr	r3, [r7, #28]
 8003164:	005b      	lsls	r3, r3, #1
 8003166:	fa02 f303 	lsl.w	r3, r2, r3
 800316a:	69ba      	ldr	r2, [r7, #24]
 800316c:	4313      	orrs	r3, r2
 800316e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	69ba      	ldr	r2, [r7, #24]
 8003174:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800317c:	2201      	movs	r2, #1
 800317e:	69fb      	ldr	r3, [r7, #28]
 8003180:	fa02 f303 	lsl.w	r3, r2, r3
 8003184:	43db      	mvns	r3, r3
 8003186:	69ba      	ldr	r2, [r7, #24]
 8003188:	4013      	ands	r3, r2
 800318a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	091b      	lsrs	r3, r3, #4
 8003192:	f003 0201 	and.w	r2, r3, #1
 8003196:	69fb      	ldr	r3, [r7, #28]
 8003198:	fa02 f303 	lsl.w	r3, r2, r3
 800319c:	69ba      	ldr	r2, [r7, #24]
 800319e:	4313      	orrs	r3, r2
 80031a0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	69ba      	ldr	r2, [r7, #24]
 80031a6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	f003 0303 	and.w	r3, r3, #3
 80031b0:	2b03      	cmp	r3, #3
 80031b2:	d017      	beq.n	80031e4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	68db      	ldr	r3, [r3, #12]
 80031b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80031ba:	69fb      	ldr	r3, [r7, #28]
 80031bc:	005b      	lsls	r3, r3, #1
 80031be:	2203      	movs	r2, #3
 80031c0:	fa02 f303 	lsl.w	r3, r2, r3
 80031c4:	43db      	mvns	r3, r3
 80031c6:	69ba      	ldr	r2, [r7, #24]
 80031c8:	4013      	ands	r3, r2
 80031ca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	689a      	ldr	r2, [r3, #8]
 80031d0:	69fb      	ldr	r3, [r7, #28]
 80031d2:	005b      	lsls	r3, r3, #1
 80031d4:	fa02 f303 	lsl.w	r3, r2, r3
 80031d8:	69ba      	ldr	r2, [r7, #24]
 80031da:	4313      	orrs	r3, r2
 80031dc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	69ba      	ldr	r2, [r7, #24]
 80031e2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	f003 0303 	and.w	r3, r3, #3
 80031ec:	2b02      	cmp	r3, #2
 80031ee:	d123      	bne.n	8003238 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80031f0:	69fb      	ldr	r3, [r7, #28]
 80031f2:	08da      	lsrs	r2, r3, #3
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	3208      	adds	r2, #8
 80031f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80031fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80031fe:	69fb      	ldr	r3, [r7, #28]
 8003200:	f003 0307 	and.w	r3, r3, #7
 8003204:	009b      	lsls	r3, r3, #2
 8003206:	220f      	movs	r2, #15
 8003208:	fa02 f303 	lsl.w	r3, r2, r3
 800320c:	43db      	mvns	r3, r3
 800320e:	69ba      	ldr	r2, [r7, #24]
 8003210:	4013      	ands	r3, r2
 8003212:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	691a      	ldr	r2, [r3, #16]
 8003218:	69fb      	ldr	r3, [r7, #28]
 800321a:	f003 0307 	and.w	r3, r3, #7
 800321e:	009b      	lsls	r3, r3, #2
 8003220:	fa02 f303 	lsl.w	r3, r2, r3
 8003224:	69ba      	ldr	r2, [r7, #24]
 8003226:	4313      	orrs	r3, r2
 8003228:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800322a:	69fb      	ldr	r3, [r7, #28]
 800322c:	08da      	lsrs	r2, r3, #3
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	3208      	adds	r2, #8
 8003232:	69b9      	ldr	r1, [r7, #24]
 8003234:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800323e:	69fb      	ldr	r3, [r7, #28]
 8003240:	005b      	lsls	r3, r3, #1
 8003242:	2203      	movs	r2, #3
 8003244:	fa02 f303 	lsl.w	r3, r2, r3
 8003248:	43db      	mvns	r3, r3
 800324a:	69ba      	ldr	r2, [r7, #24]
 800324c:	4013      	ands	r3, r2
 800324e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	f003 0203 	and.w	r2, r3, #3
 8003258:	69fb      	ldr	r3, [r7, #28]
 800325a:	005b      	lsls	r3, r3, #1
 800325c:	fa02 f303 	lsl.w	r3, r2, r3
 8003260:	69ba      	ldr	r2, [r7, #24]
 8003262:	4313      	orrs	r3, r2
 8003264:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	69ba      	ldr	r2, [r7, #24]
 800326a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	685b      	ldr	r3, [r3, #4]
 8003270:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003274:	2b00      	cmp	r3, #0
 8003276:	f000 80a2 	beq.w	80033be <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800327a:	2300      	movs	r3, #0
 800327c:	60fb      	str	r3, [r7, #12]
 800327e:	4b57      	ldr	r3, [pc, #348]	@ (80033dc <HAL_GPIO_Init+0x2e8>)
 8003280:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003282:	4a56      	ldr	r2, [pc, #344]	@ (80033dc <HAL_GPIO_Init+0x2e8>)
 8003284:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003288:	6453      	str	r3, [r2, #68]	@ 0x44
 800328a:	4b54      	ldr	r3, [pc, #336]	@ (80033dc <HAL_GPIO_Init+0x2e8>)
 800328c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800328e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003292:	60fb      	str	r3, [r7, #12]
 8003294:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003296:	4a52      	ldr	r2, [pc, #328]	@ (80033e0 <HAL_GPIO_Init+0x2ec>)
 8003298:	69fb      	ldr	r3, [r7, #28]
 800329a:	089b      	lsrs	r3, r3, #2
 800329c:	3302      	adds	r3, #2
 800329e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80032a4:	69fb      	ldr	r3, [r7, #28]
 80032a6:	f003 0303 	and.w	r3, r3, #3
 80032aa:	009b      	lsls	r3, r3, #2
 80032ac:	220f      	movs	r2, #15
 80032ae:	fa02 f303 	lsl.w	r3, r2, r3
 80032b2:	43db      	mvns	r3, r3
 80032b4:	69ba      	ldr	r2, [r7, #24]
 80032b6:	4013      	ands	r3, r2
 80032b8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	4a49      	ldr	r2, [pc, #292]	@ (80033e4 <HAL_GPIO_Init+0x2f0>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d019      	beq.n	80032f6 <HAL_GPIO_Init+0x202>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	4a48      	ldr	r2, [pc, #288]	@ (80033e8 <HAL_GPIO_Init+0x2f4>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d013      	beq.n	80032f2 <HAL_GPIO_Init+0x1fe>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	4a47      	ldr	r2, [pc, #284]	@ (80033ec <HAL_GPIO_Init+0x2f8>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d00d      	beq.n	80032ee <HAL_GPIO_Init+0x1fa>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	4a46      	ldr	r2, [pc, #280]	@ (80033f0 <HAL_GPIO_Init+0x2fc>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d007      	beq.n	80032ea <HAL_GPIO_Init+0x1f6>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	4a45      	ldr	r2, [pc, #276]	@ (80033f4 <HAL_GPIO_Init+0x300>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d101      	bne.n	80032e6 <HAL_GPIO_Init+0x1f2>
 80032e2:	2304      	movs	r3, #4
 80032e4:	e008      	b.n	80032f8 <HAL_GPIO_Init+0x204>
 80032e6:	2307      	movs	r3, #7
 80032e8:	e006      	b.n	80032f8 <HAL_GPIO_Init+0x204>
 80032ea:	2303      	movs	r3, #3
 80032ec:	e004      	b.n	80032f8 <HAL_GPIO_Init+0x204>
 80032ee:	2302      	movs	r3, #2
 80032f0:	e002      	b.n	80032f8 <HAL_GPIO_Init+0x204>
 80032f2:	2301      	movs	r3, #1
 80032f4:	e000      	b.n	80032f8 <HAL_GPIO_Init+0x204>
 80032f6:	2300      	movs	r3, #0
 80032f8:	69fa      	ldr	r2, [r7, #28]
 80032fa:	f002 0203 	and.w	r2, r2, #3
 80032fe:	0092      	lsls	r2, r2, #2
 8003300:	4093      	lsls	r3, r2
 8003302:	69ba      	ldr	r2, [r7, #24]
 8003304:	4313      	orrs	r3, r2
 8003306:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003308:	4935      	ldr	r1, [pc, #212]	@ (80033e0 <HAL_GPIO_Init+0x2ec>)
 800330a:	69fb      	ldr	r3, [r7, #28]
 800330c:	089b      	lsrs	r3, r3, #2
 800330e:	3302      	adds	r3, #2
 8003310:	69ba      	ldr	r2, [r7, #24]
 8003312:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003316:	4b38      	ldr	r3, [pc, #224]	@ (80033f8 <HAL_GPIO_Init+0x304>)
 8003318:	689b      	ldr	r3, [r3, #8]
 800331a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800331c:	693b      	ldr	r3, [r7, #16]
 800331e:	43db      	mvns	r3, r3
 8003320:	69ba      	ldr	r2, [r7, #24]
 8003322:	4013      	ands	r3, r2
 8003324:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	685b      	ldr	r3, [r3, #4]
 800332a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800332e:	2b00      	cmp	r3, #0
 8003330:	d003      	beq.n	800333a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003332:	69ba      	ldr	r2, [r7, #24]
 8003334:	693b      	ldr	r3, [r7, #16]
 8003336:	4313      	orrs	r3, r2
 8003338:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800333a:	4a2f      	ldr	r2, [pc, #188]	@ (80033f8 <HAL_GPIO_Init+0x304>)
 800333c:	69bb      	ldr	r3, [r7, #24]
 800333e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003340:	4b2d      	ldr	r3, [pc, #180]	@ (80033f8 <HAL_GPIO_Init+0x304>)
 8003342:	68db      	ldr	r3, [r3, #12]
 8003344:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003346:	693b      	ldr	r3, [r7, #16]
 8003348:	43db      	mvns	r3, r3
 800334a:	69ba      	ldr	r2, [r7, #24]
 800334c:	4013      	ands	r3, r2
 800334e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003358:	2b00      	cmp	r3, #0
 800335a:	d003      	beq.n	8003364 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800335c:	69ba      	ldr	r2, [r7, #24]
 800335e:	693b      	ldr	r3, [r7, #16]
 8003360:	4313      	orrs	r3, r2
 8003362:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003364:	4a24      	ldr	r2, [pc, #144]	@ (80033f8 <HAL_GPIO_Init+0x304>)
 8003366:	69bb      	ldr	r3, [r7, #24]
 8003368:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800336a:	4b23      	ldr	r3, [pc, #140]	@ (80033f8 <HAL_GPIO_Init+0x304>)
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003370:	693b      	ldr	r3, [r7, #16]
 8003372:	43db      	mvns	r3, r3
 8003374:	69ba      	ldr	r2, [r7, #24]
 8003376:	4013      	ands	r3, r2
 8003378:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	685b      	ldr	r3, [r3, #4]
 800337e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003382:	2b00      	cmp	r3, #0
 8003384:	d003      	beq.n	800338e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003386:	69ba      	ldr	r2, [r7, #24]
 8003388:	693b      	ldr	r3, [r7, #16]
 800338a:	4313      	orrs	r3, r2
 800338c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800338e:	4a1a      	ldr	r2, [pc, #104]	@ (80033f8 <HAL_GPIO_Init+0x304>)
 8003390:	69bb      	ldr	r3, [r7, #24]
 8003392:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003394:	4b18      	ldr	r3, [pc, #96]	@ (80033f8 <HAL_GPIO_Init+0x304>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800339a:	693b      	ldr	r3, [r7, #16]
 800339c:	43db      	mvns	r3, r3
 800339e:	69ba      	ldr	r2, [r7, #24]
 80033a0:	4013      	ands	r3, r2
 80033a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d003      	beq.n	80033b8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80033b0:	69ba      	ldr	r2, [r7, #24]
 80033b2:	693b      	ldr	r3, [r7, #16]
 80033b4:	4313      	orrs	r3, r2
 80033b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80033b8:	4a0f      	ldr	r2, [pc, #60]	@ (80033f8 <HAL_GPIO_Init+0x304>)
 80033ba:	69bb      	ldr	r3, [r7, #24]
 80033bc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80033be:	69fb      	ldr	r3, [r7, #28]
 80033c0:	3301      	adds	r3, #1
 80033c2:	61fb      	str	r3, [r7, #28]
 80033c4:	69fb      	ldr	r3, [r7, #28]
 80033c6:	2b0f      	cmp	r3, #15
 80033c8:	f67f aea2 	bls.w	8003110 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80033cc:	bf00      	nop
 80033ce:	bf00      	nop
 80033d0:	3724      	adds	r7, #36	@ 0x24
 80033d2:	46bd      	mov	sp, r7
 80033d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d8:	4770      	bx	lr
 80033da:	bf00      	nop
 80033dc:	40023800 	.word	0x40023800
 80033e0:	40013800 	.word	0x40013800
 80033e4:	40020000 	.word	0x40020000
 80033e8:	40020400 	.word	0x40020400
 80033ec:	40020800 	.word	0x40020800
 80033f0:	40020c00 	.word	0x40020c00
 80033f4:	40021000 	.word	0x40021000
 80033f8:	40013c00 	.word	0x40013c00

080033fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80033fc:	b480      	push	{r7}
 80033fe:	b083      	sub	sp, #12
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
 8003404:	460b      	mov	r3, r1
 8003406:	807b      	strh	r3, [r7, #2]
 8003408:	4613      	mov	r3, r2
 800340a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800340c:	787b      	ldrb	r3, [r7, #1]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d003      	beq.n	800341a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003412:	887a      	ldrh	r2, [r7, #2]
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003418:	e003      	b.n	8003422 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800341a:	887b      	ldrh	r3, [r7, #2]
 800341c:	041a      	lsls	r2, r3, #16
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	619a      	str	r2, [r3, #24]
}
 8003422:	bf00      	nop
 8003424:	370c      	adds	r7, #12
 8003426:	46bd      	mov	sp, r7
 8003428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342c:	4770      	bx	lr

0800342e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800342e:	b480      	push	{r7}
 8003430:	b085      	sub	sp, #20
 8003432:	af00      	add	r7, sp, #0
 8003434:	6078      	str	r0, [r7, #4]
 8003436:	460b      	mov	r3, r1
 8003438:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	695b      	ldr	r3, [r3, #20]
 800343e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003440:	887a      	ldrh	r2, [r7, #2]
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	4013      	ands	r3, r2
 8003446:	041a      	lsls	r2, r3, #16
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	43d9      	mvns	r1, r3
 800344c:	887b      	ldrh	r3, [r7, #2]
 800344e:	400b      	ands	r3, r1
 8003450:	431a      	orrs	r2, r3
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	619a      	str	r2, [r3, #24]
}
 8003456:	bf00      	nop
 8003458:	3714      	adds	r7, #20
 800345a:	46bd      	mov	sp, r7
 800345c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003460:	4770      	bx	lr
	...

08003464 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b084      	sub	sp, #16
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d101      	bne.n	8003476 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003472:	2301      	movs	r3, #1
 8003474:	e12b      	b.n	80036ce <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800347c:	b2db      	uxtb	r3, r3
 800347e:	2b00      	cmp	r3, #0
 8003480:	d106      	bne.n	8003490 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2200      	movs	r2, #0
 8003486:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800348a:	6878      	ldr	r0, [r7, #4]
 800348c:	f7fe fa8e 	bl	80019ac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2224      	movs	r2, #36	@ 0x24
 8003494:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	681a      	ldr	r2, [r3, #0]
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f022 0201 	bic.w	r2, r2, #1
 80034a6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	681a      	ldr	r2, [r3, #0]
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80034b6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	681a      	ldr	r2, [r3, #0]
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80034c6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80034c8:	f002 fc52 	bl	8005d70 <HAL_RCC_GetPCLK1Freq>
 80034cc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	685b      	ldr	r3, [r3, #4]
 80034d2:	4a81      	ldr	r2, [pc, #516]	@ (80036d8 <HAL_I2C_Init+0x274>)
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d807      	bhi.n	80034e8 <HAL_I2C_Init+0x84>
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	4a80      	ldr	r2, [pc, #512]	@ (80036dc <HAL_I2C_Init+0x278>)
 80034dc:	4293      	cmp	r3, r2
 80034de:	bf94      	ite	ls
 80034e0:	2301      	movls	r3, #1
 80034e2:	2300      	movhi	r3, #0
 80034e4:	b2db      	uxtb	r3, r3
 80034e6:	e006      	b.n	80034f6 <HAL_I2C_Init+0x92>
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	4a7d      	ldr	r2, [pc, #500]	@ (80036e0 <HAL_I2C_Init+0x27c>)
 80034ec:	4293      	cmp	r3, r2
 80034ee:	bf94      	ite	ls
 80034f0:	2301      	movls	r3, #1
 80034f2:	2300      	movhi	r3, #0
 80034f4:	b2db      	uxtb	r3, r3
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d001      	beq.n	80034fe <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80034fa:	2301      	movs	r3, #1
 80034fc:	e0e7      	b.n	80036ce <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	4a78      	ldr	r2, [pc, #480]	@ (80036e4 <HAL_I2C_Init+0x280>)
 8003502:	fba2 2303 	umull	r2, r3, r2, r3
 8003506:	0c9b      	lsrs	r3, r3, #18
 8003508:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	68ba      	ldr	r2, [r7, #8]
 800351a:	430a      	orrs	r2, r1
 800351c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	6a1b      	ldr	r3, [r3, #32]
 8003524:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	4a6a      	ldr	r2, [pc, #424]	@ (80036d8 <HAL_I2C_Init+0x274>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d802      	bhi.n	8003538 <HAL_I2C_Init+0xd4>
 8003532:	68bb      	ldr	r3, [r7, #8]
 8003534:	3301      	adds	r3, #1
 8003536:	e009      	b.n	800354c <HAL_I2C_Init+0xe8>
 8003538:	68bb      	ldr	r3, [r7, #8]
 800353a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800353e:	fb02 f303 	mul.w	r3, r2, r3
 8003542:	4a69      	ldr	r2, [pc, #420]	@ (80036e8 <HAL_I2C_Init+0x284>)
 8003544:	fba2 2303 	umull	r2, r3, r2, r3
 8003548:	099b      	lsrs	r3, r3, #6
 800354a:	3301      	adds	r3, #1
 800354c:	687a      	ldr	r2, [r7, #4]
 800354e:	6812      	ldr	r2, [r2, #0]
 8003550:	430b      	orrs	r3, r1
 8003552:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	69db      	ldr	r3, [r3, #28]
 800355a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800355e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	495c      	ldr	r1, [pc, #368]	@ (80036d8 <HAL_I2C_Init+0x274>)
 8003568:	428b      	cmp	r3, r1
 800356a:	d819      	bhi.n	80035a0 <HAL_I2C_Init+0x13c>
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	1e59      	subs	r1, r3, #1
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	005b      	lsls	r3, r3, #1
 8003576:	fbb1 f3f3 	udiv	r3, r1, r3
 800357a:	1c59      	adds	r1, r3, #1
 800357c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003580:	400b      	ands	r3, r1
 8003582:	2b00      	cmp	r3, #0
 8003584:	d00a      	beq.n	800359c <HAL_I2C_Init+0x138>
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	1e59      	subs	r1, r3, #1
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	005b      	lsls	r3, r3, #1
 8003590:	fbb1 f3f3 	udiv	r3, r1, r3
 8003594:	3301      	adds	r3, #1
 8003596:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800359a:	e051      	b.n	8003640 <HAL_I2C_Init+0x1dc>
 800359c:	2304      	movs	r3, #4
 800359e:	e04f      	b.n	8003640 <HAL_I2C_Init+0x1dc>
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	689b      	ldr	r3, [r3, #8]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d111      	bne.n	80035cc <HAL_I2C_Init+0x168>
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	1e58      	subs	r0, r3, #1
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6859      	ldr	r1, [r3, #4]
 80035b0:	460b      	mov	r3, r1
 80035b2:	005b      	lsls	r3, r3, #1
 80035b4:	440b      	add	r3, r1
 80035b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80035ba:	3301      	adds	r3, #1
 80035bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	bf0c      	ite	eq
 80035c4:	2301      	moveq	r3, #1
 80035c6:	2300      	movne	r3, #0
 80035c8:	b2db      	uxtb	r3, r3
 80035ca:	e012      	b.n	80035f2 <HAL_I2C_Init+0x18e>
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	1e58      	subs	r0, r3, #1
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6859      	ldr	r1, [r3, #4]
 80035d4:	460b      	mov	r3, r1
 80035d6:	009b      	lsls	r3, r3, #2
 80035d8:	440b      	add	r3, r1
 80035da:	0099      	lsls	r1, r3, #2
 80035dc:	440b      	add	r3, r1
 80035de:	fbb0 f3f3 	udiv	r3, r0, r3
 80035e2:	3301      	adds	r3, #1
 80035e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	bf0c      	ite	eq
 80035ec:	2301      	moveq	r3, #1
 80035ee:	2300      	movne	r3, #0
 80035f0:	b2db      	uxtb	r3, r3
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d001      	beq.n	80035fa <HAL_I2C_Init+0x196>
 80035f6:	2301      	movs	r3, #1
 80035f8:	e022      	b.n	8003640 <HAL_I2C_Init+0x1dc>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	689b      	ldr	r3, [r3, #8]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d10e      	bne.n	8003620 <HAL_I2C_Init+0x1bc>
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	1e58      	subs	r0, r3, #1
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6859      	ldr	r1, [r3, #4]
 800360a:	460b      	mov	r3, r1
 800360c:	005b      	lsls	r3, r3, #1
 800360e:	440b      	add	r3, r1
 8003610:	fbb0 f3f3 	udiv	r3, r0, r3
 8003614:	3301      	adds	r3, #1
 8003616:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800361a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800361e:	e00f      	b.n	8003640 <HAL_I2C_Init+0x1dc>
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	1e58      	subs	r0, r3, #1
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6859      	ldr	r1, [r3, #4]
 8003628:	460b      	mov	r3, r1
 800362a:	009b      	lsls	r3, r3, #2
 800362c:	440b      	add	r3, r1
 800362e:	0099      	lsls	r1, r3, #2
 8003630:	440b      	add	r3, r1
 8003632:	fbb0 f3f3 	udiv	r3, r0, r3
 8003636:	3301      	adds	r3, #1
 8003638:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800363c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003640:	6879      	ldr	r1, [r7, #4]
 8003642:	6809      	ldr	r1, [r1, #0]
 8003644:	4313      	orrs	r3, r2
 8003646:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	69da      	ldr	r2, [r3, #28]
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6a1b      	ldr	r3, [r3, #32]
 800365a:	431a      	orrs	r2, r3
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	430a      	orrs	r2, r1
 8003662:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	689b      	ldr	r3, [r3, #8]
 800366a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800366e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003672:	687a      	ldr	r2, [r7, #4]
 8003674:	6911      	ldr	r1, [r2, #16]
 8003676:	687a      	ldr	r2, [r7, #4]
 8003678:	68d2      	ldr	r2, [r2, #12]
 800367a:	4311      	orrs	r1, r2
 800367c:	687a      	ldr	r2, [r7, #4]
 800367e:	6812      	ldr	r2, [r2, #0]
 8003680:	430b      	orrs	r3, r1
 8003682:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	68db      	ldr	r3, [r3, #12]
 800368a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	695a      	ldr	r2, [r3, #20]
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	699b      	ldr	r3, [r3, #24]
 8003696:	431a      	orrs	r2, r3
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	430a      	orrs	r2, r1
 800369e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	681a      	ldr	r2, [r3, #0]
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f042 0201 	orr.w	r2, r2, #1
 80036ae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2200      	movs	r2, #0
 80036b4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2220      	movs	r2, #32
 80036ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2200      	movs	r2, #0
 80036c2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2200      	movs	r2, #0
 80036c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80036cc:	2300      	movs	r3, #0
}
 80036ce:	4618      	mov	r0, r3
 80036d0:	3710      	adds	r7, #16
 80036d2:	46bd      	mov	sp, r7
 80036d4:	bd80      	pop	{r7, pc}
 80036d6:	bf00      	nop
 80036d8:	000186a0 	.word	0x000186a0
 80036dc:	001e847f 	.word	0x001e847f
 80036e0:	003d08ff 	.word	0x003d08ff
 80036e4:	431bde83 	.word	0x431bde83
 80036e8:	10624dd3 	.word	0x10624dd3

080036ec <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b088      	sub	sp, #32
 80036f0:	af02      	add	r7, sp, #8
 80036f2:	60f8      	str	r0, [r7, #12]
 80036f4:	607a      	str	r2, [r7, #4]
 80036f6:	461a      	mov	r2, r3
 80036f8:	460b      	mov	r3, r1
 80036fa:	817b      	strh	r3, [r7, #10]
 80036fc:	4613      	mov	r3, r2
 80036fe:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003700:	f7fe fbe4 	bl	8001ecc <HAL_GetTick>
 8003704:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800370c:	b2db      	uxtb	r3, r3
 800370e:	2b20      	cmp	r3, #32
 8003710:	f040 80e0 	bne.w	80038d4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003714:	697b      	ldr	r3, [r7, #20]
 8003716:	9300      	str	r3, [sp, #0]
 8003718:	2319      	movs	r3, #25
 800371a:	2201      	movs	r2, #1
 800371c:	4970      	ldr	r1, [pc, #448]	@ (80038e0 <HAL_I2C_Master_Transmit+0x1f4>)
 800371e:	68f8      	ldr	r0, [r7, #12]
 8003720:	f000 fa92 	bl	8003c48 <I2C_WaitOnFlagUntilTimeout>
 8003724:	4603      	mov	r3, r0
 8003726:	2b00      	cmp	r3, #0
 8003728:	d001      	beq.n	800372e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800372a:	2302      	movs	r3, #2
 800372c:	e0d3      	b.n	80038d6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003734:	2b01      	cmp	r3, #1
 8003736:	d101      	bne.n	800373c <HAL_I2C_Master_Transmit+0x50>
 8003738:	2302      	movs	r3, #2
 800373a:	e0cc      	b.n	80038d6 <HAL_I2C_Master_Transmit+0x1ea>
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	2201      	movs	r2, #1
 8003740:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f003 0301 	and.w	r3, r3, #1
 800374e:	2b01      	cmp	r3, #1
 8003750:	d007      	beq.n	8003762 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	681a      	ldr	r2, [r3, #0]
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f042 0201 	orr.w	r2, r2, #1
 8003760:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	681a      	ldr	r2, [r3, #0]
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003770:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	2221      	movs	r2, #33	@ 0x21
 8003776:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	2210      	movs	r2, #16
 800377e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	2200      	movs	r2, #0
 8003786:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	687a      	ldr	r2, [r7, #4]
 800378c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	893a      	ldrh	r2, [r7, #8]
 8003792:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003798:	b29a      	uxth	r2, r3
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	4a50      	ldr	r2, [pc, #320]	@ (80038e4 <HAL_I2C_Master_Transmit+0x1f8>)
 80037a2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80037a4:	8979      	ldrh	r1, [r7, #10]
 80037a6:	697b      	ldr	r3, [r7, #20]
 80037a8:	6a3a      	ldr	r2, [r7, #32]
 80037aa:	68f8      	ldr	r0, [r7, #12]
 80037ac:	f000 f9ca 	bl	8003b44 <I2C_MasterRequestWrite>
 80037b0:	4603      	mov	r3, r0
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d001      	beq.n	80037ba <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80037b6:	2301      	movs	r3, #1
 80037b8:	e08d      	b.n	80038d6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037ba:	2300      	movs	r3, #0
 80037bc:	613b      	str	r3, [r7, #16]
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	695b      	ldr	r3, [r3, #20]
 80037c4:	613b      	str	r3, [r7, #16]
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	699b      	ldr	r3, [r3, #24]
 80037cc:	613b      	str	r3, [r7, #16]
 80037ce:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80037d0:	e066      	b.n	80038a0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80037d2:	697a      	ldr	r2, [r7, #20]
 80037d4:	6a39      	ldr	r1, [r7, #32]
 80037d6:	68f8      	ldr	r0, [r7, #12]
 80037d8:	f000 fb50 	bl	8003e7c <I2C_WaitOnTXEFlagUntilTimeout>
 80037dc:	4603      	mov	r3, r0
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d00d      	beq.n	80037fe <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037e6:	2b04      	cmp	r3, #4
 80037e8:	d107      	bne.n	80037fa <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	681a      	ldr	r2, [r3, #0]
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80037f8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80037fa:	2301      	movs	r3, #1
 80037fc:	e06b      	b.n	80038d6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003802:	781a      	ldrb	r2, [r3, #0]
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800380e:	1c5a      	adds	r2, r3, #1
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003818:	b29b      	uxth	r3, r3
 800381a:	3b01      	subs	r3, #1
 800381c:	b29a      	uxth	r2, r3
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003826:	3b01      	subs	r3, #1
 8003828:	b29a      	uxth	r2, r3
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	695b      	ldr	r3, [r3, #20]
 8003834:	f003 0304 	and.w	r3, r3, #4
 8003838:	2b04      	cmp	r3, #4
 800383a:	d11b      	bne.n	8003874 <HAL_I2C_Master_Transmit+0x188>
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003840:	2b00      	cmp	r3, #0
 8003842:	d017      	beq.n	8003874 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003848:	781a      	ldrb	r2, [r3, #0]
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003854:	1c5a      	adds	r2, r3, #1
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800385e:	b29b      	uxth	r3, r3
 8003860:	3b01      	subs	r3, #1
 8003862:	b29a      	uxth	r2, r3
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800386c:	3b01      	subs	r3, #1
 800386e:	b29a      	uxth	r2, r3
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003874:	697a      	ldr	r2, [r7, #20]
 8003876:	6a39      	ldr	r1, [r7, #32]
 8003878:	68f8      	ldr	r0, [r7, #12]
 800387a:	f000 fb47 	bl	8003f0c <I2C_WaitOnBTFFlagUntilTimeout>
 800387e:	4603      	mov	r3, r0
 8003880:	2b00      	cmp	r3, #0
 8003882:	d00d      	beq.n	80038a0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003888:	2b04      	cmp	r3, #4
 800388a:	d107      	bne.n	800389c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	681a      	ldr	r2, [r3, #0]
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800389a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800389c:	2301      	movs	r3, #1
 800389e:	e01a      	b.n	80038d6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d194      	bne.n	80037d2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	681a      	ldr	r2, [r3, #0]
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80038b6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	2220      	movs	r2, #32
 80038bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	2200      	movs	r2, #0
 80038c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	2200      	movs	r2, #0
 80038cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80038d0:	2300      	movs	r3, #0
 80038d2:	e000      	b.n	80038d6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80038d4:	2302      	movs	r3, #2
  }
}
 80038d6:	4618      	mov	r0, r3
 80038d8:	3718      	adds	r7, #24
 80038da:	46bd      	mov	sp, r7
 80038dc:	bd80      	pop	{r7, pc}
 80038de:	bf00      	nop
 80038e0:	00100002 	.word	0x00100002
 80038e4:	ffff0000 	.word	0xffff0000

080038e8 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b08a      	sub	sp, #40	@ 0x28
 80038ec:	af02      	add	r7, sp, #8
 80038ee:	60f8      	str	r0, [r7, #12]
 80038f0:	607a      	str	r2, [r7, #4]
 80038f2:	603b      	str	r3, [r7, #0]
 80038f4:	460b      	mov	r3, r1
 80038f6:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80038f8:	f7fe fae8 	bl	8001ecc <HAL_GetTick>
 80038fc:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80038fe:	2300      	movs	r3, #0
 8003900:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003908:	b2db      	uxtb	r3, r3
 800390a:	2b20      	cmp	r3, #32
 800390c:	f040 8111 	bne.w	8003b32 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003910:	69fb      	ldr	r3, [r7, #28]
 8003912:	9300      	str	r3, [sp, #0]
 8003914:	2319      	movs	r3, #25
 8003916:	2201      	movs	r2, #1
 8003918:	4988      	ldr	r1, [pc, #544]	@ (8003b3c <HAL_I2C_IsDeviceReady+0x254>)
 800391a:	68f8      	ldr	r0, [r7, #12]
 800391c:	f000 f994 	bl	8003c48 <I2C_WaitOnFlagUntilTimeout>
 8003920:	4603      	mov	r3, r0
 8003922:	2b00      	cmp	r3, #0
 8003924:	d001      	beq.n	800392a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8003926:	2302      	movs	r3, #2
 8003928:	e104      	b.n	8003b34 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003930:	2b01      	cmp	r3, #1
 8003932:	d101      	bne.n	8003938 <HAL_I2C_IsDeviceReady+0x50>
 8003934:	2302      	movs	r3, #2
 8003936:	e0fd      	b.n	8003b34 <HAL_I2C_IsDeviceReady+0x24c>
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	2201      	movs	r2, #1
 800393c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f003 0301 	and.w	r3, r3, #1
 800394a:	2b01      	cmp	r3, #1
 800394c:	d007      	beq.n	800395e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	681a      	ldr	r2, [r3, #0]
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f042 0201 	orr.w	r2, r2, #1
 800395c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	681a      	ldr	r2, [r3, #0]
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800396c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	2224      	movs	r2, #36	@ 0x24
 8003972:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	2200      	movs	r2, #0
 800397a:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	4a70      	ldr	r2, [pc, #448]	@ (8003b40 <HAL_I2C_IsDeviceReady+0x258>)
 8003980:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	681a      	ldr	r2, [r3, #0]
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003990:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8003992:	69fb      	ldr	r3, [r7, #28]
 8003994:	9300      	str	r3, [sp, #0]
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	2200      	movs	r2, #0
 800399a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800399e:	68f8      	ldr	r0, [r7, #12]
 80039a0:	f000 f952 	bl	8003c48 <I2C_WaitOnFlagUntilTimeout>
 80039a4:	4603      	mov	r3, r0
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d00d      	beq.n	80039c6 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039b4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80039b8:	d103      	bne.n	80039c2 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80039c0:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 80039c2:	2303      	movs	r3, #3
 80039c4:	e0b6      	b.n	8003b34 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80039c6:	897b      	ldrh	r3, [r7, #10]
 80039c8:	b2db      	uxtb	r3, r3
 80039ca:	461a      	mov	r2, r3
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80039d4:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80039d6:	f7fe fa79 	bl	8001ecc <HAL_GetTick>
 80039da:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	695b      	ldr	r3, [r3, #20]
 80039e2:	f003 0302 	and.w	r3, r3, #2
 80039e6:	2b02      	cmp	r3, #2
 80039e8:	bf0c      	ite	eq
 80039ea:	2301      	moveq	r3, #1
 80039ec:	2300      	movne	r3, #0
 80039ee:	b2db      	uxtb	r3, r3
 80039f0:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	695b      	ldr	r3, [r3, #20]
 80039f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80039fc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003a00:	bf0c      	ite	eq
 8003a02:	2301      	moveq	r3, #1
 8003a04:	2300      	movne	r3, #0
 8003a06:	b2db      	uxtb	r3, r3
 8003a08:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003a0a:	e025      	b.n	8003a58 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003a0c:	f7fe fa5e 	bl	8001ecc <HAL_GetTick>
 8003a10:	4602      	mov	r2, r0
 8003a12:	69fb      	ldr	r3, [r7, #28]
 8003a14:	1ad3      	subs	r3, r2, r3
 8003a16:	683a      	ldr	r2, [r7, #0]
 8003a18:	429a      	cmp	r2, r3
 8003a1a:	d302      	bcc.n	8003a22 <HAL_I2C_IsDeviceReady+0x13a>
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d103      	bne.n	8003a2a <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	22a0      	movs	r2, #160	@ 0xa0
 8003a26:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	695b      	ldr	r3, [r3, #20]
 8003a30:	f003 0302 	and.w	r3, r3, #2
 8003a34:	2b02      	cmp	r3, #2
 8003a36:	bf0c      	ite	eq
 8003a38:	2301      	moveq	r3, #1
 8003a3a:	2300      	movne	r3, #0
 8003a3c:	b2db      	uxtb	r3, r3
 8003a3e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	695b      	ldr	r3, [r3, #20]
 8003a46:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a4a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003a4e:	bf0c      	ite	eq
 8003a50:	2301      	moveq	r3, #1
 8003a52:	2300      	movne	r3, #0
 8003a54:	b2db      	uxtb	r3, r3
 8003a56:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a5e:	b2db      	uxtb	r3, r3
 8003a60:	2ba0      	cmp	r3, #160	@ 0xa0
 8003a62:	d005      	beq.n	8003a70 <HAL_I2C_IsDeviceReady+0x188>
 8003a64:	7dfb      	ldrb	r3, [r7, #23]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d102      	bne.n	8003a70 <HAL_I2C_IsDeviceReady+0x188>
 8003a6a:	7dbb      	ldrb	r3, [r7, #22]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d0cd      	beq.n	8003a0c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	2220      	movs	r2, #32
 8003a74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	695b      	ldr	r3, [r3, #20]
 8003a7e:	f003 0302 	and.w	r3, r3, #2
 8003a82:	2b02      	cmp	r3, #2
 8003a84:	d129      	bne.n	8003ada <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	681a      	ldr	r2, [r3, #0]
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a94:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a96:	2300      	movs	r3, #0
 8003a98:	613b      	str	r3, [r7, #16]
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	695b      	ldr	r3, [r3, #20]
 8003aa0:	613b      	str	r3, [r7, #16]
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	699b      	ldr	r3, [r3, #24]
 8003aa8:	613b      	str	r3, [r7, #16]
 8003aaa:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003aac:	69fb      	ldr	r3, [r7, #28]
 8003aae:	9300      	str	r3, [sp, #0]
 8003ab0:	2319      	movs	r3, #25
 8003ab2:	2201      	movs	r2, #1
 8003ab4:	4921      	ldr	r1, [pc, #132]	@ (8003b3c <HAL_I2C_IsDeviceReady+0x254>)
 8003ab6:	68f8      	ldr	r0, [r7, #12]
 8003ab8:	f000 f8c6 	bl	8003c48 <I2C_WaitOnFlagUntilTimeout>
 8003abc:	4603      	mov	r3, r0
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d001      	beq.n	8003ac6 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	e036      	b.n	8003b34 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	2220      	movs	r2, #32
 8003aca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	e02c      	b.n	8003b34 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	681a      	ldr	r2, [r3, #0]
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003ae8:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003af2:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003af4:	69fb      	ldr	r3, [r7, #28]
 8003af6:	9300      	str	r3, [sp, #0]
 8003af8:	2319      	movs	r3, #25
 8003afa:	2201      	movs	r2, #1
 8003afc:	490f      	ldr	r1, [pc, #60]	@ (8003b3c <HAL_I2C_IsDeviceReady+0x254>)
 8003afe:	68f8      	ldr	r0, [r7, #12]
 8003b00:	f000 f8a2 	bl	8003c48 <I2C_WaitOnFlagUntilTimeout>
 8003b04:	4603      	mov	r3, r0
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d001      	beq.n	8003b0e <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	e012      	b.n	8003b34 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8003b0e:	69bb      	ldr	r3, [r7, #24]
 8003b10:	3301      	adds	r3, #1
 8003b12:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003b14:	69ba      	ldr	r2, [r7, #24]
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	429a      	cmp	r2, r3
 8003b1a:	f4ff af32 	bcc.w	8003982 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	2220      	movs	r2, #32
 8003b22:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	2200      	movs	r2, #0
 8003b2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003b2e:	2301      	movs	r3, #1
 8003b30:	e000      	b.n	8003b34 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8003b32:	2302      	movs	r3, #2
  }
}
 8003b34:	4618      	mov	r0, r3
 8003b36:	3720      	adds	r7, #32
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	bd80      	pop	{r7, pc}
 8003b3c:	00100002 	.word	0x00100002
 8003b40:	ffff0000 	.word	0xffff0000

08003b44 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b088      	sub	sp, #32
 8003b48:	af02      	add	r7, sp, #8
 8003b4a:	60f8      	str	r0, [r7, #12]
 8003b4c:	607a      	str	r2, [r7, #4]
 8003b4e:	603b      	str	r3, [r7, #0]
 8003b50:	460b      	mov	r3, r1
 8003b52:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b58:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003b5a:	697b      	ldr	r3, [r7, #20]
 8003b5c:	2b08      	cmp	r3, #8
 8003b5e:	d006      	beq.n	8003b6e <I2C_MasterRequestWrite+0x2a>
 8003b60:	697b      	ldr	r3, [r7, #20]
 8003b62:	2b01      	cmp	r3, #1
 8003b64:	d003      	beq.n	8003b6e <I2C_MasterRequestWrite+0x2a>
 8003b66:	697b      	ldr	r3, [r7, #20]
 8003b68:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003b6c:	d108      	bne.n	8003b80 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	681a      	ldr	r2, [r3, #0]
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003b7c:	601a      	str	r2, [r3, #0]
 8003b7e:	e00b      	b.n	8003b98 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b84:	2b12      	cmp	r3, #18
 8003b86:	d107      	bne.n	8003b98 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	681a      	ldr	r2, [r3, #0]
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003b96:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	9300      	str	r3, [sp, #0]
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003ba4:	68f8      	ldr	r0, [r7, #12]
 8003ba6:	f000 f84f 	bl	8003c48 <I2C_WaitOnFlagUntilTimeout>
 8003baa:	4603      	mov	r3, r0
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d00d      	beq.n	8003bcc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003bbe:	d103      	bne.n	8003bc8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003bc6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003bc8:	2303      	movs	r3, #3
 8003bca:	e035      	b.n	8003c38 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	691b      	ldr	r3, [r3, #16]
 8003bd0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003bd4:	d108      	bne.n	8003be8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003bd6:	897b      	ldrh	r3, [r7, #10]
 8003bd8:	b2db      	uxtb	r3, r3
 8003bda:	461a      	mov	r2, r3
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003be4:	611a      	str	r2, [r3, #16]
 8003be6:	e01b      	b.n	8003c20 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003be8:	897b      	ldrh	r3, [r7, #10]
 8003bea:	11db      	asrs	r3, r3, #7
 8003bec:	b2db      	uxtb	r3, r3
 8003bee:	f003 0306 	and.w	r3, r3, #6
 8003bf2:	b2db      	uxtb	r3, r3
 8003bf4:	f063 030f 	orn	r3, r3, #15
 8003bf8:	b2da      	uxtb	r2, r3
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	687a      	ldr	r2, [r7, #4]
 8003c04:	490e      	ldr	r1, [pc, #56]	@ (8003c40 <I2C_MasterRequestWrite+0xfc>)
 8003c06:	68f8      	ldr	r0, [r7, #12]
 8003c08:	f000 f898 	bl	8003d3c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003c0c:	4603      	mov	r3, r0
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d001      	beq.n	8003c16 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003c12:	2301      	movs	r3, #1
 8003c14:	e010      	b.n	8003c38 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003c16:	897b      	ldrh	r3, [r7, #10]
 8003c18:	b2da      	uxtb	r2, r3
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	687a      	ldr	r2, [r7, #4]
 8003c24:	4907      	ldr	r1, [pc, #28]	@ (8003c44 <I2C_MasterRequestWrite+0x100>)
 8003c26:	68f8      	ldr	r0, [r7, #12]
 8003c28:	f000 f888 	bl	8003d3c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003c2c:	4603      	mov	r3, r0
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d001      	beq.n	8003c36 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003c32:	2301      	movs	r3, #1
 8003c34:	e000      	b.n	8003c38 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003c36:	2300      	movs	r3, #0
}
 8003c38:	4618      	mov	r0, r3
 8003c3a:	3718      	adds	r7, #24
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	bd80      	pop	{r7, pc}
 8003c40:	00010008 	.word	0x00010008
 8003c44:	00010002 	.word	0x00010002

08003c48 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b084      	sub	sp, #16
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	60f8      	str	r0, [r7, #12]
 8003c50:	60b9      	str	r1, [r7, #8]
 8003c52:	603b      	str	r3, [r7, #0]
 8003c54:	4613      	mov	r3, r2
 8003c56:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003c58:	e048      	b.n	8003cec <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c60:	d044      	beq.n	8003cec <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c62:	f7fe f933 	bl	8001ecc <HAL_GetTick>
 8003c66:	4602      	mov	r2, r0
 8003c68:	69bb      	ldr	r3, [r7, #24]
 8003c6a:	1ad3      	subs	r3, r2, r3
 8003c6c:	683a      	ldr	r2, [r7, #0]
 8003c6e:	429a      	cmp	r2, r3
 8003c70:	d302      	bcc.n	8003c78 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d139      	bne.n	8003cec <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003c78:	68bb      	ldr	r3, [r7, #8]
 8003c7a:	0c1b      	lsrs	r3, r3, #16
 8003c7c:	b2db      	uxtb	r3, r3
 8003c7e:	2b01      	cmp	r3, #1
 8003c80:	d10d      	bne.n	8003c9e <I2C_WaitOnFlagUntilTimeout+0x56>
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	695b      	ldr	r3, [r3, #20]
 8003c88:	43da      	mvns	r2, r3
 8003c8a:	68bb      	ldr	r3, [r7, #8]
 8003c8c:	4013      	ands	r3, r2
 8003c8e:	b29b      	uxth	r3, r3
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	bf0c      	ite	eq
 8003c94:	2301      	moveq	r3, #1
 8003c96:	2300      	movne	r3, #0
 8003c98:	b2db      	uxtb	r3, r3
 8003c9a:	461a      	mov	r2, r3
 8003c9c:	e00c      	b.n	8003cb8 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	699b      	ldr	r3, [r3, #24]
 8003ca4:	43da      	mvns	r2, r3
 8003ca6:	68bb      	ldr	r3, [r7, #8]
 8003ca8:	4013      	ands	r3, r2
 8003caa:	b29b      	uxth	r3, r3
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	bf0c      	ite	eq
 8003cb0:	2301      	moveq	r3, #1
 8003cb2:	2300      	movne	r3, #0
 8003cb4:	b2db      	uxtb	r3, r3
 8003cb6:	461a      	mov	r2, r3
 8003cb8:	79fb      	ldrb	r3, [r7, #7]
 8003cba:	429a      	cmp	r2, r3
 8003cbc:	d116      	bne.n	8003cec <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	2220      	movs	r2, #32
 8003cc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	2200      	movs	r2, #0
 8003cd0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cd8:	f043 0220 	orr.w	r2, r3, #32
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003ce8:	2301      	movs	r3, #1
 8003cea:	e023      	b.n	8003d34 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003cec:	68bb      	ldr	r3, [r7, #8]
 8003cee:	0c1b      	lsrs	r3, r3, #16
 8003cf0:	b2db      	uxtb	r3, r3
 8003cf2:	2b01      	cmp	r3, #1
 8003cf4:	d10d      	bne.n	8003d12 <I2C_WaitOnFlagUntilTimeout+0xca>
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	695b      	ldr	r3, [r3, #20]
 8003cfc:	43da      	mvns	r2, r3
 8003cfe:	68bb      	ldr	r3, [r7, #8]
 8003d00:	4013      	ands	r3, r2
 8003d02:	b29b      	uxth	r3, r3
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	bf0c      	ite	eq
 8003d08:	2301      	moveq	r3, #1
 8003d0a:	2300      	movne	r3, #0
 8003d0c:	b2db      	uxtb	r3, r3
 8003d0e:	461a      	mov	r2, r3
 8003d10:	e00c      	b.n	8003d2c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	699b      	ldr	r3, [r3, #24]
 8003d18:	43da      	mvns	r2, r3
 8003d1a:	68bb      	ldr	r3, [r7, #8]
 8003d1c:	4013      	ands	r3, r2
 8003d1e:	b29b      	uxth	r3, r3
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	bf0c      	ite	eq
 8003d24:	2301      	moveq	r3, #1
 8003d26:	2300      	movne	r3, #0
 8003d28:	b2db      	uxtb	r3, r3
 8003d2a:	461a      	mov	r2, r3
 8003d2c:	79fb      	ldrb	r3, [r7, #7]
 8003d2e:	429a      	cmp	r2, r3
 8003d30:	d093      	beq.n	8003c5a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003d32:	2300      	movs	r3, #0
}
 8003d34:	4618      	mov	r0, r3
 8003d36:	3710      	adds	r7, #16
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	bd80      	pop	{r7, pc}

08003d3c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b084      	sub	sp, #16
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	60f8      	str	r0, [r7, #12]
 8003d44:	60b9      	str	r1, [r7, #8]
 8003d46:	607a      	str	r2, [r7, #4]
 8003d48:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003d4a:	e071      	b.n	8003e30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	695b      	ldr	r3, [r3, #20]
 8003d52:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d56:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d5a:	d123      	bne.n	8003da4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	681a      	ldr	r2, [r3, #0]
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003d6a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003d74:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	2200      	movs	r2, #0
 8003d7a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	2220      	movs	r2, #32
 8003d80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	2200      	movs	r2, #0
 8003d88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d90:	f043 0204 	orr.w	r2, r3, #4
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003da0:	2301      	movs	r3, #1
 8003da2:	e067      	b.n	8003e74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003daa:	d041      	beq.n	8003e30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003dac:	f7fe f88e 	bl	8001ecc <HAL_GetTick>
 8003db0:	4602      	mov	r2, r0
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	1ad3      	subs	r3, r2, r3
 8003db6:	687a      	ldr	r2, [r7, #4]
 8003db8:	429a      	cmp	r2, r3
 8003dba:	d302      	bcc.n	8003dc2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d136      	bne.n	8003e30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003dc2:	68bb      	ldr	r3, [r7, #8]
 8003dc4:	0c1b      	lsrs	r3, r3, #16
 8003dc6:	b2db      	uxtb	r3, r3
 8003dc8:	2b01      	cmp	r3, #1
 8003dca:	d10c      	bne.n	8003de6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	695b      	ldr	r3, [r3, #20]
 8003dd2:	43da      	mvns	r2, r3
 8003dd4:	68bb      	ldr	r3, [r7, #8]
 8003dd6:	4013      	ands	r3, r2
 8003dd8:	b29b      	uxth	r3, r3
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	bf14      	ite	ne
 8003dde:	2301      	movne	r3, #1
 8003de0:	2300      	moveq	r3, #0
 8003de2:	b2db      	uxtb	r3, r3
 8003de4:	e00b      	b.n	8003dfe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	699b      	ldr	r3, [r3, #24]
 8003dec:	43da      	mvns	r2, r3
 8003dee:	68bb      	ldr	r3, [r7, #8]
 8003df0:	4013      	ands	r3, r2
 8003df2:	b29b      	uxth	r3, r3
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	bf14      	ite	ne
 8003df8:	2301      	movne	r3, #1
 8003dfa:	2300      	moveq	r3, #0
 8003dfc:	b2db      	uxtb	r3, r3
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d016      	beq.n	8003e30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	2200      	movs	r2, #0
 8003e06:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	2220      	movs	r2, #32
 8003e0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	2200      	movs	r2, #0
 8003e14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e1c:	f043 0220 	orr.w	r2, r3, #32
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	2200      	movs	r2, #0
 8003e28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003e2c:	2301      	movs	r3, #1
 8003e2e:	e021      	b.n	8003e74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003e30:	68bb      	ldr	r3, [r7, #8]
 8003e32:	0c1b      	lsrs	r3, r3, #16
 8003e34:	b2db      	uxtb	r3, r3
 8003e36:	2b01      	cmp	r3, #1
 8003e38:	d10c      	bne.n	8003e54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	695b      	ldr	r3, [r3, #20]
 8003e40:	43da      	mvns	r2, r3
 8003e42:	68bb      	ldr	r3, [r7, #8]
 8003e44:	4013      	ands	r3, r2
 8003e46:	b29b      	uxth	r3, r3
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	bf14      	ite	ne
 8003e4c:	2301      	movne	r3, #1
 8003e4e:	2300      	moveq	r3, #0
 8003e50:	b2db      	uxtb	r3, r3
 8003e52:	e00b      	b.n	8003e6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	699b      	ldr	r3, [r3, #24]
 8003e5a:	43da      	mvns	r2, r3
 8003e5c:	68bb      	ldr	r3, [r7, #8]
 8003e5e:	4013      	ands	r3, r2
 8003e60:	b29b      	uxth	r3, r3
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	bf14      	ite	ne
 8003e66:	2301      	movne	r3, #1
 8003e68:	2300      	moveq	r3, #0
 8003e6a:	b2db      	uxtb	r3, r3
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	f47f af6d 	bne.w	8003d4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003e72:	2300      	movs	r3, #0
}
 8003e74:	4618      	mov	r0, r3
 8003e76:	3710      	adds	r7, #16
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	bd80      	pop	{r7, pc}

08003e7c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b084      	sub	sp, #16
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	60f8      	str	r0, [r7, #12]
 8003e84:	60b9      	str	r1, [r7, #8]
 8003e86:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003e88:	e034      	b.n	8003ef4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003e8a:	68f8      	ldr	r0, [r7, #12]
 8003e8c:	f000 f886 	bl	8003f9c <I2C_IsAcknowledgeFailed>
 8003e90:	4603      	mov	r3, r0
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d001      	beq.n	8003e9a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003e96:	2301      	movs	r3, #1
 8003e98:	e034      	b.n	8003f04 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e9a:	68bb      	ldr	r3, [r7, #8]
 8003e9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ea0:	d028      	beq.n	8003ef4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ea2:	f7fe f813 	bl	8001ecc <HAL_GetTick>
 8003ea6:	4602      	mov	r2, r0
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	1ad3      	subs	r3, r2, r3
 8003eac:	68ba      	ldr	r2, [r7, #8]
 8003eae:	429a      	cmp	r2, r3
 8003eb0:	d302      	bcc.n	8003eb8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003eb2:	68bb      	ldr	r3, [r7, #8]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d11d      	bne.n	8003ef4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	695b      	ldr	r3, [r3, #20]
 8003ebe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ec2:	2b80      	cmp	r3, #128	@ 0x80
 8003ec4:	d016      	beq.n	8003ef4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	2200      	movs	r2, #0
 8003eca:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	2220      	movs	r2, #32
 8003ed0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ee0:	f043 0220 	orr.w	r2, r3, #32
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	2200      	movs	r2, #0
 8003eec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003ef0:	2301      	movs	r3, #1
 8003ef2:	e007      	b.n	8003f04 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	695b      	ldr	r3, [r3, #20]
 8003efa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003efe:	2b80      	cmp	r3, #128	@ 0x80
 8003f00:	d1c3      	bne.n	8003e8a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003f02:	2300      	movs	r3, #0
}
 8003f04:	4618      	mov	r0, r3
 8003f06:	3710      	adds	r7, #16
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	bd80      	pop	{r7, pc}

08003f0c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b084      	sub	sp, #16
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	60f8      	str	r0, [r7, #12]
 8003f14:	60b9      	str	r1, [r7, #8]
 8003f16:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003f18:	e034      	b.n	8003f84 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003f1a:	68f8      	ldr	r0, [r7, #12]
 8003f1c:	f000 f83e 	bl	8003f9c <I2C_IsAcknowledgeFailed>
 8003f20:	4603      	mov	r3, r0
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d001      	beq.n	8003f2a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003f26:	2301      	movs	r3, #1
 8003f28:	e034      	b.n	8003f94 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f2a:	68bb      	ldr	r3, [r7, #8]
 8003f2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f30:	d028      	beq.n	8003f84 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f32:	f7fd ffcb 	bl	8001ecc <HAL_GetTick>
 8003f36:	4602      	mov	r2, r0
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	1ad3      	subs	r3, r2, r3
 8003f3c:	68ba      	ldr	r2, [r7, #8]
 8003f3e:	429a      	cmp	r2, r3
 8003f40:	d302      	bcc.n	8003f48 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003f42:	68bb      	ldr	r3, [r7, #8]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d11d      	bne.n	8003f84 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	695b      	ldr	r3, [r3, #20]
 8003f4e:	f003 0304 	and.w	r3, r3, #4
 8003f52:	2b04      	cmp	r3, #4
 8003f54:	d016      	beq.n	8003f84 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	2200      	movs	r2, #0
 8003f5a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	2220      	movs	r2, #32
 8003f60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	2200      	movs	r2, #0
 8003f68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f70:	f043 0220 	orr.w	r2, r3, #32
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003f80:	2301      	movs	r3, #1
 8003f82:	e007      	b.n	8003f94 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	695b      	ldr	r3, [r3, #20]
 8003f8a:	f003 0304 	and.w	r3, r3, #4
 8003f8e:	2b04      	cmp	r3, #4
 8003f90:	d1c3      	bne.n	8003f1a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003f92:	2300      	movs	r3, #0
}
 8003f94:	4618      	mov	r0, r3
 8003f96:	3710      	adds	r7, #16
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	bd80      	pop	{r7, pc}

08003f9c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003f9c:	b480      	push	{r7}
 8003f9e:	b083      	sub	sp, #12
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	695b      	ldr	r3, [r3, #20]
 8003faa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003fae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003fb2:	d11b      	bne.n	8003fec <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003fbc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2220      	movs	r2, #32
 8003fc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2200      	movs	r2, #0
 8003fd0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fd8:	f043 0204 	orr.w	r2, r3, #4
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003fe8:	2301      	movs	r3, #1
 8003fea:	e000      	b.n	8003fee <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003fec:	2300      	movs	r3, #0
}
 8003fee:	4618      	mov	r0, r3
 8003ff0:	370c      	adds	r7, #12
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff8:	4770      	bx	lr

08003ffa <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003ffa:	b580      	push	{r7, lr}
 8003ffc:	b086      	sub	sp, #24
 8003ffe:	af02      	add	r7, sp, #8
 8004000:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2b00      	cmp	r3, #0
 8004006:	d101      	bne.n	800400c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004008:	2301      	movs	r3, #1
 800400a:	e101      	b.n	8004210 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8004018:	b2db      	uxtb	r3, r3
 800401a:	2b00      	cmp	r3, #0
 800401c:	d106      	bne.n	800402c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2200      	movs	r2, #0
 8004022:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004026:	6878      	ldr	r0, [r7, #4]
 8004028:	f00b ff5a 	bl	800fee0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2203      	movs	r2, #3
 8004030:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8004034:	68bb      	ldr	r3, [r7, #8]
 8004036:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800403a:	d102      	bne.n	8004042 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2200      	movs	r2, #0
 8004040:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	4618      	mov	r0, r3
 8004048:	f003 fab5 	bl	80075b6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6818      	ldr	r0, [r3, #0]
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	7c1a      	ldrb	r2, [r3, #16]
 8004054:	f88d 2000 	strb.w	r2, [sp]
 8004058:	3304      	adds	r3, #4
 800405a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800405c:	f003 f994 	bl	8007388 <USB_CoreInit>
 8004060:	4603      	mov	r3, r0
 8004062:	2b00      	cmp	r3, #0
 8004064:	d005      	beq.n	8004072 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2202      	movs	r2, #2
 800406a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800406e:	2301      	movs	r3, #1
 8004070:	e0ce      	b.n	8004210 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	2100      	movs	r1, #0
 8004078:	4618      	mov	r0, r3
 800407a:	f003 faad 	bl	80075d8 <USB_SetCurrentMode>
 800407e:	4603      	mov	r3, r0
 8004080:	2b00      	cmp	r3, #0
 8004082:	d005      	beq.n	8004090 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2202      	movs	r2, #2
 8004088:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800408c:	2301      	movs	r3, #1
 800408e:	e0bf      	b.n	8004210 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004090:	2300      	movs	r3, #0
 8004092:	73fb      	strb	r3, [r7, #15]
 8004094:	e04a      	b.n	800412c <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004096:	7bfa      	ldrb	r2, [r7, #15]
 8004098:	6879      	ldr	r1, [r7, #4]
 800409a:	4613      	mov	r3, r2
 800409c:	00db      	lsls	r3, r3, #3
 800409e:	4413      	add	r3, r2
 80040a0:	009b      	lsls	r3, r3, #2
 80040a2:	440b      	add	r3, r1
 80040a4:	3315      	adds	r3, #21
 80040a6:	2201      	movs	r2, #1
 80040a8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80040aa:	7bfa      	ldrb	r2, [r7, #15]
 80040ac:	6879      	ldr	r1, [r7, #4]
 80040ae:	4613      	mov	r3, r2
 80040b0:	00db      	lsls	r3, r3, #3
 80040b2:	4413      	add	r3, r2
 80040b4:	009b      	lsls	r3, r3, #2
 80040b6:	440b      	add	r3, r1
 80040b8:	3314      	adds	r3, #20
 80040ba:	7bfa      	ldrb	r2, [r7, #15]
 80040bc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80040be:	7bfa      	ldrb	r2, [r7, #15]
 80040c0:	7bfb      	ldrb	r3, [r7, #15]
 80040c2:	b298      	uxth	r0, r3
 80040c4:	6879      	ldr	r1, [r7, #4]
 80040c6:	4613      	mov	r3, r2
 80040c8:	00db      	lsls	r3, r3, #3
 80040ca:	4413      	add	r3, r2
 80040cc:	009b      	lsls	r3, r3, #2
 80040ce:	440b      	add	r3, r1
 80040d0:	332e      	adds	r3, #46	@ 0x2e
 80040d2:	4602      	mov	r2, r0
 80040d4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80040d6:	7bfa      	ldrb	r2, [r7, #15]
 80040d8:	6879      	ldr	r1, [r7, #4]
 80040da:	4613      	mov	r3, r2
 80040dc:	00db      	lsls	r3, r3, #3
 80040de:	4413      	add	r3, r2
 80040e0:	009b      	lsls	r3, r3, #2
 80040e2:	440b      	add	r3, r1
 80040e4:	3318      	adds	r3, #24
 80040e6:	2200      	movs	r2, #0
 80040e8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80040ea:	7bfa      	ldrb	r2, [r7, #15]
 80040ec:	6879      	ldr	r1, [r7, #4]
 80040ee:	4613      	mov	r3, r2
 80040f0:	00db      	lsls	r3, r3, #3
 80040f2:	4413      	add	r3, r2
 80040f4:	009b      	lsls	r3, r3, #2
 80040f6:	440b      	add	r3, r1
 80040f8:	331c      	adds	r3, #28
 80040fa:	2200      	movs	r2, #0
 80040fc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80040fe:	7bfa      	ldrb	r2, [r7, #15]
 8004100:	6879      	ldr	r1, [r7, #4]
 8004102:	4613      	mov	r3, r2
 8004104:	00db      	lsls	r3, r3, #3
 8004106:	4413      	add	r3, r2
 8004108:	009b      	lsls	r3, r3, #2
 800410a:	440b      	add	r3, r1
 800410c:	3320      	adds	r3, #32
 800410e:	2200      	movs	r2, #0
 8004110:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004112:	7bfa      	ldrb	r2, [r7, #15]
 8004114:	6879      	ldr	r1, [r7, #4]
 8004116:	4613      	mov	r3, r2
 8004118:	00db      	lsls	r3, r3, #3
 800411a:	4413      	add	r3, r2
 800411c:	009b      	lsls	r3, r3, #2
 800411e:	440b      	add	r3, r1
 8004120:	3324      	adds	r3, #36	@ 0x24
 8004122:	2200      	movs	r2, #0
 8004124:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004126:	7bfb      	ldrb	r3, [r7, #15]
 8004128:	3301      	adds	r3, #1
 800412a:	73fb      	strb	r3, [r7, #15]
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	791b      	ldrb	r3, [r3, #4]
 8004130:	7bfa      	ldrb	r2, [r7, #15]
 8004132:	429a      	cmp	r2, r3
 8004134:	d3af      	bcc.n	8004096 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004136:	2300      	movs	r3, #0
 8004138:	73fb      	strb	r3, [r7, #15]
 800413a:	e044      	b.n	80041c6 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800413c:	7bfa      	ldrb	r2, [r7, #15]
 800413e:	6879      	ldr	r1, [r7, #4]
 8004140:	4613      	mov	r3, r2
 8004142:	00db      	lsls	r3, r3, #3
 8004144:	4413      	add	r3, r2
 8004146:	009b      	lsls	r3, r3, #2
 8004148:	440b      	add	r3, r1
 800414a:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800414e:	2200      	movs	r2, #0
 8004150:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004152:	7bfa      	ldrb	r2, [r7, #15]
 8004154:	6879      	ldr	r1, [r7, #4]
 8004156:	4613      	mov	r3, r2
 8004158:	00db      	lsls	r3, r3, #3
 800415a:	4413      	add	r3, r2
 800415c:	009b      	lsls	r3, r3, #2
 800415e:	440b      	add	r3, r1
 8004160:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8004164:	7bfa      	ldrb	r2, [r7, #15]
 8004166:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004168:	7bfa      	ldrb	r2, [r7, #15]
 800416a:	6879      	ldr	r1, [r7, #4]
 800416c:	4613      	mov	r3, r2
 800416e:	00db      	lsls	r3, r3, #3
 8004170:	4413      	add	r3, r2
 8004172:	009b      	lsls	r3, r3, #2
 8004174:	440b      	add	r3, r1
 8004176:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800417a:	2200      	movs	r2, #0
 800417c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800417e:	7bfa      	ldrb	r2, [r7, #15]
 8004180:	6879      	ldr	r1, [r7, #4]
 8004182:	4613      	mov	r3, r2
 8004184:	00db      	lsls	r3, r3, #3
 8004186:	4413      	add	r3, r2
 8004188:	009b      	lsls	r3, r3, #2
 800418a:	440b      	add	r3, r1
 800418c:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8004190:	2200      	movs	r2, #0
 8004192:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004194:	7bfa      	ldrb	r2, [r7, #15]
 8004196:	6879      	ldr	r1, [r7, #4]
 8004198:	4613      	mov	r3, r2
 800419a:	00db      	lsls	r3, r3, #3
 800419c:	4413      	add	r3, r2
 800419e:	009b      	lsls	r3, r3, #2
 80041a0:	440b      	add	r3, r1
 80041a2:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80041a6:	2200      	movs	r2, #0
 80041a8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80041aa:	7bfa      	ldrb	r2, [r7, #15]
 80041ac:	6879      	ldr	r1, [r7, #4]
 80041ae:	4613      	mov	r3, r2
 80041b0:	00db      	lsls	r3, r3, #3
 80041b2:	4413      	add	r3, r2
 80041b4:	009b      	lsls	r3, r3, #2
 80041b6:	440b      	add	r3, r1
 80041b8:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80041bc:	2200      	movs	r2, #0
 80041be:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80041c0:	7bfb      	ldrb	r3, [r7, #15]
 80041c2:	3301      	adds	r3, #1
 80041c4:	73fb      	strb	r3, [r7, #15]
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	791b      	ldrb	r3, [r3, #4]
 80041ca:	7bfa      	ldrb	r2, [r7, #15]
 80041cc:	429a      	cmp	r2, r3
 80041ce:	d3b5      	bcc.n	800413c <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6818      	ldr	r0, [r3, #0]
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	7c1a      	ldrb	r2, [r3, #16]
 80041d8:	f88d 2000 	strb.w	r2, [sp]
 80041dc:	3304      	adds	r3, #4
 80041de:	cb0e      	ldmia	r3, {r1, r2, r3}
 80041e0:	f003 fa46 	bl	8007670 <USB_DevInit>
 80041e4:	4603      	mov	r3, r0
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d005      	beq.n	80041f6 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	2202      	movs	r2, #2
 80041ee:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80041f2:	2301      	movs	r3, #1
 80041f4:	e00c      	b.n	8004210 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2200      	movs	r2, #0
 80041fa:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2201      	movs	r2, #1
 8004200:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	4618      	mov	r0, r3
 800420a:	f004 fa90 	bl	800872e <USB_DevDisconnect>

  return HAL_OK;
 800420e:	2300      	movs	r3, #0
}
 8004210:	4618      	mov	r0, r3
 8004212:	3710      	adds	r7, #16
 8004214:	46bd      	mov	sp, r7
 8004216:	bd80      	pop	{r7, pc}

08004218 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	b084      	sub	sp, #16
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800422c:	2b01      	cmp	r3, #1
 800422e:	d101      	bne.n	8004234 <HAL_PCD_Start+0x1c>
 8004230:	2302      	movs	r3, #2
 8004232:	e022      	b.n	800427a <HAL_PCD_Start+0x62>
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2201      	movs	r2, #1
 8004238:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	68db      	ldr	r3, [r3, #12]
 8004240:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004244:	2b00      	cmp	r3, #0
 8004246:	d009      	beq.n	800425c <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800424c:	2b01      	cmp	r3, #1
 800424e:	d105      	bne.n	800425c <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004254:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	4618      	mov	r0, r3
 8004262:	f003 f997 	bl	8007594 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	4618      	mov	r0, r3
 800426c:	f004 fa3e 	bl	80086ec <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2200      	movs	r2, #0
 8004274:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004278:	2300      	movs	r3, #0
}
 800427a:	4618      	mov	r0, r3
 800427c:	3710      	adds	r7, #16
 800427e:	46bd      	mov	sp, r7
 8004280:	bd80      	pop	{r7, pc}

08004282 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004282:	b590      	push	{r4, r7, lr}
 8004284:	b08d      	sub	sp, #52	@ 0x34
 8004286:	af00      	add	r7, sp, #0
 8004288:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004290:	6a3b      	ldr	r3, [r7, #32]
 8004292:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	4618      	mov	r0, r3
 800429a:	f004 fafc 	bl	8008896 <USB_GetMode>
 800429e:	4603      	mov	r3, r0
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	f040 848c 	bne.w	8004bbe <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	4618      	mov	r0, r3
 80042ac:	f004 fa60 	bl	8008770 <USB_ReadInterrupts>
 80042b0:	4603      	mov	r3, r0
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	f000 8482 	beq.w	8004bbc <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80042b8:	69fb      	ldr	r3, [r7, #28]
 80042ba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80042be:	689b      	ldr	r3, [r3, #8]
 80042c0:	0a1b      	lsrs	r3, r3, #8
 80042c2:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4618      	mov	r0, r3
 80042d2:	f004 fa4d 	bl	8008770 <USB_ReadInterrupts>
 80042d6:	4603      	mov	r3, r0
 80042d8:	f003 0302 	and.w	r3, r3, #2
 80042dc:	2b02      	cmp	r3, #2
 80042de:	d107      	bne.n	80042f0 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	695a      	ldr	r2, [r3, #20]
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f002 0202 	and.w	r2, r2, #2
 80042ee:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	4618      	mov	r0, r3
 80042f6:	f004 fa3b 	bl	8008770 <USB_ReadInterrupts>
 80042fa:	4603      	mov	r3, r0
 80042fc:	f003 0310 	and.w	r3, r3, #16
 8004300:	2b10      	cmp	r3, #16
 8004302:	d161      	bne.n	80043c8 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	699a      	ldr	r2, [r3, #24]
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f022 0210 	bic.w	r2, r2, #16
 8004312:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8004314:	6a3b      	ldr	r3, [r7, #32]
 8004316:	6a1b      	ldr	r3, [r3, #32]
 8004318:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800431a:	69bb      	ldr	r3, [r7, #24]
 800431c:	f003 020f 	and.w	r2, r3, #15
 8004320:	4613      	mov	r3, r2
 8004322:	00db      	lsls	r3, r3, #3
 8004324:	4413      	add	r3, r2
 8004326:	009b      	lsls	r3, r3, #2
 8004328:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800432c:	687a      	ldr	r2, [r7, #4]
 800432e:	4413      	add	r3, r2
 8004330:	3304      	adds	r3, #4
 8004332:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8004334:	69bb      	ldr	r3, [r7, #24]
 8004336:	0c5b      	lsrs	r3, r3, #17
 8004338:	f003 030f 	and.w	r3, r3, #15
 800433c:	2b02      	cmp	r3, #2
 800433e:	d124      	bne.n	800438a <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8004340:	69ba      	ldr	r2, [r7, #24]
 8004342:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8004346:	4013      	ands	r3, r2
 8004348:	2b00      	cmp	r3, #0
 800434a:	d035      	beq.n	80043b8 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800434c:	697b      	ldr	r3, [r7, #20]
 800434e:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8004350:	69bb      	ldr	r3, [r7, #24]
 8004352:	091b      	lsrs	r3, r3, #4
 8004354:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004356:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800435a:	b29b      	uxth	r3, r3
 800435c:	461a      	mov	r2, r3
 800435e:	6a38      	ldr	r0, [r7, #32]
 8004360:	f004 f872 	bl	8008448 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004364:	697b      	ldr	r3, [r7, #20]
 8004366:	68da      	ldr	r2, [r3, #12]
 8004368:	69bb      	ldr	r3, [r7, #24]
 800436a:	091b      	lsrs	r3, r3, #4
 800436c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004370:	441a      	add	r2, r3
 8004372:	697b      	ldr	r3, [r7, #20]
 8004374:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004376:	697b      	ldr	r3, [r7, #20]
 8004378:	695a      	ldr	r2, [r3, #20]
 800437a:	69bb      	ldr	r3, [r7, #24]
 800437c:	091b      	lsrs	r3, r3, #4
 800437e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004382:	441a      	add	r2, r3
 8004384:	697b      	ldr	r3, [r7, #20]
 8004386:	615a      	str	r2, [r3, #20]
 8004388:	e016      	b.n	80043b8 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800438a:	69bb      	ldr	r3, [r7, #24]
 800438c:	0c5b      	lsrs	r3, r3, #17
 800438e:	f003 030f 	and.w	r3, r3, #15
 8004392:	2b06      	cmp	r3, #6
 8004394:	d110      	bne.n	80043b8 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800439c:	2208      	movs	r2, #8
 800439e:	4619      	mov	r1, r3
 80043a0:	6a38      	ldr	r0, [r7, #32]
 80043a2:	f004 f851 	bl	8008448 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80043a6:	697b      	ldr	r3, [r7, #20]
 80043a8:	695a      	ldr	r2, [r3, #20]
 80043aa:	69bb      	ldr	r3, [r7, #24]
 80043ac:	091b      	lsrs	r3, r3, #4
 80043ae:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80043b2:	441a      	add	r2, r3
 80043b4:	697b      	ldr	r3, [r7, #20]
 80043b6:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	699a      	ldr	r2, [r3, #24]
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f042 0210 	orr.w	r2, r2, #16
 80043c6:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	4618      	mov	r0, r3
 80043ce:	f004 f9cf 	bl	8008770 <USB_ReadInterrupts>
 80043d2:	4603      	mov	r3, r0
 80043d4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80043d8:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80043dc:	f040 80a7 	bne.w	800452e <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80043e0:	2300      	movs	r3, #0
 80043e2:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4618      	mov	r0, r3
 80043ea:	f004 f9d4 	bl	8008796 <USB_ReadDevAllOutEpInterrupt>
 80043ee:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 80043f0:	e099      	b.n	8004526 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80043f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043f4:	f003 0301 	and.w	r3, r3, #1
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	f000 808e 	beq.w	800451a <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004404:	b2d2      	uxtb	r2, r2
 8004406:	4611      	mov	r1, r2
 8004408:	4618      	mov	r0, r3
 800440a:	f004 f9f8 	bl	80087fe <USB_ReadDevOutEPInterrupt>
 800440e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8004410:	693b      	ldr	r3, [r7, #16]
 8004412:	f003 0301 	and.w	r3, r3, #1
 8004416:	2b00      	cmp	r3, #0
 8004418:	d00c      	beq.n	8004434 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800441a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800441c:	015a      	lsls	r2, r3, #5
 800441e:	69fb      	ldr	r3, [r7, #28]
 8004420:	4413      	add	r3, r2
 8004422:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004426:	461a      	mov	r2, r3
 8004428:	2301      	movs	r3, #1
 800442a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800442c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800442e:	6878      	ldr	r0, [r7, #4]
 8004430:	f000 fed0 	bl	80051d4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8004434:	693b      	ldr	r3, [r7, #16]
 8004436:	f003 0308 	and.w	r3, r3, #8
 800443a:	2b00      	cmp	r3, #0
 800443c:	d00c      	beq.n	8004458 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800443e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004440:	015a      	lsls	r2, r3, #5
 8004442:	69fb      	ldr	r3, [r7, #28]
 8004444:	4413      	add	r3, r2
 8004446:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800444a:	461a      	mov	r2, r3
 800444c:	2308      	movs	r3, #8
 800444e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8004450:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004452:	6878      	ldr	r0, [r7, #4]
 8004454:	f000 ffa6 	bl	80053a4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8004458:	693b      	ldr	r3, [r7, #16]
 800445a:	f003 0310 	and.w	r3, r3, #16
 800445e:	2b00      	cmp	r3, #0
 8004460:	d008      	beq.n	8004474 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8004462:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004464:	015a      	lsls	r2, r3, #5
 8004466:	69fb      	ldr	r3, [r7, #28]
 8004468:	4413      	add	r3, r2
 800446a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800446e:	461a      	mov	r2, r3
 8004470:	2310      	movs	r3, #16
 8004472:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8004474:	693b      	ldr	r3, [r7, #16]
 8004476:	f003 0302 	and.w	r3, r3, #2
 800447a:	2b00      	cmp	r3, #0
 800447c:	d030      	beq.n	80044e0 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800447e:	6a3b      	ldr	r3, [r7, #32]
 8004480:	695b      	ldr	r3, [r3, #20]
 8004482:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004486:	2b80      	cmp	r3, #128	@ 0x80
 8004488:	d109      	bne.n	800449e <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800448a:	69fb      	ldr	r3, [r7, #28]
 800448c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004490:	685b      	ldr	r3, [r3, #4]
 8004492:	69fa      	ldr	r2, [r7, #28]
 8004494:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004498:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800449c:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800449e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80044a0:	4613      	mov	r3, r2
 80044a2:	00db      	lsls	r3, r3, #3
 80044a4:	4413      	add	r3, r2
 80044a6:	009b      	lsls	r3, r3, #2
 80044a8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80044ac:	687a      	ldr	r2, [r7, #4]
 80044ae:	4413      	add	r3, r2
 80044b0:	3304      	adds	r3, #4
 80044b2:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80044b4:	697b      	ldr	r3, [r7, #20]
 80044b6:	78db      	ldrb	r3, [r3, #3]
 80044b8:	2b01      	cmp	r3, #1
 80044ba:	d108      	bne.n	80044ce <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80044bc:	697b      	ldr	r3, [r7, #20]
 80044be:	2200      	movs	r2, #0
 80044c0:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80044c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044c4:	b2db      	uxtb	r3, r3
 80044c6:	4619      	mov	r1, r3
 80044c8:	6878      	ldr	r0, [r7, #4]
 80044ca:	f00b fe05 	bl	80100d8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80044ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044d0:	015a      	lsls	r2, r3, #5
 80044d2:	69fb      	ldr	r3, [r7, #28]
 80044d4:	4413      	add	r3, r2
 80044d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80044da:	461a      	mov	r2, r3
 80044dc:	2302      	movs	r3, #2
 80044de:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80044e0:	693b      	ldr	r3, [r7, #16]
 80044e2:	f003 0320 	and.w	r3, r3, #32
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d008      	beq.n	80044fc <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80044ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044ec:	015a      	lsls	r2, r3, #5
 80044ee:	69fb      	ldr	r3, [r7, #28]
 80044f0:	4413      	add	r3, r2
 80044f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80044f6:	461a      	mov	r2, r3
 80044f8:	2320      	movs	r3, #32
 80044fa:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80044fc:	693b      	ldr	r3, [r7, #16]
 80044fe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004502:	2b00      	cmp	r3, #0
 8004504:	d009      	beq.n	800451a <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8004506:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004508:	015a      	lsls	r2, r3, #5
 800450a:	69fb      	ldr	r3, [r7, #28]
 800450c:	4413      	add	r3, r2
 800450e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004512:	461a      	mov	r2, r3
 8004514:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004518:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800451a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800451c:	3301      	adds	r3, #1
 800451e:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8004520:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004522:	085b      	lsrs	r3, r3, #1
 8004524:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8004526:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004528:	2b00      	cmp	r3, #0
 800452a:	f47f af62 	bne.w	80043f2 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	4618      	mov	r0, r3
 8004534:	f004 f91c 	bl	8008770 <USB_ReadInterrupts>
 8004538:	4603      	mov	r3, r0
 800453a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800453e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004542:	f040 80db 	bne.w	80046fc <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	4618      	mov	r0, r3
 800454c:	f004 f93d 	bl	80087ca <USB_ReadDevAllInEpInterrupt>
 8004550:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8004552:	2300      	movs	r3, #0
 8004554:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8004556:	e0cd      	b.n	80046f4 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8004558:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800455a:	f003 0301 	and.w	r3, r3, #1
 800455e:	2b00      	cmp	r3, #0
 8004560:	f000 80c2 	beq.w	80046e8 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800456a:	b2d2      	uxtb	r2, r2
 800456c:	4611      	mov	r1, r2
 800456e:	4618      	mov	r0, r3
 8004570:	f004 f963 	bl	800883a <USB_ReadDevInEPInterrupt>
 8004574:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8004576:	693b      	ldr	r3, [r7, #16]
 8004578:	f003 0301 	and.w	r3, r3, #1
 800457c:	2b00      	cmp	r3, #0
 800457e:	d057      	beq.n	8004630 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004580:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004582:	f003 030f 	and.w	r3, r3, #15
 8004586:	2201      	movs	r2, #1
 8004588:	fa02 f303 	lsl.w	r3, r2, r3
 800458c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800458e:	69fb      	ldr	r3, [r7, #28]
 8004590:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004594:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	43db      	mvns	r3, r3
 800459a:	69f9      	ldr	r1, [r7, #28]
 800459c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80045a0:	4013      	ands	r3, r2
 80045a2:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80045a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045a6:	015a      	lsls	r2, r3, #5
 80045a8:	69fb      	ldr	r3, [r7, #28]
 80045aa:	4413      	add	r3, r2
 80045ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80045b0:	461a      	mov	r2, r3
 80045b2:	2301      	movs	r3, #1
 80045b4:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	799b      	ldrb	r3, [r3, #6]
 80045ba:	2b01      	cmp	r3, #1
 80045bc:	d132      	bne.n	8004624 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80045be:	6879      	ldr	r1, [r7, #4]
 80045c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80045c2:	4613      	mov	r3, r2
 80045c4:	00db      	lsls	r3, r3, #3
 80045c6:	4413      	add	r3, r2
 80045c8:	009b      	lsls	r3, r3, #2
 80045ca:	440b      	add	r3, r1
 80045cc:	3320      	adds	r3, #32
 80045ce:	6819      	ldr	r1, [r3, #0]
 80045d0:	6878      	ldr	r0, [r7, #4]
 80045d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80045d4:	4613      	mov	r3, r2
 80045d6:	00db      	lsls	r3, r3, #3
 80045d8:	4413      	add	r3, r2
 80045da:	009b      	lsls	r3, r3, #2
 80045dc:	4403      	add	r3, r0
 80045de:	331c      	adds	r3, #28
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	4419      	add	r1, r3
 80045e4:	6878      	ldr	r0, [r7, #4]
 80045e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80045e8:	4613      	mov	r3, r2
 80045ea:	00db      	lsls	r3, r3, #3
 80045ec:	4413      	add	r3, r2
 80045ee:	009b      	lsls	r3, r3, #2
 80045f0:	4403      	add	r3, r0
 80045f2:	3320      	adds	r3, #32
 80045f4:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80045f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d113      	bne.n	8004624 <HAL_PCD_IRQHandler+0x3a2>
 80045fc:	6879      	ldr	r1, [r7, #4]
 80045fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004600:	4613      	mov	r3, r2
 8004602:	00db      	lsls	r3, r3, #3
 8004604:	4413      	add	r3, r2
 8004606:	009b      	lsls	r3, r3, #2
 8004608:	440b      	add	r3, r1
 800460a:	3324      	adds	r3, #36	@ 0x24
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d108      	bne.n	8004624 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6818      	ldr	r0, [r3, #0]
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800461c:	461a      	mov	r2, r3
 800461e:	2101      	movs	r1, #1
 8004620:	f004 f96a 	bl	80088f8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8004624:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004626:	b2db      	uxtb	r3, r3
 8004628:	4619      	mov	r1, r3
 800462a:	6878      	ldr	r0, [r7, #4]
 800462c:	f00b fcd9 	bl	800ffe2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8004630:	693b      	ldr	r3, [r7, #16]
 8004632:	f003 0308 	and.w	r3, r3, #8
 8004636:	2b00      	cmp	r3, #0
 8004638:	d008      	beq.n	800464c <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800463a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800463c:	015a      	lsls	r2, r3, #5
 800463e:	69fb      	ldr	r3, [r7, #28]
 8004640:	4413      	add	r3, r2
 8004642:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004646:	461a      	mov	r2, r3
 8004648:	2308      	movs	r3, #8
 800464a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800464c:	693b      	ldr	r3, [r7, #16]
 800464e:	f003 0310 	and.w	r3, r3, #16
 8004652:	2b00      	cmp	r3, #0
 8004654:	d008      	beq.n	8004668 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8004656:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004658:	015a      	lsls	r2, r3, #5
 800465a:	69fb      	ldr	r3, [r7, #28]
 800465c:	4413      	add	r3, r2
 800465e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004662:	461a      	mov	r2, r3
 8004664:	2310      	movs	r3, #16
 8004666:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8004668:	693b      	ldr	r3, [r7, #16]
 800466a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800466e:	2b00      	cmp	r3, #0
 8004670:	d008      	beq.n	8004684 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8004672:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004674:	015a      	lsls	r2, r3, #5
 8004676:	69fb      	ldr	r3, [r7, #28]
 8004678:	4413      	add	r3, r2
 800467a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800467e:	461a      	mov	r2, r3
 8004680:	2340      	movs	r3, #64	@ 0x40
 8004682:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8004684:	693b      	ldr	r3, [r7, #16]
 8004686:	f003 0302 	and.w	r3, r3, #2
 800468a:	2b00      	cmp	r3, #0
 800468c:	d023      	beq.n	80046d6 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800468e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004690:	6a38      	ldr	r0, [r7, #32]
 8004692:	f003 f951 	bl	8007938 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8004696:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004698:	4613      	mov	r3, r2
 800469a:	00db      	lsls	r3, r3, #3
 800469c:	4413      	add	r3, r2
 800469e:	009b      	lsls	r3, r3, #2
 80046a0:	3310      	adds	r3, #16
 80046a2:	687a      	ldr	r2, [r7, #4]
 80046a4:	4413      	add	r3, r2
 80046a6:	3304      	adds	r3, #4
 80046a8:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80046aa:	697b      	ldr	r3, [r7, #20]
 80046ac:	78db      	ldrb	r3, [r3, #3]
 80046ae:	2b01      	cmp	r3, #1
 80046b0:	d108      	bne.n	80046c4 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80046b2:	697b      	ldr	r3, [r7, #20]
 80046b4:	2200      	movs	r2, #0
 80046b6:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80046b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046ba:	b2db      	uxtb	r3, r3
 80046bc:	4619      	mov	r1, r3
 80046be:	6878      	ldr	r0, [r7, #4]
 80046c0:	f00b fd1c 	bl	80100fc <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80046c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046c6:	015a      	lsls	r2, r3, #5
 80046c8:	69fb      	ldr	r3, [r7, #28]
 80046ca:	4413      	add	r3, r2
 80046cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80046d0:	461a      	mov	r2, r3
 80046d2:	2302      	movs	r3, #2
 80046d4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80046d6:	693b      	ldr	r3, [r7, #16]
 80046d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d003      	beq.n	80046e8 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80046e0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80046e2:	6878      	ldr	r0, [r7, #4]
 80046e4:	f000 fcea 	bl	80050bc <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80046e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046ea:	3301      	adds	r3, #1
 80046ec:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80046ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046f0:	085b      	lsrs	r3, r3, #1
 80046f2:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80046f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	f47f af2e 	bne.w	8004558 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	4618      	mov	r0, r3
 8004702:	f004 f835 	bl	8008770 <USB_ReadInterrupts>
 8004706:	4603      	mov	r3, r0
 8004708:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800470c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004710:	d122      	bne.n	8004758 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004712:	69fb      	ldr	r3, [r7, #28]
 8004714:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004718:	685b      	ldr	r3, [r3, #4]
 800471a:	69fa      	ldr	r2, [r7, #28]
 800471c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004720:	f023 0301 	bic.w	r3, r3, #1
 8004724:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800472c:	2b01      	cmp	r3, #1
 800472e:	d108      	bne.n	8004742 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2200      	movs	r2, #0
 8004734:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004738:	2100      	movs	r1, #0
 800473a:	6878      	ldr	r0, [r7, #4]
 800473c:	f000 fed0 	bl	80054e0 <HAL_PCDEx_LPM_Callback>
 8004740:	e002      	b.n	8004748 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8004742:	6878      	ldr	r0, [r7, #4]
 8004744:	f00b fcba 	bl	80100bc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	695a      	ldr	r2, [r3, #20]
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8004756:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	4618      	mov	r0, r3
 800475e:	f004 f807 	bl	8008770 <USB_ReadInterrupts>
 8004762:	4603      	mov	r3, r0
 8004764:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004768:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800476c:	d112      	bne.n	8004794 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800476e:	69fb      	ldr	r3, [r7, #28]
 8004770:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004774:	689b      	ldr	r3, [r3, #8]
 8004776:	f003 0301 	and.w	r3, r3, #1
 800477a:	2b01      	cmp	r3, #1
 800477c:	d102      	bne.n	8004784 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800477e:	6878      	ldr	r0, [r7, #4]
 8004780:	f00b fc76 	bl	8010070 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	695a      	ldr	r2, [r3, #20]
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8004792:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	4618      	mov	r0, r3
 800479a:	f003 ffe9 	bl	8008770 <USB_ReadInterrupts>
 800479e:	4603      	mov	r3, r0
 80047a0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80047a4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80047a8:	f040 80b7 	bne.w	800491a <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80047ac:	69fb      	ldr	r3, [r7, #28]
 80047ae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80047b2:	685b      	ldr	r3, [r3, #4]
 80047b4:	69fa      	ldr	r2, [r7, #28]
 80047b6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80047ba:	f023 0301 	bic.w	r3, r3, #1
 80047be:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	2110      	movs	r1, #16
 80047c6:	4618      	mov	r0, r3
 80047c8:	f003 f8b6 	bl	8007938 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80047cc:	2300      	movs	r3, #0
 80047ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80047d0:	e046      	b.n	8004860 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80047d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047d4:	015a      	lsls	r2, r3, #5
 80047d6:	69fb      	ldr	r3, [r7, #28]
 80047d8:	4413      	add	r3, r2
 80047da:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80047de:	461a      	mov	r2, r3
 80047e0:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80047e4:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80047e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047e8:	015a      	lsls	r2, r3, #5
 80047ea:	69fb      	ldr	r3, [r7, #28]
 80047ec:	4413      	add	r3, r2
 80047ee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80047f6:	0151      	lsls	r1, r2, #5
 80047f8:	69fa      	ldr	r2, [r7, #28]
 80047fa:	440a      	add	r2, r1
 80047fc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004800:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004804:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8004806:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004808:	015a      	lsls	r2, r3, #5
 800480a:	69fb      	ldr	r3, [r7, #28]
 800480c:	4413      	add	r3, r2
 800480e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004812:	461a      	mov	r2, r3
 8004814:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004818:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800481a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800481c:	015a      	lsls	r2, r3, #5
 800481e:	69fb      	ldr	r3, [r7, #28]
 8004820:	4413      	add	r3, r2
 8004822:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800482a:	0151      	lsls	r1, r2, #5
 800482c:	69fa      	ldr	r2, [r7, #28]
 800482e:	440a      	add	r2, r1
 8004830:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004834:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004838:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800483a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800483c:	015a      	lsls	r2, r3, #5
 800483e:	69fb      	ldr	r3, [r7, #28]
 8004840:	4413      	add	r3, r2
 8004842:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800484a:	0151      	lsls	r1, r2, #5
 800484c:	69fa      	ldr	r2, [r7, #28]
 800484e:	440a      	add	r2, r1
 8004850:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004854:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004858:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800485a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800485c:	3301      	adds	r3, #1
 800485e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	791b      	ldrb	r3, [r3, #4]
 8004864:	461a      	mov	r2, r3
 8004866:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004868:	4293      	cmp	r3, r2
 800486a:	d3b2      	bcc.n	80047d2 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800486c:	69fb      	ldr	r3, [r7, #28]
 800486e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004872:	69db      	ldr	r3, [r3, #28]
 8004874:	69fa      	ldr	r2, [r7, #28]
 8004876:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800487a:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 800487e:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	7bdb      	ldrb	r3, [r3, #15]
 8004884:	2b00      	cmp	r3, #0
 8004886:	d016      	beq.n	80048b6 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8004888:	69fb      	ldr	r3, [r7, #28]
 800488a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800488e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004892:	69fa      	ldr	r2, [r7, #28]
 8004894:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004898:	f043 030b 	orr.w	r3, r3, #11
 800489c:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80048a0:	69fb      	ldr	r3, [r7, #28]
 80048a2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80048a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048a8:	69fa      	ldr	r2, [r7, #28]
 80048aa:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80048ae:	f043 030b 	orr.w	r3, r3, #11
 80048b2:	6453      	str	r3, [r2, #68]	@ 0x44
 80048b4:	e015      	b.n	80048e2 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80048b6:	69fb      	ldr	r3, [r7, #28]
 80048b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80048bc:	695b      	ldr	r3, [r3, #20]
 80048be:	69fa      	ldr	r2, [r7, #28]
 80048c0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80048c4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80048c8:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 80048cc:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80048ce:	69fb      	ldr	r3, [r7, #28]
 80048d0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80048d4:	691b      	ldr	r3, [r3, #16]
 80048d6:	69fa      	ldr	r2, [r7, #28]
 80048d8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80048dc:	f043 030b 	orr.w	r3, r3, #11
 80048e0:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80048e2:	69fb      	ldr	r3, [r7, #28]
 80048e4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	69fa      	ldr	r2, [r7, #28]
 80048ec:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80048f0:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80048f4:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6818      	ldr	r0, [r3, #0]
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004904:	461a      	mov	r2, r3
 8004906:	f003 fff7 	bl	80088f8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	695a      	ldr	r2, [r3, #20]
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8004918:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	4618      	mov	r0, r3
 8004920:	f003 ff26 	bl	8008770 <USB_ReadInterrupts>
 8004924:	4603      	mov	r3, r0
 8004926:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800492a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800492e:	d123      	bne.n	8004978 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	4618      	mov	r0, r3
 8004936:	f003 ffbc 	bl	80088b2 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	4618      	mov	r0, r3
 8004940:	f003 f873 	bl	8007a2a <USB_GetDevSpeed>
 8004944:	4603      	mov	r3, r0
 8004946:	461a      	mov	r2, r3
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681c      	ldr	r4, [r3, #0]
 8004950:	f001 fa02 	bl	8005d58 <HAL_RCC_GetHCLKFreq>
 8004954:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800495a:	461a      	mov	r2, r3
 800495c:	4620      	mov	r0, r4
 800495e:	f002 fd77 	bl	8007450 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8004962:	6878      	ldr	r0, [r7, #4]
 8004964:	f00b fb65 	bl	8010032 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	695a      	ldr	r2, [r3, #20]
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8004976:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	4618      	mov	r0, r3
 800497e:	f003 fef7 	bl	8008770 <USB_ReadInterrupts>
 8004982:	4603      	mov	r3, r0
 8004984:	f003 0308 	and.w	r3, r3, #8
 8004988:	2b08      	cmp	r3, #8
 800498a:	d10a      	bne.n	80049a2 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800498c:	6878      	ldr	r0, [r7, #4]
 800498e:	f00b fb42 	bl	8010016 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	695a      	ldr	r2, [r3, #20]
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f002 0208 	and.w	r2, r2, #8
 80049a0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	4618      	mov	r0, r3
 80049a8:	f003 fee2 	bl	8008770 <USB_ReadInterrupts>
 80049ac:	4603      	mov	r3, r0
 80049ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80049b2:	2b80      	cmp	r3, #128	@ 0x80
 80049b4:	d123      	bne.n	80049fe <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80049b6:	6a3b      	ldr	r3, [r7, #32]
 80049b8:	699b      	ldr	r3, [r3, #24]
 80049ba:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80049be:	6a3b      	ldr	r3, [r7, #32]
 80049c0:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80049c2:	2301      	movs	r3, #1
 80049c4:	627b      	str	r3, [r7, #36]	@ 0x24
 80049c6:	e014      	b.n	80049f2 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80049c8:	6879      	ldr	r1, [r7, #4]
 80049ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80049cc:	4613      	mov	r3, r2
 80049ce:	00db      	lsls	r3, r3, #3
 80049d0:	4413      	add	r3, r2
 80049d2:	009b      	lsls	r3, r3, #2
 80049d4:	440b      	add	r3, r1
 80049d6:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80049da:	781b      	ldrb	r3, [r3, #0]
 80049dc:	2b01      	cmp	r3, #1
 80049de:	d105      	bne.n	80049ec <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80049e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049e2:	b2db      	uxtb	r3, r3
 80049e4:	4619      	mov	r1, r3
 80049e6:	6878      	ldr	r0, [r7, #4]
 80049e8:	f000 fb0a 	bl	8005000 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80049ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049ee:	3301      	adds	r3, #1
 80049f0:	627b      	str	r3, [r7, #36]	@ 0x24
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	791b      	ldrb	r3, [r3, #4]
 80049f6:	461a      	mov	r2, r3
 80049f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d3e4      	bcc.n	80049c8 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	4618      	mov	r0, r3
 8004a04:	f003 feb4 	bl	8008770 <USB_ReadInterrupts>
 8004a08:	4603      	mov	r3, r0
 8004a0a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004a0e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004a12:	d13c      	bne.n	8004a8e <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004a14:	2301      	movs	r3, #1
 8004a16:	627b      	str	r3, [r7, #36]	@ 0x24
 8004a18:	e02b      	b.n	8004a72 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8004a1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a1c:	015a      	lsls	r2, r3, #5
 8004a1e:	69fb      	ldr	r3, [r7, #28]
 8004a20:	4413      	add	r3, r2
 8004a22:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004a2a:	6879      	ldr	r1, [r7, #4]
 8004a2c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a2e:	4613      	mov	r3, r2
 8004a30:	00db      	lsls	r3, r3, #3
 8004a32:	4413      	add	r3, r2
 8004a34:	009b      	lsls	r3, r3, #2
 8004a36:	440b      	add	r3, r1
 8004a38:	3318      	adds	r3, #24
 8004a3a:	781b      	ldrb	r3, [r3, #0]
 8004a3c:	2b01      	cmp	r3, #1
 8004a3e:	d115      	bne.n	8004a6c <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8004a40:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	da12      	bge.n	8004a6c <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8004a46:	6879      	ldr	r1, [r7, #4]
 8004a48:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a4a:	4613      	mov	r3, r2
 8004a4c:	00db      	lsls	r3, r3, #3
 8004a4e:	4413      	add	r3, r2
 8004a50:	009b      	lsls	r3, r3, #2
 8004a52:	440b      	add	r3, r1
 8004a54:	3317      	adds	r3, #23
 8004a56:	2201      	movs	r2, #1
 8004a58:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8004a5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a5c:	b2db      	uxtb	r3, r3
 8004a5e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004a62:	b2db      	uxtb	r3, r3
 8004a64:	4619      	mov	r1, r3
 8004a66:	6878      	ldr	r0, [r7, #4]
 8004a68:	f000 faca 	bl	8005000 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004a6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a6e:	3301      	adds	r3, #1
 8004a70:	627b      	str	r3, [r7, #36]	@ 0x24
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	791b      	ldrb	r3, [r3, #4]
 8004a76:	461a      	mov	r2, r3
 8004a78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a7a:	4293      	cmp	r3, r2
 8004a7c:	d3cd      	bcc.n	8004a1a <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	695a      	ldr	r2, [r3, #20]
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8004a8c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	4618      	mov	r0, r3
 8004a94:	f003 fe6c 	bl	8008770 <USB_ReadInterrupts>
 8004a98:	4603      	mov	r3, r0
 8004a9a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004a9e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004aa2:	d156      	bne.n	8004b52 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004aa4:	2301      	movs	r3, #1
 8004aa6:	627b      	str	r3, [r7, #36]	@ 0x24
 8004aa8:	e045      	b.n	8004b36 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8004aaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004aac:	015a      	lsls	r2, r3, #5
 8004aae:	69fb      	ldr	r3, [r7, #28]
 8004ab0:	4413      	add	r3, r2
 8004ab2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004aba:	6879      	ldr	r1, [r7, #4]
 8004abc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004abe:	4613      	mov	r3, r2
 8004ac0:	00db      	lsls	r3, r3, #3
 8004ac2:	4413      	add	r3, r2
 8004ac4:	009b      	lsls	r3, r3, #2
 8004ac6:	440b      	add	r3, r1
 8004ac8:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8004acc:	781b      	ldrb	r3, [r3, #0]
 8004ace:	2b01      	cmp	r3, #1
 8004ad0:	d12e      	bne.n	8004b30 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004ad2:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	da2b      	bge.n	8004b30 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8004ad8:	69bb      	ldr	r3, [r7, #24]
 8004ada:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8004ae4:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004ae8:	429a      	cmp	r2, r3
 8004aea:	d121      	bne.n	8004b30 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8004aec:	6879      	ldr	r1, [r7, #4]
 8004aee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004af0:	4613      	mov	r3, r2
 8004af2:	00db      	lsls	r3, r3, #3
 8004af4:	4413      	add	r3, r2
 8004af6:	009b      	lsls	r3, r3, #2
 8004af8:	440b      	add	r3, r1
 8004afa:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8004afe:	2201      	movs	r2, #1
 8004b00:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8004b02:	6a3b      	ldr	r3, [r7, #32]
 8004b04:	699b      	ldr	r3, [r3, #24]
 8004b06:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004b0a:	6a3b      	ldr	r3, [r7, #32]
 8004b0c:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8004b0e:	6a3b      	ldr	r3, [r7, #32]
 8004b10:	695b      	ldr	r3, [r3, #20]
 8004b12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d10a      	bne.n	8004b30 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8004b1a:	69fb      	ldr	r3, [r7, #28]
 8004b1c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004b20:	685b      	ldr	r3, [r3, #4]
 8004b22:	69fa      	ldr	r2, [r7, #28]
 8004b24:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004b28:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004b2c:	6053      	str	r3, [r2, #4]
            break;
 8004b2e:	e008      	b.n	8004b42 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004b30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b32:	3301      	adds	r3, #1
 8004b34:	627b      	str	r3, [r7, #36]	@ 0x24
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	791b      	ldrb	r3, [r3, #4]
 8004b3a:	461a      	mov	r2, r3
 8004b3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b3e:	4293      	cmp	r3, r2
 8004b40:	d3b3      	bcc.n	8004aaa <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	695a      	ldr	r2, [r3, #20]
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8004b50:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	4618      	mov	r0, r3
 8004b58:	f003 fe0a 	bl	8008770 <USB_ReadInterrupts>
 8004b5c:	4603      	mov	r3, r0
 8004b5e:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8004b62:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b66:	d10a      	bne.n	8004b7e <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8004b68:	6878      	ldr	r0, [r7, #4]
 8004b6a:	f00b fad9 	bl	8010120 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	695a      	ldr	r2, [r3, #20]
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8004b7c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	4618      	mov	r0, r3
 8004b84:	f003 fdf4 	bl	8008770 <USB_ReadInterrupts>
 8004b88:	4603      	mov	r3, r0
 8004b8a:	f003 0304 	and.w	r3, r3, #4
 8004b8e:	2b04      	cmp	r3, #4
 8004b90:	d115      	bne.n	8004bbe <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	685b      	ldr	r3, [r3, #4]
 8004b98:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004b9a:	69bb      	ldr	r3, [r7, #24]
 8004b9c:	f003 0304 	and.w	r3, r3, #4
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d002      	beq.n	8004baa <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8004ba4:	6878      	ldr	r0, [r7, #4]
 8004ba6:	f00b fac9 	bl	801013c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	6859      	ldr	r1, [r3, #4]
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	69ba      	ldr	r2, [r7, #24]
 8004bb6:	430a      	orrs	r2, r1
 8004bb8:	605a      	str	r2, [r3, #4]
 8004bba:	e000      	b.n	8004bbe <HAL_PCD_IRQHandler+0x93c>
      return;
 8004bbc:	bf00      	nop
    }
  }
}
 8004bbe:	3734      	adds	r7, #52	@ 0x34
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	bd90      	pop	{r4, r7, pc}

08004bc4 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	b082      	sub	sp, #8
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
 8004bcc:	460b      	mov	r3, r1
 8004bce:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004bd6:	2b01      	cmp	r3, #1
 8004bd8:	d101      	bne.n	8004bde <HAL_PCD_SetAddress+0x1a>
 8004bda:	2302      	movs	r3, #2
 8004bdc:	e012      	b.n	8004c04 <HAL_PCD_SetAddress+0x40>
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	2201      	movs	r2, #1
 8004be2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	78fa      	ldrb	r2, [r7, #3]
 8004bea:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	78fa      	ldrb	r2, [r7, #3]
 8004bf2:	4611      	mov	r1, r2
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	f003 fd53 	bl	80086a0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004c02:	2300      	movs	r3, #0
}
 8004c04:	4618      	mov	r0, r3
 8004c06:	3708      	adds	r7, #8
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	bd80      	pop	{r7, pc}

08004c0c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	b084      	sub	sp, #16
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
 8004c14:	4608      	mov	r0, r1
 8004c16:	4611      	mov	r1, r2
 8004c18:	461a      	mov	r2, r3
 8004c1a:	4603      	mov	r3, r0
 8004c1c:	70fb      	strb	r3, [r7, #3]
 8004c1e:	460b      	mov	r3, r1
 8004c20:	803b      	strh	r3, [r7, #0]
 8004c22:	4613      	mov	r3, r2
 8004c24:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8004c26:	2300      	movs	r3, #0
 8004c28:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004c2a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	da0f      	bge.n	8004c52 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004c32:	78fb      	ldrb	r3, [r7, #3]
 8004c34:	f003 020f 	and.w	r2, r3, #15
 8004c38:	4613      	mov	r3, r2
 8004c3a:	00db      	lsls	r3, r3, #3
 8004c3c:	4413      	add	r3, r2
 8004c3e:	009b      	lsls	r3, r3, #2
 8004c40:	3310      	adds	r3, #16
 8004c42:	687a      	ldr	r2, [r7, #4]
 8004c44:	4413      	add	r3, r2
 8004c46:	3304      	adds	r3, #4
 8004c48:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	2201      	movs	r2, #1
 8004c4e:	705a      	strb	r2, [r3, #1]
 8004c50:	e00f      	b.n	8004c72 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004c52:	78fb      	ldrb	r3, [r7, #3]
 8004c54:	f003 020f 	and.w	r2, r3, #15
 8004c58:	4613      	mov	r3, r2
 8004c5a:	00db      	lsls	r3, r3, #3
 8004c5c:	4413      	add	r3, r2
 8004c5e:	009b      	lsls	r3, r3, #2
 8004c60:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004c64:	687a      	ldr	r2, [r7, #4]
 8004c66:	4413      	add	r3, r2
 8004c68:	3304      	adds	r3, #4
 8004c6a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	2200      	movs	r2, #0
 8004c70:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004c72:	78fb      	ldrb	r3, [r7, #3]
 8004c74:	f003 030f 	and.w	r3, r3, #15
 8004c78:	b2da      	uxtb	r2, r3
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8004c7e:	883b      	ldrh	r3, [r7, #0]
 8004c80:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	78ba      	ldrb	r2, [r7, #2]
 8004c8c:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	785b      	ldrb	r3, [r3, #1]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d004      	beq.n	8004ca0 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	781b      	ldrb	r3, [r3, #0]
 8004c9a:	461a      	mov	r2, r3
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004ca0:	78bb      	ldrb	r3, [r7, #2]
 8004ca2:	2b02      	cmp	r3, #2
 8004ca4:	d102      	bne.n	8004cac <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	2200      	movs	r2, #0
 8004caa:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004cb2:	2b01      	cmp	r3, #1
 8004cb4:	d101      	bne.n	8004cba <HAL_PCD_EP_Open+0xae>
 8004cb6:	2302      	movs	r3, #2
 8004cb8:	e00e      	b.n	8004cd8 <HAL_PCD_EP_Open+0xcc>
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2201      	movs	r2, #1
 8004cbe:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	68f9      	ldr	r1, [r7, #12]
 8004cc8:	4618      	mov	r0, r3
 8004cca:	f002 fed3 	bl	8007a74 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8004cd6:	7afb      	ldrb	r3, [r7, #11]
}
 8004cd8:	4618      	mov	r0, r3
 8004cda:	3710      	adds	r7, #16
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	bd80      	pop	{r7, pc}

08004ce0 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b084      	sub	sp, #16
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
 8004ce8:	460b      	mov	r3, r1
 8004cea:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004cec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	da0f      	bge.n	8004d14 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004cf4:	78fb      	ldrb	r3, [r7, #3]
 8004cf6:	f003 020f 	and.w	r2, r3, #15
 8004cfa:	4613      	mov	r3, r2
 8004cfc:	00db      	lsls	r3, r3, #3
 8004cfe:	4413      	add	r3, r2
 8004d00:	009b      	lsls	r3, r3, #2
 8004d02:	3310      	adds	r3, #16
 8004d04:	687a      	ldr	r2, [r7, #4]
 8004d06:	4413      	add	r3, r2
 8004d08:	3304      	adds	r3, #4
 8004d0a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	2201      	movs	r2, #1
 8004d10:	705a      	strb	r2, [r3, #1]
 8004d12:	e00f      	b.n	8004d34 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004d14:	78fb      	ldrb	r3, [r7, #3]
 8004d16:	f003 020f 	and.w	r2, r3, #15
 8004d1a:	4613      	mov	r3, r2
 8004d1c:	00db      	lsls	r3, r3, #3
 8004d1e:	4413      	add	r3, r2
 8004d20:	009b      	lsls	r3, r3, #2
 8004d22:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004d26:	687a      	ldr	r2, [r7, #4]
 8004d28:	4413      	add	r3, r2
 8004d2a:	3304      	adds	r3, #4
 8004d2c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	2200      	movs	r2, #0
 8004d32:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8004d34:	78fb      	ldrb	r3, [r7, #3]
 8004d36:	f003 030f 	and.w	r3, r3, #15
 8004d3a:	b2da      	uxtb	r2, r3
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004d46:	2b01      	cmp	r3, #1
 8004d48:	d101      	bne.n	8004d4e <HAL_PCD_EP_Close+0x6e>
 8004d4a:	2302      	movs	r3, #2
 8004d4c:	e00e      	b.n	8004d6c <HAL_PCD_EP_Close+0x8c>
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	2201      	movs	r2, #1
 8004d52:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	68f9      	ldr	r1, [r7, #12]
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	f002 ff11 	bl	8007b84 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	2200      	movs	r2, #0
 8004d66:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8004d6a:	2300      	movs	r3, #0
}
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	3710      	adds	r7, #16
 8004d70:	46bd      	mov	sp, r7
 8004d72:	bd80      	pop	{r7, pc}

08004d74 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004d74:	b580      	push	{r7, lr}
 8004d76:	b086      	sub	sp, #24
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	60f8      	str	r0, [r7, #12]
 8004d7c:	607a      	str	r2, [r7, #4]
 8004d7e:	603b      	str	r3, [r7, #0]
 8004d80:	460b      	mov	r3, r1
 8004d82:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004d84:	7afb      	ldrb	r3, [r7, #11]
 8004d86:	f003 020f 	and.w	r2, r3, #15
 8004d8a:	4613      	mov	r3, r2
 8004d8c:	00db      	lsls	r3, r3, #3
 8004d8e:	4413      	add	r3, r2
 8004d90:	009b      	lsls	r3, r3, #2
 8004d92:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004d96:	68fa      	ldr	r2, [r7, #12]
 8004d98:	4413      	add	r3, r2
 8004d9a:	3304      	adds	r3, #4
 8004d9c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004d9e:	697b      	ldr	r3, [r7, #20]
 8004da0:	687a      	ldr	r2, [r7, #4]
 8004da2:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004da4:	697b      	ldr	r3, [r7, #20]
 8004da6:	683a      	ldr	r2, [r7, #0]
 8004da8:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8004daa:	697b      	ldr	r3, [r7, #20]
 8004dac:	2200      	movs	r2, #0
 8004dae:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8004db0:	697b      	ldr	r3, [r7, #20]
 8004db2:	2200      	movs	r2, #0
 8004db4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004db6:	7afb      	ldrb	r3, [r7, #11]
 8004db8:	f003 030f 	and.w	r3, r3, #15
 8004dbc:	b2da      	uxtb	r2, r3
 8004dbe:	697b      	ldr	r3, [r7, #20]
 8004dc0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	799b      	ldrb	r3, [r3, #6]
 8004dc6:	2b01      	cmp	r3, #1
 8004dc8:	d102      	bne.n	8004dd0 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004dca:	687a      	ldr	r2, [r7, #4]
 8004dcc:	697b      	ldr	r3, [r7, #20]
 8004dce:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	6818      	ldr	r0, [r3, #0]
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	799b      	ldrb	r3, [r3, #6]
 8004dd8:	461a      	mov	r2, r3
 8004dda:	6979      	ldr	r1, [r7, #20]
 8004ddc:	f002 ffae 	bl	8007d3c <USB_EPStartXfer>

  return HAL_OK;
 8004de0:	2300      	movs	r3, #0
}
 8004de2:	4618      	mov	r0, r3
 8004de4:	3718      	adds	r7, #24
 8004de6:	46bd      	mov	sp, r7
 8004de8:	bd80      	pop	{r7, pc}

08004dea <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8004dea:	b480      	push	{r7}
 8004dec:	b083      	sub	sp, #12
 8004dee:	af00      	add	r7, sp, #0
 8004df0:	6078      	str	r0, [r7, #4]
 8004df2:	460b      	mov	r3, r1
 8004df4:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004df6:	78fb      	ldrb	r3, [r7, #3]
 8004df8:	f003 020f 	and.w	r2, r3, #15
 8004dfc:	6879      	ldr	r1, [r7, #4]
 8004dfe:	4613      	mov	r3, r2
 8004e00:	00db      	lsls	r3, r3, #3
 8004e02:	4413      	add	r3, r2
 8004e04:	009b      	lsls	r3, r3, #2
 8004e06:	440b      	add	r3, r1
 8004e08:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8004e0c:	681b      	ldr	r3, [r3, #0]
}
 8004e0e:	4618      	mov	r0, r3
 8004e10:	370c      	adds	r7, #12
 8004e12:	46bd      	mov	sp, r7
 8004e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e18:	4770      	bx	lr

08004e1a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004e1a:	b580      	push	{r7, lr}
 8004e1c:	b086      	sub	sp, #24
 8004e1e:	af00      	add	r7, sp, #0
 8004e20:	60f8      	str	r0, [r7, #12]
 8004e22:	607a      	str	r2, [r7, #4]
 8004e24:	603b      	str	r3, [r7, #0]
 8004e26:	460b      	mov	r3, r1
 8004e28:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004e2a:	7afb      	ldrb	r3, [r7, #11]
 8004e2c:	f003 020f 	and.w	r2, r3, #15
 8004e30:	4613      	mov	r3, r2
 8004e32:	00db      	lsls	r3, r3, #3
 8004e34:	4413      	add	r3, r2
 8004e36:	009b      	lsls	r3, r3, #2
 8004e38:	3310      	adds	r3, #16
 8004e3a:	68fa      	ldr	r2, [r7, #12]
 8004e3c:	4413      	add	r3, r2
 8004e3e:	3304      	adds	r3, #4
 8004e40:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004e42:	697b      	ldr	r3, [r7, #20]
 8004e44:	687a      	ldr	r2, [r7, #4]
 8004e46:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004e48:	697b      	ldr	r3, [r7, #20]
 8004e4a:	683a      	ldr	r2, [r7, #0]
 8004e4c:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8004e4e:	697b      	ldr	r3, [r7, #20]
 8004e50:	2200      	movs	r2, #0
 8004e52:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8004e54:	697b      	ldr	r3, [r7, #20]
 8004e56:	2201      	movs	r2, #1
 8004e58:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004e5a:	7afb      	ldrb	r3, [r7, #11]
 8004e5c:	f003 030f 	and.w	r3, r3, #15
 8004e60:	b2da      	uxtb	r2, r3
 8004e62:	697b      	ldr	r3, [r7, #20]
 8004e64:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	799b      	ldrb	r3, [r3, #6]
 8004e6a:	2b01      	cmp	r3, #1
 8004e6c:	d102      	bne.n	8004e74 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004e6e:	687a      	ldr	r2, [r7, #4]
 8004e70:	697b      	ldr	r3, [r7, #20]
 8004e72:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	6818      	ldr	r0, [r3, #0]
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	799b      	ldrb	r3, [r3, #6]
 8004e7c:	461a      	mov	r2, r3
 8004e7e:	6979      	ldr	r1, [r7, #20]
 8004e80:	f002 ff5c 	bl	8007d3c <USB_EPStartXfer>

  return HAL_OK;
 8004e84:	2300      	movs	r3, #0
}
 8004e86:	4618      	mov	r0, r3
 8004e88:	3718      	adds	r7, #24
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	bd80      	pop	{r7, pc}

08004e8e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004e8e:	b580      	push	{r7, lr}
 8004e90:	b084      	sub	sp, #16
 8004e92:	af00      	add	r7, sp, #0
 8004e94:	6078      	str	r0, [r7, #4]
 8004e96:	460b      	mov	r3, r1
 8004e98:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004e9a:	78fb      	ldrb	r3, [r7, #3]
 8004e9c:	f003 030f 	and.w	r3, r3, #15
 8004ea0:	687a      	ldr	r2, [r7, #4]
 8004ea2:	7912      	ldrb	r2, [r2, #4]
 8004ea4:	4293      	cmp	r3, r2
 8004ea6:	d901      	bls.n	8004eac <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004ea8:	2301      	movs	r3, #1
 8004eaa:	e04f      	b.n	8004f4c <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004eac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	da0f      	bge.n	8004ed4 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004eb4:	78fb      	ldrb	r3, [r7, #3]
 8004eb6:	f003 020f 	and.w	r2, r3, #15
 8004eba:	4613      	mov	r3, r2
 8004ebc:	00db      	lsls	r3, r3, #3
 8004ebe:	4413      	add	r3, r2
 8004ec0:	009b      	lsls	r3, r3, #2
 8004ec2:	3310      	adds	r3, #16
 8004ec4:	687a      	ldr	r2, [r7, #4]
 8004ec6:	4413      	add	r3, r2
 8004ec8:	3304      	adds	r3, #4
 8004eca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	2201      	movs	r2, #1
 8004ed0:	705a      	strb	r2, [r3, #1]
 8004ed2:	e00d      	b.n	8004ef0 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004ed4:	78fa      	ldrb	r2, [r7, #3]
 8004ed6:	4613      	mov	r3, r2
 8004ed8:	00db      	lsls	r3, r3, #3
 8004eda:	4413      	add	r3, r2
 8004edc:	009b      	lsls	r3, r3, #2
 8004ede:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004ee2:	687a      	ldr	r2, [r7, #4]
 8004ee4:	4413      	add	r3, r2
 8004ee6:	3304      	adds	r3, #4
 8004ee8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	2200      	movs	r2, #0
 8004eee:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	2201      	movs	r2, #1
 8004ef4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004ef6:	78fb      	ldrb	r3, [r7, #3]
 8004ef8:	f003 030f 	and.w	r3, r3, #15
 8004efc:	b2da      	uxtb	r2, r3
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004f08:	2b01      	cmp	r3, #1
 8004f0a:	d101      	bne.n	8004f10 <HAL_PCD_EP_SetStall+0x82>
 8004f0c:	2302      	movs	r3, #2
 8004f0e:	e01d      	b.n	8004f4c <HAL_PCD_EP_SetStall+0xbe>
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2201      	movs	r2, #1
 8004f14:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	68f9      	ldr	r1, [r7, #12]
 8004f1e:	4618      	mov	r0, r3
 8004f20:	f003 faea 	bl	80084f8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004f24:	78fb      	ldrb	r3, [r7, #3]
 8004f26:	f003 030f 	and.w	r3, r3, #15
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d109      	bne.n	8004f42 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6818      	ldr	r0, [r3, #0]
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	7999      	ldrb	r1, [r3, #6]
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004f3c:	461a      	mov	r2, r3
 8004f3e:	f003 fcdb 	bl	80088f8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	2200      	movs	r2, #0
 8004f46:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004f4a:	2300      	movs	r3, #0
}
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	3710      	adds	r7, #16
 8004f50:	46bd      	mov	sp, r7
 8004f52:	bd80      	pop	{r7, pc}

08004f54 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004f54:	b580      	push	{r7, lr}
 8004f56:	b084      	sub	sp, #16
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
 8004f5c:	460b      	mov	r3, r1
 8004f5e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004f60:	78fb      	ldrb	r3, [r7, #3]
 8004f62:	f003 030f 	and.w	r3, r3, #15
 8004f66:	687a      	ldr	r2, [r7, #4]
 8004f68:	7912      	ldrb	r2, [r2, #4]
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d901      	bls.n	8004f72 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004f6e:	2301      	movs	r3, #1
 8004f70:	e042      	b.n	8004ff8 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004f72:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	da0f      	bge.n	8004f9a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004f7a:	78fb      	ldrb	r3, [r7, #3]
 8004f7c:	f003 020f 	and.w	r2, r3, #15
 8004f80:	4613      	mov	r3, r2
 8004f82:	00db      	lsls	r3, r3, #3
 8004f84:	4413      	add	r3, r2
 8004f86:	009b      	lsls	r3, r3, #2
 8004f88:	3310      	adds	r3, #16
 8004f8a:	687a      	ldr	r2, [r7, #4]
 8004f8c:	4413      	add	r3, r2
 8004f8e:	3304      	adds	r3, #4
 8004f90:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	2201      	movs	r2, #1
 8004f96:	705a      	strb	r2, [r3, #1]
 8004f98:	e00f      	b.n	8004fba <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004f9a:	78fb      	ldrb	r3, [r7, #3]
 8004f9c:	f003 020f 	and.w	r2, r3, #15
 8004fa0:	4613      	mov	r3, r2
 8004fa2:	00db      	lsls	r3, r3, #3
 8004fa4:	4413      	add	r3, r2
 8004fa6:	009b      	lsls	r3, r3, #2
 8004fa8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004fac:	687a      	ldr	r2, [r7, #4]
 8004fae:	4413      	add	r3, r2
 8004fb0:	3304      	adds	r3, #4
 8004fb2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004fc0:	78fb      	ldrb	r3, [r7, #3]
 8004fc2:	f003 030f 	and.w	r3, r3, #15
 8004fc6:	b2da      	uxtb	r2, r3
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004fd2:	2b01      	cmp	r3, #1
 8004fd4:	d101      	bne.n	8004fda <HAL_PCD_EP_ClrStall+0x86>
 8004fd6:	2302      	movs	r3, #2
 8004fd8:	e00e      	b.n	8004ff8 <HAL_PCD_EP_ClrStall+0xa4>
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	2201      	movs	r2, #1
 8004fde:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	68f9      	ldr	r1, [r7, #12]
 8004fe8:	4618      	mov	r0, r3
 8004fea:	f003 faf3 	bl	80085d4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004ff6:	2300      	movs	r3, #0
}
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	3710      	adds	r7, #16
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	bd80      	pop	{r7, pc}

08005000 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005000:	b580      	push	{r7, lr}
 8005002:	b084      	sub	sp, #16
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
 8005008:	460b      	mov	r3, r1
 800500a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800500c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005010:	2b00      	cmp	r3, #0
 8005012:	da0c      	bge.n	800502e <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005014:	78fb      	ldrb	r3, [r7, #3]
 8005016:	f003 020f 	and.w	r2, r3, #15
 800501a:	4613      	mov	r3, r2
 800501c:	00db      	lsls	r3, r3, #3
 800501e:	4413      	add	r3, r2
 8005020:	009b      	lsls	r3, r3, #2
 8005022:	3310      	adds	r3, #16
 8005024:	687a      	ldr	r2, [r7, #4]
 8005026:	4413      	add	r3, r2
 8005028:	3304      	adds	r3, #4
 800502a:	60fb      	str	r3, [r7, #12]
 800502c:	e00c      	b.n	8005048 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800502e:	78fb      	ldrb	r3, [r7, #3]
 8005030:	f003 020f 	and.w	r2, r3, #15
 8005034:	4613      	mov	r3, r2
 8005036:	00db      	lsls	r3, r3, #3
 8005038:	4413      	add	r3, r2
 800503a:	009b      	lsls	r3, r3, #2
 800503c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005040:	687a      	ldr	r2, [r7, #4]
 8005042:	4413      	add	r3, r2
 8005044:	3304      	adds	r3, #4
 8005046:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	68f9      	ldr	r1, [r7, #12]
 800504e:	4618      	mov	r0, r3
 8005050:	f003 f912 	bl	8008278 <USB_EPStopXfer>
 8005054:	4603      	mov	r3, r0
 8005056:	72fb      	strb	r3, [r7, #11]

  return ret;
 8005058:	7afb      	ldrb	r3, [r7, #11]
}
 800505a:	4618      	mov	r0, r3
 800505c:	3710      	adds	r7, #16
 800505e:	46bd      	mov	sp, r7
 8005060:	bd80      	pop	{r7, pc}

08005062 <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005062:	b580      	push	{r7, lr}
 8005064:	b082      	sub	sp, #8
 8005066:	af00      	add	r7, sp, #0
 8005068:	6078      	str	r0, [r7, #4]
 800506a:	460b      	mov	r3, r1
 800506c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005074:	2b01      	cmp	r3, #1
 8005076:	d101      	bne.n	800507c <HAL_PCD_EP_Flush+0x1a>
 8005078:	2302      	movs	r3, #2
 800507a:	e01b      	b.n	80050b4 <HAL_PCD_EP_Flush+0x52>
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2201      	movs	r2, #1
 8005080:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if ((ep_addr & 0x80U) == 0x80U)
 8005084:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005088:	2b00      	cmp	r3, #0
 800508a:	da09      	bge.n	80050a0 <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681a      	ldr	r2, [r3, #0]
 8005090:	78fb      	ldrb	r3, [r7, #3]
 8005092:	f003 030f 	and.w	r3, r3, #15
 8005096:	4619      	mov	r1, r3
 8005098:	4610      	mov	r0, r2
 800509a:	f002 fc4d 	bl	8007938 <USB_FlushTxFifo>
 800509e:	e004      	b.n	80050aa <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	4618      	mov	r0, r3
 80050a6:	f002 fc79 	bl	800799c <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	2200      	movs	r2, #0
 80050ae:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80050b2:	2300      	movs	r3, #0
}
 80050b4:	4618      	mov	r0, r3
 80050b6:	3708      	adds	r7, #8
 80050b8:	46bd      	mov	sp, r7
 80050ba:	bd80      	pop	{r7, pc}

080050bc <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80050bc:	b580      	push	{r7, lr}
 80050be:	b08a      	sub	sp, #40	@ 0x28
 80050c0:	af02      	add	r7, sp, #8
 80050c2:	6078      	str	r0, [r7, #4]
 80050c4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050cc:	697b      	ldr	r3, [r7, #20]
 80050ce:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80050d0:	683a      	ldr	r2, [r7, #0]
 80050d2:	4613      	mov	r3, r2
 80050d4:	00db      	lsls	r3, r3, #3
 80050d6:	4413      	add	r3, r2
 80050d8:	009b      	lsls	r3, r3, #2
 80050da:	3310      	adds	r3, #16
 80050dc:	687a      	ldr	r2, [r7, #4]
 80050de:	4413      	add	r3, r2
 80050e0:	3304      	adds	r3, #4
 80050e2:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	695a      	ldr	r2, [r3, #20]
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	691b      	ldr	r3, [r3, #16]
 80050ec:	429a      	cmp	r2, r3
 80050ee:	d901      	bls.n	80050f4 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80050f0:	2301      	movs	r3, #1
 80050f2:	e06b      	b.n	80051cc <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	691a      	ldr	r2, [r3, #16]
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	695b      	ldr	r3, [r3, #20]
 80050fc:	1ad3      	subs	r3, r2, r3
 80050fe:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	689b      	ldr	r3, [r3, #8]
 8005104:	69fa      	ldr	r2, [r7, #28]
 8005106:	429a      	cmp	r2, r3
 8005108:	d902      	bls.n	8005110 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	689b      	ldr	r3, [r3, #8]
 800510e:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8005110:	69fb      	ldr	r3, [r7, #28]
 8005112:	3303      	adds	r3, #3
 8005114:	089b      	lsrs	r3, r3, #2
 8005116:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005118:	e02a      	b.n	8005170 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	691a      	ldr	r2, [r3, #16]
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	695b      	ldr	r3, [r3, #20]
 8005122:	1ad3      	subs	r3, r2, r3
 8005124:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	689b      	ldr	r3, [r3, #8]
 800512a:	69fa      	ldr	r2, [r7, #28]
 800512c:	429a      	cmp	r2, r3
 800512e:	d902      	bls.n	8005136 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	689b      	ldr	r3, [r3, #8]
 8005134:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8005136:	69fb      	ldr	r3, [r7, #28]
 8005138:	3303      	adds	r3, #3
 800513a:	089b      	lsrs	r3, r3, #2
 800513c:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	68d9      	ldr	r1, [r3, #12]
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	b2da      	uxtb	r2, r3
 8005146:	69fb      	ldr	r3, [r7, #28]
 8005148:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800514e:	9300      	str	r3, [sp, #0]
 8005150:	4603      	mov	r3, r0
 8005152:	6978      	ldr	r0, [r7, #20]
 8005154:	f003 f93a 	bl	80083cc <USB_WritePacket>

    ep->xfer_buff  += len;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	68da      	ldr	r2, [r3, #12]
 800515c:	69fb      	ldr	r3, [r7, #28]
 800515e:	441a      	add	r2, r3
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	695a      	ldr	r2, [r3, #20]
 8005168:	69fb      	ldr	r3, [r7, #28]
 800516a:	441a      	add	r2, r3
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	015a      	lsls	r2, r3, #5
 8005174:	693b      	ldr	r3, [r7, #16]
 8005176:	4413      	add	r3, r2
 8005178:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800517c:	699b      	ldr	r3, [r3, #24]
 800517e:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005180:	69ba      	ldr	r2, [r7, #24]
 8005182:	429a      	cmp	r2, r3
 8005184:	d809      	bhi.n	800519a <PCD_WriteEmptyTxFifo+0xde>
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	695a      	ldr	r2, [r3, #20]
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800518e:	429a      	cmp	r2, r3
 8005190:	d203      	bcs.n	800519a <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	691b      	ldr	r3, [r3, #16]
 8005196:	2b00      	cmp	r3, #0
 8005198:	d1bf      	bne.n	800511a <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	691a      	ldr	r2, [r3, #16]
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	695b      	ldr	r3, [r3, #20]
 80051a2:	429a      	cmp	r2, r3
 80051a4:	d811      	bhi.n	80051ca <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	f003 030f 	and.w	r3, r3, #15
 80051ac:	2201      	movs	r2, #1
 80051ae:	fa02 f303 	lsl.w	r3, r2, r3
 80051b2:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80051b4:	693b      	ldr	r3, [r7, #16]
 80051b6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80051ba:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80051bc:	68bb      	ldr	r3, [r7, #8]
 80051be:	43db      	mvns	r3, r3
 80051c0:	6939      	ldr	r1, [r7, #16]
 80051c2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80051c6:	4013      	ands	r3, r2
 80051c8:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 80051ca:	2300      	movs	r3, #0
}
 80051cc:	4618      	mov	r0, r3
 80051ce:	3720      	adds	r7, #32
 80051d0:	46bd      	mov	sp, r7
 80051d2:	bd80      	pop	{r7, pc}

080051d4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80051d4:	b580      	push	{r7, lr}
 80051d6:	b088      	sub	sp, #32
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
 80051dc:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051e4:	69fb      	ldr	r3, [r7, #28]
 80051e6:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80051e8:	69fb      	ldr	r3, [r7, #28]
 80051ea:	333c      	adds	r3, #60	@ 0x3c
 80051ec:	3304      	adds	r3, #4
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	015a      	lsls	r2, r3, #5
 80051f6:	69bb      	ldr	r3, [r7, #24]
 80051f8:	4413      	add	r3, r2
 80051fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80051fe:	689b      	ldr	r3, [r3, #8]
 8005200:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	799b      	ldrb	r3, [r3, #6]
 8005206:	2b01      	cmp	r3, #1
 8005208:	d17b      	bne.n	8005302 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800520a:	693b      	ldr	r3, [r7, #16]
 800520c:	f003 0308 	and.w	r3, r3, #8
 8005210:	2b00      	cmp	r3, #0
 8005212:	d015      	beq.n	8005240 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005214:	697b      	ldr	r3, [r7, #20]
 8005216:	4a61      	ldr	r2, [pc, #388]	@ (800539c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005218:	4293      	cmp	r3, r2
 800521a:	f240 80b9 	bls.w	8005390 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800521e:	693b      	ldr	r3, [r7, #16]
 8005220:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005224:	2b00      	cmp	r3, #0
 8005226:	f000 80b3 	beq.w	8005390 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800522a:	683b      	ldr	r3, [r7, #0]
 800522c:	015a      	lsls	r2, r3, #5
 800522e:	69bb      	ldr	r3, [r7, #24]
 8005230:	4413      	add	r3, r2
 8005232:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005236:	461a      	mov	r2, r3
 8005238:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800523c:	6093      	str	r3, [r2, #8]
 800523e:	e0a7      	b.n	8005390 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8005240:	693b      	ldr	r3, [r7, #16]
 8005242:	f003 0320 	and.w	r3, r3, #32
 8005246:	2b00      	cmp	r3, #0
 8005248:	d009      	beq.n	800525e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	015a      	lsls	r2, r3, #5
 800524e:	69bb      	ldr	r3, [r7, #24]
 8005250:	4413      	add	r3, r2
 8005252:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005256:	461a      	mov	r2, r3
 8005258:	2320      	movs	r3, #32
 800525a:	6093      	str	r3, [r2, #8]
 800525c:	e098      	b.n	8005390 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800525e:	693b      	ldr	r3, [r7, #16]
 8005260:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005264:	2b00      	cmp	r3, #0
 8005266:	f040 8093 	bne.w	8005390 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800526a:	697b      	ldr	r3, [r7, #20]
 800526c:	4a4b      	ldr	r2, [pc, #300]	@ (800539c <PCD_EP_OutXfrComplete_int+0x1c8>)
 800526e:	4293      	cmp	r3, r2
 8005270:	d90f      	bls.n	8005292 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005272:	693b      	ldr	r3, [r7, #16]
 8005274:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005278:	2b00      	cmp	r3, #0
 800527a:	d00a      	beq.n	8005292 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	015a      	lsls	r2, r3, #5
 8005280:	69bb      	ldr	r3, [r7, #24]
 8005282:	4413      	add	r3, r2
 8005284:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005288:	461a      	mov	r2, r3
 800528a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800528e:	6093      	str	r3, [r2, #8]
 8005290:	e07e      	b.n	8005390 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8005292:	683a      	ldr	r2, [r7, #0]
 8005294:	4613      	mov	r3, r2
 8005296:	00db      	lsls	r3, r3, #3
 8005298:	4413      	add	r3, r2
 800529a:	009b      	lsls	r3, r3, #2
 800529c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80052a0:	687a      	ldr	r2, [r7, #4]
 80052a2:	4413      	add	r3, r2
 80052a4:	3304      	adds	r3, #4
 80052a6:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	6a1a      	ldr	r2, [r3, #32]
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	0159      	lsls	r1, r3, #5
 80052b0:	69bb      	ldr	r3, [r7, #24]
 80052b2:	440b      	add	r3, r1
 80052b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80052b8:	691b      	ldr	r3, [r3, #16]
 80052ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80052be:	1ad2      	subs	r2, r2, r3
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d114      	bne.n	80052f4 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	691b      	ldr	r3, [r3, #16]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d109      	bne.n	80052e6 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6818      	ldr	r0, [r3, #0]
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80052dc:	461a      	mov	r2, r3
 80052de:	2101      	movs	r1, #1
 80052e0:	f003 fb0a 	bl	80088f8 <USB_EP0_OutStart>
 80052e4:	e006      	b.n	80052f4 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	68da      	ldr	r2, [r3, #12]
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	695b      	ldr	r3, [r3, #20]
 80052ee:	441a      	add	r2, r3
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	b2db      	uxtb	r3, r3
 80052f8:	4619      	mov	r1, r3
 80052fa:	6878      	ldr	r0, [r7, #4]
 80052fc:	f00a fe56 	bl	800ffac <HAL_PCD_DataOutStageCallback>
 8005300:	e046      	b.n	8005390 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8005302:	697b      	ldr	r3, [r7, #20]
 8005304:	4a26      	ldr	r2, [pc, #152]	@ (80053a0 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8005306:	4293      	cmp	r3, r2
 8005308:	d124      	bne.n	8005354 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800530a:	693b      	ldr	r3, [r7, #16]
 800530c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005310:	2b00      	cmp	r3, #0
 8005312:	d00a      	beq.n	800532a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	015a      	lsls	r2, r3, #5
 8005318:	69bb      	ldr	r3, [r7, #24]
 800531a:	4413      	add	r3, r2
 800531c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005320:	461a      	mov	r2, r3
 8005322:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005326:	6093      	str	r3, [r2, #8]
 8005328:	e032      	b.n	8005390 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800532a:	693b      	ldr	r3, [r7, #16]
 800532c:	f003 0320 	and.w	r3, r3, #32
 8005330:	2b00      	cmp	r3, #0
 8005332:	d008      	beq.n	8005346 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005334:	683b      	ldr	r3, [r7, #0]
 8005336:	015a      	lsls	r2, r3, #5
 8005338:	69bb      	ldr	r3, [r7, #24]
 800533a:	4413      	add	r3, r2
 800533c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005340:	461a      	mov	r2, r3
 8005342:	2320      	movs	r3, #32
 8005344:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	b2db      	uxtb	r3, r3
 800534a:	4619      	mov	r1, r3
 800534c:	6878      	ldr	r0, [r7, #4]
 800534e:	f00a fe2d 	bl	800ffac <HAL_PCD_DataOutStageCallback>
 8005352:	e01d      	b.n	8005390 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	2b00      	cmp	r3, #0
 8005358:	d114      	bne.n	8005384 <PCD_EP_OutXfrComplete_int+0x1b0>
 800535a:	6879      	ldr	r1, [r7, #4]
 800535c:	683a      	ldr	r2, [r7, #0]
 800535e:	4613      	mov	r3, r2
 8005360:	00db      	lsls	r3, r3, #3
 8005362:	4413      	add	r3, r2
 8005364:	009b      	lsls	r3, r3, #2
 8005366:	440b      	add	r3, r1
 8005368:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	2b00      	cmp	r3, #0
 8005370:	d108      	bne.n	8005384 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6818      	ldr	r0, [r3, #0]
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800537c:	461a      	mov	r2, r3
 800537e:	2100      	movs	r1, #0
 8005380:	f003 faba 	bl	80088f8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	b2db      	uxtb	r3, r3
 8005388:	4619      	mov	r1, r3
 800538a:	6878      	ldr	r0, [r7, #4]
 800538c:	f00a fe0e 	bl	800ffac <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8005390:	2300      	movs	r3, #0
}
 8005392:	4618      	mov	r0, r3
 8005394:	3720      	adds	r7, #32
 8005396:	46bd      	mov	sp, r7
 8005398:	bd80      	pop	{r7, pc}
 800539a:	bf00      	nop
 800539c:	4f54300a 	.word	0x4f54300a
 80053a0:	4f54310a 	.word	0x4f54310a

080053a4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80053a4:	b580      	push	{r7, lr}
 80053a6:	b086      	sub	sp, #24
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	6078      	str	r0, [r7, #4]
 80053ac:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053b4:	697b      	ldr	r3, [r7, #20]
 80053b6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80053b8:	697b      	ldr	r3, [r7, #20]
 80053ba:	333c      	adds	r3, #60	@ 0x3c
 80053bc:	3304      	adds	r3, #4
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80053c2:	683b      	ldr	r3, [r7, #0]
 80053c4:	015a      	lsls	r2, r3, #5
 80053c6:	693b      	ldr	r3, [r7, #16]
 80053c8:	4413      	add	r3, r2
 80053ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80053ce:	689b      	ldr	r3, [r3, #8]
 80053d0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	4a15      	ldr	r2, [pc, #84]	@ (800542c <PCD_EP_OutSetupPacket_int+0x88>)
 80053d6:	4293      	cmp	r3, r2
 80053d8:	d90e      	bls.n	80053f8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80053da:	68bb      	ldr	r3, [r7, #8]
 80053dc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d009      	beq.n	80053f8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	015a      	lsls	r2, r3, #5
 80053e8:	693b      	ldr	r3, [r7, #16]
 80053ea:	4413      	add	r3, r2
 80053ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80053f0:	461a      	mov	r2, r3
 80053f2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80053f6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80053f8:	6878      	ldr	r0, [r7, #4]
 80053fa:	f00a fdc5 	bl	800ff88 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	4a0a      	ldr	r2, [pc, #40]	@ (800542c <PCD_EP_OutSetupPacket_int+0x88>)
 8005402:	4293      	cmp	r3, r2
 8005404:	d90c      	bls.n	8005420 <PCD_EP_OutSetupPacket_int+0x7c>
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	799b      	ldrb	r3, [r3, #6]
 800540a:	2b01      	cmp	r3, #1
 800540c:	d108      	bne.n	8005420 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6818      	ldr	r0, [r3, #0]
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005418:	461a      	mov	r2, r3
 800541a:	2101      	movs	r1, #1
 800541c:	f003 fa6c 	bl	80088f8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8005420:	2300      	movs	r3, #0
}
 8005422:	4618      	mov	r0, r3
 8005424:	3718      	adds	r7, #24
 8005426:	46bd      	mov	sp, r7
 8005428:	bd80      	pop	{r7, pc}
 800542a:	bf00      	nop
 800542c:	4f54300a 	.word	0x4f54300a

08005430 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8005430:	b480      	push	{r7}
 8005432:	b085      	sub	sp, #20
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
 8005438:	460b      	mov	r3, r1
 800543a:	70fb      	strb	r3, [r7, #3]
 800543c:	4613      	mov	r3, r2
 800543e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005446:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8005448:	78fb      	ldrb	r3, [r7, #3]
 800544a:	2b00      	cmp	r3, #0
 800544c:	d107      	bne.n	800545e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800544e:	883b      	ldrh	r3, [r7, #0]
 8005450:	0419      	lsls	r1, r3, #16
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	68ba      	ldr	r2, [r7, #8]
 8005458:	430a      	orrs	r2, r1
 800545a:	629a      	str	r2, [r3, #40]	@ 0x28
 800545c:	e028      	b.n	80054b0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005464:	0c1b      	lsrs	r3, r3, #16
 8005466:	68ba      	ldr	r2, [r7, #8]
 8005468:	4413      	add	r3, r2
 800546a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800546c:	2300      	movs	r3, #0
 800546e:	73fb      	strb	r3, [r7, #15]
 8005470:	e00d      	b.n	800548e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681a      	ldr	r2, [r3, #0]
 8005476:	7bfb      	ldrb	r3, [r7, #15]
 8005478:	3340      	adds	r3, #64	@ 0x40
 800547a:	009b      	lsls	r3, r3, #2
 800547c:	4413      	add	r3, r2
 800547e:	685b      	ldr	r3, [r3, #4]
 8005480:	0c1b      	lsrs	r3, r3, #16
 8005482:	68ba      	ldr	r2, [r7, #8]
 8005484:	4413      	add	r3, r2
 8005486:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005488:	7bfb      	ldrb	r3, [r7, #15]
 800548a:	3301      	adds	r3, #1
 800548c:	73fb      	strb	r3, [r7, #15]
 800548e:	7bfa      	ldrb	r2, [r7, #15]
 8005490:	78fb      	ldrb	r3, [r7, #3]
 8005492:	3b01      	subs	r3, #1
 8005494:	429a      	cmp	r2, r3
 8005496:	d3ec      	bcc.n	8005472 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8005498:	883b      	ldrh	r3, [r7, #0]
 800549a:	0418      	lsls	r0, r3, #16
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	6819      	ldr	r1, [r3, #0]
 80054a0:	78fb      	ldrb	r3, [r7, #3]
 80054a2:	3b01      	subs	r3, #1
 80054a4:	68ba      	ldr	r2, [r7, #8]
 80054a6:	4302      	orrs	r2, r0
 80054a8:	3340      	adds	r3, #64	@ 0x40
 80054aa:	009b      	lsls	r3, r3, #2
 80054ac:	440b      	add	r3, r1
 80054ae:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80054b0:	2300      	movs	r3, #0
}
 80054b2:	4618      	mov	r0, r3
 80054b4:	3714      	adds	r7, #20
 80054b6:	46bd      	mov	sp, r7
 80054b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054bc:	4770      	bx	lr

080054be <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80054be:	b480      	push	{r7}
 80054c0:	b083      	sub	sp, #12
 80054c2:	af00      	add	r7, sp, #0
 80054c4:	6078      	str	r0, [r7, #4]
 80054c6:	460b      	mov	r3, r1
 80054c8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	887a      	ldrh	r2, [r7, #2]
 80054d0:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80054d2:	2300      	movs	r3, #0
}
 80054d4:	4618      	mov	r0, r3
 80054d6:	370c      	adds	r7, #12
 80054d8:	46bd      	mov	sp, r7
 80054da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054de:	4770      	bx	lr

080054e0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80054e0:	b480      	push	{r7}
 80054e2:	b083      	sub	sp, #12
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
 80054e8:	460b      	mov	r3, r1
 80054ea:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80054ec:	bf00      	nop
 80054ee:	370c      	adds	r7, #12
 80054f0:	46bd      	mov	sp, r7
 80054f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f6:	4770      	bx	lr

080054f8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80054f8:	b580      	push	{r7, lr}
 80054fa:	b086      	sub	sp, #24
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d101      	bne.n	800550a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005506:	2301      	movs	r3, #1
 8005508:	e267      	b.n	80059da <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f003 0301 	and.w	r3, r3, #1
 8005512:	2b00      	cmp	r3, #0
 8005514:	d075      	beq.n	8005602 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005516:	4b88      	ldr	r3, [pc, #544]	@ (8005738 <HAL_RCC_OscConfig+0x240>)
 8005518:	689b      	ldr	r3, [r3, #8]
 800551a:	f003 030c 	and.w	r3, r3, #12
 800551e:	2b04      	cmp	r3, #4
 8005520:	d00c      	beq.n	800553c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005522:	4b85      	ldr	r3, [pc, #532]	@ (8005738 <HAL_RCC_OscConfig+0x240>)
 8005524:	689b      	ldr	r3, [r3, #8]
 8005526:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800552a:	2b08      	cmp	r3, #8
 800552c:	d112      	bne.n	8005554 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800552e:	4b82      	ldr	r3, [pc, #520]	@ (8005738 <HAL_RCC_OscConfig+0x240>)
 8005530:	685b      	ldr	r3, [r3, #4]
 8005532:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005536:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800553a:	d10b      	bne.n	8005554 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800553c:	4b7e      	ldr	r3, [pc, #504]	@ (8005738 <HAL_RCC_OscConfig+0x240>)
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005544:	2b00      	cmp	r3, #0
 8005546:	d05b      	beq.n	8005600 <HAL_RCC_OscConfig+0x108>
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	685b      	ldr	r3, [r3, #4]
 800554c:	2b00      	cmp	r3, #0
 800554e:	d157      	bne.n	8005600 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005550:	2301      	movs	r3, #1
 8005552:	e242      	b.n	80059da <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	685b      	ldr	r3, [r3, #4]
 8005558:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800555c:	d106      	bne.n	800556c <HAL_RCC_OscConfig+0x74>
 800555e:	4b76      	ldr	r3, [pc, #472]	@ (8005738 <HAL_RCC_OscConfig+0x240>)
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	4a75      	ldr	r2, [pc, #468]	@ (8005738 <HAL_RCC_OscConfig+0x240>)
 8005564:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005568:	6013      	str	r3, [r2, #0]
 800556a:	e01d      	b.n	80055a8 <HAL_RCC_OscConfig+0xb0>
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	685b      	ldr	r3, [r3, #4]
 8005570:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005574:	d10c      	bne.n	8005590 <HAL_RCC_OscConfig+0x98>
 8005576:	4b70      	ldr	r3, [pc, #448]	@ (8005738 <HAL_RCC_OscConfig+0x240>)
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	4a6f      	ldr	r2, [pc, #444]	@ (8005738 <HAL_RCC_OscConfig+0x240>)
 800557c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005580:	6013      	str	r3, [r2, #0]
 8005582:	4b6d      	ldr	r3, [pc, #436]	@ (8005738 <HAL_RCC_OscConfig+0x240>)
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	4a6c      	ldr	r2, [pc, #432]	@ (8005738 <HAL_RCC_OscConfig+0x240>)
 8005588:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800558c:	6013      	str	r3, [r2, #0]
 800558e:	e00b      	b.n	80055a8 <HAL_RCC_OscConfig+0xb0>
 8005590:	4b69      	ldr	r3, [pc, #420]	@ (8005738 <HAL_RCC_OscConfig+0x240>)
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	4a68      	ldr	r2, [pc, #416]	@ (8005738 <HAL_RCC_OscConfig+0x240>)
 8005596:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800559a:	6013      	str	r3, [r2, #0]
 800559c:	4b66      	ldr	r3, [pc, #408]	@ (8005738 <HAL_RCC_OscConfig+0x240>)
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	4a65      	ldr	r2, [pc, #404]	@ (8005738 <HAL_RCC_OscConfig+0x240>)
 80055a2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80055a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	685b      	ldr	r3, [r3, #4]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d013      	beq.n	80055d8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055b0:	f7fc fc8c 	bl	8001ecc <HAL_GetTick>
 80055b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80055b6:	e008      	b.n	80055ca <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80055b8:	f7fc fc88 	bl	8001ecc <HAL_GetTick>
 80055bc:	4602      	mov	r2, r0
 80055be:	693b      	ldr	r3, [r7, #16]
 80055c0:	1ad3      	subs	r3, r2, r3
 80055c2:	2b64      	cmp	r3, #100	@ 0x64
 80055c4:	d901      	bls.n	80055ca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80055c6:	2303      	movs	r3, #3
 80055c8:	e207      	b.n	80059da <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80055ca:	4b5b      	ldr	r3, [pc, #364]	@ (8005738 <HAL_RCC_OscConfig+0x240>)
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d0f0      	beq.n	80055b8 <HAL_RCC_OscConfig+0xc0>
 80055d6:	e014      	b.n	8005602 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055d8:	f7fc fc78 	bl	8001ecc <HAL_GetTick>
 80055dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80055de:	e008      	b.n	80055f2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80055e0:	f7fc fc74 	bl	8001ecc <HAL_GetTick>
 80055e4:	4602      	mov	r2, r0
 80055e6:	693b      	ldr	r3, [r7, #16]
 80055e8:	1ad3      	subs	r3, r2, r3
 80055ea:	2b64      	cmp	r3, #100	@ 0x64
 80055ec:	d901      	bls.n	80055f2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80055ee:	2303      	movs	r3, #3
 80055f0:	e1f3      	b.n	80059da <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80055f2:	4b51      	ldr	r3, [pc, #324]	@ (8005738 <HAL_RCC_OscConfig+0x240>)
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d1f0      	bne.n	80055e0 <HAL_RCC_OscConfig+0xe8>
 80055fe:	e000      	b.n	8005602 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005600:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f003 0302 	and.w	r3, r3, #2
 800560a:	2b00      	cmp	r3, #0
 800560c:	d063      	beq.n	80056d6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800560e:	4b4a      	ldr	r3, [pc, #296]	@ (8005738 <HAL_RCC_OscConfig+0x240>)
 8005610:	689b      	ldr	r3, [r3, #8]
 8005612:	f003 030c 	and.w	r3, r3, #12
 8005616:	2b00      	cmp	r3, #0
 8005618:	d00b      	beq.n	8005632 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800561a:	4b47      	ldr	r3, [pc, #284]	@ (8005738 <HAL_RCC_OscConfig+0x240>)
 800561c:	689b      	ldr	r3, [r3, #8]
 800561e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005622:	2b08      	cmp	r3, #8
 8005624:	d11c      	bne.n	8005660 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005626:	4b44      	ldr	r3, [pc, #272]	@ (8005738 <HAL_RCC_OscConfig+0x240>)
 8005628:	685b      	ldr	r3, [r3, #4]
 800562a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800562e:	2b00      	cmp	r3, #0
 8005630:	d116      	bne.n	8005660 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005632:	4b41      	ldr	r3, [pc, #260]	@ (8005738 <HAL_RCC_OscConfig+0x240>)
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f003 0302 	and.w	r3, r3, #2
 800563a:	2b00      	cmp	r3, #0
 800563c:	d005      	beq.n	800564a <HAL_RCC_OscConfig+0x152>
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	68db      	ldr	r3, [r3, #12]
 8005642:	2b01      	cmp	r3, #1
 8005644:	d001      	beq.n	800564a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005646:	2301      	movs	r3, #1
 8005648:	e1c7      	b.n	80059da <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800564a:	4b3b      	ldr	r3, [pc, #236]	@ (8005738 <HAL_RCC_OscConfig+0x240>)
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	691b      	ldr	r3, [r3, #16]
 8005656:	00db      	lsls	r3, r3, #3
 8005658:	4937      	ldr	r1, [pc, #220]	@ (8005738 <HAL_RCC_OscConfig+0x240>)
 800565a:	4313      	orrs	r3, r2
 800565c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800565e:	e03a      	b.n	80056d6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	68db      	ldr	r3, [r3, #12]
 8005664:	2b00      	cmp	r3, #0
 8005666:	d020      	beq.n	80056aa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005668:	4b34      	ldr	r3, [pc, #208]	@ (800573c <HAL_RCC_OscConfig+0x244>)
 800566a:	2201      	movs	r2, #1
 800566c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800566e:	f7fc fc2d 	bl	8001ecc <HAL_GetTick>
 8005672:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005674:	e008      	b.n	8005688 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005676:	f7fc fc29 	bl	8001ecc <HAL_GetTick>
 800567a:	4602      	mov	r2, r0
 800567c:	693b      	ldr	r3, [r7, #16]
 800567e:	1ad3      	subs	r3, r2, r3
 8005680:	2b02      	cmp	r3, #2
 8005682:	d901      	bls.n	8005688 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005684:	2303      	movs	r3, #3
 8005686:	e1a8      	b.n	80059da <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005688:	4b2b      	ldr	r3, [pc, #172]	@ (8005738 <HAL_RCC_OscConfig+0x240>)
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f003 0302 	and.w	r3, r3, #2
 8005690:	2b00      	cmp	r3, #0
 8005692:	d0f0      	beq.n	8005676 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005694:	4b28      	ldr	r3, [pc, #160]	@ (8005738 <HAL_RCC_OscConfig+0x240>)
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	691b      	ldr	r3, [r3, #16]
 80056a0:	00db      	lsls	r3, r3, #3
 80056a2:	4925      	ldr	r1, [pc, #148]	@ (8005738 <HAL_RCC_OscConfig+0x240>)
 80056a4:	4313      	orrs	r3, r2
 80056a6:	600b      	str	r3, [r1, #0]
 80056a8:	e015      	b.n	80056d6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80056aa:	4b24      	ldr	r3, [pc, #144]	@ (800573c <HAL_RCC_OscConfig+0x244>)
 80056ac:	2200      	movs	r2, #0
 80056ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056b0:	f7fc fc0c 	bl	8001ecc <HAL_GetTick>
 80056b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80056b6:	e008      	b.n	80056ca <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80056b8:	f7fc fc08 	bl	8001ecc <HAL_GetTick>
 80056bc:	4602      	mov	r2, r0
 80056be:	693b      	ldr	r3, [r7, #16]
 80056c0:	1ad3      	subs	r3, r2, r3
 80056c2:	2b02      	cmp	r3, #2
 80056c4:	d901      	bls.n	80056ca <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80056c6:	2303      	movs	r3, #3
 80056c8:	e187      	b.n	80059da <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80056ca:	4b1b      	ldr	r3, [pc, #108]	@ (8005738 <HAL_RCC_OscConfig+0x240>)
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f003 0302 	and.w	r3, r3, #2
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d1f0      	bne.n	80056b8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f003 0308 	and.w	r3, r3, #8
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d036      	beq.n	8005750 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	695b      	ldr	r3, [r3, #20]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d016      	beq.n	8005718 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80056ea:	4b15      	ldr	r3, [pc, #84]	@ (8005740 <HAL_RCC_OscConfig+0x248>)
 80056ec:	2201      	movs	r2, #1
 80056ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056f0:	f7fc fbec 	bl	8001ecc <HAL_GetTick>
 80056f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80056f6:	e008      	b.n	800570a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80056f8:	f7fc fbe8 	bl	8001ecc <HAL_GetTick>
 80056fc:	4602      	mov	r2, r0
 80056fe:	693b      	ldr	r3, [r7, #16]
 8005700:	1ad3      	subs	r3, r2, r3
 8005702:	2b02      	cmp	r3, #2
 8005704:	d901      	bls.n	800570a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005706:	2303      	movs	r3, #3
 8005708:	e167      	b.n	80059da <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800570a:	4b0b      	ldr	r3, [pc, #44]	@ (8005738 <HAL_RCC_OscConfig+0x240>)
 800570c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800570e:	f003 0302 	and.w	r3, r3, #2
 8005712:	2b00      	cmp	r3, #0
 8005714:	d0f0      	beq.n	80056f8 <HAL_RCC_OscConfig+0x200>
 8005716:	e01b      	b.n	8005750 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005718:	4b09      	ldr	r3, [pc, #36]	@ (8005740 <HAL_RCC_OscConfig+0x248>)
 800571a:	2200      	movs	r2, #0
 800571c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800571e:	f7fc fbd5 	bl	8001ecc <HAL_GetTick>
 8005722:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005724:	e00e      	b.n	8005744 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005726:	f7fc fbd1 	bl	8001ecc <HAL_GetTick>
 800572a:	4602      	mov	r2, r0
 800572c:	693b      	ldr	r3, [r7, #16]
 800572e:	1ad3      	subs	r3, r2, r3
 8005730:	2b02      	cmp	r3, #2
 8005732:	d907      	bls.n	8005744 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005734:	2303      	movs	r3, #3
 8005736:	e150      	b.n	80059da <HAL_RCC_OscConfig+0x4e2>
 8005738:	40023800 	.word	0x40023800
 800573c:	42470000 	.word	0x42470000
 8005740:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005744:	4b88      	ldr	r3, [pc, #544]	@ (8005968 <HAL_RCC_OscConfig+0x470>)
 8005746:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005748:	f003 0302 	and.w	r3, r3, #2
 800574c:	2b00      	cmp	r3, #0
 800574e:	d1ea      	bne.n	8005726 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f003 0304 	and.w	r3, r3, #4
 8005758:	2b00      	cmp	r3, #0
 800575a:	f000 8097 	beq.w	800588c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800575e:	2300      	movs	r3, #0
 8005760:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005762:	4b81      	ldr	r3, [pc, #516]	@ (8005968 <HAL_RCC_OscConfig+0x470>)
 8005764:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005766:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800576a:	2b00      	cmp	r3, #0
 800576c:	d10f      	bne.n	800578e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800576e:	2300      	movs	r3, #0
 8005770:	60bb      	str	r3, [r7, #8]
 8005772:	4b7d      	ldr	r3, [pc, #500]	@ (8005968 <HAL_RCC_OscConfig+0x470>)
 8005774:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005776:	4a7c      	ldr	r2, [pc, #496]	@ (8005968 <HAL_RCC_OscConfig+0x470>)
 8005778:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800577c:	6413      	str	r3, [r2, #64]	@ 0x40
 800577e:	4b7a      	ldr	r3, [pc, #488]	@ (8005968 <HAL_RCC_OscConfig+0x470>)
 8005780:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005782:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005786:	60bb      	str	r3, [r7, #8]
 8005788:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800578a:	2301      	movs	r3, #1
 800578c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800578e:	4b77      	ldr	r3, [pc, #476]	@ (800596c <HAL_RCC_OscConfig+0x474>)
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005796:	2b00      	cmp	r3, #0
 8005798:	d118      	bne.n	80057cc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800579a:	4b74      	ldr	r3, [pc, #464]	@ (800596c <HAL_RCC_OscConfig+0x474>)
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	4a73      	ldr	r2, [pc, #460]	@ (800596c <HAL_RCC_OscConfig+0x474>)
 80057a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80057a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80057a6:	f7fc fb91 	bl	8001ecc <HAL_GetTick>
 80057aa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80057ac:	e008      	b.n	80057c0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80057ae:	f7fc fb8d 	bl	8001ecc <HAL_GetTick>
 80057b2:	4602      	mov	r2, r0
 80057b4:	693b      	ldr	r3, [r7, #16]
 80057b6:	1ad3      	subs	r3, r2, r3
 80057b8:	2b02      	cmp	r3, #2
 80057ba:	d901      	bls.n	80057c0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80057bc:	2303      	movs	r3, #3
 80057be:	e10c      	b.n	80059da <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80057c0:	4b6a      	ldr	r3, [pc, #424]	@ (800596c <HAL_RCC_OscConfig+0x474>)
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d0f0      	beq.n	80057ae <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	689b      	ldr	r3, [r3, #8]
 80057d0:	2b01      	cmp	r3, #1
 80057d2:	d106      	bne.n	80057e2 <HAL_RCC_OscConfig+0x2ea>
 80057d4:	4b64      	ldr	r3, [pc, #400]	@ (8005968 <HAL_RCC_OscConfig+0x470>)
 80057d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80057d8:	4a63      	ldr	r2, [pc, #396]	@ (8005968 <HAL_RCC_OscConfig+0x470>)
 80057da:	f043 0301 	orr.w	r3, r3, #1
 80057de:	6713      	str	r3, [r2, #112]	@ 0x70
 80057e0:	e01c      	b.n	800581c <HAL_RCC_OscConfig+0x324>
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	689b      	ldr	r3, [r3, #8]
 80057e6:	2b05      	cmp	r3, #5
 80057e8:	d10c      	bne.n	8005804 <HAL_RCC_OscConfig+0x30c>
 80057ea:	4b5f      	ldr	r3, [pc, #380]	@ (8005968 <HAL_RCC_OscConfig+0x470>)
 80057ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80057ee:	4a5e      	ldr	r2, [pc, #376]	@ (8005968 <HAL_RCC_OscConfig+0x470>)
 80057f0:	f043 0304 	orr.w	r3, r3, #4
 80057f4:	6713      	str	r3, [r2, #112]	@ 0x70
 80057f6:	4b5c      	ldr	r3, [pc, #368]	@ (8005968 <HAL_RCC_OscConfig+0x470>)
 80057f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80057fa:	4a5b      	ldr	r2, [pc, #364]	@ (8005968 <HAL_RCC_OscConfig+0x470>)
 80057fc:	f043 0301 	orr.w	r3, r3, #1
 8005800:	6713      	str	r3, [r2, #112]	@ 0x70
 8005802:	e00b      	b.n	800581c <HAL_RCC_OscConfig+0x324>
 8005804:	4b58      	ldr	r3, [pc, #352]	@ (8005968 <HAL_RCC_OscConfig+0x470>)
 8005806:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005808:	4a57      	ldr	r2, [pc, #348]	@ (8005968 <HAL_RCC_OscConfig+0x470>)
 800580a:	f023 0301 	bic.w	r3, r3, #1
 800580e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005810:	4b55      	ldr	r3, [pc, #340]	@ (8005968 <HAL_RCC_OscConfig+0x470>)
 8005812:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005814:	4a54      	ldr	r2, [pc, #336]	@ (8005968 <HAL_RCC_OscConfig+0x470>)
 8005816:	f023 0304 	bic.w	r3, r3, #4
 800581a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	689b      	ldr	r3, [r3, #8]
 8005820:	2b00      	cmp	r3, #0
 8005822:	d015      	beq.n	8005850 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005824:	f7fc fb52 	bl	8001ecc <HAL_GetTick>
 8005828:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800582a:	e00a      	b.n	8005842 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800582c:	f7fc fb4e 	bl	8001ecc <HAL_GetTick>
 8005830:	4602      	mov	r2, r0
 8005832:	693b      	ldr	r3, [r7, #16]
 8005834:	1ad3      	subs	r3, r2, r3
 8005836:	f241 3288 	movw	r2, #5000	@ 0x1388
 800583a:	4293      	cmp	r3, r2
 800583c:	d901      	bls.n	8005842 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800583e:	2303      	movs	r3, #3
 8005840:	e0cb      	b.n	80059da <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005842:	4b49      	ldr	r3, [pc, #292]	@ (8005968 <HAL_RCC_OscConfig+0x470>)
 8005844:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005846:	f003 0302 	and.w	r3, r3, #2
 800584a:	2b00      	cmp	r3, #0
 800584c:	d0ee      	beq.n	800582c <HAL_RCC_OscConfig+0x334>
 800584e:	e014      	b.n	800587a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005850:	f7fc fb3c 	bl	8001ecc <HAL_GetTick>
 8005854:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005856:	e00a      	b.n	800586e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005858:	f7fc fb38 	bl	8001ecc <HAL_GetTick>
 800585c:	4602      	mov	r2, r0
 800585e:	693b      	ldr	r3, [r7, #16]
 8005860:	1ad3      	subs	r3, r2, r3
 8005862:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005866:	4293      	cmp	r3, r2
 8005868:	d901      	bls.n	800586e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800586a:	2303      	movs	r3, #3
 800586c:	e0b5      	b.n	80059da <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800586e:	4b3e      	ldr	r3, [pc, #248]	@ (8005968 <HAL_RCC_OscConfig+0x470>)
 8005870:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005872:	f003 0302 	and.w	r3, r3, #2
 8005876:	2b00      	cmp	r3, #0
 8005878:	d1ee      	bne.n	8005858 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800587a:	7dfb      	ldrb	r3, [r7, #23]
 800587c:	2b01      	cmp	r3, #1
 800587e:	d105      	bne.n	800588c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005880:	4b39      	ldr	r3, [pc, #228]	@ (8005968 <HAL_RCC_OscConfig+0x470>)
 8005882:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005884:	4a38      	ldr	r2, [pc, #224]	@ (8005968 <HAL_RCC_OscConfig+0x470>)
 8005886:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800588a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	699b      	ldr	r3, [r3, #24]
 8005890:	2b00      	cmp	r3, #0
 8005892:	f000 80a1 	beq.w	80059d8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005896:	4b34      	ldr	r3, [pc, #208]	@ (8005968 <HAL_RCC_OscConfig+0x470>)
 8005898:	689b      	ldr	r3, [r3, #8]
 800589a:	f003 030c 	and.w	r3, r3, #12
 800589e:	2b08      	cmp	r3, #8
 80058a0:	d05c      	beq.n	800595c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	699b      	ldr	r3, [r3, #24]
 80058a6:	2b02      	cmp	r3, #2
 80058a8:	d141      	bne.n	800592e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80058aa:	4b31      	ldr	r3, [pc, #196]	@ (8005970 <HAL_RCC_OscConfig+0x478>)
 80058ac:	2200      	movs	r2, #0
 80058ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058b0:	f7fc fb0c 	bl	8001ecc <HAL_GetTick>
 80058b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80058b6:	e008      	b.n	80058ca <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80058b8:	f7fc fb08 	bl	8001ecc <HAL_GetTick>
 80058bc:	4602      	mov	r2, r0
 80058be:	693b      	ldr	r3, [r7, #16]
 80058c0:	1ad3      	subs	r3, r2, r3
 80058c2:	2b02      	cmp	r3, #2
 80058c4:	d901      	bls.n	80058ca <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80058c6:	2303      	movs	r3, #3
 80058c8:	e087      	b.n	80059da <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80058ca:	4b27      	ldr	r3, [pc, #156]	@ (8005968 <HAL_RCC_OscConfig+0x470>)
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d1f0      	bne.n	80058b8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	69da      	ldr	r2, [r3, #28]
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	6a1b      	ldr	r3, [r3, #32]
 80058de:	431a      	orrs	r2, r3
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058e4:	019b      	lsls	r3, r3, #6
 80058e6:	431a      	orrs	r2, r3
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058ec:	085b      	lsrs	r3, r3, #1
 80058ee:	3b01      	subs	r3, #1
 80058f0:	041b      	lsls	r3, r3, #16
 80058f2:	431a      	orrs	r2, r3
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058f8:	061b      	lsls	r3, r3, #24
 80058fa:	491b      	ldr	r1, [pc, #108]	@ (8005968 <HAL_RCC_OscConfig+0x470>)
 80058fc:	4313      	orrs	r3, r2
 80058fe:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005900:	4b1b      	ldr	r3, [pc, #108]	@ (8005970 <HAL_RCC_OscConfig+0x478>)
 8005902:	2201      	movs	r2, #1
 8005904:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005906:	f7fc fae1 	bl	8001ecc <HAL_GetTick>
 800590a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800590c:	e008      	b.n	8005920 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800590e:	f7fc fadd 	bl	8001ecc <HAL_GetTick>
 8005912:	4602      	mov	r2, r0
 8005914:	693b      	ldr	r3, [r7, #16]
 8005916:	1ad3      	subs	r3, r2, r3
 8005918:	2b02      	cmp	r3, #2
 800591a:	d901      	bls.n	8005920 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800591c:	2303      	movs	r3, #3
 800591e:	e05c      	b.n	80059da <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005920:	4b11      	ldr	r3, [pc, #68]	@ (8005968 <HAL_RCC_OscConfig+0x470>)
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005928:	2b00      	cmp	r3, #0
 800592a:	d0f0      	beq.n	800590e <HAL_RCC_OscConfig+0x416>
 800592c:	e054      	b.n	80059d8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800592e:	4b10      	ldr	r3, [pc, #64]	@ (8005970 <HAL_RCC_OscConfig+0x478>)
 8005930:	2200      	movs	r2, #0
 8005932:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005934:	f7fc faca 	bl	8001ecc <HAL_GetTick>
 8005938:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800593a:	e008      	b.n	800594e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800593c:	f7fc fac6 	bl	8001ecc <HAL_GetTick>
 8005940:	4602      	mov	r2, r0
 8005942:	693b      	ldr	r3, [r7, #16]
 8005944:	1ad3      	subs	r3, r2, r3
 8005946:	2b02      	cmp	r3, #2
 8005948:	d901      	bls.n	800594e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800594a:	2303      	movs	r3, #3
 800594c:	e045      	b.n	80059da <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800594e:	4b06      	ldr	r3, [pc, #24]	@ (8005968 <HAL_RCC_OscConfig+0x470>)
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005956:	2b00      	cmp	r3, #0
 8005958:	d1f0      	bne.n	800593c <HAL_RCC_OscConfig+0x444>
 800595a:	e03d      	b.n	80059d8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	699b      	ldr	r3, [r3, #24]
 8005960:	2b01      	cmp	r3, #1
 8005962:	d107      	bne.n	8005974 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005964:	2301      	movs	r3, #1
 8005966:	e038      	b.n	80059da <HAL_RCC_OscConfig+0x4e2>
 8005968:	40023800 	.word	0x40023800
 800596c:	40007000 	.word	0x40007000
 8005970:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005974:	4b1b      	ldr	r3, [pc, #108]	@ (80059e4 <HAL_RCC_OscConfig+0x4ec>)
 8005976:	685b      	ldr	r3, [r3, #4]
 8005978:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	699b      	ldr	r3, [r3, #24]
 800597e:	2b01      	cmp	r3, #1
 8005980:	d028      	beq.n	80059d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800598c:	429a      	cmp	r2, r3
 800598e:	d121      	bne.n	80059d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800599a:	429a      	cmp	r2, r3
 800599c:	d11a      	bne.n	80059d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800599e:	68fa      	ldr	r2, [r7, #12]
 80059a0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80059a4:	4013      	ands	r3, r2
 80059a6:	687a      	ldr	r2, [r7, #4]
 80059a8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80059aa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80059ac:	4293      	cmp	r3, r2
 80059ae:	d111      	bne.n	80059d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059ba:	085b      	lsrs	r3, r3, #1
 80059bc:	3b01      	subs	r3, #1
 80059be:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80059c0:	429a      	cmp	r2, r3
 80059c2:	d107      	bne.n	80059d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059ce:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80059d0:	429a      	cmp	r2, r3
 80059d2:	d001      	beq.n	80059d8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80059d4:	2301      	movs	r3, #1
 80059d6:	e000      	b.n	80059da <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80059d8:	2300      	movs	r3, #0
}
 80059da:	4618      	mov	r0, r3
 80059dc:	3718      	adds	r7, #24
 80059de:	46bd      	mov	sp, r7
 80059e0:	bd80      	pop	{r7, pc}
 80059e2:	bf00      	nop
 80059e4:	40023800 	.word	0x40023800

080059e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	b084      	sub	sp, #16
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
 80059f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d101      	bne.n	80059fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80059f8:	2301      	movs	r3, #1
 80059fa:	e0cc      	b.n	8005b96 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80059fc:	4b68      	ldr	r3, [pc, #416]	@ (8005ba0 <HAL_RCC_ClockConfig+0x1b8>)
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f003 0307 	and.w	r3, r3, #7
 8005a04:	683a      	ldr	r2, [r7, #0]
 8005a06:	429a      	cmp	r2, r3
 8005a08:	d90c      	bls.n	8005a24 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a0a:	4b65      	ldr	r3, [pc, #404]	@ (8005ba0 <HAL_RCC_ClockConfig+0x1b8>)
 8005a0c:	683a      	ldr	r2, [r7, #0]
 8005a0e:	b2d2      	uxtb	r2, r2
 8005a10:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a12:	4b63      	ldr	r3, [pc, #396]	@ (8005ba0 <HAL_RCC_ClockConfig+0x1b8>)
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	f003 0307 	and.w	r3, r3, #7
 8005a1a:	683a      	ldr	r2, [r7, #0]
 8005a1c:	429a      	cmp	r2, r3
 8005a1e:	d001      	beq.n	8005a24 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005a20:	2301      	movs	r3, #1
 8005a22:	e0b8      	b.n	8005b96 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f003 0302 	and.w	r3, r3, #2
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d020      	beq.n	8005a72 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f003 0304 	and.w	r3, r3, #4
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d005      	beq.n	8005a48 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005a3c:	4b59      	ldr	r3, [pc, #356]	@ (8005ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8005a3e:	689b      	ldr	r3, [r3, #8]
 8005a40:	4a58      	ldr	r2, [pc, #352]	@ (8005ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8005a42:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005a46:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f003 0308 	and.w	r3, r3, #8
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d005      	beq.n	8005a60 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005a54:	4b53      	ldr	r3, [pc, #332]	@ (8005ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8005a56:	689b      	ldr	r3, [r3, #8]
 8005a58:	4a52      	ldr	r2, [pc, #328]	@ (8005ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8005a5a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005a5e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005a60:	4b50      	ldr	r3, [pc, #320]	@ (8005ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8005a62:	689b      	ldr	r3, [r3, #8]
 8005a64:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	689b      	ldr	r3, [r3, #8]
 8005a6c:	494d      	ldr	r1, [pc, #308]	@ (8005ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8005a6e:	4313      	orrs	r3, r2
 8005a70:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f003 0301 	and.w	r3, r3, #1
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d044      	beq.n	8005b08 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	685b      	ldr	r3, [r3, #4]
 8005a82:	2b01      	cmp	r3, #1
 8005a84:	d107      	bne.n	8005a96 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005a86:	4b47      	ldr	r3, [pc, #284]	@ (8005ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d119      	bne.n	8005ac6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005a92:	2301      	movs	r3, #1
 8005a94:	e07f      	b.n	8005b96 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	685b      	ldr	r3, [r3, #4]
 8005a9a:	2b02      	cmp	r3, #2
 8005a9c:	d003      	beq.n	8005aa6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005aa2:	2b03      	cmp	r3, #3
 8005aa4:	d107      	bne.n	8005ab6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005aa6:	4b3f      	ldr	r3, [pc, #252]	@ (8005ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d109      	bne.n	8005ac6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005ab2:	2301      	movs	r3, #1
 8005ab4:	e06f      	b.n	8005b96 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ab6:	4b3b      	ldr	r3, [pc, #236]	@ (8005ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	f003 0302 	and.w	r3, r3, #2
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d101      	bne.n	8005ac6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005ac2:	2301      	movs	r3, #1
 8005ac4:	e067      	b.n	8005b96 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005ac6:	4b37      	ldr	r3, [pc, #220]	@ (8005ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8005ac8:	689b      	ldr	r3, [r3, #8]
 8005aca:	f023 0203 	bic.w	r2, r3, #3
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	685b      	ldr	r3, [r3, #4]
 8005ad2:	4934      	ldr	r1, [pc, #208]	@ (8005ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8005ad4:	4313      	orrs	r3, r2
 8005ad6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005ad8:	f7fc f9f8 	bl	8001ecc <HAL_GetTick>
 8005adc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ade:	e00a      	b.n	8005af6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005ae0:	f7fc f9f4 	bl	8001ecc <HAL_GetTick>
 8005ae4:	4602      	mov	r2, r0
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	1ad3      	subs	r3, r2, r3
 8005aea:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005aee:	4293      	cmp	r3, r2
 8005af0:	d901      	bls.n	8005af6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005af2:	2303      	movs	r3, #3
 8005af4:	e04f      	b.n	8005b96 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005af6:	4b2b      	ldr	r3, [pc, #172]	@ (8005ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8005af8:	689b      	ldr	r3, [r3, #8]
 8005afa:	f003 020c 	and.w	r2, r3, #12
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	685b      	ldr	r3, [r3, #4]
 8005b02:	009b      	lsls	r3, r3, #2
 8005b04:	429a      	cmp	r2, r3
 8005b06:	d1eb      	bne.n	8005ae0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005b08:	4b25      	ldr	r3, [pc, #148]	@ (8005ba0 <HAL_RCC_ClockConfig+0x1b8>)
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f003 0307 	and.w	r3, r3, #7
 8005b10:	683a      	ldr	r2, [r7, #0]
 8005b12:	429a      	cmp	r2, r3
 8005b14:	d20c      	bcs.n	8005b30 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b16:	4b22      	ldr	r3, [pc, #136]	@ (8005ba0 <HAL_RCC_ClockConfig+0x1b8>)
 8005b18:	683a      	ldr	r2, [r7, #0]
 8005b1a:	b2d2      	uxtb	r2, r2
 8005b1c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b1e:	4b20      	ldr	r3, [pc, #128]	@ (8005ba0 <HAL_RCC_ClockConfig+0x1b8>)
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	f003 0307 	and.w	r3, r3, #7
 8005b26:	683a      	ldr	r2, [r7, #0]
 8005b28:	429a      	cmp	r2, r3
 8005b2a:	d001      	beq.n	8005b30 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005b2c:	2301      	movs	r3, #1
 8005b2e:	e032      	b.n	8005b96 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f003 0304 	and.w	r3, r3, #4
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d008      	beq.n	8005b4e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005b3c:	4b19      	ldr	r3, [pc, #100]	@ (8005ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8005b3e:	689b      	ldr	r3, [r3, #8]
 8005b40:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	68db      	ldr	r3, [r3, #12]
 8005b48:	4916      	ldr	r1, [pc, #88]	@ (8005ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8005b4a:	4313      	orrs	r3, r2
 8005b4c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f003 0308 	and.w	r3, r3, #8
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d009      	beq.n	8005b6e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005b5a:	4b12      	ldr	r3, [pc, #72]	@ (8005ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8005b5c:	689b      	ldr	r3, [r3, #8]
 8005b5e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	691b      	ldr	r3, [r3, #16]
 8005b66:	00db      	lsls	r3, r3, #3
 8005b68:	490e      	ldr	r1, [pc, #56]	@ (8005ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8005b6a:	4313      	orrs	r3, r2
 8005b6c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005b6e:	f000 f82d 	bl	8005bcc <HAL_RCC_GetSysClockFreq>
 8005b72:	4602      	mov	r2, r0
 8005b74:	4b0b      	ldr	r3, [pc, #44]	@ (8005ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8005b76:	689b      	ldr	r3, [r3, #8]
 8005b78:	091b      	lsrs	r3, r3, #4
 8005b7a:	f003 030f 	and.w	r3, r3, #15
 8005b7e:	490a      	ldr	r1, [pc, #40]	@ (8005ba8 <HAL_RCC_ClockConfig+0x1c0>)
 8005b80:	5ccb      	ldrb	r3, [r1, r3]
 8005b82:	fa22 f303 	lsr.w	r3, r2, r3
 8005b86:	4a09      	ldr	r2, [pc, #36]	@ (8005bac <HAL_RCC_ClockConfig+0x1c4>)
 8005b88:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8005b8a:	4b09      	ldr	r3, [pc, #36]	@ (8005bb0 <HAL_RCC_ClockConfig+0x1c8>)
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	4618      	mov	r0, r3
 8005b90:	f7fc f958 	bl	8001e44 <HAL_InitTick>

  return HAL_OK;
 8005b94:	2300      	movs	r3, #0
}
 8005b96:	4618      	mov	r0, r3
 8005b98:	3710      	adds	r7, #16
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	bd80      	pop	{r7, pc}
 8005b9e:	bf00      	nop
 8005ba0:	40023c00 	.word	0x40023c00
 8005ba4:	40023800 	.word	0x40023800
 8005ba8:	08011cbc 	.word	0x08011cbc
 8005bac:	20000008 	.word	0x20000008
 8005bb0:	2000000c 	.word	0x2000000c

08005bb4 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8005bb4:	b480      	push	{r7}
 8005bb6:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8005bb8:	4b03      	ldr	r3, [pc, #12]	@ (8005bc8 <HAL_RCC_EnableCSS+0x14>)
 8005bba:	2201      	movs	r2, #1
 8005bbc:	601a      	str	r2, [r3, #0]
}
 8005bbe:	bf00      	nop
 8005bc0:	46bd      	mov	sp, r7
 8005bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc6:	4770      	bx	lr
 8005bc8:	4247004c 	.word	0x4247004c

08005bcc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005bcc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005bd0:	b090      	sub	sp, #64	@ 0x40
 8005bd2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005bd4:	2300      	movs	r3, #0
 8005bd6:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8005bd8:	2300      	movs	r3, #0
 8005bda:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8005bdc:	2300      	movs	r3, #0
 8005bde:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8005be0:	2300      	movs	r3, #0
 8005be2:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005be4:	4b59      	ldr	r3, [pc, #356]	@ (8005d4c <HAL_RCC_GetSysClockFreq+0x180>)
 8005be6:	689b      	ldr	r3, [r3, #8]
 8005be8:	f003 030c 	and.w	r3, r3, #12
 8005bec:	2b08      	cmp	r3, #8
 8005bee:	d00d      	beq.n	8005c0c <HAL_RCC_GetSysClockFreq+0x40>
 8005bf0:	2b08      	cmp	r3, #8
 8005bf2:	f200 80a1 	bhi.w	8005d38 <HAL_RCC_GetSysClockFreq+0x16c>
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d002      	beq.n	8005c00 <HAL_RCC_GetSysClockFreq+0x34>
 8005bfa:	2b04      	cmp	r3, #4
 8005bfc:	d003      	beq.n	8005c06 <HAL_RCC_GetSysClockFreq+0x3a>
 8005bfe:	e09b      	b.n	8005d38 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005c00:	4b53      	ldr	r3, [pc, #332]	@ (8005d50 <HAL_RCC_GetSysClockFreq+0x184>)
 8005c02:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005c04:	e09b      	b.n	8005d3e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005c06:	4b53      	ldr	r3, [pc, #332]	@ (8005d54 <HAL_RCC_GetSysClockFreq+0x188>)
 8005c08:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005c0a:	e098      	b.n	8005d3e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005c0c:	4b4f      	ldr	r3, [pc, #316]	@ (8005d4c <HAL_RCC_GetSysClockFreq+0x180>)
 8005c0e:	685b      	ldr	r3, [r3, #4]
 8005c10:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005c14:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005c16:	4b4d      	ldr	r3, [pc, #308]	@ (8005d4c <HAL_RCC_GetSysClockFreq+0x180>)
 8005c18:	685b      	ldr	r3, [r3, #4]
 8005c1a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d028      	beq.n	8005c74 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005c22:	4b4a      	ldr	r3, [pc, #296]	@ (8005d4c <HAL_RCC_GetSysClockFreq+0x180>)
 8005c24:	685b      	ldr	r3, [r3, #4]
 8005c26:	099b      	lsrs	r3, r3, #6
 8005c28:	2200      	movs	r2, #0
 8005c2a:	623b      	str	r3, [r7, #32]
 8005c2c:	627a      	str	r2, [r7, #36]	@ 0x24
 8005c2e:	6a3b      	ldr	r3, [r7, #32]
 8005c30:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005c34:	2100      	movs	r1, #0
 8005c36:	4b47      	ldr	r3, [pc, #284]	@ (8005d54 <HAL_RCC_GetSysClockFreq+0x188>)
 8005c38:	fb03 f201 	mul.w	r2, r3, r1
 8005c3c:	2300      	movs	r3, #0
 8005c3e:	fb00 f303 	mul.w	r3, r0, r3
 8005c42:	4413      	add	r3, r2
 8005c44:	4a43      	ldr	r2, [pc, #268]	@ (8005d54 <HAL_RCC_GetSysClockFreq+0x188>)
 8005c46:	fba0 1202 	umull	r1, r2, r0, r2
 8005c4a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005c4c:	460a      	mov	r2, r1
 8005c4e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8005c50:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005c52:	4413      	add	r3, r2
 8005c54:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005c56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c58:	2200      	movs	r2, #0
 8005c5a:	61bb      	str	r3, [r7, #24]
 8005c5c:	61fa      	str	r2, [r7, #28]
 8005c5e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005c62:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8005c66:	f7fa fe41 	bl	80008ec <__aeabi_uldivmod>
 8005c6a:	4602      	mov	r2, r0
 8005c6c:	460b      	mov	r3, r1
 8005c6e:	4613      	mov	r3, r2
 8005c70:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005c72:	e053      	b.n	8005d1c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005c74:	4b35      	ldr	r3, [pc, #212]	@ (8005d4c <HAL_RCC_GetSysClockFreq+0x180>)
 8005c76:	685b      	ldr	r3, [r3, #4]
 8005c78:	099b      	lsrs	r3, r3, #6
 8005c7a:	2200      	movs	r2, #0
 8005c7c:	613b      	str	r3, [r7, #16]
 8005c7e:	617a      	str	r2, [r7, #20]
 8005c80:	693b      	ldr	r3, [r7, #16]
 8005c82:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8005c86:	f04f 0b00 	mov.w	fp, #0
 8005c8a:	4652      	mov	r2, sl
 8005c8c:	465b      	mov	r3, fp
 8005c8e:	f04f 0000 	mov.w	r0, #0
 8005c92:	f04f 0100 	mov.w	r1, #0
 8005c96:	0159      	lsls	r1, r3, #5
 8005c98:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005c9c:	0150      	lsls	r0, r2, #5
 8005c9e:	4602      	mov	r2, r0
 8005ca0:	460b      	mov	r3, r1
 8005ca2:	ebb2 080a 	subs.w	r8, r2, sl
 8005ca6:	eb63 090b 	sbc.w	r9, r3, fp
 8005caa:	f04f 0200 	mov.w	r2, #0
 8005cae:	f04f 0300 	mov.w	r3, #0
 8005cb2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8005cb6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8005cba:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8005cbe:	ebb2 0408 	subs.w	r4, r2, r8
 8005cc2:	eb63 0509 	sbc.w	r5, r3, r9
 8005cc6:	f04f 0200 	mov.w	r2, #0
 8005cca:	f04f 0300 	mov.w	r3, #0
 8005cce:	00eb      	lsls	r3, r5, #3
 8005cd0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005cd4:	00e2      	lsls	r2, r4, #3
 8005cd6:	4614      	mov	r4, r2
 8005cd8:	461d      	mov	r5, r3
 8005cda:	eb14 030a 	adds.w	r3, r4, sl
 8005cde:	603b      	str	r3, [r7, #0]
 8005ce0:	eb45 030b 	adc.w	r3, r5, fp
 8005ce4:	607b      	str	r3, [r7, #4]
 8005ce6:	f04f 0200 	mov.w	r2, #0
 8005cea:	f04f 0300 	mov.w	r3, #0
 8005cee:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005cf2:	4629      	mov	r1, r5
 8005cf4:	028b      	lsls	r3, r1, #10
 8005cf6:	4621      	mov	r1, r4
 8005cf8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005cfc:	4621      	mov	r1, r4
 8005cfe:	028a      	lsls	r2, r1, #10
 8005d00:	4610      	mov	r0, r2
 8005d02:	4619      	mov	r1, r3
 8005d04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d06:	2200      	movs	r2, #0
 8005d08:	60bb      	str	r3, [r7, #8]
 8005d0a:	60fa      	str	r2, [r7, #12]
 8005d0c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005d10:	f7fa fdec 	bl	80008ec <__aeabi_uldivmod>
 8005d14:	4602      	mov	r2, r0
 8005d16:	460b      	mov	r3, r1
 8005d18:	4613      	mov	r3, r2
 8005d1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005d1c:	4b0b      	ldr	r3, [pc, #44]	@ (8005d4c <HAL_RCC_GetSysClockFreq+0x180>)
 8005d1e:	685b      	ldr	r3, [r3, #4]
 8005d20:	0c1b      	lsrs	r3, r3, #16
 8005d22:	f003 0303 	and.w	r3, r3, #3
 8005d26:	3301      	adds	r3, #1
 8005d28:	005b      	lsls	r3, r3, #1
 8005d2a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8005d2c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005d2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d30:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d34:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005d36:	e002      	b.n	8005d3e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005d38:	4b05      	ldr	r3, [pc, #20]	@ (8005d50 <HAL_RCC_GetSysClockFreq+0x184>)
 8005d3a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005d3c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005d3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8005d40:	4618      	mov	r0, r3
 8005d42:	3740      	adds	r7, #64	@ 0x40
 8005d44:	46bd      	mov	sp, r7
 8005d46:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005d4a:	bf00      	nop
 8005d4c:	40023800 	.word	0x40023800
 8005d50:	00f42400 	.word	0x00f42400
 8005d54:	017d7840 	.word	0x017d7840

08005d58 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005d58:	b480      	push	{r7}
 8005d5a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005d5c:	4b03      	ldr	r3, [pc, #12]	@ (8005d6c <HAL_RCC_GetHCLKFreq+0x14>)
 8005d5e:	681b      	ldr	r3, [r3, #0]
}
 8005d60:	4618      	mov	r0, r3
 8005d62:	46bd      	mov	sp, r7
 8005d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d68:	4770      	bx	lr
 8005d6a:	bf00      	nop
 8005d6c:	20000008 	.word	0x20000008

08005d70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005d70:	b580      	push	{r7, lr}
 8005d72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005d74:	f7ff fff0 	bl	8005d58 <HAL_RCC_GetHCLKFreq>
 8005d78:	4602      	mov	r2, r0
 8005d7a:	4b05      	ldr	r3, [pc, #20]	@ (8005d90 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005d7c:	689b      	ldr	r3, [r3, #8]
 8005d7e:	0a9b      	lsrs	r3, r3, #10
 8005d80:	f003 0307 	and.w	r3, r3, #7
 8005d84:	4903      	ldr	r1, [pc, #12]	@ (8005d94 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005d86:	5ccb      	ldrb	r3, [r1, r3]
 8005d88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	bd80      	pop	{r7, pc}
 8005d90:	40023800 	.word	0x40023800
 8005d94:	08011ccc 	.word	0x08011ccc

08005d98 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005d9c:	f7ff ffdc 	bl	8005d58 <HAL_RCC_GetHCLKFreq>
 8005da0:	4602      	mov	r2, r0
 8005da2:	4b05      	ldr	r3, [pc, #20]	@ (8005db8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005da4:	689b      	ldr	r3, [r3, #8]
 8005da6:	0b5b      	lsrs	r3, r3, #13
 8005da8:	f003 0307 	and.w	r3, r3, #7
 8005dac:	4903      	ldr	r1, [pc, #12]	@ (8005dbc <HAL_RCC_GetPCLK2Freq+0x24>)
 8005dae:	5ccb      	ldrb	r3, [r1, r3]
 8005db0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005db4:	4618      	mov	r0, r3
 8005db6:	bd80      	pop	{r7, pc}
 8005db8:	40023800 	.word	0x40023800
 8005dbc:	08011ccc 	.word	0x08011ccc

08005dc0 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8005dc0:	b580      	push	{r7, lr}
 8005dc2:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if (__HAL_RCC_GET_IT(RCC_IT_CSS))
 8005dc4:	4b06      	ldr	r3, [pc, #24]	@ (8005de0 <HAL_RCC_NMI_IRQHandler+0x20>)
 8005dc6:	68db      	ldr	r3, [r3, #12]
 8005dc8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005dcc:	2b80      	cmp	r3, #128	@ 0x80
 8005dce:	d104      	bne.n	8005dda <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8005dd0:	f000 f80a 	bl	8005de8 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8005dd4:	4b03      	ldr	r3, [pc, #12]	@ (8005de4 <HAL_RCC_NMI_IRQHandler+0x24>)
 8005dd6:	2280      	movs	r2, #128	@ 0x80
 8005dd8:	701a      	strb	r2, [r3, #0]
  }
}
 8005dda:	bf00      	nop
 8005ddc:	bd80      	pop	{r7, pc}
 8005dde:	bf00      	nop
 8005de0:	40023800 	.word	0x40023800
 8005de4:	4002380e 	.word	0x4002380e

08005de8 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8005de8:	b480      	push	{r7}
 8005dea:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 8005dec:	bf00      	nop
 8005dee:	46bd      	mov	sp, r7
 8005df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df4:	4770      	bx	lr
	...

08005df8 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005df8:	b580      	push	{r7, lr}
 8005dfa:	b086      	sub	sp, #24
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005e00:	2300      	movs	r3, #0
 8005e02:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005e04:	2300      	movs	r3, #0
 8005e06:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	f003 0301 	and.w	r3, r3, #1
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d105      	bne.n	8005e20 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d038      	beq.n	8005e92 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005e20:	4b68      	ldr	r3, [pc, #416]	@ (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005e22:	2200      	movs	r2, #0
 8005e24:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005e26:	f7fc f851 	bl	8001ecc <HAL_GetTick>
 8005e2a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005e2c:	e008      	b.n	8005e40 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005e2e:	f7fc f84d 	bl	8001ecc <HAL_GetTick>
 8005e32:	4602      	mov	r2, r0
 8005e34:	697b      	ldr	r3, [r7, #20]
 8005e36:	1ad3      	subs	r3, r2, r3
 8005e38:	2b02      	cmp	r3, #2
 8005e3a:	d901      	bls.n	8005e40 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005e3c:	2303      	movs	r3, #3
 8005e3e:	e0bd      	b.n	8005fbc <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005e40:	4b61      	ldr	r3, [pc, #388]	@ (8005fc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d1f0      	bne.n	8005e2e <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN,
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	685a      	ldr	r2, [r3, #4]
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	689b      	ldr	r3, [r3, #8]
 8005e54:	019b      	lsls	r3, r3, #6
 8005e56:	431a      	orrs	r2, r3
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	68db      	ldr	r3, [r3, #12]
 8005e5c:	071b      	lsls	r3, r3, #28
 8005e5e:	495a      	ldr	r1, [pc, #360]	@ (8005fc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005e60:	4313      	orrs	r3, r2
 8005e62:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005e66:	4b57      	ldr	r3, [pc, #348]	@ (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005e68:	2201      	movs	r2, #1
 8005e6a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005e6c:	f7fc f82e 	bl	8001ecc <HAL_GetTick>
 8005e70:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005e72:	e008      	b.n	8005e86 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005e74:	f7fc f82a 	bl	8001ecc <HAL_GetTick>
 8005e78:	4602      	mov	r2, r0
 8005e7a:	697b      	ldr	r3, [r7, #20]
 8005e7c:	1ad3      	subs	r3, r2, r3
 8005e7e:	2b02      	cmp	r3, #2
 8005e80:	d901      	bls.n	8005e86 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005e82:	2303      	movs	r3, #3
 8005e84:	e09a      	b.n	8005fbc <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005e86:	4b50      	ldr	r3, [pc, #320]	@ (8005fc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d0f0      	beq.n	8005e74 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f003 0302 	and.w	r3, r3, #2
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	f000 8083 	beq.w	8005fa6 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005ea0:	2300      	movs	r3, #0
 8005ea2:	60fb      	str	r3, [r7, #12]
 8005ea4:	4b48      	ldr	r3, [pc, #288]	@ (8005fc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005ea6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ea8:	4a47      	ldr	r2, [pc, #284]	@ (8005fc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005eaa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005eae:	6413      	str	r3, [r2, #64]	@ 0x40
 8005eb0:	4b45      	ldr	r3, [pc, #276]	@ (8005fc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005eb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005eb4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005eb8:	60fb      	str	r3, [r7, #12]
 8005eba:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005ebc:	4b43      	ldr	r3, [pc, #268]	@ (8005fcc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	4a42      	ldr	r2, [pc, #264]	@ (8005fcc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005ec2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005ec6:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005ec8:	f7fc f800 	bl	8001ecc <HAL_GetTick>
 8005ecc:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8005ece:	e008      	b.n	8005ee2 <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005ed0:	f7fb fffc 	bl	8001ecc <HAL_GetTick>
 8005ed4:	4602      	mov	r2, r0
 8005ed6:	697b      	ldr	r3, [r7, #20]
 8005ed8:	1ad3      	subs	r3, r2, r3
 8005eda:	2b02      	cmp	r3, #2
 8005edc:	d901      	bls.n	8005ee2 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 8005ede:	2303      	movs	r3, #3
 8005ee0:	e06c      	b.n	8005fbc <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8005ee2:	4b3a      	ldr	r3, [pc, #232]	@ (8005fcc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d0f0      	beq.n	8005ed0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005eee:	4b36      	ldr	r3, [pc, #216]	@ (8005fc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005ef0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ef2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005ef6:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005ef8:	693b      	ldr	r3, [r7, #16]
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d02f      	beq.n	8005f5e <HAL_RCCEx_PeriphCLKConfig+0x166>
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	691b      	ldr	r3, [r3, #16]
 8005f02:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005f06:	693a      	ldr	r2, [r7, #16]
 8005f08:	429a      	cmp	r2, r3
 8005f0a:	d028      	beq.n	8005f5e <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005f0c:	4b2e      	ldr	r3, [pc, #184]	@ (8005fc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005f0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f10:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005f14:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005f16:	4b2e      	ldr	r3, [pc, #184]	@ (8005fd0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005f18:	2201      	movs	r2, #1
 8005f1a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005f1c:	4b2c      	ldr	r3, [pc, #176]	@ (8005fd0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005f1e:	2200      	movs	r2, #0
 8005f20:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005f22:	4a29      	ldr	r2, [pc, #164]	@ (8005fc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005f24:	693b      	ldr	r3, [r7, #16]
 8005f26:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005f28:	4b27      	ldr	r3, [pc, #156]	@ (8005fc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005f2a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f2c:	f003 0301 	and.w	r3, r3, #1
 8005f30:	2b01      	cmp	r3, #1
 8005f32:	d114      	bne.n	8005f5e <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005f34:	f7fb ffca 	bl	8001ecc <HAL_GetTick>
 8005f38:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f3a:	e00a      	b.n	8005f52 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005f3c:	f7fb ffc6 	bl	8001ecc <HAL_GetTick>
 8005f40:	4602      	mov	r2, r0
 8005f42:	697b      	ldr	r3, [r7, #20]
 8005f44:	1ad3      	subs	r3, r2, r3
 8005f46:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005f4a:	4293      	cmp	r3, r2
 8005f4c:	d901      	bls.n	8005f52 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8005f4e:	2303      	movs	r3, #3
 8005f50:	e034      	b.n	8005fbc <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f52:	4b1d      	ldr	r3, [pc, #116]	@ (8005fc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005f54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f56:	f003 0302 	and.w	r3, r3, #2
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d0ee      	beq.n	8005f3c <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	691b      	ldr	r3, [r3, #16]
 8005f62:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005f66:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005f6a:	d10d      	bne.n	8005f88 <HAL_RCCEx_PeriphCLKConfig+0x190>
 8005f6c:	4b16      	ldr	r3, [pc, #88]	@ (8005fc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005f6e:	689b      	ldr	r3, [r3, #8]
 8005f70:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	691b      	ldr	r3, [r3, #16]
 8005f78:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8005f7c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005f80:	4911      	ldr	r1, [pc, #68]	@ (8005fc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005f82:	4313      	orrs	r3, r2
 8005f84:	608b      	str	r3, [r1, #8]
 8005f86:	e005      	b.n	8005f94 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8005f88:	4b0f      	ldr	r3, [pc, #60]	@ (8005fc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005f8a:	689b      	ldr	r3, [r3, #8]
 8005f8c:	4a0e      	ldr	r2, [pc, #56]	@ (8005fc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005f8e:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8005f92:	6093      	str	r3, [r2, #8]
 8005f94:	4b0c      	ldr	r3, [pc, #48]	@ (8005fc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005f96:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	691b      	ldr	r3, [r3, #16]
 8005f9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005fa0:	4909      	ldr	r1, [pc, #36]	@ (8005fc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005fa2:	4313      	orrs	r3, r2
 8005fa4:	670b      	str	r3, [r1, #112]	@ 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	f003 0308 	and.w	r3, r3, #8
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d003      	beq.n	8005fba <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	7d1a      	ldrb	r2, [r3, #20]
 8005fb6:	4b07      	ldr	r3, [pc, #28]	@ (8005fd4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8005fb8:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8005fba:	2300      	movs	r3, #0
}
 8005fbc:	4618      	mov	r0, r3
 8005fbe:	3718      	adds	r7, #24
 8005fc0:	46bd      	mov	sp, r7
 8005fc2:	bd80      	pop	{r7, pc}
 8005fc4:	42470068 	.word	0x42470068
 8005fc8:	40023800 	.word	0x40023800
 8005fcc:	40007000 	.word	0x40007000
 8005fd0:	42470e40 	.word	0x42470e40
 8005fd4:	424711e0 	.word	0x424711e0

08005fd8 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005fd8:	b580      	push	{r7, lr}
 8005fda:	b084      	sub	sp, #16
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005fe0:	2301      	movs	r3, #1
 8005fe2:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d101      	bne.n	8005fee <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8005fea:	2301      	movs	r3, #1
 8005fec:	e073      	b.n	80060d6 <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	7f5b      	ldrb	r3, [r3, #29]
 8005ff2:	b2db      	uxtb	r3, r3
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d105      	bne.n	8006004 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8005ffe:	6878      	ldr	r0, [r7, #4]
 8006000:	f7fb fd1c 	bl	8001a3c <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	2202      	movs	r2, #2
 8006008:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	68db      	ldr	r3, [r3, #12]
 8006010:	f003 0310 	and.w	r3, r3, #16
 8006014:	2b10      	cmp	r3, #16
 8006016:	d055      	beq.n	80060c4 <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	22ca      	movs	r2, #202	@ 0xca
 800601e:	625a      	str	r2, [r3, #36]	@ 0x24
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	2253      	movs	r2, #83	@ 0x53
 8006026:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8006028:	6878      	ldr	r0, [r7, #4]
 800602a:	f000 fa49 	bl	80064c0 <RTC_EnterInitMode>
 800602e:	4603      	mov	r3, r0
 8006030:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8006032:	7bfb      	ldrb	r3, [r7, #15]
 8006034:	2b00      	cmp	r3, #0
 8006036:	d12c      	bne.n	8006092 <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	689b      	ldr	r3, [r3, #8]
 800603e:	687a      	ldr	r2, [r7, #4]
 8006040:	6812      	ldr	r2, [r2, #0]
 8006042:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8006046:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800604a:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	6899      	ldr	r1, [r3, #8]
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	685a      	ldr	r2, [r3, #4]
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	691b      	ldr	r3, [r3, #16]
 800605a:	431a      	orrs	r2, r3
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	695b      	ldr	r3, [r3, #20]
 8006060:	431a      	orrs	r2, r3
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	430a      	orrs	r2, r1
 8006068:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	687a      	ldr	r2, [r7, #4]
 8006070:	68d2      	ldr	r2, [r2, #12]
 8006072:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	6919      	ldr	r1, [r3, #16]
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	689b      	ldr	r3, [r3, #8]
 800607e:	041a      	lsls	r2, r3, #16
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	430a      	orrs	r2, r1
 8006086:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8006088:	6878      	ldr	r0, [r7, #4]
 800608a:	f000 fa50 	bl	800652e <RTC_ExitInitMode>
 800608e:	4603      	mov	r3, r0
 8006090:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8006092:	7bfb      	ldrb	r3, [r7, #15]
 8006094:	2b00      	cmp	r3, #0
 8006096:	d110      	bne.n	80060ba <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80060a6:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	699a      	ldr	r2, [r3, #24]
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	430a      	orrs	r2, r1
 80060b8:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	22ff      	movs	r2, #255	@ 0xff
 80060c0:	625a      	str	r2, [r3, #36]	@ 0x24
 80060c2:	e001      	b.n	80060c8 <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 80060c4:	2300      	movs	r3, #0
 80060c6:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80060c8:	7bfb      	ldrb	r3, [r7, #15]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d102      	bne.n	80060d4 <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	2201      	movs	r2, #1
 80060d2:	775a      	strb	r2, [r3, #29]
  }

  return status;
 80060d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80060d6:	4618      	mov	r0, r3
 80060d8:	3710      	adds	r7, #16
 80060da:	46bd      	mov	sp, r7
 80060dc:	bd80      	pop	{r7, pc}

080060de <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80060de:	b590      	push	{r4, r7, lr}
 80060e0:	b087      	sub	sp, #28
 80060e2:	af00      	add	r7, sp, #0
 80060e4:	60f8      	str	r0, [r7, #12]
 80060e6:	60b9      	str	r1, [r7, #8]
 80060e8:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80060ea:	2300      	movs	r3, #0
 80060ec:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	7f1b      	ldrb	r3, [r3, #28]
 80060f2:	2b01      	cmp	r3, #1
 80060f4:	d101      	bne.n	80060fa <HAL_RTC_SetTime+0x1c>
 80060f6:	2302      	movs	r3, #2
 80060f8:	e087      	b.n	800620a <HAL_RTC_SetTime+0x12c>
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	2201      	movs	r2, #1
 80060fe:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	2202      	movs	r2, #2
 8006104:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	2b00      	cmp	r3, #0
 800610a:	d126      	bne.n	800615a <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	689b      	ldr	r3, [r3, #8]
 8006112:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006116:	2b00      	cmp	r3, #0
 8006118:	d102      	bne.n	8006120 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800611a:	68bb      	ldr	r3, [r7, #8]
 800611c:	2200      	movs	r2, #0
 800611e:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8006120:	68bb      	ldr	r3, [r7, #8]
 8006122:	781b      	ldrb	r3, [r3, #0]
 8006124:	4618      	mov	r0, r3
 8006126:	f000 fa27 	bl	8006578 <RTC_ByteToBcd2>
 800612a:	4603      	mov	r3, r0
 800612c:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800612e:	68bb      	ldr	r3, [r7, #8]
 8006130:	785b      	ldrb	r3, [r3, #1]
 8006132:	4618      	mov	r0, r3
 8006134:	f000 fa20 	bl	8006578 <RTC_ByteToBcd2>
 8006138:	4603      	mov	r3, r0
 800613a:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800613c:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 800613e:	68bb      	ldr	r3, [r7, #8]
 8006140:	789b      	ldrb	r3, [r3, #2]
 8006142:	4618      	mov	r0, r3
 8006144:	f000 fa18 	bl	8006578 <RTC_ByteToBcd2>
 8006148:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800614a:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 800614e:	68bb      	ldr	r3, [r7, #8]
 8006150:	78db      	ldrb	r3, [r3, #3]
 8006152:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8006154:	4313      	orrs	r3, r2
 8006156:	617b      	str	r3, [r7, #20]
 8006158:	e018      	b.n	800618c <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	689b      	ldr	r3, [r3, #8]
 8006160:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006164:	2b00      	cmp	r3, #0
 8006166:	d102      	bne.n	800616e <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8006168:	68bb      	ldr	r3, [r7, #8]
 800616a:	2200      	movs	r2, #0
 800616c:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800616e:	68bb      	ldr	r3, [r7, #8]
 8006170:	781b      	ldrb	r3, [r3, #0]
 8006172:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8006174:	68bb      	ldr	r3, [r7, #8]
 8006176:	785b      	ldrb	r3, [r3, #1]
 8006178:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800617a:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 800617c:	68ba      	ldr	r2, [r7, #8]
 800617e:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8006180:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8006182:	68bb      	ldr	r3, [r7, #8]
 8006184:	78db      	ldrb	r3, [r3, #3]
 8006186:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8006188:	4313      	orrs	r3, r2
 800618a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	22ca      	movs	r2, #202	@ 0xca
 8006192:	625a      	str	r2, [r3, #36]	@ 0x24
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	2253      	movs	r2, #83	@ 0x53
 800619a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800619c:	68f8      	ldr	r0, [r7, #12]
 800619e:	f000 f98f 	bl	80064c0 <RTC_EnterInitMode>
 80061a2:	4603      	mov	r3, r0
 80061a4:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80061a6:	7cfb      	ldrb	r3, [r7, #19]
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d120      	bne.n	80061ee <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	681a      	ldr	r2, [r3, #0]
 80061b0:	697b      	ldr	r3, [r7, #20]
 80061b2:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 80061b6:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 80061ba:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	689a      	ldr	r2, [r3, #8]
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80061ca:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	6899      	ldr	r1, [r3, #8]
 80061d2:	68bb      	ldr	r3, [r7, #8]
 80061d4:	68da      	ldr	r2, [r3, #12]
 80061d6:	68bb      	ldr	r3, [r7, #8]
 80061d8:	691b      	ldr	r3, [r3, #16]
 80061da:	431a      	orrs	r2, r3
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	430a      	orrs	r2, r1
 80061e2:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80061e4:	68f8      	ldr	r0, [r7, #12]
 80061e6:	f000 f9a2 	bl	800652e <RTC_ExitInitMode>
 80061ea:	4603      	mov	r3, r0
 80061ec:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80061ee:	7cfb      	ldrb	r3, [r7, #19]
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d102      	bne.n	80061fa <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	2201      	movs	r2, #1
 80061f8:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	22ff      	movs	r2, #255	@ 0xff
 8006200:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	2200      	movs	r2, #0
 8006206:	771a      	strb	r2, [r3, #28]

  return status;
 8006208:	7cfb      	ldrb	r3, [r7, #19]
}
 800620a:	4618      	mov	r0, r3
 800620c:	371c      	adds	r7, #28
 800620e:	46bd      	mov	sp, r7
 8006210:	bd90      	pop	{r4, r7, pc}

08006212 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006212:	b580      	push	{r7, lr}
 8006214:	b086      	sub	sp, #24
 8006216:	af00      	add	r7, sp, #0
 8006218:	60f8      	str	r0, [r7, #12]
 800621a:	60b9      	str	r1, [r7, #8]
 800621c:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800621e:	2300      	movs	r3, #0
 8006220:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006228:	68bb      	ldr	r3, [r7, #8]
 800622a:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	691b      	ldr	r3, [r3, #16]
 8006232:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8006236:	68bb      	ldr	r3, [r7, #8]
 8006238:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8006244:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8006248:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 800624a:	697b      	ldr	r3, [r7, #20]
 800624c:	0c1b      	lsrs	r3, r3, #16
 800624e:	b2db      	uxtb	r3, r3
 8006250:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006254:	b2da      	uxtb	r2, r3
 8006256:	68bb      	ldr	r3, [r7, #8]
 8006258:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800625a:	697b      	ldr	r3, [r7, #20]
 800625c:	0a1b      	lsrs	r3, r3, #8
 800625e:	b2db      	uxtb	r3, r3
 8006260:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006264:	b2da      	uxtb	r2, r3
 8006266:	68bb      	ldr	r3, [r7, #8]
 8006268:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 800626a:	697b      	ldr	r3, [r7, #20]
 800626c:	b2db      	uxtb	r3, r3
 800626e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006272:	b2da      	uxtb	r2, r3
 8006274:	68bb      	ldr	r3, [r7, #8]
 8006276:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8006278:	697b      	ldr	r3, [r7, #20]
 800627a:	0d9b      	lsrs	r3, r3, #22
 800627c:	b2db      	uxtb	r3, r3
 800627e:	f003 0301 	and.w	r3, r3, #1
 8006282:	b2da      	uxtb	r2, r3
 8006284:	68bb      	ldr	r3, [r7, #8]
 8006286:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2b00      	cmp	r3, #0
 800628c:	d11a      	bne.n	80062c4 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800628e:	68bb      	ldr	r3, [r7, #8]
 8006290:	781b      	ldrb	r3, [r3, #0]
 8006292:	4618      	mov	r0, r3
 8006294:	f000 f98e 	bl	80065b4 <RTC_Bcd2ToByte>
 8006298:	4603      	mov	r3, r0
 800629a:	461a      	mov	r2, r3
 800629c:	68bb      	ldr	r3, [r7, #8]
 800629e:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80062a0:	68bb      	ldr	r3, [r7, #8]
 80062a2:	785b      	ldrb	r3, [r3, #1]
 80062a4:	4618      	mov	r0, r3
 80062a6:	f000 f985 	bl	80065b4 <RTC_Bcd2ToByte>
 80062aa:	4603      	mov	r3, r0
 80062ac:	461a      	mov	r2, r3
 80062ae:	68bb      	ldr	r3, [r7, #8]
 80062b0:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80062b2:	68bb      	ldr	r3, [r7, #8]
 80062b4:	789b      	ldrb	r3, [r3, #2]
 80062b6:	4618      	mov	r0, r3
 80062b8:	f000 f97c 	bl	80065b4 <RTC_Bcd2ToByte>
 80062bc:	4603      	mov	r3, r0
 80062be:	461a      	mov	r2, r3
 80062c0:	68bb      	ldr	r3, [r7, #8]
 80062c2:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80062c4:	2300      	movs	r3, #0
}
 80062c6:	4618      	mov	r0, r3
 80062c8:	3718      	adds	r7, #24
 80062ca:	46bd      	mov	sp, r7
 80062cc:	bd80      	pop	{r7, pc}

080062ce <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80062ce:	b590      	push	{r4, r7, lr}
 80062d0:	b087      	sub	sp, #28
 80062d2:	af00      	add	r7, sp, #0
 80062d4:	60f8      	str	r0, [r7, #12]
 80062d6:	60b9      	str	r1, [r7, #8]
 80062d8:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80062da:	2300      	movs	r3, #0
 80062dc:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	7f1b      	ldrb	r3, [r3, #28]
 80062e2:	2b01      	cmp	r3, #1
 80062e4:	d101      	bne.n	80062ea <HAL_RTC_SetDate+0x1c>
 80062e6:	2302      	movs	r3, #2
 80062e8:	e071      	b.n	80063ce <HAL_RTC_SetDate+0x100>
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	2201      	movs	r2, #1
 80062ee:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	2202      	movs	r2, #2
 80062f4:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d10e      	bne.n	800631a <HAL_RTC_SetDate+0x4c>
 80062fc:	68bb      	ldr	r3, [r7, #8]
 80062fe:	785b      	ldrb	r3, [r3, #1]
 8006300:	f003 0310 	and.w	r3, r3, #16
 8006304:	2b00      	cmp	r3, #0
 8006306:	d008      	beq.n	800631a <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8006308:	68bb      	ldr	r3, [r7, #8]
 800630a:	785b      	ldrb	r3, [r3, #1]
 800630c:	f023 0310 	bic.w	r3, r3, #16
 8006310:	b2db      	uxtb	r3, r3
 8006312:	330a      	adds	r3, #10
 8006314:	b2da      	uxtb	r2, r3
 8006316:	68bb      	ldr	r3, [r7, #8]
 8006318:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	2b00      	cmp	r3, #0
 800631e:	d11c      	bne.n	800635a <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8006320:	68bb      	ldr	r3, [r7, #8]
 8006322:	78db      	ldrb	r3, [r3, #3]
 8006324:	4618      	mov	r0, r3
 8006326:	f000 f927 	bl	8006578 <RTC_ByteToBcd2>
 800632a:	4603      	mov	r3, r0
 800632c:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800632e:	68bb      	ldr	r3, [r7, #8]
 8006330:	785b      	ldrb	r3, [r3, #1]
 8006332:	4618      	mov	r0, r3
 8006334:	f000 f920 	bl	8006578 <RTC_ByteToBcd2>
 8006338:	4603      	mov	r3, r0
 800633a:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800633c:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 800633e:	68bb      	ldr	r3, [r7, #8]
 8006340:	789b      	ldrb	r3, [r3, #2]
 8006342:	4618      	mov	r0, r3
 8006344:	f000 f918 	bl	8006578 <RTC_ByteToBcd2>
 8006348:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800634a:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800634e:	68bb      	ldr	r3, [r7, #8]
 8006350:	781b      	ldrb	r3, [r3, #0]
 8006352:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8006354:	4313      	orrs	r3, r2
 8006356:	617b      	str	r3, [r7, #20]
 8006358:	e00e      	b.n	8006378 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800635a:	68bb      	ldr	r3, [r7, #8]
 800635c:	78db      	ldrb	r3, [r3, #3]
 800635e:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8006360:	68bb      	ldr	r3, [r7, #8]
 8006362:	785b      	ldrb	r3, [r3, #1]
 8006364:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8006366:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8006368:	68ba      	ldr	r2, [r7, #8]
 800636a:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800636c:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800636e:	68bb      	ldr	r3, [r7, #8]
 8006370:	781b      	ldrb	r3, [r3, #0]
 8006372:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8006374:	4313      	orrs	r3, r2
 8006376:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	22ca      	movs	r2, #202	@ 0xca
 800637e:	625a      	str	r2, [r3, #36]	@ 0x24
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	2253      	movs	r2, #83	@ 0x53
 8006386:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8006388:	68f8      	ldr	r0, [r7, #12]
 800638a:	f000 f899 	bl	80064c0 <RTC_EnterInitMode>
 800638e:	4603      	mov	r3, r0
 8006390:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8006392:	7cfb      	ldrb	r3, [r7, #19]
 8006394:	2b00      	cmp	r3, #0
 8006396:	d10c      	bne.n	80063b2 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	681a      	ldr	r2, [r3, #0]
 800639c:	697b      	ldr	r3, [r7, #20]
 800639e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80063a2:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80063a6:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80063a8:	68f8      	ldr	r0, [r7, #12]
 80063aa:	f000 f8c0 	bl	800652e <RTC_ExitInitMode>
 80063ae:	4603      	mov	r3, r0
 80063b0:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80063b2:	7cfb      	ldrb	r3, [r7, #19]
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d102      	bne.n	80063be <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	2201      	movs	r2, #1
 80063bc:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	22ff      	movs	r2, #255	@ 0xff
 80063c4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	2200      	movs	r2, #0
 80063ca:	771a      	strb	r2, [r3, #28]

  return status;
 80063cc:	7cfb      	ldrb	r3, [r7, #19]
}
 80063ce:	4618      	mov	r0, r3
 80063d0:	371c      	adds	r7, #28
 80063d2:	46bd      	mov	sp, r7
 80063d4:	bd90      	pop	{r4, r7, pc}

080063d6 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80063d6:	b580      	push	{r7, lr}
 80063d8:	b086      	sub	sp, #24
 80063da:	af00      	add	r7, sp, #0
 80063dc:	60f8      	str	r0, [r7, #12]
 80063de:	60b9      	str	r1, [r7, #8]
 80063e0:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80063e2:	2300      	movs	r3, #0
 80063e4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	685b      	ldr	r3, [r3, #4]
 80063ec:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80063f0:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80063f4:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80063f6:	697b      	ldr	r3, [r7, #20]
 80063f8:	0c1b      	lsrs	r3, r3, #16
 80063fa:	b2da      	uxtb	r2, r3
 80063fc:	68bb      	ldr	r3, [r7, #8]
 80063fe:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8006400:	697b      	ldr	r3, [r7, #20]
 8006402:	0a1b      	lsrs	r3, r3, #8
 8006404:	b2db      	uxtb	r3, r3
 8006406:	f003 031f 	and.w	r3, r3, #31
 800640a:	b2da      	uxtb	r2, r3
 800640c:	68bb      	ldr	r3, [r7, #8]
 800640e:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8006410:	697b      	ldr	r3, [r7, #20]
 8006412:	b2db      	uxtb	r3, r3
 8006414:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006418:	b2da      	uxtb	r2, r3
 800641a:	68bb      	ldr	r3, [r7, #8]
 800641c:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 800641e:	697b      	ldr	r3, [r7, #20]
 8006420:	0b5b      	lsrs	r3, r3, #13
 8006422:	b2db      	uxtb	r3, r3
 8006424:	f003 0307 	and.w	r3, r3, #7
 8006428:	b2da      	uxtb	r2, r3
 800642a:	68bb      	ldr	r3, [r7, #8]
 800642c:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	2b00      	cmp	r3, #0
 8006432:	d11a      	bne.n	800646a <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8006434:	68bb      	ldr	r3, [r7, #8]
 8006436:	78db      	ldrb	r3, [r3, #3]
 8006438:	4618      	mov	r0, r3
 800643a:	f000 f8bb 	bl	80065b4 <RTC_Bcd2ToByte>
 800643e:	4603      	mov	r3, r0
 8006440:	461a      	mov	r2, r3
 8006442:	68bb      	ldr	r3, [r7, #8]
 8006444:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8006446:	68bb      	ldr	r3, [r7, #8]
 8006448:	785b      	ldrb	r3, [r3, #1]
 800644a:	4618      	mov	r0, r3
 800644c:	f000 f8b2 	bl	80065b4 <RTC_Bcd2ToByte>
 8006450:	4603      	mov	r3, r0
 8006452:	461a      	mov	r2, r3
 8006454:	68bb      	ldr	r3, [r7, #8]
 8006456:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8006458:	68bb      	ldr	r3, [r7, #8]
 800645a:	789b      	ldrb	r3, [r3, #2]
 800645c:	4618      	mov	r0, r3
 800645e:	f000 f8a9 	bl	80065b4 <RTC_Bcd2ToByte>
 8006462:	4603      	mov	r3, r0
 8006464:	461a      	mov	r2, r3
 8006466:	68bb      	ldr	r3, [r7, #8]
 8006468:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800646a:	2300      	movs	r3, #0
}
 800646c:	4618      	mov	r0, r3
 800646e:	3718      	adds	r7, #24
 8006470:	46bd      	mov	sp, r7
 8006472:	bd80      	pop	{r7, pc}

08006474 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8006474:	b580      	push	{r7, lr}
 8006476:	b084      	sub	sp, #16
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800647c:	2300      	movs	r3, #0
 800647e:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	4a0d      	ldr	r2, [pc, #52]	@ (80064bc <HAL_RTC_WaitForSynchro+0x48>)
 8006486:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006488:	f7fb fd20 	bl	8001ecc <HAL_GetTick>
 800648c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800648e:	e009      	b.n	80064a4 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006490:	f7fb fd1c 	bl	8001ecc <HAL_GetTick>
 8006494:	4602      	mov	r2, r0
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	1ad3      	subs	r3, r2, r3
 800649a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800649e:	d901      	bls.n	80064a4 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 80064a0:	2303      	movs	r3, #3
 80064a2:	e007      	b.n	80064b4 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	68db      	ldr	r3, [r3, #12]
 80064aa:	f003 0320 	and.w	r3, r3, #32
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d0ee      	beq.n	8006490 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 80064b2:	2300      	movs	r3, #0
}
 80064b4:	4618      	mov	r0, r3
 80064b6:	3710      	adds	r7, #16
 80064b8:	46bd      	mov	sp, r7
 80064ba:	bd80      	pop	{r7, pc}
 80064bc:	00013f5f 	.word	0x00013f5f

080064c0 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80064c0:	b580      	push	{r7, lr}
 80064c2:	b084      	sub	sp, #16
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80064c8:	2300      	movs	r3, #0
 80064ca:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80064cc:	2300      	movs	r3, #0
 80064ce:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	68db      	ldr	r3, [r3, #12]
 80064d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d122      	bne.n	8006524 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	68da      	ldr	r2, [r3, #12]
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80064ec:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80064ee:	f7fb fced 	bl	8001ecc <HAL_GetTick>
 80064f2:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80064f4:	e00c      	b.n	8006510 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80064f6:	f7fb fce9 	bl	8001ecc <HAL_GetTick>
 80064fa:	4602      	mov	r2, r0
 80064fc:	68bb      	ldr	r3, [r7, #8]
 80064fe:	1ad3      	subs	r3, r2, r3
 8006500:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006504:	d904      	bls.n	8006510 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	2204      	movs	r2, #4
 800650a:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 800650c:	2301      	movs	r3, #1
 800650e:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	68db      	ldr	r3, [r3, #12]
 8006516:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800651a:	2b00      	cmp	r3, #0
 800651c:	d102      	bne.n	8006524 <RTC_EnterInitMode+0x64>
 800651e:	7bfb      	ldrb	r3, [r7, #15]
 8006520:	2b01      	cmp	r3, #1
 8006522:	d1e8      	bne.n	80064f6 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8006524:	7bfb      	ldrb	r3, [r7, #15]
}
 8006526:	4618      	mov	r0, r3
 8006528:	3710      	adds	r7, #16
 800652a:	46bd      	mov	sp, r7
 800652c:	bd80      	pop	{r7, pc}

0800652e <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800652e:	b580      	push	{r7, lr}
 8006530:	b084      	sub	sp, #16
 8006532:	af00      	add	r7, sp, #0
 8006534:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006536:	2300      	movs	r3, #0
 8006538:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	68da      	ldr	r2, [r3, #12]
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006548:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	689b      	ldr	r3, [r3, #8]
 8006550:	f003 0320 	and.w	r3, r3, #32
 8006554:	2b00      	cmp	r3, #0
 8006556:	d10a      	bne.n	800656e <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006558:	6878      	ldr	r0, [r7, #4]
 800655a:	f7ff ff8b 	bl	8006474 <HAL_RTC_WaitForSynchro>
 800655e:	4603      	mov	r3, r0
 8006560:	2b00      	cmp	r3, #0
 8006562:	d004      	beq.n	800656e <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	2204      	movs	r2, #4
 8006568:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800656a:	2301      	movs	r3, #1
 800656c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800656e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006570:	4618      	mov	r0, r3
 8006572:	3710      	adds	r7, #16
 8006574:	46bd      	mov	sp, r7
 8006576:	bd80      	pop	{r7, pc}

08006578 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8006578:	b480      	push	{r7}
 800657a:	b085      	sub	sp, #20
 800657c:	af00      	add	r7, sp, #0
 800657e:	4603      	mov	r3, r0
 8006580:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8006582:	2300      	movs	r3, #0
 8006584:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8006586:	e005      	b.n	8006594 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	3301      	adds	r3, #1
 800658c:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 800658e:	79fb      	ldrb	r3, [r7, #7]
 8006590:	3b0a      	subs	r3, #10
 8006592:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8006594:	79fb      	ldrb	r3, [r7, #7]
 8006596:	2b09      	cmp	r3, #9
 8006598:	d8f6      	bhi.n	8006588 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	b2db      	uxtb	r3, r3
 800659e:	011b      	lsls	r3, r3, #4
 80065a0:	b2da      	uxtb	r2, r3
 80065a2:	79fb      	ldrb	r3, [r7, #7]
 80065a4:	4313      	orrs	r3, r2
 80065a6:	b2db      	uxtb	r3, r3
}
 80065a8:	4618      	mov	r0, r3
 80065aa:	3714      	adds	r7, #20
 80065ac:	46bd      	mov	sp, r7
 80065ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b2:	4770      	bx	lr

080065b4 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 80065b4:	b480      	push	{r7}
 80065b6:	b085      	sub	sp, #20
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	4603      	mov	r3, r0
 80065bc:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 80065be:	2300      	movs	r3, #0
 80065c0:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 80065c2:	79fb      	ldrb	r3, [r7, #7]
 80065c4:	091b      	lsrs	r3, r3, #4
 80065c6:	b2db      	uxtb	r3, r3
 80065c8:	461a      	mov	r2, r3
 80065ca:	4613      	mov	r3, r2
 80065cc:	009b      	lsls	r3, r3, #2
 80065ce:	4413      	add	r3, r2
 80065d0:	005b      	lsls	r3, r3, #1
 80065d2:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	b2da      	uxtb	r2, r3
 80065d8:	79fb      	ldrb	r3, [r7, #7]
 80065da:	f003 030f 	and.w	r3, r3, #15
 80065de:	b2db      	uxtb	r3, r3
 80065e0:	4413      	add	r3, r2
 80065e2:	b2db      	uxtb	r3, r3
}
 80065e4:	4618      	mov	r0, r3
 80065e6:	3714      	adds	r7, #20
 80065e8:	46bd      	mov	sp, r7
 80065ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ee:	4770      	bx	lr

080065f0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80065f0:	b580      	push	{r7, lr}
 80065f2:	b082      	sub	sp, #8
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d101      	bne.n	8006602 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80065fe:	2301      	movs	r3, #1
 8006600:	e07b      	b.n	80066fa <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006606:	2b00      	cmp	r3, #0
 8006608:	d108      	bne.n	800661c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	685b      	ldr	r3, [r3, #4]
 800660e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006612:	d009      	beq.n	8006628 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	2200      	movs	r2, #0
 8006618:	61da      	str	r2, [r3, #28]
 800661a:	e005      	b.n	8006628 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	2200      	movs	r2, #0
 8006620:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	2200      	movs	r2, #0
 8006626:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	2200      	movs	r2, #0
 800662c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006634:	b2db      	uxtb	r3, r3
 8006636:	2b00      	cmp	r3, #0
 8006638:	d106      	bne.n	8006648 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	2200      	movs	r2, #0
 800663e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006642:	6878      	ldr	r0, [r7, #4]
 8006644:	f7fb fa26 	bl	8001a94 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	2202      	movs	r2, #2
 800664c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	681a      	ldr	r2, [r3, #0]
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800665e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	685b      	ldr	r3, [r3, #4]
 8006664:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	689b      	ldr	r3, [r3, #8]
 800666c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006670:	431a      	orrs	r2, r3
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	68db      	ldr	r3, [r3, #12]
 8006676:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800667a:	431a      	orrs	r2, r3
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	691b      	ldr	r3, [r3, #16]
 8006680:	f003 0302 	and.w	r3, r3, #2
 8006684:	431a      	orrs	r2, r3
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	695b      	ldr	r3, [r3, #20]
 800668a:	f003 0301 	and.w	r3, r3, #1
 800668e:	431a      	orrs	r2, r3
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	699b      	ldr	r3, [r3, #24]
 8006694:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006698:	431a      	orrs	r2, r3
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	69db      	ldr	r3, [r3, #28]
 800669e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80066a2:	431a      	orrs	r2, r3
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	6a1b      	ldr	r3, [r3, #32]
 80066a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80066ac:	ea42 0103 	orr.w	r1, r2, r3
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066b4:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	430a      	orrs	r2, r1
 80066be:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	699b      	ldr	r3, [r3, #24]
 80066c4:	0c1b      	lsrs	r3, r3, #16
 80066c6:	f003 0104 	and.w	r1, r3, #4
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066ce:	f003 0210 	and.w	r2, r3, #16
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	430a      	orrs	r2, r1
 80066d8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	69da      	ldr	r2, [r3, #28]
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80066e8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	2200      	movs	r2, #0
 80066ee:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	2201      	movs	r2, #1
 80066f4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80066f8:	2300      	movs	r3, #0
}
 80066fa:	4618      	mov	r0, r3
 80066fc:	3708      	adds	r7, #8
 80066fe:	46bd      	mov	sp, r7
 8006700:	bd80      	pop	{r7, pc}
	...

08006704 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8006704:	b580      	push	{r7, lr}
 8006706:	b086      	sub	sp, #24
 8006708:	af00      	add	r7, sp, #0
 800670a:	60f8      	str	r0, [r7, #12]
 800670c:	60b9      	str	r1, [r7, #8]
 800670e:	607a      	str	r2, [r7, #4]
 8006710:	807b      	strh	r3, [r7, #2]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006718:	75fb      	strb	r3, [r7, #23]
  tmp_mode            = hspi->Init.Mode;
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	685b      	ldr	r3, [r3, #4]
 800671e:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8006720:	7dfb      	ldrb	r3, [r7, #23]
 8006722:	2b01      	cmp	r3, #1
 8006724:	d00c      	beq.n	8006740 <HAL_SPI_TransmitReceive_DMA+0x3c>
 8006726:	693b      	ldr	r3, [r7, #16]
 8006728:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800672c:	d106      	bne.n	800673c <HAL_SPI_TransmitReceive_DMA+0x38>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	689b      	ldr	r3, [r3, #8]
 8006732:	2b00      	cmp	r3, #0
 8006734:	d102      	bne.n	800673c <HAL_SPI_TransmitReceive_DMA+0x38>
 8006736:	7dfb      	ldrb	r3, [r7, #23]
 8006738:	2b04      	cmp	r3, #4
 800673a:	d001      	beq.n	8006740 <HAL_SPI_TransmitReceive_DMA+0x3c>
  {
    return HAL_BUSY;
 800673c:	2302      	movs	r3, #2
 800673e:	e0cf      	b.n	80068e0 <HAL_SPI_TransmitReceive_DMA+0x1dc>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006740:	68bb      	ldr	r3, [r7, #8]
 8006742:	2b00      	cmp	r3, #0
 8006744:	d005      	beq.n	8006752 <HAL_SPI_TransmitReceive_DMA+0x4e>
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	2b00      	cmp	r3, #0
 800674a:	d002      	beq.n	8006752 <HAL_SPI_TransmitReceive_DMA+0x4e>
 800674c:	887b      	ldrh	r3, [r7, #2]
 800674e:	2b00      	cmp	r3, #0
 8006750:	d101      	bne.n	8006756 <HAL_SPI_TransmitReceive_DMA+0x52>
  {
    return HAL_ERROR;
 8006752:	2301      	movs	r3, #1
 8006754:	e0c4      	b.n	80068e0 <HAL_SPI_TransmitReceive_DMA+0x1dc>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800675c:	2b01      	cmp	r3, #1
 800675e:	d101      	bne.n	8006764 <HAL_SPI_TransmitReceive_DMA+0x60>
 8006760:	2302      	movs	r3, #2
 8006762:	e0bd      	b.n	80068e0 <HAL_SPI_TransmitReceive_DMA+0x1dc>
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	2201      	movs	r2, #1
 8006768:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006772:	b2db      	uxtb	r3, r3
 8006774:	2b04      	cmp	r3, #4
 8006776:	d003      	beq.n	8006780 <HAL_SPI_TransmitReceive_DMA+0x7c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	2205      	movs	r2, #5
 800677c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	2200      	movs	r2, #0
 8006784:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	68ba      	ldr	r2, [r7, #8]
 800678a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	887a      	ldrh	r2, [r7, #2]
 8006790:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	887a      	ldrh	r2, [r7, #2]
 8006796:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	687a      	ldr	r2, [r7, #4]
 800679c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	887a      	ldrh	r2, [r7, #2]
 80067a2:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	887a      	ldrh	r2, [r7, #2]
 80067a8:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	2200      	movs	r2, #0
 80067ae:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	2200      	movs	r2, #0
 80067b4:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80067bc:	b2db      	uxtb	r3, r3
 80067be:	2b04      	cmp	r3, #4
 80067c0:	d108      	bne.n	80067d4 <HAL_SPI_TransmitReceive_DMA+0xd0>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80067c6:	4a48      	ldr	r2, [pc, #288]	@ (80068e8 <HAL_SPI_TransmitReceive_DMA+0x1e4>)
 80067c8:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80067ce:	4a47      	ldr	r2, [pc, #284]	@ (80068ec <HAL_SPI_TransmitReceive_DMA+0x1e8>)
 80067d0:	63da      	str	r2, [r3, #60]	@ 0x3c
 80067d2:	e007      	b.n	80067e4 <HAL_SPI_TransmitReceive_DMA+0xe0>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80067d8:	4a45      	ldr	r2, [pc, #276]	@ (80068f0 <HAL_SPI_TransmitReceive_DMA+0x1ec>)
 80067da:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80067e0:	4a44      	ldr	r2, [pc, #272]	@ (80068f4 <HAL_SPI_TransmitReceive_DMA+0x1f0>)
 80067e2:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80067e8:	4a43      	ldr	r2, [pc, #268]	@ (80068f8 <HAL_SPI_TransmitReceive_DMA+0x1f4>)
 80067ea:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80067f0:	2200      	movs	r2, #0
 80067f2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	330c      	adds	r3, #12
 80067fe:	4619      	mov	r1, r3
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006804:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800680a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800680c:	f7fc f940 	bl	8002a90 <HAL_DMA_Start_IT>
 8006810:	4603      	mov	r3, r0
 8006812:	2b00      	cmp	r3, #0
 8006814:	d00b      	beq.n	800682e <HAL_SPI_TransmitReceive_DMA+0x12a>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800681a:	f043 0210 	orr.w	r2, r3, #16
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	2200      	movs	r2, #0
 8006826:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800682a:	2301      	movs	r3, #1
 800682c:	e058      	b.n	80068e0 <HAL_SPI_TransmitReceive_DMA+0x1dc>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	685a      	ldr	r2, [r3, #4]
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	f042 0201 	orr.w	r2, r2, #1
 800683c:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006842:	2200      	movs	r2, #0
 8006844:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800684a:	2200      	movs	r2, #0
 800684c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006852:	2200      	movs	r2, #0
 8006854:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800685a:	2200      	movs	r2, #0
 800685c:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006866:	4619      	mov	r1, r3
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	330c      	adds	r3, #12
 800686e:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006874:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8006876:	f7fc f90b 	bl	8002a90 <HAL_DMA_Start_IT>
 800687a:	4603      	mov	r3, r0
 800687c:	2b00      	cmp	r3, #0
 800687e:	d00b      	beq.n	8006898 <HAL_SPI_TransmitReceive_DMA+0x194>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006884:	f043 0210 	orr.w	r2, r3, #16
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	2200      	movs	r2, #0
 8006890:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8006894:	2301      	movs	r3, #1
 8006896:	e023      	b.n	80068e0 <HAL_SPI_TransmitReceive_DMA+0x1dc>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80068a2:	2b40      	cmp	r3, #64	@ 0x40
 80068a4:	d007      	beq.n	80068b6 <HAL_SPI_TransmitReceive_DMA+0x1b2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	681a      	ldr	r2, [r3, #0]
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80068b4:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	2200      	movs	r2, #0
 80068ba:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	685a      	ldr	r2, [r3, #4]
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	f042 0220 	orr.w	r2, r2, #32
 80068cc:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	685a      	ldr	r2, [r3, #4]
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	f042 0202 	orr.w	r2, r2, #2
 80068dc:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80068de:	2300      	movs	r3, #0
}
 80068e0:	4618      	mov	r0, r3
 80068e2:	3718      	adds	r7, #24
 80068e4:	46bd      	mov	sp, r7
 80068e6:	bd80      	pop	{r7, pc}
 80068e8:	08006b03 	.word	0x08006b03
 80068ec:	080069cb 	.word	0x080069cb
 80068f0:	08006b1f 	.word	0x08006b1f
 80068f4:	08006a73 	.word	0x08006a73
 80068f8:	08006b3b 	.word	0x08006b3b

080068fc <HAL_SPI_DMAStop>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DMAStop(SPI_HandleTypeDef *hspi)
{
 80068fc:	b580      	push	{r7, lr}
 80068fe:	b084      	sub	sp, #16
 8006900:	af00      	add	r7, sp, #0
 8006902:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006904:	2300      	movs	r3, #0
 8006906:	73fb      	strb	r3, [r7, #15]
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_SPI_TxCpltCallback() or HAL_SPI_RxCpltCallback() or HAL_SPI_TxRxCpltCallback()
     */

  /* Abort the SPI DMA tx Stream/Channel  */
  if (hspi->hdmatx != NULL)
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800690c:	2b00      	cmp	r3, #0
 800690e:	d00f      	beq.n	8006930 <HAL_SPI_DMAStop+0x34>
  {
    if (HAL_OK != HAL_DMA_Abort(hspi->hdmatx))
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006914:	4618      	mov	r0, r3
 8006916:	f7fc f913 	bl	8002b40 <HAL_DMA_Abort>
 800691a:	4603      	mov	r3, r0
 800691c:	2b00      	cmp	r3, #0
 800691e:	d007      	beq.n	8006930 <HAL_SPI_DMAStop+0x34>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006924:	f043 0210 	orr.w	r2, r3, #16
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	655a      	str	r2, [r3, #84]	@ 0x54
      errorcode = HAL_ERROR;
 800692c:	2301      	movs	r3, #1
 800692e:	73fb      	strb	r3, [r7, #15]
    }
  }
  /* Abort the SPI DMA rx Stream/Channel  */
  if (hspi->hdmarx != NULL)
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006934:	2b00      	cmp	r3, #0
 8006936:	d00f      	beq.n	8006958 <HAL_SPI_DMAStop+0x5c>
  {
    if (HAL_OK != HAL_DMA_Abort(hspi->hdmarx))
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800693c:	4618      	mov	r0, r3
 800693e:	f7fc f8ff 	bl	8002b40 <HAL_DMA_Abort>
 8006942:	4603      	mov	r3, r0
 8006944:	2b00      	cmp	r3, #0
 8006946:	d007      	beq.n	8006958 <HAL_SPI_DMAStop+0x5c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800694c:	f043 0210 	orr.w	r2, r3, #16
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	655a      	str	r2, [r3, #84]	@ 0x54
      errorcode = HAL_ERROR;
 8006954:	2301      	movs	r3, #1
 8006956:	73fb      	strb	r3, [r7, #15]
    }
  }

  /* Disable the SPI DMA Tx & Rx requests */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	685a      	ldr	r2, [r3, #4]
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	f022 0203 	bic.w	r2, r2, #3
 8006966:	605a      	str	r2, [r3, #4]
  hspi->State = HAL_SPI_STATE_READY;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	2201      	movs	r2, #1
 800696c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  return errorcode;
 8006970:	7bfb      	ldrb	r3, [r7, #15]
}
 8006972:	4618      	mov	r0, r3
 8006974:	3710      	adds	r7, #16
 8006976:	46bd      	mov	sp, r7
 8006978:	bd80      	pop	{r7, pc}

0800697a <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800697a:	b480      	push	{r7}
 800697c:	b083      	sub	sp, #12
 800697e:	af00      	add	r7, sp, #0
 8006980:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8006982:	bf00      	nop
 8006984:	370c      	adds	r7, #12
 8006986:	46bd      	mov	sp, r7
 8006988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698c:	4770      	bx	lr

0800698e <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800698e:	b480      	push	{r7}
 8006990:	b083      	sub	sp, #12
 8006992:	af00      	add	r7, sp, #0
 8006994:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8006996:	bf00      	nop
 8006998:	370c      	adds	r7, #12
 800699a:	46bd      	mov	sp, r7
 800699c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a0:	4770      	bx	lr

080069a2 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80069a2:	b480      	push	{r7}
 80069a4:	b083      	sub	sp, #12
 80069a6:	af00      	add	r7, sp, #0
 80069a8:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 80069aa:	bf00      	nop
 80069ac:	370c      	adds	r7, #12
 80069ae:	46bd      	mov	sp, r7
 80069b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b4:	4770      	bx	lr

080069b6 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80069b6:	b480      	push	{r7}
 80069b8:	b083      	sub	sp, #12
 80069ba:	af00      	add	r7, sp, #0
 80069bc:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80069be:	bf00      	nop
 80069c0:	370c      	adds	r7, #12
 80069c2:	46bd      	mov	sp, r7
 80069c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c8:	4770      	bx	lr

080069ca <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80069ca:	b580      	push	{r7, lr}
 80069cc:	b084      	sub	sp, #16
 80069ce:	af00      	add	r7, sp, #0
 80069d0:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069d6:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80069d8:	f7fb fa78 	bl	8001ecc <HAL_GetTick>
 80069dc:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80069e8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80069ec:	d03b      	beq.n	8006a66 <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	685a      	ldr	r2, [r3, #4]
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	f022 0220 	bic.w	r2, r2, #32
 80069fc:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	689b      	ldr	r3, [r3, #8]
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d10d      	bne.n	8006a22 <SPI_DMAReceiveCplt+0x58>
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	685b      	ldr	r3, [r3, #4]
 8006a0a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006a0e:	d108      	bne.n	8006a22 <SPI_DMAReceiveCplt+0x58>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	685a      	ldr	r2, [r3, #4]
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	f022 0203 	bic.w	r2, r2, #3
 8006a1e:	605a      	str	r2, [r3, #4]
 8006a20:	e007      	b.n	8006a32 <SPI_DMAReceiveCplt+0x68>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	685a      	ldr	r2, [r3, #4]
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	f022 0201 	bic.w	r2, r2, #1
 8006a30:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8006a32:	68ba      	ldr	r2, [r7, #8]
 8006a34:	2164      	movs	r1, #100	@ 0x64
 8006a36:	68f8      	ldr	r0, [r7, #12]
 8006a38:	f000 f928 	bl	8006c8c <SPI_EndRxTransaction>
 8006a3c:	4603      	mov	r3, r0
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d002      	beq.n	8006a48 <SPI_DMAReceiveCplt+0x7e>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	2220      	movs	r2, #32
 8006a46:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    hspi->RxXferCount = 0U;
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	2200      	movs	r2, #0
 8006a4c:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	2201      	movs	r2, #1
 8006a52:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d003      	beq.n	8006a66 <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8006a5e:	68f8      	ldr	r0, [r7, #12]
 8006a60:	f7ff ffa9 	bl	80069b6 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8006a64:	e002      	b.n	8006a6c <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8006a66:	68f8      	ldr	r0, [r7, #12]
 8006a68:	f7ff ff87 	bl	800697a <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006a6c:	3710      	adds	r7, #16
 8006a6e:	46bd      	mov	sp, r7
 8006a70:	bd80      	pop	{r7, pc}

08006a72 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006a72:	b580      	push	{r7, lr}
 8006a74:	b084      	sub	sp, #16
 8006a76:	af00      	add	r7, sp, #0
 8006a78:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a7e:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006a80:	f7fb fa24 	bl	8001ecc <HAL_GetTick>
 8006a84:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a90:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006a94:	d02f      	beq.n	8006af6 <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	685a      	ldr	r2, [r3, #4]
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	f022 0220 	bic.w	r2, r2, #32
 8006aa4:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8006aa6:	68ba      	ldr	r2, [r7, #8]
 8006aa8:	2164      	movs	r1, #100	@ 0x64
 8006aaa:	68f8      	ldr	r0, [r7, #12]
 8006aac:	f000 f954 	bl	8006d58 <SPI_EndRxTxTransaction>
 8006ab0:	4603      	mov	r3, r0
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d005      	beq.n	8006ac2 <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006aba:	f043 0220 	orr.w	r2, r3, #32
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	685a      	ldr	r2, [r3, #4]
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	f022 0203 	bic.w	r2, r2, #3
 8006ad0:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	2200      	movs	r2, #0
 8006ad6:	86da      	strh	r2, [r3, #54]	@ 0x36
    hspi->RxXferCount = 0U;
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	2200      	movs	r2, #0
 8006adc:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	2201      	movs	r2, #1
 8006ae2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d003      	beq.n	8006af6 <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8006aee:	68f8      	ldr	r0, [r7, #12]
 8006af0:	f7ff ff61 	bl	80069b6 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8006af4:	e002      	b.n	8006afc <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8006af6:	68f8      	ldr	r0, [r7, #12]
 8006af8:	f002 f85a 	bl	8008bb0 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006afc:	3710      	adds	r7, #16
 8006afe:	46bd      	mov	sp, r7
 8006b00:	bd80      	pop	{r7, pc}

08006b02 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006b02:	b580      	push	{r7, lr}
 8006b04:	b084      	sub	sp, #16
 8006b06:	af00      	add	r7, sp, #0
 8006b08:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b0e:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 8006b10:	68f8      	ldr	r0, [r7, #12]
 8006b12:	f7ff ff3c 	bl	800698e <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006b16:	bf00      	nop
 8006b18:	3710      	adds	r7, #16
 8006b1a:	46bd      	mov	sp, r7
 8006b1c:	bd80      	pop	{r7, pc}

08006b1e <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006b1e:	b580      	push	{r7, lr}
 8006b20:	b084      	sub	sp, #16
 8006b22:	af00      	add	r7, sp, #0
 8006b24:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b2a:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8006b2c:	68f8      	ldr	r0, [r7, #12]
 8006b2e:	f7ff ff38 	bl	80069a2 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006b32:	bf00      	nop
 8006b34:	3710      	adds	r7, #16
 8006b36:	46bd      	mov	sp, r7
 8006b38:	bd80      	pop	{r7, pc}

08006b3a <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8006b3a:	b580      	push	{r7, lr}
 8006b3c:	b084      	sub	sp, #16
 8006b3e:	af00      	add	r7, sp, #0
 8006b40:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b46:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	685a      	ldr	r2, [r3, #4]
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	f022 0203 	bic.w	r2, r2, #3
 8006b56:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b5c:	f043 0210 	orr.w	r2, r3, #16
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	2201      	movs	r2, #1
 8006b68:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8006b6c:	68f8      	ldr	r0, [r7, #12]
 8006b6e:	f7ff ff22 	bl	80069b6 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006b72:	bf00      	nop
 8006b74:	3710      	adds	r7, #16
 8006b76:	46bd      	mov	sp, r7
 8006b78:	bd80      	pop	{r7, pc}
	...

08006b7c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006b7c:	b580      	push	{r7, lr}
 8006b7e:	b088      	sub	sp, #32
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	60f8      	str	r0, [r7, #12]
 8006b84:	60b9      	str	r1, [r7, #8]
 8006b86:	603b      	str	r3, [r7, #0]
 8006b88:	4613      	mov	r3, r2
 8006b8a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006b8c:	f7fb f99e 	bl	8001ecc <HAL_GetTick>
 8006b90:	4602      	mov	r2, r0
 8006b92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b94:	1a9b      	subs	r3, r3, r2
 8006b96:	683a      	ldr	r2, [r7, #0]
 8006b98:	4413      	add	r3, r2
 8006b9a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006b9c:	f7fb f996 	bl	8001ecc <HAL_GetTick>
 8006ba0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006ba2:	4b39      	ldr	r3, [pc, #228]	@ (8006c88 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	015b      	lsls	r3, r3, #5
 8006ba8:	0d1b      	lsrs	r3, r3, #20
 8006baa:	69fa      	ldr	r2, [r7, #28]
 8006bac:	fb02 f303 	mul.w	r3, r2, r3
 8006bb0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006bb2:	e054      	b.n	8006c5e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006bb4:	683b      	ldr	r3, [r7, #0]
 8006bb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bba:	d050      	beq.n	8006c5e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006bbc:	f7fb f986 	bl	8001ecc <HAL_GetTick>
 8006bc0:	4602      	mov	r2, r0
 8006bc2:	69bb      	ldr	r3, [r7, #24]
 8006bc4:	1ad3      	subs	r3, r2, r3
 8006bc6:	69fa      	ldr	r2, [r7, #28]
 8006bc8:	429a      	cmp	r2, r3
 8006bca:	d902      	bls.n	8006bd2 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006bcc:	69fb      	ldr	r3, [r7, #28]
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d13d      	bne.n	8006c4e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	685a      	ldr	r2, [r3, #4]
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006be0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	685b      	ldr	r3, [r3, #4]
 8006be6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006bea:	d111      	bne.n	8006c10 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	689b      	ldr	r3, [r3, #8]
 8006bf0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006bf4:	d004      	beq.n	8006c00 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	689b      	ldr	r3, [r3, #8]
 8006bfa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006bfe:	d107      	bne.n	8006c10 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	681a      	ldr	r2, [r3, #0]
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006c0e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c14:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006c18:	d10f      	bne.n	8006c3a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	681a      	ldr	r2, [r3, #0]
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006c28:	601a      	str	r2, [r3, #0]
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	681a      	ldr	r2, [r3, #0]
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006c38:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	2201      	movs	r2, #1
 8006c3e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	2200      	movs	r2, #0
 8006c46:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8006c4a:	2303      	movs	r3, #3
 8006c4c:	e017      	b.n	8006c7e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006c4e:	697b      	ldr	r3, [r7, #20]
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d101      	bne.n	8006c58 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006c54:	2300      	movs	r3, #0
 8006c56:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006c58:	697b      	ldr	r3, [r7, #20]
 8006c5a:	3b01      	subs	r3, #1
 8006c5c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	689a      	ldr	r2, [r3, #8]
 8006c64:	68bb      	ldr	r3, [r7, #8]
 8006c66:	4013      	ands	r3, r2
 8006c68:	68ba      	ldr	r2, [r7, #8]
 8006c6a:	429a      	cmp	r2, r3
 8006c6c:	bf0c      	ite	eq
 8006c6e:	2301      	moveq	r3, #1
 8006c70:	2300      	movne	r3, #0
 8006c72:	b2db      	uxtb	r3, r3
 8006c74:	461a      	mov	r2, r3
 8006c76:	79fb      	ldrb	r3, [r7, #7]
 8006c78:	429a      	cmp	r2, r3
 8006c7a:	d19b      	bne.n	8006bb4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006c7c:	2300      	movs	r3, #0
}
 8006c7e:	4618      	mov	r0, r3
 8006c80:	3720      	adds	r7, #32
 8006c82:	46bd      	mov	sp, r7
 8006c84:	bd80      	pop	{r7, pc}
 8006c86:	bf00      	nop
 8006c88:	20000008 	.word	0x20000008

08006c8c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006c8c:	b580      	push	{r7, lr}
 8006c8e:	b086      	sub	sp, #24
 8006c90:	af02      	add	r7, sp, #8
 8006c92:	60f8      	str	r0, [r7, #12]
 8006c94:	60b9      	str	r1, [r7, #8]
 8006c96:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	685b      	ldr	r3, [r3, #4]
 8006c9c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006ca0:	d111      	bne.n	8006cc6 <SPI_EndRxTransaction+0x3a>
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	689b      	ldr	r3, [r3, #8]
 8006ca6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006caa:	d004      	beq.n	8006cb6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	689b      	ldr	r3, [r3, #8]
 8006cb0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006cb4:	d107      	bne.n	8006cc6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	681a      	ldr	r2, [r3, #0]
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006cc4:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	685b      	ldr	r3, [r3, #4]
 8006cca:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006cce:	d12a      	bne.n	8006d26 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	689b      	ldr	r3, [r3, #8]
 8006cd4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006cd8:	d012      	beq.n	8006d00 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	9300      	str	r3, [sp, #0]
 8006cde:	68bb      	ldr	r3, [r7, #8]
 8006ce0:	2200      	movs	r2, #0
 8006ce2:	2180      	movs	r1, #128	@ 0x80
 8006ce4:	68f8      	ldr	r0, [r7, #12]
 8006ce6:	f7ff ff49 	bl	8006b7c <SPI_WaitFlagStateUntilTimeout>
 8006cea:	4603      	mov	r3, r0
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d02d      	beq.n	8006d4c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006cf4:	f043 0220 	orr.w	r2, r3, #32
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8006cfc:	2303      	movs	r3, #3
 8006cfe:	e026      	b.n	8006d4e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	9300      	str	r3, [sp, #0]
 8006d04:	68bb      	ldr	r3, [r7, #8]
 8006d06:	2200      	movs	r2, #0
 8006d08:	2101      	movs	r1, #1
 8006d0a:	68f8      	ldr	r0, [r7, #12]
 8006d0c:	f7ff ff36 	bl	8006b7c <SPI_WaitFlagStateUntilTimeout>
 8006d10:	4603      	mov	r3, r0
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d01a      	beq.n	8006d4c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d1a:	f043 0220 	orr.w	r2, r3, #32
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8006d22:	2303      	movs	r3, #3
 8006d24:	e013      	b.n	8006d4e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	9300      	str	r3, [sp, #0]
 8006d2a:	68bb      	ldr	r3, [r7, #8]
 8006d2c:	2200      	movs	r2, #0
 8006d2e:	2101      	movs	r1, #1
 8006d30:	68f8      	ldr	r0, [r7, #12]
 8006d32:	f7ff ff23 	bl	8006b7c <SPI_WaitFlagStateUntilTimeout>
 8006d36:	4603      	mov	r3, r0
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d007      	beq.n	8006d4c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d40:	f043 0220 	orr.w	r2, r3, #32
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8006d48:	2303      	movs	r3, #3
 8006d4a:	e000      	b.n	8006d4e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8006d4c:	2300      	movs	r3, #0
}
 8006d4e:	4618      	mov	r0, r3
 8006d50:	3710      	adds	r7, #16
 8006d52:	46bd      	mov	sp, r7
 8006d54:	bd80      	pop	{r7, pc}
	...

08006d58 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006d58:	b580      	push	{r7, lr}
 8006d5a:	b088      	sub	sp, #32
 8006d5c:	af02      	add	r7, sp, #8
 8006d5e:	60f8      	str	r0, [r7, #12]
 8006d60:	60b9      	str	r1, [r7, #8]
 8006d62:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	9300      	str	r3, [sp, #0]
 8006d68:	68bb      	ldr	r3, [r7, #8]
 8006d6a:	2201      	movs	r2, #1
 8006d6c:	2102      	movs	r1, #2
 8006d6e:	68f8      	ldr	r0, [r7, #12]
 8006d70:	f7ff ff04 	bl	8006b7c <SPI_WaitFlagStateUntilTimeout>
 8006d74:	4603      	mov	r3, r0
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d007      	beq.n	8006d8a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d7e:	f043 0220 	orr.w	r2, r3, #32
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8006d86:	2303      	movs	r3, #3
 8006d88:	e032      	b.n	8006df0 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006d8a:	4b1b      	ldr	r3, [pc, #108]	@ (8006df8 <SPI_EndRxTxTransaction+0xa0>)
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	4a1b      	ldr	r2, [pc, #108]	@ (8006dfc <SPI_EndRxTxTransaction+0xa4>)
 8006d90:	fba2 2303 	umull	r2, r3, r2, r3
 8006d94:	0d5b      	lsrs	r3, r3, #21
 8006d96:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8006d9a:	fb02 f303 	mul.w	r3, r2, r3
 8006d9e:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	685b      	ldr	r3, [r3, #4]
 8006da4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006da8:	d112      	bne.n	8006dd0 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	9300      	str	r3, [sp, #0]
 8006dae:	68bb      	ldr	r3, [r7, #8]
 8006db0:	2200      	movs	r2, #0
 8006db2:	2180      	movs	r1, #128	@ 0x80
 8006db4:	68f8      	ldr	r0, [r7, #12]
 8006db6:	f7ff fee1 	bl	8006b7c <SPI_WaitFlagStateUntilTimeout>
 8006dba:	4603      	mov	r3, r0
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d016      	beq.n	8006dee <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006dc4:	f043 0220 	orr.w	r2, r3, #32
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8006dcc:	2303      	movs	r3, #3
 8006dce:	e00f      	b.n	8006df0 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006dd0:	697b      	ldr	r3, [r7, #20]
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d00a      	beq.n	8006dec <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8006dd6:	697b      	ldr	r3, [r7, #20]
 8006dd8:	3b01      	subs	r3, #1
 8006dda:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	689b      	ldr	r3, [r3, #8]
 8006de2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006de6:	2b80      	cmp	r3, #128	@ 0x80
 8006de8:	d0f2      	beq.n	8006dd0 <SPI_EndRxTxTransaction+0x78>
 8006dea:	e000      	b.n	8006dee <SPI_EndRxTxTransaction+0x96>
        break;
 8006dec:	bf00      	nop
  }

  return HAL_OK;
 8006dee:	2300      	movs	r3, #0
}
 8006df0:	4618      	mov	r0, r3
 8006df2:	3718      	adds	r7, #24
 8006df4:	46bd      	mov	sp, r7
 8006df6:	bd80      	pop	{r7, pc}
 8006df8:	20000008 	.word	0x20000008
 8006dfc:	165e9f81 	.word	0x165e9f81

08006e00 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006e00:	b580      	push	{r7, lr}
 8006e02:	b082      	sub	sp, #8
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d101      	bne.n	8006e12 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006e0e:	2301      	movs	r3, #1
 8006e10:	e042      	b.n	8006e98 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006e18:	b2db      	uxtb	r3, r3
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d106      	bne.n	8006e2c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	2200      	movs	r2, #0
 8006e22:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006e26:	6878      	ldr	r0, [r7, #4]
 8006e28:	f7fa fee0 	bl	8001bec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	2224      	movs	r2, #36	@ 0x24
 8006e30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	68da      	ldr	r2, [r3, #12]
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006e42:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006e44:	6878      	ldr	r0, [r7, #4]
 8006e46:	f000 f82b 	bl	8006ea0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	691a      	ldr	r2, [r3, #16]
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006e58:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	695a      	ldr	r2, [r3, #20]
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006e68:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	68da      	ldr	r2, [r3, #12]
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006e78:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	2200      	movs	r2, #0
 8006e7e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	2220      	movs	r2, #32
 8006e84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	2220      	movs	r2, #32
 8006e8c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	2200      	movs	r2, #0
 8006e94:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006e96:	2300      	movs	r3, #0
}
 8006e98:	4618      	mov	r0, r3
 8006e9a:	3708      	adds	r7, #8
 8006e9c:	46bd      	mov	sp, r7
 8006e9e:	bd80      	pop	{r7, pc}

08006ea0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006ea0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006ea4:	b0c0      	sub	sp, #256	@ 0x100
 8006ea6:	af00      	add	r7, sp, #0
 8006ea8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006eac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	691b      	ldr	r3, [r3, #16]
 8006eb4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006eb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ebc:	68d9      	ldr	r1, [r3, #12]
 8006ebe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ec2:	681a      	ldr	r2, [r3, #0]
 8006ec4:	ea40 0301 	orr.w	r3, r0, r1
 8006ec8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006eca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ece:	689a      	ldr	r2, [r3, #8]
 8006ed0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ed4:	691b      	ldr	r3, [r3, #16]
 8006ed6:	431a      	orrs	r2, r3
 8006ed8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006edc:	695b      	ldr	r3, [r3, #20]
 8006ede:	431a      	orrs	r2, r3
 8006ee0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ee4:	69db      	ldr	r3, [r3, #28]
 8006ee6:	4313      	orrs	r3, r2
 8006ee8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006eec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	68db      	ldr	r3, [r3, #12]
 8006ef4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006ef8:	f021 010c 	bic.w	r1, r1, #12
 8006efc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f00:	681a      	ldr	r2, [r3, #0]
 8006f02:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006f06:	430b      	orrs	r3, r1
 8006f08:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006f0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	695b      	ldr	r3, [r3, #20]
 8006f12:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8006f16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f1a:	6999      	ldr	r1, [r3, #24]
 8006f1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f20:	681a      	ldr	r2, [r3, #0]
 8006f22:	ea40 0301 	orr.w	r3, r0, r1
 8006f26:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006f28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f2c:	681a      	ldr	r2, [r3, #0]
 8006f2e:	4b8f      	ldr	r3, [pc, #572]	@ (800716c <UART_SetConfig+0x2cc>)
 8006f30:	429a      	cmp	r2, r3
 8006f32:	d005      	beq.n	8006f40 <UART_SetConfig+0xa0>
 8006f34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f38:	681a      	ldr	r2, [r3, #0]
 8006f3a:	4b8d      	ldr	r3, [pc, #564]	@ (8007170 <UART_SetConfig+0x2d0>)
 8006f3c:	429a      	cmp	r2, r3
 8006f3e:	d104      	bne.n	8006f4a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006f40:	f7fe ff2a 	bl	8005d98 <HAL_RCC_GetPCLK2Freq>
 8006f44:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006f48:	e003      	b.n	8006f52 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006f4a:	f7fe ff11 	bl	8005d70 <HAL_RCC_GetPCLK1Freq>
 8006f4e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006f52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f56:	69db      	ldr	r3, [r3, #28]
 8006f58:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006f5c:	f040 810c 	bne.w	8007178 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006f60:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006f64:	2200      	movs	r2, #0
 8006f66:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006f6a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8006f6e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8006f72:	4622      	mov	r2, r4
 8006f74:	462b      	mov	r3, r5
 8006f76:	1891      	adds	r1, r2, r2
 8006f78:	65b9      	str	r1, [r7, #88]	@ 0x58
 8006f7a:	415b      	adcs	r3, r3
 8006f7c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006f7e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006f82:	4621      	mov	r1, r4
 8006f84:	eb12 0801 	adds.w	r8, r2, r1
 8006f88:	4629      	mov	r1, r5
 8006f8a:	eb43 0901 	adc.w	r9, r3, r1
 8006f8e:	f04f 0200 	mov.w	r2, #0
 8006f92:	f04f 0300 	mov.w	r3, #0
 8006f96:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006f9a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006f9e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006fa2:	4690      	mov	r8, r2
 8006fa4:	4699      	mov	r9, r3
 8006fa6:	4623      	mov	r3, r4
 8006fa8:	eb18 0303 	adds.w	r3, r8, r3
 8006fac:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006fb0:	462b      	mov	r3, r5
 8006fb2:	eb49 0303 	adc.w	r3, r9, r3
 8006fb6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006fba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006fbe:	685b      	ldr	r3, [r3, #4]
 8006fc0:	2200      	movs	r2, #0
 8006fc2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006fc6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8006fca:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006fce:	460b      	mov	r3, r1
 8006fd0:	18db      	adds	r3, r3, r3
 8006fd2:	653b      	str	r3, [r7, #80]	@ 0x50
 8006fd4:	4613      	mov	r3, r2
 8006fd6:	eb42 0303 	adc.w	r3, r2, r3
 8006fda:	657b      	str	r3, [r7, #84]	@ 0x54
 8006fdc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006fe0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006fe4:	f7f9 fc82 	bl	80008ec <__aeabi_uldivmod>
 8006fe8:	4602      	mov	r2, r0
 8006fea:	460b      	mov	r3, r1
 8006fec:	4b61      	ldr	r3, [pc, #388]	@ (8007174 <UART_SetConfig+0x2d4>)
 8006fee:	fba3 2302 	umull	r2, r3, r3, r2
 8006ff2:	095b      	lsrs	r3, r3, #5
 8006ff4:	011c      	lsls	r4, r3, #4
 8006ff6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006ffa:	2200      	movs	r2, #0
 8006ffc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007000:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8007004:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8007008:	4642      	mov	r2, r8
 800700a:	464b      	mov	r3, r9
 800700c:	1891      	adds	r1, r2, r2
 800700e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8007010:	415b      	adcs	r3, r3
 8007012:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007014:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8007018:	4641      	mov	r1, r8
 800701a:	eb12 0a01 	adds.w	sl, r2, r1
 800701e:	4649      	mov	r1, r9
 8007020:	eb43 0b01 	adc.w	fp, r3, r1
 8007024:	f04f 0200 	mov.w	r2, #0
 8007028:	f04f 0300 	mov.w	r3, #0
 800702c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007030:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007034:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007038:	4692      	mov	sl, r2
 800703a:	469b      	mov	fp, r3
 800703c:	4643      	mov	r3, r8
 800703e:	eb1a 0303 	adds.w	r3, sl, r3
 8007042:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007046:	464b      	mov	r3, r9
 8007048:	eb4b 0303 	adc.w	r3, fp, r3
 800704c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007050:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007054:	685b      	ldr	r3, [r3, #4]
 8007056:	2200      	movs	r2, #0
 8007058:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800705c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8007060:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007064:	460b      	mov	r3, r1
 8007066:	18db      	adds	r3, r3, r3
 8007068:	643b      	str	r3, [r7, #64]	@ 0x40
 800706a:	4613      	mov	r3, r2
 800706c:	eb42 0303 	adc.w	r3, r2, r3
 8007070:	647b      	str	r3, [r7, #68]	@ 0x44
 8007072:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8007076:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800707a:	f7f9 fc37 	bl	80008ec <__aeabi_uldivmod>
 800707e:	4602      	mov	r2, r0
 8007080:	460b      	mov	r3, r1
 8007082:	4611      	mov	r1, r2
 8007084:	4b3b      	ldr	r3, [pc, #236]	@ (8007174 <UART_SetConfig+0x2d4>)
 8007086:	fba3 2301 	umull	r2, r3, r3, r1
 800708a:	095b      	lsrs	r3, r3, #5
 800708c:	2264      	movs	r2, #100	@ 0x64
 800708e:	fb02 f303 	mul.w	r3, r2, r3
 8007092:	1acb      	subs	r3, r1, r3
 8007094:	00db      	lsls	r3, r3, #3
 8007096:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800709a:	4b36      	ldr	r3, [pc, #216]	@ (8007174 <UART_SetConfig+0x2d4>)
 800709c:	fba3 2302 	umull	r2, r3, r3, r2
 80070a0:	095b      	lsrs	r3, r3, #5
 80070a2:	005b      	lsls	r3, r3, #1
 80070a4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80070a8:	441c      	add	r4, r3
 80070aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80070ae:	2200      	movs	r2, #0
 80070b0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80070b4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80070b8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80070bc:	4642      	mov	r2, r8
 80070be:	464b      	mov	r3, r9
 80070c0:	1891      	adds	r1, r2, r2
 80070c2:	63b9      	str	r1, [r7, #56]	@ 0x38
 80070c4:	415b      	adcs	r3, r3
 80070c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80070c8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80070cc:	4641      	mov	r1, r8
 80070ce:	1851      	adds	r1, r2, r1
 80070d0:	6339      	str	r1, [r7, #48]	@ 0x30
 80070d2:	4649      	mov	r1, r9
 80070d4:	414b      	adcs	r3, r1
 80070d6:	637b      	str	r3, [r7, #52]	@ 0x34
 80070d8:	f04f 0200 	mov.w	r2, #0
 80070dc:	f04f 0300 	mov.w	r3, #0
 80070e0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80070e4:	4659      	mov	r1, fp
 80070e6:	00cb      	lsls	r3, r1, #3
 80070e8:	4651      	mov	r1, sl
 80070ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80070ee:	4651      	mov	r1, sl
 80070f0:	00ca      	lsls	r2, r1, #3
 80070f2:	4610      	mov	r0, r2
 80070f4:	4619      	mov	r1, r3
 80070f6:	4603      	mov	r3, r0
 80070f8:	4642      	mov	r2, r8
 80070fa:	189b      	adds	r3, r3, r2
 80070fc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007100:	464b      	mov	r3, r9
 8007102:	460a      	mov	r2, r1
 8007104:	eb42 0303 	adc.w	r3, r2, r3
 8007108:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800710c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007110:	685b      	ldr	r3, [r3, #4]
 8007112:	2200      	movs	r2, #0
 8007114:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007118:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800711c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007120:	460b      	mov	r3, r1
 8007122:	18db      	adds	r3, r3, r3
 8007124:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007126:	4613      	mov	r3, r2
 8007128:	eb42 0303 	adc.w	r3, r2, r3
 800712c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800712e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007132:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8007136:	f7f9 fbd9 	bl	80008ec <__aeabi_uldivmod>
 800713a:	4602      	mov	r2, r0
 800713c:	460b      	mov	r3, r1
 800713e:	4b0d      	ldr	r3, [pc, #52]	@ (8007174 <UART_SetConfig+0x2d4>)
 8007140:	fba3 1302 	umull	r1, r3, r3, r2
 8007144:	095b      	lsrs	r3, r3, #5
 8007146:	2164      	movs	r1, #100	@ 0x64
 8007148:	fb01 f303 	mul.w	r3, r1, r3
 800714c:	1ad3      	subs	r3, r2, r3
 800714e:	00db      	lsls	r3, r3, #3
 8007150:	3332      	adds	r3, #50	@ 0x32
 8007152:	4a08      	ldr	r2, [pc, #32]	@ (8007174 <UART_SetConfig+0x2d4>)
 8007154:	fba2 2303 	umull	r2, r3, r2, r3
 8007158:	095b      	lsrs	r3, r3, #5
 800715a:	f003 0207 	and.w	r2, r3, #7
 800715e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	4422      	add	r2, r4
 8007166:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007168:	e106      	b.n	8007378 <UART_SetConfig+0x4d8>
 800716a:	bf00      	nop
 800716c:	40011000 	.word	0x40011000
 8007170:	40011400 	.word	0x40011400
 8007174:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007178:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800717c:	2200      	movs	r2, #0
 800717e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007182:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8007186:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800718a:	4642      	mov	r2, r8
 800718c:	464b      	mov	r3, r9
 800718e:	1891      	adds	r1, r2, r2
 8007190:	6239      	str	r1, [r7, #32]
 8007192:	415b      	adcs	r3, r3
 8007194:	627b      	str	r3, [r7, #36]	@ 0x24
 8007196:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800719a:	4641      	mov	r1, r8
 800719c:	1854      	adds	r4, r2, r1
 800719e:	4649      	mov	r1, r9
 80071a0:	eb43 0501 	adc.w	r5, r3, r1
 80071a4:	f04f 0200 	mov.w	r2, #0
 80071a8:	f04f 0300 	mov.w	r3, #0
 80071ac:	00eb      	lsls	r3, r5, #3
 80071ae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80071b2:	00e2      	lsls	r2, r4, #3
 80071b4:	4614      	mov	r4, r2
 80071b6:	461d      	mov	r5, r3
 80071b8:	4643      	mov	r3, r8
 80071ba:	18e3      	adds	r3, r4, r3
 80071bc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80071c0:	464b      	mov	r3, r9
 80071c2:	eb45 0303 	adc.w	r3, r5, r3
 80071c6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80071ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071ce:	685b      	ldr	r3, [r3, #4]
 80071d0:	2200      	movs	r2, #0
 80071d2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80071d6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80071da:	f04f 0200 	mov.w	r2, #0
 80071de:	f04f 0300 	mov.w	r3, #0
 80071e2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80071e6:	4629      	mov	r1, r5
 80071e8:	008b      	lsls	r3, r1, #2
 80071ea:	4621      	mov	r1, r4
 80071ec:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80071f0:	4621      	mov	r1, r4
 80071f2:	008a      	lsls	r2, r1, #2
 80071f4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80071f8:	f7f9 fb78 	bl	80008ec <__aeabi_uldivmod>
 80071fc:	4602      	mov	r2, r0
 80071fe:	460b      	mov	r3, r1
 8007200:	4b60      	ldr	r3, [pc, #384]	@ (8007384 <UART_SetConfig+0x4e4>)
 8007202:	fba3 2302 	umull	r2, r3, r3, r2
 8007206:	095b      	lsrs	r3, r3, #5
 8007208:	011c      	lsls	r4, r3, #4
 800720a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800720e:	2200      	movs	r2, #0
 8007210:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007214:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8007218:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800721c:	4642      	mov	r2, r8
 800721e:	464b      	mov	r3, r9
 8007220:	1891      	adds	r1, r2, r2
 8007222:	61b9      	str	r1, [r7, #24]
 8007224:	415b      	adcs	r3, r3
 8007226:	61fb      	str	r3, [r7, #28]
 8007228:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800722c:	4641      	mov	r1, r8
 800722e:	1851      	adds	r1, r2, r1
 8007230:	6139      	str	r1, [r7, #16]
 8007232:	4649      	mov	r1, r9
 8007234:	414b      	adcs	r3, r1
 8007236:	617b      	str	r3, [r7, #20]
 8007238:	f04f 0200 	mov.w	r2, #0
 800723c:	f04f 0300 	mov.w	r3, #0
 8007240:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007244:	4659      	mov	r1, fp
 8007246:	00cb      	lsls	r3, r1, #3
 8007248:	4651      	mov	r1, sl
 800724a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800724e:	4651      	mov	r1, sl
 8007250:	00ca      	lsls	r2, r1, #3
 8007252:	4610      	mov	r0, r2
 8007254:	4619      	mov	r1, r3
 8007256:	4603      	mov	r3, r0
 8007258:	4642      	mov	r2, r8
 800725a:	189b      	adds	r3, r3, r2
 800725c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007260:	464b      	mov	r3, r9
 8007262:	460a      	mov	r2, r1
 8007264:	eb42 0303 	adc.w	r3, r2, r3
 8007268:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800726c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007270:	685b      	ldr	r3, [r3, #4]
 8007272:	2200      	movs	r2, #0
 8007274:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007276:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8007278:	f04f 0200 	mov.w	r2, #0
 800727c:	f04f 0300 	mov.w	r3, #0
 8007280:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8007284:	4649      	mov	r1, r9
 8007286:	008b      	lsls	r3, r1, #2
 8007288:	4641      	mov	r1, r8
 800728a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800728e:	4641      	mov	r1, r8
 8007290:	008a      	lsls	r2, r1, #2
 8007292:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8007296:	f7f9 fb29 	bl	80008ec <__aeabi_uldivmod>
 800729a:	4602      	mov	r2, r0
 800729c:	460b      	mov	r3, r1
 800729e:	4611      	mov	r1, r2
 80072a0:	4b38      	ldr	r3, [pc, #224]	@ (8007384 <UART_SetConfig+0x4e4>)
 80072a2:	fba3 2301 	umull	r2, r3, r3, r1
 80072a6:	095b      	lsrs	r3, r3, #5
 80072a8:	2264      	movs	r2, #100	@ 0x64
 80072aa:	fb02 f303 	mul.w	r3, r2, r3
 80072ae:	1acb      	subs	r3, r1, r3
 80072b0:	011b      	lsls	r3, r3, #4
 80072b2:	3332      	adds	r3, #50	@ 0x32
 80072b4:	4a33      	ldr	r2, [pc, #204]	@ (8007384 <UART_SetConfig+0x4e4>)
 80072b6:	fba2 2303 	umull	r2, r3, r2, r3
 80072ba:	095b      	lsrs	r3, r3, #5
 80072bc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80072c0:	441c      	add	r4, r3
 80072c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80072c6:	2200      	movs	r2, #0
 80072c8:	673b      	str	r3, [r7, #112]	@ 0x70
 80072ca:	677a      	str	r2, [r7, #116]	@ 0x74
 80072cc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80072d0:	4642      	mov	r2, r8
 80072d2:	464b      	mov	r3, r9
 80072d4:	1891      	adds	r1, r2, r2
 80072d6:	60b9      	str	r1, [r7, #8]
 80072d8:	415b      	adcs	r3, r3
 80072da:	60fb      	str	r3, [r7, #12]
 80072dc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80072e0:	4641      	mov	r1, r8
 80072e2:	1851      	adds	r1, r2, r1
 80072e4:	6039      	str	r1, [r7, #0]
 80072e6:	4649      	mov	r1, r9
 80072e8:	414b      	adcs	r3, r1
 80072ea:	607b      	str	r3, [r7, #4]
 80072ec:	f04f 0200 	mov.w	r2, #0
 80072f0:	f04f 0300 	mov.w	r3, #0
 80072f4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80072f8:	4659      	mov	r1, fp
 80072fa:	00cb      	lsls	r3, r1, #3
 80072fc:	4651      	mov	r1, sl
 80072fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007302:	4651      	mov	r1, sl
 8007304:	00ca      	lsls	r2, r1, #3
 8007306:	4610      	mov	r0, r2
 8007308:	4619      	mov	r1, r3
 800730a:	4603      	mov	r3, r0
 800730c:	4642      	mov	r2, r8
 800730e:	189b      	adds	r3, r3, r2
 8007310:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007312:	464b      	mov	r3, r9
 8007314:	460a      	mov	r2, r1
 8007316:	eb42 0303 	adc.w	r3, r2, r3
 800731a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800731c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007320:	685b      	ldr	r3, [r3, #4]
 8007322:	2200      	movs	r2, #0
 8007324:	663b      	str	r3, [r7, #96]	@ 0x60
 8007326:	667a      	str	r2, [r7, #100]	@ 0x64
 8007328:	f04f 0200 	mov.w	r2, #0
 800732c:	f04f 0300 	mov.w	r3, #0
 8007330:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8007334:	4649      	mov	r1, r9
 8007336:	008b      	lsls	r3, r1, #2
 8007338:	4641      	mov	r1, r8
 800733a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800733e:	4641      	mov	r1, r8
 8007340:	008a      	lsls	r2, r1, #2
 8007342:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8007346:	f7f9 fad1 	bl	80008ec <__aeabi_uldivmod>
 800734a:	4602      	mov	r2, r0
 800734c:	460b      	mov	r3, r1
 800734e:	4b0d      	ldr	r3, [pc, #52]	@ (8007384 <UART_SetConfig+0x4e4>)
 8007350:	fba3 1302 	umull	r1, r3, r3, r2
 8007354:	095b      	lsrs	r3, r3, #5
 8007356:	2164      	movs	r1, #100	@ 0x64
 8007358:	fb01 f303 	mul.w	r3, r1, r3
 800735c:	1ad3      	subs	r3, r2, r3
 800735e:	011b      	lsls	r3, r3, #4
 8007360:	3332      	adds	r3, #50	@ 0x32
 8007362:	4a08      	ldr	r2, [pc, #32]	@ (8007384 <UART_SetConfig+0x4e4>)
 8007364:	fba2 2303 	umull	r2, r3, r2, r3
 8007368:	095b      	lsrs	r3, r3, #5
 800736a:	f003 020f 	and.w	r2, r3, #15
 800736e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	4422      	add	r2, r4
 8007376:	609a      	str	r2, [r3, #8]
}
 8007378:	bf00      	nop
 800737a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800737e:	46bd      	mov	sp, r7
 8007380:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007384:	51eb851f 	.word	0x51eb851f

08007388 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007388:	b084      	sub	sp, #16
 800738a:	b580      	push	{r7, lr}
 800738c:	b084      	sub	sp, #16
 800738e:	af00      	add	r7, sp, #0
 8007390:	6078      	str	r0, [r7, #4]
 8007392:	f107 001c 	add.w	r0, r7, #28
 8007396:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800739a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800739e:	2b01      	cmp	r3, #1
 80073a0:	d123      	bne.n	80073ea <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073a6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	68db      	ldr	r3, [r3, #12]
 80073b2:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 80073b6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80073ba:	687a      	ldr	r2, [r7, #4]
 80073bc:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	68db      	ldr	r3, [r3, #12]
 80073c2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80073ca:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80073ce:	2b01      	cmp	r3, #1
 80073d0:	d105      	bne.n	80073de <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	68db      	ldr	r3, [r3, #12]
 80073d6:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80073de:	6878      	ldr	r0, [r7, #4]
 80073e0:	f001 fae8 	bl	80089b4 <USB_CoreReset>
 80073e4:	4603      	mov	r3, r0
 80073e6:	73fb      	strb	r3, [r7, #15]
 80073e8:	e01b      	b.n	8007422 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	68db      	ldr	r3, [r3, #12]
 80073ee:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80073f6:	6878      	ldr	r0, [r7, #4]
 80073f8:	f001 fadc 	bl	80089b4 <USB_CoreReset>
 80073fc:	4603      	mov	r3, r0
 80073fe:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007400:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8007404:	2b00      	cmp	r3, #0
 8007406:	d106      	bne.n	8007416 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800740c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	639a      	str	r2, [r3, #56]	@ 0x38
 8007414:	e005      	b.n	8007422 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800741a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007422:	7fbb      	ldrb	r3, [r7, #30]
 8007424:	2b01      	cmp	r3, #1
 8007426:	d10b      	bne.n	8007440 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	689b      	ldr	r3, [r3, #8]
 800742c:	f043 0206 	orr.w	r2, r3, #6
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	689b      	ldr	r3, [r3, #8]
 8007438:	f043 0220 	orr.w	r2, r3, #32
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007440:	7bfb      	ldrb	r3, [r7, #15]
}
 8007442:	4618      	mov	r0, r3
 8007444:	3710      	adds	r7, #16
 8007446:	46bd      	mov	sp, r7
 8007448:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800744c:	b004      	add	sp, #16
 800744e:	4770      	bx	lr

08007450 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8007450:	b480      	push	{r7}
 8007452:	b087      	sub	sp, #28
 8007454:	af00      	add	r7, sp, #0
 8007456:	60f8      	str	r0, [r7, #12]
 8007458:	60b9      	str	r1, [r7, #8]
 800745a:	4613      	mov	r3, r2
 800745c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800745e:	79fb      	ldrb	r3, [r7, #7]
 8007460:	2b02      	cmp	r3, #2
 8007462:	d165      	bne.n	8007530 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8007464:	68bb      	ldr	r3, [r7, #8]
 8007466:	4a41      	ldr	r2, [pc, #260]	@ (800756c <USB_SetTurnaroundTime+0x11c>)
 8007468:	4293      	cmp	r3, r2
 800746a:	d906      	bls.n	800747a <USB_SetTurnaroundTime+0x2a>
 800746c:	68bb      	ldr	r3, [r7, #8]
 800746e:	4a40      	ldr	r2, [pc, #256]	@ (8007570 <USB_SetTurnaroundTime+0x120>)
 8007470:	4293      	cmp	r3, r2
 8007472:	d202      	bcs.n	800747a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8007474:	230f      	movs	r3, #15
 8007476:	617b      	str	r3, [r7, #20]
 8007478:	e062      	b.n	8007540 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800747a:	68bb      	ldr	r3, [r7, #8]
 800747c:	4a3c      	ldr	r2, [pc, #240]	@ (8007570 <USB_SetTurnaroundTime+0x120>)
 800747e:	4293      	cmp	r3, r2
 8007480:	d306      	bcc.n	8007490 <USB_SetTurnaroundTime+0x40>
 8007482:	68bb      	ldr	r3, [r7, #8]
 8007484:	4a3b      	ldr	r2, [pc, #236]	@ (8007574 <USB_SetTurnaroundTime+0x124>)
 8007486:	4293      	cmp	r3, r2
 8007488:	d202      	bcs.n	8007490 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800748a:	230e      	movs	r3, #14
 800748c:	617b      	str	r3, [r7, #20]
 800748e:	e057      	b.n	8007540 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8007490:	68bb      	ldr	r3, [r7, #8]
 8007492:	4a38      	ldr	r2, [pc, #224]	@ (8007574 <USB_SetTurnaroundTime+0x124>)
 8007494:	4293      	cmp	r3, r2
 8007496:	d306      	bcc.n	80074a6 <USB_SetTurnaroundTime+0x56>
 8007498:	68bb      	ldr	r3, [r7, #8]
 800749a:	4a37      	ldr	r2, [pc, #220]	@ (8007578 <USB_SetTurnaroundTime+0x128>)
 800749c:	4293      	cmp	r3, r2
 800749e:	d202      	bcs.n	80074a6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80074a0:	230d      	movs	r3, #13
 80074a2:	617b      	str	r3, [r7, #20]
 80074a4:	e04c      	b.n	8007540 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80074a6:	68bb      	ldr	r3, [r7, #8]
 80074a8:	4a33      	ldr	r2, [pc, #204]	@ (8007578 <USB_SetTurnaroundTime+0x128>)
 80074aa:	4293      	cmp	r3, r2
 80074ac:	d306      	bcc.n	80074bc <USB_SetTurnaroundTime+0x6c>
 80074ae:	68bb      	ldr	r3, [r7, #8]
 80074b0:	4a32      	ldr	r2, [pc, #200]	@ (800757c <USB_SetTurnaroundTime+0x12c>)
 80074b2:	4293      	cmp	r3, r2
 80074b4:	d802      	bhi.n	80074bc <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80074b6:	230c      	movs	r3, #12
 80074b8:	617b      	str	r3, [r7, #20]
 80074ba:	e041      	b.n	8007540 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80074bc:	68bb      	ldr	r3, [r7, #8]
 80074be:	4a2f      	ldr	r2, [pc, #188]	@ (800757c <USB_SetTurnaroundTime+0x12c>)
 80074c0:	4293      	cmp	r3, r2
 80074c2:	d906      	bls.n	80074d2 <USB_SetTurnaroundTime+0x82>
 80074c4:	68bb      	ldr	r3, [r7, #8]
 80074c6:	4a2e      	ldr	r2, [pc, #184]	@ (8007580 <USB_SetTurnaroundTime+0x130>)
 80074c8:	4293      	cmp	r3, r2
 80074ca:	d802      	bhi.n	80074d2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80074cc:	230b      	movs	r3, #11
 80074ce:	617b      	str	r3, [r7, #20]
 80074d0:	e036      	b.n	8007540 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80074d2:	68bb      	ldr	r3, [r7, #8]
 80074d4:	4a2a      	ldr	r2, [pc, #168]	@ (8007580 <USB_SetTurnaroundTime+0x130>)
 80074d6:	4293      	cmp	r3, r2
 80074d8:	d906      	bls.n	80074e8 <USB_SetTurnaroundTime+0x98>
 80074da:	68bb      	ldr	r3, [r7, #8]
 80074dc:	4a29      	ldr	r2, [pc, #164]	@ (8007584 <USB_SetTurnaroundTime+0x134>)
 80074de:	4293      	cmp	r3, r2
 80074e0:	d802      	bhi.n	80074e8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80074e2:	230a      	movs	r3, #10
 80074e4:	617b      	str	r3, [r7, #20]
 80074e6:	e02b      	b.n	8007540 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80074e8:	68bb      	ldr	r3, [r7, #8]
 80074ea:	4a26      	ldr	r2, [pc, #152]	@ (8007584 <USB_SetTurnaroundTime+0x134>)
 80074ec:	4293      	cmp	r3, r2
 80074ee:	d906      	bls.n	80074fe <USB_SetTurnaroundTime+0xae>
 80074f0:	68bb      	ldr	r3, [r7, #8]
 80074f2:	4a25      	ldr	r2, [pc, #148]	@ (8007588 <USB_SetTurnaroundTime+0x138>)
 80074f4:	4293      	cmp	r3, r2
 80074f6:	d202      	bcs.n	80074fe <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80074f8:	2309      	movs	r3, #9
 80074fa:	617b      	str	r3, [r7, #20]
 80074fc:	e020      	b.n	8007540 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80074fe:	68bb      	ldr	r3, [r7, #8]
 8007500:	4a21      	ldr	r2, [pc, #132]	@ (8007588 <USB_SetTurnaroundTime+0x138>)
 8007502:	4293      	cmp	r3, r2
 8007504:	d306      	bcc.n	8007514 <USB_SetTurnaroundTime+0xc4>
 8007506:	68bb      	ldr	r3, [r7, #8]
 8007508:	4a20      	ldr	r2, [pc, #128]	@ (800758c <USB_SetTurnaroundTime+0x13c>)
 800750a:	4293      	cmp	r3, r2
 800750c:	d802      	bhi.n	8007514 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800750e:	2308      	movs	r3, #8
 8007510:	617b      	str	r3, [r7, #20]
 8007512:	e015      	b.n	8007540 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8007514:	68bb      	ldr	r3, [r7, #8]
 8007516:	4a1d      	ldr	r2, [pc, #116]	@ (800758c <USB_SetTurnaroundTime+0x13c>)
 8007518:	4293      	cmp	r3, r2
 800751a:	d906      	bls.n	800752a <USB_SetTurnaroundTime+0xda>
 800751c:	68bb      	ldr	r3, [r7, #8]
 800751e:	4a1c      	ldr	r2, [pc, #112]	@ (8007590 <USB_SetTurnaroundTime+0x140>)
 8007520:	4293      	cmp	r3, r2
 8007522:	d202      	bcs.n	800752a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8007524:	2307      	movs	r3, #7
 8007526:	617b      	str	r3, [r7, #20]
 8007528:	e00a      	b.n	8007540 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800752a:	2306      	movs	r3, #6
 800752c:	617b      	str	r3, [r7, #20]
 800752e:	e007      	b.n	8007540 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8007530:	79fb      	ldrb	r3, [r7, #7]
 8007532:	2b00      	cmp	r3, #0
 8007534:	d102      	bne.n	800753c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8007536:	2309      	movs	r3, #9
 8007538:	617b      	str	r3, [r7, #20]
 800753a:	e001      	b.n	8007540 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800753c:	2309      	movs	r3, #9
 800753e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	68db      	ldr	r3, [r3, #12]
 8007544:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	68da      	ldr	r2, [r3, #12]
 8007550:	697b      	ldr	r3, [r7, #20]
 8007552:	029b      	lsls	r3, r3, #10
 8007554:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8007558:	431a      	orrs	r2, r3
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800755e:	2300      	movs	r3, #0
}
 8007560:	4618      	mov	r0, r3
 8007562:	371c      	adds	r7, #28
 8007564:	46bd      	mov	sp, r7
 8007566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800756a:	4770      	bx	lr
 800756c:	00d8acbf 	.word	0x00d8acbf
 8007570:	00e4e1c0 	.word	0x00e4e1c0
 8007574:	00f42400 	.word	0x00f42400
 8007578:	01067380 	.word	0x01067380
 800757c:	011a499f 	.word	0x011a499f
 8007580:	01312cff 	.word	0x01312cff
 8007584:	014ca43f 	.word	0x014ca43f
 8007588:	016e3600 	.word	0x016e3600
 800758c:	01a6ab1f 	.word	0x01a6ab1f
 8007590:	01e84800 	.word	0x01e84800

08007594 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007594:	b480      	push	{r7}
 8007596:	b083      	sub	sp, #12
 8007598:	af00      	add	r7, sp, #0
 800759a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	689b      	ldr	r3, [r3, #8]
 80075a0:	f043 0201 	orr.w	r2, r3, #1
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80075a8:	2300      	movs	r3, #0
}
 80075aa:	4618      	mov	r0, r3
 80075ac:	370c      	adds	r7, #12
 80075ae:	46bd      	mov	sp, r7
 80075b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b4:	4770      	bx	lr

080075b6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80075b6:	b480      	push	{r7}
 80075b8:	b083      	sub	sp, #12
 80075ba:	af00      	add	r7, sp, #0
 80075bc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	689b      	ldr	r3, [r3, #8]
 80075c2:	f023 0201 	bic.w	r2, r3, #1
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80075ca:	2300      	movs	r3, #0
}
 80075cc:	4618      	mov	r0, r3
 80075ce:	370c      	adds	r7, #12
 80075d0:	46bd      	mov	sp, r7
 80075d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d6:	4770      	bx	lr

080075d8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80075d8:	b580      	push	{r7, lr}
 80075da:	b084      	sub	sp, #16
 80075dc:	af00      	add	r7, sp, #0
 80075de:	6078      	str	r0, [r7, #4]
 80075e0:	460b      	mov	r3, r1
 80075e2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80075e4:	2300      	movs	r3, #0
 80075e6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	68db      	ldr	r3, [r3, #12]
 80075ec:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80075f4:	78fb      	ldrb	r3, [r7, #3]
 80075f6:	2b01      	cmp	r3, #1
 80075f8:	d115      	bne.n	8007626 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	68db      	ldr	r3, [r3, #12]
 80075fe:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007606:	200a      	movs	r0, #10
 8007608:	f7fa fc6c 	bl	8001ee4 <HAL_Delay>
      ms += 10U;
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	330a      	adds	r3, #10
 8007610:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007612:	6878      	ldr	r0, [r7, #4]
 8007614:	f001 f93f 	bl	8008896 <USB_GetMode>
 8007618:	4603      	mov	r3, r0
 800761a:	2b01      	cmp	r3, #1
 800761c:	d01e      	beq.n	800765c <USB_SetCurrentMode+0x84>
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	2bc7      	cmp	r3, #199	@ 0xc7
 8007622:	d9f0      	bls.n	8007606 <USB_SetCurrentMode+0x2e>
 8007624:	e01a      	b.n	800765c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007626:	78fb      	ldrb	r3, [r7, #3]
 8007628:	2b00      	cmp	r3, #0
 800762a:	d115      	bne.n	8007658 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	68db      	ldr	r3, [r3, #12]
 8007630:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007638:	200a      	movs	r0, #10
 800763a:	f7fa fc53 	bl	8001ee4 <HAL_Delay>
      ms += 10U;
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	330a      	adds	r3, #10
 8007642:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007644:	6878      	ldr	r0, [r7, #4]
 8007646:	f001 f926 	bl	8008896 <USB_GetMode>
 800764a:	4603      	mov	r3, r0
 800764c:	2b00      	cmp	r3, #0
 800764e:	d005      	beq.n	800765c <USB_SetCurrentMode+0x84>
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	2bc7      	cmp	r3, #199	@ 0xc7
 8007654:	d9f0      	bls.n	8007638 <USB_SetCurrentMode+0x60>
 8007656:	e001      	b.n	800765c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007658:	2301      	movs	r3, #1
 800765a:	e005      	b.n	8007668 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	2bc8      	cmp	r3, #200	@ 0xc8
 8007660:	d101      	bne.n	8007666 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007662:	2301      	movs	r3, #1
 8007664:	e000      	b.n	8007668 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007666:	2300      	movs	r3, #0
}
 8007668:	4618      	mov	r0, r3
 800766a:	3710      	adds	r7, #16
 800766c:	46bd      	mov	sp, r7
 800766e:	bd80      	pop	{r7, pc}

08007670 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007670:	b084      	sub	sp, #16
 8007672:	b580      	push	{r7, lr}
 8007674:	b086      	sub	sp, #24
 8007676:	af00      	add	r7, sp, #0
 8007678:	6078      	str	r0, [r7, #4]
 800767a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800767e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007682:	2300      	movs	r3, #0
 8007684:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800768a:	2300      	movs	r3, #0
 800768c:	613b      	str	r3, [r7, #16]
 800768e:	e009      	b.n	80076a4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007690:	687a      	ldr	r2, [r7, #4]
 8007692:	693b      	ldr	r3, [r7, #16]
 8007694:	3340      	adds	r3, #64	@ 0x40
 8007696:	009b      	lsls	r3, r3, #2
 8007698:	4413      	add	r3, r2
 800769a:	2200      	movs	r2, #0
 800769c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800769e:	693b      	ldr	r3, [r7, #16]
 80076a0:	3301      	adds	r3, #1
 80076a2:	613b      	str	r3, [r7, #16]
 80076a4:	693b      	ldr	r3, [r7, #16]
 80076a6:	2b0e      	cmp	r3, #14
 80076a8:	d9f2      	bls.n	8007690 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80076aa:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d11c      	bne.n	80076ec <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80076b8:	685b      	ldr	r3, [r3, #4]
 80076ba:	68fa      	ldr	r2, [r7, #12]
 80076bc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80076c0:	f043 0302 	orr.w	r3, r3, #2
 80076c4:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076ca:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076d6:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076e2:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	639a      	str	r2, [r3, #56]	@ 0x38
 80076ea:	e00b      	b.n	8007704 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076f0:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076fc:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800770a:	461a      	mov	r2, r3
 800770c:	2300      	movs	r3, #0
 800770e:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007710:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8007714:	2b01      	cmp	r3, #1
 8007716:	d10d      	bne.n	8007734 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007718:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800771c:	2b00      	cmp	r3, #0
 800771e:	d104      	bne.n	800772a <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007720:	2100      	movs	r1, #0
 8007722:	6878      	ldr	r0, [r7, #4]
 8007724:	f000 f968 	bl	80079f8 <USB_SetDevSpeed>
 8007728:	e008      	b.n	800773c <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800772a:	2101      	movs	r1, #1
 800772c:	6878      	ldr	r0, [r7, #4]
 800772e:	f000 f963 	bl	80079f8 <USB_SetDevSpeed>
 8007732:	e003      	b.n	800773c <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007734:	2103      	movs	r1, #3
 8007736:	6878      	ldr	r0, [r7, #4]
 8007738:	f000 f95e 	bl	80079f8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800773c:	2110      	movs	r1, #16
 800773e:	6878      	ldr	r0, [r7, #4]
 8007740:	f000 f8fa 	bl	8007938 <USB_FlushTxFifo>
 8007744:	4603      	mov	r3, r0
 8007746:	2b00      	cmp	r3, #0
 8007748:	d001      	beq.n	800774e <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 800774a:	2301      	movs	r3, #1
 800774c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800774e:	6878      	ldr	r0, [r7, #4]
 8007750:	f000 f924 	bl	800799c <USB_FlushRxFifo>
 8007754:	4603      	mov	r3, r0
 8007756:	2b00      	cmp	r3, #0
 8007758:	d001      	beq.n	800775e <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 800775a:	2301      	movs	r3, #1
 800775c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007764:	461a      	mov	r2, r3
 8007766:	2300      	movs	r3, #0
 8007768:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007770:	461a      	mov	r2, r3
 8007772:	2300      	movs	r3, #0
 8007774:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800777c:	461a      	mov	r2, r3
 800777e:	2300      	movs	r3, #0
 8007780:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007782:	2300      	movs	r3, #0
 8007784:	613b      	str	r3, [r7, #16]
 8007786:	e043      	b.n	8007810 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007788:	693b      	ldr	r3, [r7, #16]
 800778a:	015a      	lsls	r2, r3, #5
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	4413      	add	r3, r2
 8007790:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800779a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800779e:	d118      	bne.n	80077d2 <USB_DevInit+0x162>
    {
      if (i == 0U)
 80077a0:	693b      	ldr	r3, [r7, #16]
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d10a      	bne.n	80077bc <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80077a6:	693b      	ldr	r3, [r7, #16]
 80077a8:	015a      	lsls	r2, r3, #5
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	4413      	add	r3, r2
 80077ae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80077b2:	461a      	mov	r2, r3
 80077b4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80077b8:	6013      	str	r3, [r2, #0]
 80077ba:	e013      	b.n	80077e4 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80077bc:	693b      	ldr	r3, [r7, #16]
 80077be:	015a      	lsls	r2, r3, #5
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	4413      	add	r3, r2
 80077c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80077c8:	461a      	mov	r2, r3
 80077ca:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80077ce:	6013      	str	r3, [r2, #0]
 80077d0:	e008      	b.n	80077e4 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80077d2:	693b      	ldr	r3, [r7, #16]
 80077d4:	015a      	lsls	r2, r3, #5
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	4413      	add	r3, r2
 80077da:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80077de:	461a      	mov	r2, r3
 80077e0:	2300      	movs	r3, #0
 80077e2:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80077e4:	693b      	ldr	r3, [r7, #16]
 80077e6:	015a      	lsls	r2, r3, #5
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	4413      	add	r3, r2
 80077ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80077f0:	461a      	mov	r2, r3
 80077f2:	2300      	movs	r3, #0
 80077f4:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80077f6:	693b      	ldr	r3, [r7, #16]
 80077f8:	015a      	lsls	r2, r3, #5
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	4413      	add	r3, r2
 80077fe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007802:	461a      	mov	r2, r3
 8007804:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007808:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800780a:	693b      	ldr	r3, [r7, #16]
 800780c:	3301      	adds	r3, #1
 800780e:	613b      	str	r3, [r7, #16]
 8007810:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007814:	461a      	mov	r2, r3
 8007816:	693b      	ldr	r3, [r7, #16]
 8007818:	4293      	cmp	r3, r2
 800781a:	d3b5      	bcc.n	8007788 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800781c:	2300      	movs	r3, #0
 800781e:	613b      	str	r3, [r7, #16]
 8007820:	e043      	b.n	80078aa <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007822:	693b      	ldr	r3, [r7, #16]
 8007824:	015a      	lsls	r2, r3, #5
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	4413      	add	r3, r2
 800782a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007834:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007838:	d118      	bne.n	800786c <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 800783a:	693b      	ldr	r3, [r7, #16]
 800783c:	2b00      	cmp	r3, #0
 800783e:	d10a      	bne.n	8007856 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007840:	693b      	ldr	r3, [r7, #16]
 8007842:	015a      	lsls	r2, r3, #5
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	4413      	add	r3, r2
 8007848:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800784c:	461a      	mov	r2, r3
 800784e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8007852:	6013      	str	r3, [r2, #0]
 8007854:	e013      	b.n	800787e <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007856:	693b      	ldr	r3, [r7, #16]
 8007858:	015a      	lsls	r2, r3, #5
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	4413      	add	r3, r2
 800785e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007862:	461a      	mov	r2, r3
 8007864:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8007868:	6013      	str	r3, [r2, #0]
 800786a:	e008      	b.n	800787e <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800786c:	693b      	ldr	r3, [r7, #16]
 800786e:	015a      	lsls	r2, r3, #5
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	4413      	add	r3, r2
 8007874:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007878:	461a      	mov	r2, r3
 800787a:	2300      	movs	r3, #0
 800787c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800787e:	693b      	ldr	r3, [r7, #16]
 8007880:	015a      	lsls	r2, r3, #5
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	4413      	add	r3, r2
 8007886:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800788a:	461a      	mov	r2, r3
 800788c:	2300      	movs	r3, #0
 800788e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007890:	693b      	ldr	r3, [r7, #16]
 8007892:	015a      	lsls	r2, r3, #5
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	4413      	add	r3, r2
 8007898:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800789c:	461a      	mov	r2, r3
 800789e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80078a2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80078a4:	693b      	ldr	r3, [r7, #16]
 80078a6:	3301      	adds	r3, #1
 80078a8:	613b      	str	r3, [r7, #16]
 80078aa:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80078ae:	461a      	mov	r2, r3
 80078b0:	693b      	ldr	r3, [r7, #16]
 80078b2:	4293      	cmp	r3, r2
 80078b4:	d3b5      	bcc.n	8007822 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80078bc:	691b      	ldr	r3, [r3, #16]
 80078be:	68fa      	ldr	r2, [r7, #12]
 80078c0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80078c4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80078c8:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	2200      	movs	r2, #0
 80078ce:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80078d6:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80078d8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d105      	bne.n	80078ec <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	699b      	ldr	r3, [r3, #24]
 80078e4:	f043 0210 	orr.w	r2, r3, #16
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	699a      	ldr	r2, [r3, #24]
 80078f0:	4b10      	ldr	r3, [pc, #64]	@ (8007934 <USB_DevInit+0x2c4>)
 80078f2:	4313      	orrs	r3, r2
 80078f4:	687a      	ldr	r2, [r7, #4]
 80078f6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80078f8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d005      	beq.n	800790c <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	699b      	ldr	r3, [r3, #24]
 8007904:	f043 0208 	orr.w	r2, r3, #8
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800790c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007910:	2b01      	cmp	r3, #1
 8007912:	d107      	bne.n	8007924 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	699b      	ldr	r3, [r3, #24]
 8007918:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800791c:	f043 0304 	orr.w	r3, r3, #4
 8007920:	687a      	ldr	r2, [r7, #4]
 8007922:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007924:	7dfb      	ldrb	r3, [r7, #23]
}
 8007926:	4618      	mov	r0, r3
 8007928:	3718      	adds	r7, #24
 800792a:	46bd      	mov	sp, r7
 800792c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007930:	b004      	add	sp, #16
 8007932:	4770      	bx	lr
 8007934:	803c3800 	.word	0x803c3800

08007938 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007938:	b480      	push	{r7}
 800793a:	b085      	sub	sp, #20
 800793c:	af00      	add	r7, sp, #0
 800793e:	6078      	str	r0, [r7, #4]
 8007940:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007942:	2300      	movs	r3, #0
 8007944:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	3301      	adds	r3, #1
 800794a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007952:	d901      	bls.n	8007958 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007954:	2303      	movs	r3, #3
 8007956:	e01b      	b.n	8007990 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	691b      	ldr	r3, [r3, #16]
 800795c:	2b00      	cmp	r3, #0
 800795e:	daf2      	bge.n	8007946 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007960:	2300      	movs	r3, #0
 8007962:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007964:	683b      	ldr	r3, [r7, #0]
 8007966:	019b      	lsls	r3, r3, #6
 8007968:	f043 0220 	orr.w	r2, r3, #32
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	3301      	adds	r3, #1
 8007974:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800797c:	d901      	bls.n	8007982 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800797e:	2303      	movs	r3, #3
 8007980:	e006      	b.n	8007990 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	691b      	ldr	r3, [r3, #16]
 8007986:	f003 0320 	and.w	r3, r3, #32
 800798a:	2b20      	cmp	r3, #32
 800798c:	d0f0      	beq.n	8007970 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800798e:	2300      	movs	r3, #0
}
 8007990:	4618      	mov	r0, r3
 8007992:	3714      	adds	r7, #20
 8007994:	46bd      	mov	sp, r7
 8007996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800799a:	4770      	bx	lr

0800799c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800799c:	b480      	push	{r7}
 800799e:	b085      	sub	sp, #20
 80079a0:	af00      	add	r7, sp, #0
 80079a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80079a4:	2300      	movs	r3, #0
 80079a6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	3301      	adds	r3, #1
 80079ac:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80079b4:	d901      	bls.n	80079ba <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80079b6:	2303      	movs	r3, #3
 80079b8:	e018      	b.n	80079ec <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	691b      	ldr	r3, [r3, #16]
 80079be:	2b00      	cmp	r3, #0
 80079c0:	daf2      	bge.n	80079a8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80079c2:	2300      	movs	r3, #0
 80079c4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	2210      	movs	r2, #16
 80079ca:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	3301      	adds	r3, #1
 80079d0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80079d8:	d901      	bls.n	80079de <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80079da:	2303      	movs	r3, #3
 80079dc:	e006      	b.n	80079ec <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	691b      	ldr	r3, [r3, #16]
 80079e2:	f003 0310 	and.w	r3, r3, #16
 80079e6:	2b10      	cmp	r3, #16
 80079e8:	d0f0      	beq.n	80079cc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80079ea:	2300      	movs	r3, #0
}
 80079ec:	4618      	mov	r0, r3
 80079ee:	3714      	adds	r7, #20
 80079f0:	46bd      	mov	sp, r7
 80079f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f6:	4770      	bx	lr

080079f8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80079f8:	b480      	push	{r7}
 80079fa:	b085      	sub	sp, #20
 80079fc:	af00      	add	r7, sp, #0
 80079fe:	6078      	str	r0, [r7, #4]
 8007a00:	460b      	mov	r3, r1
 8007a02:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007a0e:	681a      	ldr	r2, [r3, #0]
 8007a10:	78fb      	ldrb	r3, [r7, #3]
 8007a12:	68f9      	ldr	r1, [r7, #12]
 8007a14:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007a18:	4313      	orrs	r3, r2
 8007a1a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007a1c:	2300      	movs	r3, #0
}
 8007a1e:	4618      	mov	r0, r3
 8007a20:	3714      	adds	r7, #20
 8007a22:	46bd      	mov	sp, r7
 8007a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a28:	4770      	bx	lr

08007a2a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8007a2a:	b480      	push	{r7}
 8007a2c:	b087      	sub	sp, #28
 8007a2e:	af00      	add	r7, sp, #0
 8007a30:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8007a36:	693b      	ldr	r3, [r7, #16]
 8007a38:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007a3c:	689b      	ldr	r3, [r3, #8]
 8007a3e:	f003 0306 	and.w	r3, r3, #6
 8007a42:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d102      	bne.n	8007a50 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8007a4a:	2300      	movs	r3, #0
 8007a4c:	75fb      	strb	r3, [r7, #23]
 8007a4e:	e00a      	b.n	8007a66 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	2b02      	cmp	r3, #2
 8007a54:	d002      	beq.n	8007a5c <USB_GetDevSpeed+0x32>
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	2b06      	cmp	r3, #6
 8007a5a:	d102      	bne.n	8007a62 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8007a5c:	2302      	movs	r3, #2
 8007a5e:	75fb      	strb	r3, [r7, #23]
 8007a60:	e001      	b.n	8007a66 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8007a62:	230f      	movs	r3, #15
 8007a64:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8007a66:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a68:	4618      	mov	r0, r3
 8007a6a:	371c      	adds	r7, #28
 8007a6c:	46bd      	mov	sp, r7
 8007a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a72:	4770      	bx	lr

08007a74 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007a74:	b480      	push	{r7}
 8007a76:	b085      	sub	sp, #20
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	6078      	str	r0, [r7, #4]
 8007a7c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007a82:	683b      	ldr	r3, [r7, #0]
 8007a84:	781b      	ldrb	r3, [r3, #0]
 8007a86:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007a88:	683b      	ldr	r3, [r7, #0]
 8007a8a:	785b      	ldrb	r3, [r3, #1]
 8007a8c:	2b01      	cmp	r3, #1
 8007a8e:	d13a      	bne.n	8007b06 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007a96:	69da      	ldr	r2, [r3, #28]
 8007a98:	683b      	ldr	r3, [r7, #0]
 8007a9a:	781b      	ldrb	r3, [r3, #0]
 8007a9c:	f003 030f 	and.w	r3, r3, #15
 8007aa0:	2101      	movs	r1, #1
 8007aa2:	fa01 f303 	lsl.w	r3, r1, r3
 8007aa6:	b29b      	uxth	r3, r3
 8007aa8:	68f9      	ldr	r1, [r7, #12]
 8007aaa:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007aae:	4313      	orrs	r3, r2
 8007ab0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8007ab2:	68bb      	ldr	r3, [r7, #8]
 8007ab4:	015a      	lsls	r2, r3, #5
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	4413      	add	r3, r2
 8007aba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d155      	bne.n	8007b74 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007ac8:	68bb      	ldr	r3, [r7, #8]
 8007aca:	015a      	lsls	r2, r3, #5
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	4413      	add	r3, r2
 8007ad0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007ad4:	681a      	ldr	r2, [r3, #0]
 8007ad6:	683b      	ldr	r3, [r7, #0]
 8007ad8:	689b      	ldr	r3, [r3, #8]
 8007ada:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007ade:	683b      	ldr	r3, [r7, #0]
 8007ae0:	791b      	ldrb	r3, [r3, #4]
 8007ae2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007ae4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007ae6:	68bb      	ldr	r3, [r7, #8]
 8007ae8:	059b      	lsls	r3, r3, #22
 8007aea:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007aec:	4313      	orrs	r3, r2
 8007aee:	68ba      	ldr	r2, [r7, #8]
 8007af0:	0151      	lsls	r1, r2, #5
 8007af2:	68fa      	ldr	r2, [r7, #12]
 8007af4:	440a      	add	r2, r1
 8007af6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007afa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007afe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007b02:	6013      	str	r3, [r2, #0]
 8007b04:	e036      	b.n	8007b74 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007b0c:	69da      	ldr	r2, [r3, #28]
 8007b0e:	683b      	ldr	r3, [r7, #0]
 8007b10:	781b      	ldrb	r3, [r3, #0]
 8007b12:	f003 030f 	and.w	r3, r3, #15
 8007b16:	2101      	movs	r1, #1
 8007b18:	fa01 f303 	lsl.w	r3, r1, r3
 8007b1c:	041b      	lsls	r3, r3, #16
 8007b1e:	68f9      	ldr	r1, [r7, #12]
 8007b20:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007b24:	4313      	orrs	r3, r2
 8007b26:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8007b28:	68bb      	ldr	r3, [r7, #8]
 8007b2a:	015a      	lsls	r2, r3, #5
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	4413      	add	r3, r2
 8007b30:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d11a      	bne.n	8007b74 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007b3e:	68bb      	ldr	r3, [r7, #8]
 8007b40:	015a      	lsls	r2, r3, #5
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	4413      	add	r3, r2
 8007b46:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007b4a:	681a      	ldr	r2, [r3, #0]
 8007b4c:	683b      	ldr	r3, [r7, #0]
 8007b4e:	689b      	ldr	r3, [r3, #8]
 8007b50:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8007b54:	683b      	ldr	r3, [r7, #0]
 8007b56:	791b      	ldrb	r3, [r3, #4]
 8007b58:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007b5a:	430b      	orrs	r3, r1
 8007b5c:	4313      	orrs	r3, r2
 8007b5e:	68ba      	ldr	r2, [r7, #8]
 8007b60:	0151      	lsls	r1, r2, #5
 8007b62:	68fa      	ldr	r2, [r7, #12]
 8007b64:	440a      	add	r2, r1
 8007b66:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007b6a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007b6e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007b72:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8007b74:	2300      	movs	r3, #0
}
 8007b76:	4618      	mov	r0, r3
 8007b78:	3714      	adds	r7, #20
 8007b7a:	46bd      	mov	sp, r7
 8007b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b80:	4770      	bx	lr
	...

08007b84 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007b84:	b480      	push	{r7}
 8007b86:	b085      	sub	sp, #20
 8007b88:	af00      	add	r7, sp, #0
 8007b8a:	6078      	str	r0, [r7, #4]
 8007b8c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007b92:	683b      	ldr	r3, [r7, #0]
 8007b94:	781b      	ldrb	r3, [r3, #0]
 8007b96:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8007b98:	683b      	ldr	r3, [r7, #0]
 8007b9a:	785b      	ldrb	r3, [r3, #1]
 8007b9c:	2b01      	cmp	r3, #1
 8007b9e:	d161      	bne.n	8007c64 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007ba0:	68bb      	ldr	r3, [r7, #8]
 8007ba2:	015a      	lsls	r2, r3, #5
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	4413      	add	r3, r2
 8007ba8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007bb2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007bb6:	d11f      	bne.n	8007bf8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8007bb8:	68bb      	ldr	r3, [r7, #8]
 8007bba:	015a      	lsls	r2, r3, #5
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	4413      	add	r3, r2
 8007bc0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	68ba      	ldr	r2, [r7, #8]
 8007bc8:	0151      	lsls	r1, r2, #5
 8007bca:	68fa      	ldr	r2, [r7, #12]
 8007bcc:	440a      	add	r2, r1
 8007bce:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007bd2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007bd6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8007bd8:	68bb      	ldr	r3, [r7, #8]
 8007bda:	015a      	lsls	r2, r3, #5
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	4413      	add	r3, r2
 8007be0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	68ba      	ldr	r2, [r7, #8]
 8007be8:	0151      	lsls	r1, r2, #5
 8007bea:	68fa      	ldr	r2, [r7, #12]
 8007bec:	440a      	add	r2, r1
 8007bee:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007bf2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007bf6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007bfe:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007c00:	683b      	ldr	r3, [r7, #0]
 8007c02:	781b      	ldrb	r3, [r3, #0]
 8007c04:	f003 030f 	and.w	r3, r3, #15
 8007c08:	2101      	movs	r1, #1
 8007c0a:	fa01 f303 	lsl.w	r3, r1, r3
 8007c0e:	b29b      	uxth	r3, r3
 8007c10:	43db      	mvns	r3, r3
 8007c12:	68f9      	ldr	r1, [r7, #12]
 8007c14:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007c18:	4013      	ands	r3, r2
 8007c1a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007c22:	69da      	ldr	r2, [r3, #28]
 8007c24:	683b      	ldr	r3, [r7, #0]
 8007c26:	781b      	ldrb	r3, [r3, #0]
 8007c28:	f003 030f 	and.w	r3, r3, #15
 8007c2c:	2101      	movs	r1, #1
 8007c2e:	fa01 f303 	lsl.w	r3, r1, r3
 8007c32:	b29b      	uxth	r3, r3
 8007c34:	43db      	mvns	r3, r3
 8007c36:	68f9      	ldr	r1, [r7, #12]
 8007c38:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007c3c:	4013      	ands	r3, r2
 8007c3e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8007c40:	68bb      	ldr	r3, [r7, #8]
 8007c42:	015a      	lsls	r2, r3, #5
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	4413      	add	r3, r2
 8007c48:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007c4c:	681a      	ldr	r2, [r3, #0]
 8007c4e:	68bb      	ldr	r3, [r7, #8]
 8007c50:	0159      	lsls	r1, r3, #5
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	440b      	add	r3, r1
 8007c56:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007c5a:	4619      	mov	r1, r3
 8007c5c:	4b35      	ldr	r3, [pc, #212]	@ (8007d34 <USB_DeactivateEndpoint+0x1b0>)
 8007c5e:	4013      	ands	r3, r2
 8007c60:	600b      	str	r3, [r1, #0]
 8007c62:	e060      	b.n	8007d26 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007c64:	68bb      	ldr	r3, [r7, #8]
 8007c66:	015a      	lsls	r2, r3, #5
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	4413      	add	r3, r2
 8007c6c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007c76:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007c7a:	d11f      	bne.n	8007cbc <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007c7c:	68bb      	ldr	r3, [r7, #8]
 8007c7e:	015a      	lsls	r2, r3, #5
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	4413      	add	r3, r2
 8007c84:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	68ba      	ldr	r2, [r7, #8]
 8007c8c:	0151      	lsls	r1, r2, #5
 8007c8e:	68fa      	ldr	r2, [r7, #12]
 8007c90:	440a      	add	r2, r1
 8007c92:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007c96:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007c9a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8007c9c:	68bb      	ldr	r3, [r7, #8]
 8007c9e:	015a      	lsls	r2, r3, #5
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	4413      	add	r3, r2
 8007ca4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	68ba      	ldr	r2, [r7, #8]
 8007cac:	0151      	lsls	r1, r2, #5
 8007cae:	68fa      	ldr	r2, [r7, #12]
 8007cb0:	440a      	add	r2, r1
 8007cb2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007cb6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007cba:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007cc2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007cc4:	683b      	ldr	r3, [r7, #0]
 8007cc6:	781b      	ldrb	r3, [r3, #0]
 8007cc8:	f003 030f 	and.w	r3, r3, #15
 8007ccc:	2101      	movs	r1, #1
 8007cce:	fa01 f303 	lsl.w	r3, r1, r3
 8007cd2:	041b      	lsls	r3, r3, #16
 8007cd4:	43db      	mvns	r3, r3
 8007cd6:	68f9      	ldr	r1, [r7, #12]
 8007cd8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007cdc:	4013      	ands	r3, r2
 8007cde:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007ce6:	69da      	ldr	r2, [r3, #28]
 8007ce8:	683b      	ldr	r3, [r7, #0]
 8007cea:	781b      	ldrb	r3, [r3, #0]
 8007cec:	f003 030f 	and.w	r3, r3, #15
 8007cf0:	2101      	movs	r1, #1
 8007cf2:	fa01 f303 	lsl.w	r3, r1, r3
 8007cf6:	041b      	lsls	r3, r3, #16
 8007cf8:	43db      	mvns	r3, r3
 8007cfa:	68f9      	ldr	r1, [r7, #12]
 8007cfc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007d00:	4013      	ands	r3, r2
 8007d02:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8007d04:	68bb      	ldr	r3, [r7, #8]
 8007d06:	015a      	lsls	r2, r3, #5
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	4413      	add	r3, r2
 8007d0c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007d10:	681a      	ldr	r2, [r3, #0]
 8007d12:	68bb      	ldr	r3, [r7, #8]
 8007d14:	0159      	lsls	r1, r3, #5
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	440b      	add	r3, r1
 8007d1a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007d1e:	4619      	mov	r1, r3
 8007d20:	4b05      	ldr	r3, [pc, #20]	@ (8007d38 <USB_DeactivateEndpoint+0x1b4>)
 8007d22:	4013      	ands	r3, r2
 8007d24:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8007d26:	2300      	movs	r3, #0
}
 8007d28:	4618      	mov	r0, r3
 8007d2a:	3714      	adds	r7, #20
 8007d2c:	46bd      	mov	sp, r7
 8007d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d32:	4770      	bx	lr
 8007d34:	ec337800 	.word	0xec337800
 8007d38:	eff37800 	.word	0xeff37800

08007d3c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007d3c:	b580      	push	{r7, lr}
 8007d3e:	b08a      	sub	sp, #40	@ 0x28
 8007d40:	af02      	add	r7, sp, #8
 8007d42:	60f8      	str	r0, [r7, #12]
 8007d44:	60b9      	str	r1, [r7, #8]
 8007d46:	4613      	mov	r3, r2
 8007d48:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8007d4e:	68bb      	ldr	r3, [r7, #8]
 8007d50:	781b      	ldrb	r3, [r3, #0]
 8007d52:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007d54:	68bb      	ldr	r3, [r7, #8]
 8007d56:	785b      	ldrb	r3, [r3, #1]
 8007d58:	2b01      	cmp	r3, #1
 8007d5a:	f040 817f 	bne.w	800805c <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007d5e:	68bb      	ldr	r3, [r7, #8]
 8007d60:	691b      	ldr	r3, [r3, #16]
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d132      	bne.n	8007dcc <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007d66:	69bb      	ldr	r3, [r7, #24]
 8007d68:	015a      	lsls	r2, r3, #5
 8007d6a:	69fb      	ldr	r3, [r7, #28]
 8007d6c:	4413      	add	r3, r2
 8007d6e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007d72:	691b      	ldr	r3, [r3, #16]
 8007d74:	69ba      	ldr	r2, [r7, #24]
 8007d76:	0151      	lsls	r1, r2, #5
 8007d78:	69fa      	ldr	r2, [r7, #28]
 8007d7a:	440a      	add	r2, r1
 8007d7c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007d80:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8007d84:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8007d88:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007d8a:	69bb      	ldr	r3, [r7, #24]
 8007d8c:	015a      	lsls	r2, r3, #5
 8007d8e:	69fb      	ldr	r3, [r7, #28]
 8007d90:	4413      	add	r3, r2
 8007d92:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007d96:	691b      	ldr	r3, [r3, #16]
 8007d98:	69ba      	ldr	r2, [r7, #24]
 8007d9a:	0151      	lsls	r1, r2, #5
 8007d9c:	69fa      	ldr	r2, [r7, #28]
 8007d9e:	440a      	add	r2, r1
 8007da0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007da4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007da8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007daa:	69bb      	ldr	r3, [r7, #24]
 8007dac:	015a      	lsls	r2, r3, #5
 8007dae:	69fb      	ldr	r3, [r7, #28]
 8007db0:	4413      	add	r3, r2
 8007db2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007db6:	691b      	ldr	r3, [r3, #16]
 8007db8:	69ba      	ldr	r2, [r7, #24]
 8007dba:	0151      	lsls	r1, r2, #5
 8007dbc:	69fa      	ldr	r2, [r7, #28]
 8007dbe:	440a      	add	r2, r1
 8007dc0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007dc4:	0cdb      	lsrs	r3, r3, #19
 8007dc6:	04db      	lsls	r3, r3, #19
 8007dc8:	6113      	str	r3, [r2, #16]
 8007dca:	e097      	b.n	8007efc <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007dcc:	69bb      	ldr	r3, [r7, #24]
 8007dce:	015a      	lsls	r2, r3, #5
 8007dd0:	69fb      	ldr	r3, [r7, #28]
 8007dd2:	4413      	add	r3, r2
 8007dd4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007dd8:	691b      	ldr	r3, [r3, #16]
 8007dda:	69ba      	ldr	r2, [r7, #24]
 8007ddc:	0151      	lsls	r1, r2, #5
 8007dde:	69fa      	ldr	r2, [r7, #28]
 8007de0:	440a      	add	r2, r1
 8007de2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007de6:	0cdb      	lsrs	r3, r3, #19
 8007de8:	04db      	lsls	r3, r3, #19
 8007dea:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007dec:	69bb      	ldr	r3, [r7, #24]
 8007dee:	015a      	lsls	r2, r3, #5
 8007df0:	69fb      	ldr	r3, [r7, #28]
 8007df2:	4413      	add	r3, r2
 8007df4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007df8:	691b      	ldr	r3, [r3, #16]
 8007dfa:	69ba      	ldr	r2, [r7, #24]
 8007dfc:	0151      	lsls	r1, r2, #5
 8007dfe:	69fa      	ldr	r2, [r7, #28]
 8007e00:	440a      	add	r2, r1
 8007e02:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007e06:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8007e0a:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8007e0e:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8007e10:	69bb      	ldr	r3, [r7, #24]
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d11a      	bne.n	8007e4c <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8007e16:	68bb      	ldr	r3, [r7, #8]
 8007e18:	691a      	ldr	r2, [r3, #16]
 8007e1a:	68bb      	ldr	r3, [r7, #8]
 8007e1c:	689b      	ldr	r3, [r3, #8]
 8007e1e:	429a      	cmp	r2, r3
 8007e20:	d903      	bls.n	8007e2a <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8007e22:	68bb      	ldr	r3, [r7, #8]
 8007e24:	689a      	ldr	r2, [r3, #8]
 8007e26:	68bb      	ldr	r3, [r7, #8]
 8007e28:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007e2a:	69bb      	ldr	r3, [r7, #24]
 8007e2c:	015a      	lsls	r2, r3, #5
 8007e2e:	69fb      	ldr	r3, [r7, #28]
 8007e30:	4413      	add	r3, r2
 8007e32:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007e36:	691b      	ldr	r3, [r3, #16]
 8007e38:	69ba      	ldr	r2, [r7, #24]
 8007e3a:	0151      	lsls	r1, r2, #5
 8007e3c:	69fa      	ldr	r2, [r7, #28]
 8007e3e:	440a      	add	r2, r1
 8007e40:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007e44:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007e48:	6113      	str	r3, [r2, #16]
 8007e4a:	e044      	b.n	8007ed6 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007e4c:	68bb      	ldr	r3, [r7, #8]
 8007e4e:	691a      	ldr	r2, [r3, #16]
 8007e50:	68bb      	ldr	r3, [r7, #8]
 8007e52:	689b      	ldr	r3, [r3, #8]
 8007e54:	4413      	add	r3, r2
 8007e56:	1e5a      	subs	r2, r3, #1
 8007e58:	68bb      	ldr	r3, [r7, #8]
 8007e5a:	689b      	ldr	r3, [r3, #8]
 8007e5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e60:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 8007e62:	69bb      	ldr	r3, [r7, #24]
 8007e64:	015a      	lsls	r2, r3, #5
 8007e66:	69fb      	ldr	r3, [r7, #28]
 8007e68:	4413      	add	r3, r2
 8007e6a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007e6e:	691a      	ldr	r2, [r3, #16]
 8007e70:	8afb      	ldrh	r3, [r7, #22]
 8007e72:	04d9      	lsls	r1, r3, #19
 8007e74:	4ba4      	ldr	r3, [pc, #656]	@ (8008108 <USB_EPStartXfer+0x3cc>)
 8007e76:	400b      	ands	r3, r1
 8007e78:	69b9      	ldr	r1, [r7, #24]
 8007e7a:	0148      	lsls	r0, r1, #5
 8007e7c:	69f9      	ldr	r1, [r7, #28]
 8007e7e:	4401      	add	r1, r0
 8007e80:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8007e84:	4313      	orrs	r3, r2
 8007e86:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8007e88:	68bb      	ldr	r3, [r7, #8]
 8007e8a:	791b      	ldrb	r3, [r3, #4]
 8007e8c:	2b01      	cmp	r3, #1
 8007e8e:	d122      	bne.n	8007ed6 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8007e90:	69bb      	ldr	r3, [r7, #24]
 8007e92:	015a      	lsls	r2, r3, #5
 8007e94:	69fb      	ldr	r3, [r7, #28]
 8007e96:	4413      	add	r3, r2
 8007e98:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007e9c:	691b      	ldr	r3, [r3, #16]
 8007e9e:	69ba      	ldr	r2, [r7, #24]
 8007ea0:	0151      	lsls	r1, r2, #5
 8007ea2:	69fa      	ldr	r2, [r7, #28]
 8007ea4:	440a      	add	r2, r1
 8007ea6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007eaa:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8007eae:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 8007eb0:	69bb      	ldr	r3, [r7, #24]
 8007eb2:	015a      	lsls	r2, r3, #5
 8007eb4:	69fb      	ldr	r3, [r7, #28]
 8007eb6:	4413      	add	r3, r2
 8007eb8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007ebc:	691a      	ldr	r2, [r3, #16]
 8007ebe:	8afb      	ldrh	r3, [r7, #22]
 8007ec0:	075b      	lsls	r3, r3, #29
 8007ec2:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8007ec6:	69b9      	ldr	r1, [r7, #24]
 8007ec8:	0148      	lsls	r0, r1, #5
 8007eca:	69f9      	ldr	r1, [r7, #28]
 8007ecc:	4401      	add	r1, r0
 8007ece:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8007ed2:	4313      	orrs	r3, r2
 8007ed4:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007ed6:	69bb      	ldr	r3, [r7, #24]
 8007ed8:	015a      	lsls	r2, r3, #5
 8007eda:	69fb      	ldr	r3, [r7, #28]
 8007edc:	4413      	add	r3, r2
 8007ede:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007ee2:	691a      	ldr	r2, [r3, #16]
 8007ee4:	68bb      	ldr	r3, [r7, #8]
 8007ee6:	691b      	ldr	r3, [r3, #16]
 8007ee8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007eec:	69b9      	ldr	r1, [r7, #24]
 8007eee:	0148      	lsls	r0, r1, #5
 8007ef0:	69f9      	ldr	r1, [r7, #28]
 8007ef2:	4401      	add	r1, r0
 8007ef4:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8007ef8:	4313      	orrs	r3, r2
 8007efa:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007efc:	79fb      	ldrb	r3, [r7, #7]
 8007efe:	2b01      	cmp	r3, #1
 8007f00:	d14b      	bne.n	8007f9a <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007f02:	68bb      	ldr	r3, [r7, #8]
 8007f04:	69db      	ldr	r3, [r3, #28]
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d009      	beq.n	8007f1e <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007f0a:	69bb      	ldr	r3, [r7, #24]
 8007f0c:	015a      	lsls	r2, r3, #5
 8007f0e:	69fb      	ldr	r3, [r7, #28]
 8007f10:	4413      	add	r3, r2
 8007f12:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007f16:	461a      	mov	r2, r3
 8007f18:	68bb      	ldr	r3, [r7, #8]
 8007f1a:	69db      	ldr	r3, [r3, #28]
 8007f1c:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8007f1e:	68bb      	ldr	r3, [r7, #8]
 8007f20:	791b      	ldrb	r3, [r3, #4]
 8007f22:	2b01      	cmp	r3, #1
 8007f24:	d128      	bne.n	8007f78 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007f26:	69fb      	ldr	r3, [r7, #28]
 8007f28:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007f2c:	689b      	ldr	r3, [r3, #8]
 8007f2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d110      	bne.n	8007f58 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007f36:	69bb      	ldr	r3, [r7, #24]
 8007f38:	015a      	lsls	r2, r3, #5
 8007f3a:	69fb      	ldr	r3, [r7, #28]
 8007f3c:	4413      	add	r3, r2
 8007f3e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	69ba      	ldr	r2, [r7, #24]
 8007f46:	0151      	lsls	r1, r2, #5
 8007f48:	69fa      	ldr	r2, [r7, #28]
 8007f4a:	440a      	add	r2, r1
 8007f4c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007f50:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007f54:	6013      	str	r3, [r2, #0]
 8007f56:	e00f      	b.n	8007f78 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007f58:	69bb      	ldr	r3, [r7, #24]
 8007f5a:	015a      	lsls	r2, r3, #5
 8007f5c:	69fb      	ldr	r3, [r7, #28]
 8007f5e:	4413      	add	r3, r2
 8007f60:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	69ba      	ldr	r2, [r7, #24]
 8007f68:	0151      	lsls	r1, r2, #5
 8007f6a:	69fa      	ldr	r2, [r7, #28]
 8007f6c:	440a      	add	r2, r1
 8007f6e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007f72:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007f76:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007f78:	69bb      	ldr	r3, [r7, #24]
 8007f7a:	015a      	lsls	r2, r3, #5
 8007f7c:	69fb      	ldr	r3, [r7, #28]
 8007f7e:	4413      	add	r3, r2
 8007f80:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	69ba      	ldr	r2, [r7, #24]
 8007f88:	0151      	lsls	r1, r2, #5
 8007f8a:	69fa      	ldr	r2, [r7, #28]
 8007f8c:	440a      	add	r2, r1
 8007f8e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007f92:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8007f96:	6013      	str	r3, [r2, #0]
 8007f98:	e166      	b.n	8008268 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007f9a:	69bb      	ldr	r3, [r7, #24]
 8007f9c:	015a      	lsls	r2, r3, #5
 8007f9e:	69fb      	ldr	r3, [r7, #28]
 8007fa0:	4413      	add	r3, r2
 8007fa2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	69ba      	ldr	r2, [r7, #24]
 8007faa:	0151      	lsls	r1, r2, #5
 8007fac:	69fa      	ldr	r2, [r7, #28]
 8007fae:	440a      	add	r2, r1
 8007fb0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007fb4:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8007fb8:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007fba:	68bb      	ldr	r3, [r7, #8]
 8007fbc:	791b      	ldrb	r3, [r3, #4]
 8007fbe:	2b01      	cmp	r3, #1
 8007fc0:	d015      	beq.n	8007fee <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8007fc2:	68bb      	ldr	r3, [r7, #8]
 8007fc4:	691b      	ldr	r3, [r3, #16]
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	f000 814e 	beq.w	8008268 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007fcc:	69fb      	ldr	r3, [r7, #28]
 8007fce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007fd2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007fd4:	68bb      	ldr	r3, [r7, #8]
 8007fd6:	781b      	ldrb	r3, [r3, #0]
 8007fd8:	f003 030f 	and.w	r3, r3, #15
 8007fdc:	2101      	movs	r1, #1
 8007fde:	fa01 f303 	lsl.w	r3, r1, r3
 8007fe2:	69f9      	ldr	r1, [r7, #28]
 8007fe4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007fe8:	4313      	orrs	r3, r2
 8007fea:	634b      	str	r3, [r1, #52]	@ 0x34
 8007fec:	e13c      	b.n	8008268 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007fee:	69fb      	ldr	r3, [r7, #28]
 8007ff0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007ff4:	689b      	ldr	r3, [r3, #8]
 8007ff6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d110      	bne.n	8008020 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007ffe:	69bb      	ldr	r3, [r7, #24]
 8008000:	015a      	lsls	r2, r3, #5
 8008002:	69fb      	ldr	r3, [r7, #28]
 8008004:	4413      	add	r3, r2
 8008006:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	69ba      	ldr	r2, [r7, #24]
 800800e:	0151      	lsls	r1, r2, #5
 8008010:	69fa      	ldr	r2, [r7, #28]
 8008012:	440a      	add	r2, r1
 8008014:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008018:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800801c:	6013      	str	r3, [r2, #0]
 800801e:	e00f      	b.n	8008040 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008020:	69bb      	ldr	r3, [r7, #24]
 8008022:	015a      	lsls	r2, r3, #5
 8008024:	69fb      	ldr	r3, [r7, #28]
 8008026:	4413      	add	r3, r2
 8008028:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	69ba      	ldr	r2, [r7, #24]
 8008030:	0151      	lsls	r1, r2, #5
 8008032:	69fa      	ldr	r2, [r7, #28]
 8008034:	440a      	add	r2, r1
 8008036:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800803a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800803e:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8008040:	68bb      	ldr	r3, [r7, #8]
 8008042:	68d9      	ldr	r1, [r3, #12]
 8008044:	68bb      	ldr	r3, [r7, #8]
 8008046:	781a      	ldrb	r2, [r3, #0]
 8008048:	68bb      	ldr	r3, [r7, #8]
 800804a:	691b      	ldr	r3, [r3, #16]
 800804c:	b298      	uxth	r0, r3
 800804e:	79fb      	ldrb	r3, [r7, #7]
 8008050:	9300      	str	r3, [sp, #0]
 8008052:	4603      	mov	r3, r0
 8008054:	68f8      	ldr	r0, [r7, #12]
 8008056:	f000 f9b9 	bl	80083cc <USB_WritePacket>
 800805a:	e105      	b.n	8008268 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800805c:	69bb      	ldr	r3, [r7, #24]
 800805e:	015a      	lsls	r2, r3, #5
 8008060:	69fb      	ldr	r3, [r7, #28]
 8008062:	4413      	add	r3, r2
 8008064:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008068:	691b      	ldr	r3, [r3, #16]
 800806a:	69ba      	ldr	r2, [r7, #24]
 800806c:	0151      	lsls	r1, r2, #5
 800806e:	69fa      	ldr	r2, [r7, #28]
 8008070:	440a      	add	r2, r1
 8008072:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008076:	0cdb      	lsrs	r3, r3, #19
 8008078:	04db      	lsls	r3, r3, #19
 800807a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800807c:	69bb      	ldr	r3, [r7, #24]
 800807e:	015a      	lsls	r2, r3, #5
 8008080:	69fb      	ldr	r3, [r7, #28]
 8008082:	4413      	add	r3, r2
 8008084:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008088:	691b      	ldr	r3, [r3, #16]
 800808a:	69ba      	ldr	r2, [r7, #24]
 800808c:	0151      	lsls	r1, r2, #5
 800808e:	69fa      	ldr	r2, [r7, #28]
 8008090:	440a      	add	r2, r1
 8008092:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008096:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800809a:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800809e:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 80080a0:	69bb      	ldr	r3, [r7, #24]
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d132      	bne.n	800810c <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 80080a6:	68bb      	ldr	r3, [r7, #8]
 80080a8:	691b      	ldr	r3, [r3, #16]
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d003      	beq.n	80080b6 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 80080ae:	68bb      	ldr	r3, [r7, #8]
 80080b0:	689a      	ldr	r2, [r3, #8]
 80080b2:	68bb      	ldr	r3, [r7, #8]
 80080b4:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 80080b6:	68bb      	ldr	r3, [r7, #8]
 80080b8:	689a      	ldr	r2, [r3, #8]
 80080ba:	68bb      	ldr	r3, [r7, #8]
 80080bc:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80080be:	69bb      	ldr	r3, [r7, #24]
 80080c0:	015a      	lsls	r2, r3, #5
 80080c2:	69fb      	ldr	r3, [r7, #28]
 80080c4:	4413      	add	r3, r2
 80080c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80080ca:	691a      	ldr	r2, [r3, #16]
 80080cc:	68bb      	ldr	r3, [r7, #8]
 80080ce:	6a1b      	ldr	r3, [r3, #32]
 80080d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80080d4:	69b9      	ldr	r1, [r7, #24]
 80080d6:	0148      	lsls	r0, r1, #5
 80080d8:	69f9      	ldr	r1, [r7, #28]
 80080da:	4401      	add	r1, r0
 80080dc:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80080e0:	4313      	orrs	r3, r2
 80080e2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80080e4:	69bb      	ldr	r3, [r7, #24]
 80080e6:	015a      	lsls	r2, r3, #5
 80080e8:	69fb      	ldr	r3, [r7, #28]
 80080ea:	4413      	add	r3, r2
 80080ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80080f0:	691b      	ldr	r3, [r3, #16]
 80080f2:	69ba      	ldr	r2, [r7, #24]
 80080f4:	0151      	lsls	r1, r2, #5
 80080f6:	69fa      	ldr	r2, [r7, #28]
 80080f8:	440a      	add	r2, r1
 80080fa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80080fe:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008102:	6113      	str	r3, [r2, #16]
 8008104:	e062      	b.n	80081cc <USB_EPStartXfer+0x490>
 8008106:	bf00      	nop
 8008108:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 800810c:	68bb      	ldr	r3, [r7, #8]
 800810e:	691b      	ldr	r3, [r3, #16]
 8008110:	2b00      	cmp	r3, #0
 8008112:	d123      	bne.n	800815c <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8008114:	69bb      	ldr	r3, [r7, #24]
 8008116:	015a      	lsls	r2, r3, #5
 8008118:	69fb      	ldr	r3, [r7, #28]
 800811a:	4413      	add	r3, r2
 800811c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008120:	691a      	ldr	r2, [r3, #16]
 8008122:	68bb      	ldr	r3, [r7, #8]
 8008124:	689b      	ldr	r3, [r3, #8]
 8008126:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800812a:	69b9      	ldr	r1, [r7, #24]
 800812c:	0148      	lsls	r0, r1, #5
 800812e:	69f9      	ldr	r1, [r7, #28]
 8008130:	4401      	add	r1, r0
 8008132:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8008136:	4313      	orrs	r3, r2
 8008138:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800813a:	69bb      	ldr	r3, [r7, #24]
 800813c:	015a      	lsls	r2, r3, #5
 800813e:	69fb      	ldr	r3, [r7, #28]
 8008140:	4413      	add	r3, r2
 8008142:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008146:	691b      	ldr	r3, [r3, #16]
 8008148:	69ba      	ldr	r2, [r7, #24]
 800814a:	0151      	lsls	r1, r2, #5
 800814c:	69fa      	ldr	r2, [r7, #28]
 800814e:	440a      	add	r2, r1
 8008150:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008154:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008158:	6113      	str	r3, [r2, #16]
 800815a:	e037      	b.n	80081cc <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800815c:	68bb      	ldr	r3, [r7, #8]
 800815e:	691a      	ldr	r2, [r3, #16]
 8008160:	68bb      	ldr	r3, [r7, #8]
 8008162:	689b      	ldr	r3, [r3, #8]
 8008164:	4413      	add	r3, r2
 8008166:	1e5a      	subs	r2, r3, #1
 8008168:	68bb      	ldr	r3, [r7, #8]
 800816a:	689b      	ldr	r3, [r3, #8]
 800816c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008170:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8008172:	68bb      	ldr	r3, [r7, #8]
 8008174:	689b      	ldr	r3, [r3, #8]
 8008176:	8afa      	ldrh	r2, [r7, #22]
 8008178:	fb03 f202 	mul.w	r2, r3, r2
 800817c:	68bb      	ldr	r3, [r7, #8]
 800817e:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8008180:	69bb      	ldr	r3, [r7, #24]
 8008182:	015a      	lsls	r2, r3, #5
 8008184:	69fb      	ldr	r3, [r7, #28]
 8008186:	4413      	add	r3, r2
 8008188:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800818c:	691a      	ldr	r2, [r3, #16]
 800818e:	8afb      	ldrh	r3, [r7, #22]
 8008190:	04d9      	lsls	r1, r3, #19
 8008192:	4b38      	ldr	r3, [pc, #224]	@ (8008274 <USB_EPStartXfer+0x538>)
 8008194:	400b      	ands	r3, r1
 8008196:	69b9      	ldr	r1, [r7, #24]
 8008198:	0148      	lsls	r0, r1, #5
 800819a:	69f9      	ldr	r1, [r7, #28]
 800819c:	4401      	add	r1, r0
 800819e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80081a2:	4313      	orrs	r3, r2
 80081a4:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80081a6:	69bb      	ldr	r3, [r7, #24]
 80081a8:	015a      	lsls	r2, r3, #5
 80081aa:	69fb      	ldr	r3, [r7, #28]
 80081ac:	4413      	add	r3, r2
 80081ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80081b2:	691a      	ldr	r2, [r3, #16]
 80081b4:	68bb      	ldr	r3, [r7, #8]
 80081b6:	6a1b      	ldr	r3, [r3, #32]
 80081b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80081bc:	69b9      	ldr	r1, [r7, #24]
 80081be:	0148      	lsls	r0, r1, #5
 80081c0:	69f9      	ldr	r1, [r7, #28]
 80081c2:	4401      	add	r1, r0
 80081c4:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80081c8:	4313      	orrs	r3, r2
 80081ca:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 80081cc:	79fb      	ldrb	r3, [r7, #7]
 80081ce:	2b01      	cmp	r3, #1
 80081d0:	d10d      	bne.n	80081ee <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80081d2:	68bb      	ldr	r3, [r7, #8]
 80081d4:	68db      	ldr	r3, [r3, #12]
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d009      	beq.n	80081ee <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80081da:	68bb      	ldr	r3, [r7, #8]
 80081dc:	68d9      	ldr	r1, [r3, #12]
 80081de:	69bb      	ldr	r3, [r7, #24]
 80081e0:	015a      	lsls	r2, r3, #5
 80081e2:	69fb      	ldr	r3, [r7, #28]
 80081e4:	4413      	add	r3, r2
 80081e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80081ea:	460a      	mov	r2, r1
 80081ec:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80081ee:	68bb      	ldr	r3, [r7, #8]
 80081f0:	791b      	ldrb	r3, [r3, #4]
 80081f2:	2b01      	cmp	r3, #1
 80081f4:	d128      	bne.n	8008248 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80081f6:	69fb      	ldr	r3, [r7, #28]
 80081f8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80081fc:	689b      	ldr	r3, [r3, #8]
 80081fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008202:	2b00      	cmp	r3, #0
 8008204:	d110      	bne.n	8008228 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8008206:	69bb      	ldr	r3, [r7, #24]
 8008208:	015a      	lsls	r2, r3, #5
 800820a:	69fb      	ldr	r3, [r7, #28]
 800820c:	4413      	add	r3, r2
 800820e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	69ba      	ldr	r2, [r7, #24]
 8008216:	0151      	lsls	r1, r2, #5
 8008218:	69fa      	ldr	r2, [r7, #28]
 800821a:	440a      	add	r2, r1
 800821c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008220:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8008224:	6013      	str	r3, [r2, #0]
 8008226:	e00f      	b.n	8008248 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8008228:	69bb      	ldr	r3, [r7, #24]
 800822a:	015a      	lsls	r2, r3, #5
 800822c:	69fb      	ldr	r3, [r7, #28]
 800822e:	4413      	add	r3, r2
 8008230:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	69ba      	ldr	r2, [r7, #24]
 8008238:	0151      	lsls	r1, r2, #5
 800823a:	69fa      	ldr	r2, [r7, #28]
 800823c:	440a      	add	r2, r1
 800823e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008242:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008246:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008248:	69bb      	ldr	r3, [r7, #24]
 800824a:	015a      	lsls	r2, r3, #5
 800824c:	69fb      	ldr	r3, [r7, #28]
 800824e:	4413      	add	r3, r2
 8008250:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	69ba      	ldr	r2, [r7, #24]
 8008258:	0151      	lsls	r1, r2, #5
 800825a:	69fa      	ldr	r2, [r7, #28]
 800825c:	440a      	add	r2, r1
 800825e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008262:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8008266:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008268:	2300      	movs	r3, #0
}
 800826a:	4618      	mov	r0, r3
 800826c:	3720      	adds	r7, #32
 800826e:	46bd      	mov	sp, r7
 8008270:	bd80      	pop	{r7, pc}
 8008272:	bf00      	nop
 8008274:	1ff80000 	.word	0x1ff80000

08008278 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008278:	b480      	push	{r7}
 800827a:	b087      	sub	sp, #28
 800827c:	af00      	add	r7, sp, #0
 800827e:	6078      	str	r0, [r7, #4]
 8008280:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008282:	2300      	movs	r3, #0
 8008284:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8008286:	2300      	movs	r3, #0
 8008288:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800828e:	683b      	ldr	r3, [r7, #0]
 8008290:	785b      	ldrb	r3, [r3, #1]
 8008292:	2b01      	cmp	r3, #1
 8008294:	d14a      	bne.n	800832c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008296:	683b      	ldr	r3, [r7, #0]
 8008298:	781b      	ldrb	r3, [r3, #0]
 800829a:	015a      	lsls	r2, r3, #5
 800829c:	693b      	ldr	r3, [r7, #16]
 800829e:	4413      	add	r3, r2
 80082a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80082aa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80082ae:	f040 8086 	bne.w	80083be <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80082b2:	683b      	ldr	r3, [r7, #0]
 80082b4:	781b      	ldrb	r3, [r3, #0]
 80082b6:	015a      	lsls	r2, r3, #5
 80082b8:	693b      	ldr	r3, [r7, #16]
 80082ba:	4413      	add	r3, r2
 80082bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	683a      	ldr	r2, [r7, #0]
 80082c4:	7812      	ldrb	r2, [r2, #0]
 80082c6:	0151      	lsls	r1, r2, #5
 80082c8:	693a      	ldr	r2, [r7, #16]
 80082ca:	440a      	add	r2, r1
 80082cc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80082d0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80082d4:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80082d6:	683b      	ldr	r3, [r7, #0]
 80082d8:	781b      	ldrb	r3, [r3, #0]
 80082da:	015a      	lsls	r2, r3, #5
 80082dc:	693b      	ldr	r3, [r7, #16]
 80082de:	4413      	add	r3, r2
 80082e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	683a      	ldr	r2, [r7, #0]
 80082e8:	7812      	ldrb	r2, [r2, #0]
 80082ea:	0151      	lsls	r1, r2, #5
 80082ec:	693a      	ldr	r2, [r7, #16]
 80082ee:	440a      	add	r2, r1
 80082f0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80082f4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80082f8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	3301      	adds	r3, #1
 80082fe:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	f242 7210 	movw	r2, #10000	@ 0x2710
 8008306:	4293      	cmp	r3, r2
 8008308:	d902      	bls.n	8008310 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800830a:	2301      	movs	r3, #1
 800830c:	75fb      	strb	r3, [r7, #23]
          break;
 800830e:	e056      	b.n	80083be <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8008310:	683b      	ldr	r3, [r7, #0]
 8008312:	781b      	ldrb	r3, [r3, #0]
 8008314:	015a      	lsls	r2, r3, #5
 8008316:	693b      	ldr	r3, [r7, #16]
 8008318:	4413      	add	r3, r2
 800831a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008324:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008328:	d0e7      	beq.n	80082fa <USB_EPStopXfer+0x82>
 800832a:	e048      	b.n	80083be <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800832c:	683b      	ldr	r3, [r7, #0]
 800832e:	781b      	ldrb	r3, [r3, #0]
 8008330:	015a      	lsls	r2, r3, #5
 8008332:	693b      	ldr	r3, [r7, #16]
 8008334:	4413      	add	r3, r2
 8008336:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008340:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008344:	d13b      	bne.n	80083be <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8008346:	683b      	ldr	r3, [r7, #0]
 8008348:	781b      	ldrb	r3, [r3, #0]
 800834a:	015a      	lsls	r2, r3, #5
 800834c:	693b      	ldr	r3, [r7, #16]
 800834e:	4413      	add	r3, r2
 8008350:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	683a      	ldr	r2, [r7, #0]
 8008358:	7812      	ldrb	r2, [r2, #0]
 800835a:	0151      	lsls	r1, r2, #5
 800835c:	693a      	ldr	r2, [r7, #16]
 800835e:	440a      	add	r2, r1
 8008360:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008364:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8008368:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800836a:	683b      	ldr	r3, [r7, #0]
 800836c:	781b      	ldrb	r3, [r3, #0]
 800836e:	015a      	lsls	r2, r3, #5
 8008370:	693b      	ldr	r3, [r7, #16]
 8008372:	4413      	add	r3, r2
 8008374:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	683a      	ldr	r2, [r7, #0]
 800837c:	7812      	ldrb	r2, [r2, #0]
 800837e:	0151      	lsls	r1, r2, #5
 8008380:	693a      	ldr	r2, [r7, #16]
 8008382:	440a      	add	r2, r1
 8008384:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008388:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800838c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	3301      	adds	r3, #1
 8008392:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	f242 7210 	movw	r2, #10000	@ 0x2710
 800839a:	4293      	cmp	r3, r2
 800839c:	d902      	bls.n	80083a4 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800839e:	2301      	movs	r3, #1
 80083a0:	75fb      	strb	r3, [r7, #23]
          break;
 80083a2:	e00c      	b.n	80083be <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80083a4:	683b      	ldr	r3, [r7, #0]
 80083a6:	781b      	ldrb	r3, [r3, #0]
 80083a8:	015a      	lsls	r2, r3, #5
 80083aa:	693b      	ldr	r3, [r7, #16]
 80083ac:	4413      	add	r3, r2
 80083ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80083b8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80083bc:	d0e7      	beq.n	800838e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80083be:	7dfb      	ldrb	r3, [r7, #23]
}
 80083c0:	4618      	mov	r0, r3
 80083c2:	371c      	adds	r7, #28
 80083c4:	46bd      	mov	sp, r7
 80083c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ca:	4770      	bx	lr

080083cc <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80083cc:	b480      	push	{r7}
 80083ce:	b089      	sub	sp, #36	@ 0x24
 80083d0:	af00      	add	r7, sp, #0
 80083d2:	60f8      	str	r0, [r7, #12]
 80083d4:	60b9      	str	r1, [r7, #8]
 80083d6:	4611      	mov	r1, r2
 80083d8:	461a      	mov	r2, r3
 80083da:	460b      	mov	r3, r1
 80083dc:	71fb      	strb	r3, [r7, #7]
 80083de:	4613      	mov	r3, r2
 80083e0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80083e6:	68bb      	ldr	r3, [r7, #8]
 80083e8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80083ea:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d123      	bne.n	800843a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80083f2:	88bb      	ldrh	r3, [r7, #4]
 80083f4:	3303      	adds	r3, #3
 80083f6:	089b      	lsrs	r3, r3, #2
 80083f8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80083fa:	2300      	movs	r3, #0
 80083fc:	61bb      	str	r3, [r7, #24]
 80083fe:	e018      	b.n	8008432 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008400:	79fb      	ldrb	r3, [r7, #7]
 8008402:	031a      	lsls	r2, r3, #12
 8008404:	697b      	ldr	r3, [r7, #20]
 8008406:	4413      	add	r3, r2
 8008408:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800840c:	461a      	mov	r2, r3
 800840e:	69fb      	ldr	r3, [r7, #28]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	6013      	str	r3, [r2, #0]
      pSrc++;
 8008414:	69fb      	ldr	r3, [r7, #28]
 8008416:	3301      	adds	r3, #1
 8008418:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800841a:	69fb      	ldr	r3, [r7, #28]
 800841c:	3301      	adds	r3, #1
 800841e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008420:	69fb      	ldr	r3, [r7, #28]
 8008422:	3301      	adds	r3, #1
 8008424:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008426:	69fb      	ldr	r3, [r7, #28]
 8008428:	3301      	adds	r3, #1
 800842a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800842c:	69bb      	ldr	r3, [r7, #24]
 800842e:	3301      	adds	r3, #1
 8008430:	61bb      	str	r3, [r7, #24]
 8008432:	69ba      	ldr	r2, [r7, #24]
 8008434:	693b      	ldr	r3, [r7, #16]
 8008436:	429a      	cmp	r2, r3
 8008438:	d3e2      	bcc.n	8008400 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800843a:	2300      	movs	r3, #0
}
 800843c:	4618      	mov	r0, r3
 800843e:	3724      	adds	r7, #36	@ 0x24
 8008440:	46bd      	mov	sp, r7
 8008442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008446:	4770      	bx	lr

08008448 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008448:	b480      	push	{r7}
 800844a:	b08b      	sub	sp, #44	@ 0x2c
 800844c:	af00      	add	r7, sp, #0
 800844e:	60f8      	str	r0, [r7, #12]
 8008450:	60b9      	str	r1, [r7, #8]
 8008452:	4613      	mov	r3, r2
 8008454:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800845a:	68bb      	ldr	r3, [r7, #8]
 800845c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800845e:	88fb      	ldrh	r3, [r7, #6]
 8008460:	089b      	lsrs	r3, r3, #2
 8008462:	b29b      	uxth	r3, r3
 8008464:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8008466:	88fb      	ldrh	r3, [r7, #6]
 8008468:	f003 0303 	and.w	r3, r3, #3
 800846c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800846e:	2300      	movs	r3, #0
 8008470:	623b      	str	r3, [r7, #32]
 8008472:	e014      	b.n	800849e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008474:	69bb      	ldr	r3, [r7, #24]
 8008476:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800847a:	681a      	ldr	r2, [r3, #0]
 800847c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800847e:	601a      	str	r2, [r3, #0]
    pDest++;
 8008480:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008482:	3301      	adds	r3, #1
 8008484:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8008486:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008488:	3301      	adds	r3, #1
 800848a:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800848c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800848e:	3301      	adds	r3, #1
 8008490:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8008492:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008494:	3301      	adds	r3, #1
 8008496:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8008498:	6a3b      	ldr	r3, [r7, #32]
 800849a:	3301      	adds	r3, #1
 800849c:	623b      	str	r3, [r7, #32]
 800849e:	6a3a      	ldr	r2, [r7, #32]
 80084a0:	697b      	ldr	r3, [r7, #20]
 80084a2:	429a      	cmp	r2, r3
 80084a4:	d3e6      	bcc.n	8008474 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80084a6:	8bfb      	ldrh	r3, [r7, #30]
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d01e      	beq.n	80084ea <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80084ac:	2300      	movs	r3, #0
 80084ae:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80084b0:	69bb      	ldr	r3, [r7, #24]
 80084b2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80084b6:	461a      	mov	r2, r3
 80084b8:	f107 0310 	add.w	r3, r7, #16
 80084bc:	6812      	ldr	r2, [r2, #0]
 80084be:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80084c0:	693a      	ldr	r2, [r7, #16]
 80084c2:	6a3b      	ldr	r3, [r7, #32]
 80084c4:	b2db      	uxtb	r3, r3
 80084c6:	00db      	lsls	r3, r3, #3
 80084c8:	fa22 f303 	lsr.w	r3, r2, r3
 80084cc:	b2da      	uxtb	r2, r3
 80084ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084d0:	701a      	strb	r2, [r3, #0]
      i++;
 80084d2:	6a3b      	ldr	r3, [r7, #32]
 80084d4:	3301      	adds	r3, #1
 80084d6:	623b      	str	r3, [r7, #32]
      pDest++;
 80084d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084da:	3301      	adds	r3, #1
 80084dc:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80084de:	8bfb      	ldrh	r3, [r7, #30]
 80084e0:	3b01      	subs	r3, #1
 80084e2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80084e4:	8bfb      	ldrh	r3, [r7, #30]
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d1ea      	bne.n	80084c0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80084ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80084ec:	4618      	mov	r0, r3
 80084ee:	372c      	adds	r7, #44	@ 0x2c
 80084f0:	46bd      	mov	sp, r7
 80084f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f6:	4770      	bx	lr

080084f8 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80084f8:	b480      	push	{r7}
 80084fa:	b085      	sub	sp, #20
 80084fc:	af00      	add	r7, sp, #0
 80084fe:	6078      	str	r0, [r7, #4]
 8008500:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008506:	683b      	ldr	r3, [r7, #0]
 8008508:	781b      	ldrb	r3, [r3, #0]
 800850a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800850c:	683b      	ldr	r3, [r7, #0]
 800850e:	785b      	ldrb	r3, [r3, #1]
 8008510:	2b01      	cmp	r3, #1
 8008512:	d12c      	bne.n	800856e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008514:	68bb      	ldr	r3, [r7, #8]
 8008516:	015a      	lsls	r2, r3, #5
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	4413      	add	r3, r2
 800851c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	2b00      	cmp	r3, #0
 8008524:	db12      	blt.n	800854c <USB_EPSetStall+0x54>
 8008526:	68bb      	ldr	r3, [r7, #8]
 8008528:	2b00      	cmp	r3, #0
 800852a:	d00f      	beq.n	800854c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800852c:	68bb      	ldr	r3, [r7, #8]
 800852e:	015a      	lsls	r2, r3, #5
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	4413      	add	r3, r2
 8008534:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	68ba      	ldr	r2, [r7, #8]
 800853c:	0151      	lsls	r1, r2, #5
 800853e:	68fa      	ldr	r2, [r7, #12]
 8008540:	440a      	add	r2, r1
 8008542:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008546:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800854a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800854c:	68bb      	ldr	r3, [r7, #8]
 800854e:	015a      	lsls	r2, r3, #5
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	4413      	add	r3, r2
 8008554:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	68ba      	ldr	r2, [r7, #8]
 800855c:	0151      	lsls	r1, r2, #5
 800855e:	68fa      	ldr	r2, [r7, #12]
 8008560:	440a      	add	r2, r1
 8008562:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008566:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800856a:	6013      	str	r3, [r2, #0]
 800856c:	e02b      	b.n	80085c6 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800856e:	68bb      	ldr	r3, [r7, #8]
 8008570:	015a      	lsls	r2, r3, #5
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	4413      	add	r3, r2
 8008576:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	2b00      	cmp	r3, #0
 800857e:	db12      	blt.n	80085a6 <USB_EPSetStall+0xae>
 8008580:	68bb      	ldr	r3, [r7, #8]
 8008582:	2b00      	cmp	r3, #0
 8008584:	d00f      	beq.n	80085a6 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8008586:	68bb      	ldr	r3, [r7, #8]
 8008588:	015a      	lsls	r2, r3, #5
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	4413      	add	r3, r2
 800858e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	68ba      	ldr	r2, [r7, #8]
 8008596:	0151      	lsls	r1, r2, #5
 8008598:	68fa      	ldr	r2, [r7, #12]
 800859a:	440a      	add	r2, r1
 800859c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80085a0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80085a4:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80085a6:	68bb      	ldr	r3, [r7, #8]
 80085a8:	015a      	lsls	r2, r3, #5
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	4413      	add	r3, r2
 80085ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	68ba      	ldr	r2, [r7, #8]
 80085b6:	0151      	lsls	r1, r2, #5
 80085b8:	68fa      	ldr	r2, [r7, #12]
 80085ba:	440a      	add	r2, r1
 80085bc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80085c0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80085c4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80085c6:	2300      	movs	r3, #0
}
 80085c8:	4618      	mov	r0, r3
 80085ca:	3714      	adds	r7, #20
 80085cc:	46bd      	mov	sp, r7
 80085ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d2:	4770      	bx	lr

080085d4 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80085d4:	b480      	push	{r7}
 80085d6:	b085      	sub	sp, #20
 80085d8:	af00      	add	r7, sp, #0
 80085da:	6078      	str	r0, [r7, #4]
 80085dc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80085e2:	683b      	ldr	r3, [r7, #0]
 80085e4:	781b      	ldrb	r3, [r3, #0]
 80085e6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80085e8:	683b      	ldr	r3, [r7, #0]
 80085ea:	785b      	ldrb	r3, [r3, #1]
 80085ec:	2b01      	cmp	r3, #1
 80085ee:	d128      	bne.n	8008642 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80085f0:	68bb      	ldr	r3, [r7, #8]
 80085f2:	015a      	lsls	r2, r3, #5
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	4413      	add	r3, r2
 80085f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	68ba      	ldr	r2, [r7, #8]
 8008600:	0151      	lsls	r1, r2, #5
 8008602:	68fa      	ldr	r2, [r7, #12]
 8008604:	440a      	add	r2, r1
 8008606:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800860a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800860e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008610:	683b      	ldr	r3, [r7, #0]
 8008612:	791b      	ldrb	r3, [r3, #4]
 8008614:	2b03      	cmp	r3, #3
 8008616:	d003      	beq.n	8008620 <USB_EPClearStall+0x4c>
 8008618:	683b      	ldr	r3, [r7, #0]
 800861a:	791b      	ldrb	r3, [r3, #4]
 800861c:	2b02      	cmp	r3, #2
 800861e:	d138      	bne.n	8008692 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008620:	68bb      	ldr	r3, [r7, #8]
 8008622:	015a      	lsls	r2, r3, #5
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	4413      	add	r3, r2
 8008628:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	68ba      	ldr	r2, [r7, #8]
 8008630:	0151      	lsls	r1, r2, #5
 8008632:	68fa      	ldr	r2, [r7, #12]
 8008634:	440a      	add	r2, r1
 8008636:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800863a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800863e:	6013      	str	r3, [r2, #0]
 8008640:	e027      	b.n	8008692 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008642:	68bb      	ldr	r3, [r7, #8]
 8008644:	015a      	lsls	r2, r3, #5
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	4413      	add	r3, r2
 800864a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	68ba      	ldr	r2, [r7, #8]
 8008652:	0151      	lsls	r1, r2, #5
 8008654:	68fa      	ldr	r2, [r7, #12]
 8008656:	440a      	add	r2, r1
 8008658:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800865c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008660:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008662:	683b      	ldr	r3, [r7, #0]
 8008664:	791b      	ldrb	r3, [r3, #4]
 8008666:	2b03      	cmp	r3, #3
 8008668:	d003      	beq.n	8008672 <USB_EPClearStall+0x9e>
 800866a:	683b      	ldr	r3, [r7, #0]
 800866c:	791b      	ldrb	r3, [r3, #4]
 800866e:	2b02      	cmp	r3, #2
 8008670:	d10f      	bne.n	8008692 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008672:	68bb      	ldr	r3, [r7, #8]
 8008674:	015a      	lsls	r2, r3, #5
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	4413      	add	r3, r2
 800867a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	68ba      	ldr	r2, [r7, #8]
 8008682:	0151      	lsls	r1, r2, #5
 8008684:	68fa      	ldr	r2, [r7, #12]
 8008686:	440a      	add	r2, r1
 8008688:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800868c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008690:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8008692:	2300      	movs	r3, #0
}
 8008694:	4618      	mov	r0, r3
 8008696:	3714      	adds	r7, #20
 8008698:	46bd      	mov	sp, r7
 800869a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800869e:	4770      	bx	lr

080086a0 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80086a0:	b480      	push	{r7}
 80086a2:	b085      	sub	sp, #20
 80086a4:	af00      	add	r7, sp, #0
 80086a6:	6078      	str	r0, [r7, #4]
 80086a8:	460b      	mov	r3, r1
 80086aa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	68fa      	ldr	r2, [r7, #12]
 80086ba:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80086be:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80086c2:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80086ca:	681a      	ldr	r2, [r3, #0]
 80086cc:	78fb      	ldrb	r3, [r7, #3]
 80086ce:	011b      	lsls	r3, r3, #4
 80086d0:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 80086d4:	68f9      	ldr	r1, [r7, #12]
 80086d6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80086da:	4313      	orrs	r3, r2
 80086dc:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80086de:	2300      	movs	r3, #0
}
 80086e0:	4618      	mov	r0, r3
 80086e2:	3714      	adds	r7, #20
 80086e4:	46bd      	mov	sp, r7
 80086e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ea:	4770      	bx	lr

080086ec <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80086ec:	b480      	push	{r7}
 80086ee:	b085      	sub	sp, #20
 80086f0:	af00      	add	r7, sp, #0
 80086f2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	68fa      	ldr	r2, [r7, #12]
 8008702:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8008706:	f023 0303 	bic.w	r3, r3, #3
 800870a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008712:	685b      	ldr	r3, [r3, #4]
 8008714:	68fa      	ldr	r2, [r7, #12]
 8008716:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800871a:	f023 0302 	bic.w	r3, r3, #2
 800871e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008720:	2300      	movs	r3, #0
}
 8008722:	4618      	mov	r0, r3
 8008724:	3714      	adds	r7, #20
 8008726:	46bd      	mov	sp, r7
 8008728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800872c:	4770      	bx	lr

0800872e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800872e:	b480      	push	{r7}
 8008730:	b085      	sub	sp, #20
 8008732:	af00      	add	r7, sp, #0
 8008734:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	68fa      	ldr	r2, [r7, #12]
 8008744:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8008748:	f023 0303 	bic.w	r3, r3, #3
 800874c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008754:	685b      	ldr	r3, [r3, #4]
 8008756:	68fa      	ldr	r2, [r7, #12]
 8008758:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800875c:	f043 0302 	orr.w	r3, r3, #2
 8008760:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008762:	2300      	movs	r3, #0
}
 8008764:	4618      	mov	r0, r3
 8008766:	3714      	adds	r7, #20
 8008768:	46bd      	mov	sp, r7
 800876a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800876e:	4770      	bx	lr

08008770 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8008770:	b480      	push	{r7}
 8008772:	b085      	sub	sp, #20
 8008774:	af00      	add	r7, sp, #0
 8008776:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	695b      	ldr	r3, [r3, #20]
 800877c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	699b      	ldr	r3, [r3, #24]
 8008782:	68fa      	ldr	r2, [r7, #12]
 8008784:	4013      	ands	r3, r2
 8008786:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008788:	68fb      	ldr	r3, [r7, #12]
}
 800878a:	4618      	mov	r0, r3
 800878c:	3714      	adds	r7, #20
 800878e:	46bd      	mov	sp, r7
 8008790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008794:	4770      	bx	lr

08008796 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8008796:	b480      	push	{r7}
 8008798:	b085      	sub	sp, #20
 800879a:	af00      	add	r7, sp, #0
 800879c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80087a8:	699b      	ldr	r3, [r3, #24]
 80087aa:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80087b2:	69db      	ldr	r3, [r3, #28]
 80087b4:	68ba      	ldr	r2, [r7, #8]
 80087b6:	4013      	ands	r3, r2
 80087b8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80087ba:	68bb      	ldr	r3, [r7, #8]
 80087bc:	0c1b      	lsrs	r3, r3, #16
}
 80087be:	4618      	mov	r0, r3
 80087c0:	3714      	adds	r7, #20
 80087c2:	46bd      	mov	sp, r7
 80087c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c8:	4770      	bx	lr

080087ca <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80087ca:	b480      	push	{r7}
 80087cc:	b085      	sub	sp, #20
 80087ce:	af00      	add	r7, sp, #0
 80087d0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80087dc:	699b      	ldr	r3, [r3, #24]
 80087de:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80087e6:	69db      	ldr	r3, [r3, #28]
 80087e8:	68ba      	ldr	r2, [r7, #8]
 80087ea:	4013      	ands	r3, r2
 80087ec:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80087ee:	68bb      	ldr	r3, [r7, #8]
 80087f0:	b29b      	uxth	r3, r3
}
 80087f2:	4618      	mov	r0, r3
 80087f4:	3714      	adds	r7, #20
 80087f6:	46bd      	mov	sp, r7
 80087f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087fc:	4770      	bx	lr

080087fe <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80087fe:	b480      	push	{r7}
 8008800:	b085      	sub	sp, #20
 8008802:	af00      	add	r7, sp, #0
 8008804:	6078      	str	r0, [r7, #4]
 8008806:	460b      	mov	r3, r1
 8008808:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800880e:	78fb      	ldrb	r3, [r7, #3]
 8008810:	015a      	lsls	r2, r3, #5
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	4413      	add	r3, r2
 8008816:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800881a:	689b      	ldr	r3, [r3, #8]
 800881c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008824:	695b      	ldr	r3, [r3, #20]
 8008826:	68ba      	ldr	r2, [r7, #8]
 8008828:	4013      	ands	r3, r2
 800882a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800882c:	68bb      	ldr	r3, [r7, #8]
}
 800882e:	4618      	mov	r0, r3
 8008830:	3714      	adds	r7, #20
 8008832:	46bd      	mov	sp, r7
 8008834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008838:	4770      	bx	lr

0800883a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800883a:	b480      	push	{r7}
 800883c:	b087      	sub	sp, #28
 800883e:	af00      	add	r7, sp, #0
 8008840:	6078      	str	r0, [r7, #4]
 8008842:	460b      	mov	r3, r1
 8008844:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800884a:	697b      	ldr	r3, [r7, #20]
 800884c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008850:	691b      	ldr	r3, [r3, #16]
 8008852:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8008854:	697b      	ldr	r3, [r7, #20]
 8008856:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800885a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800885c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800885e:	78fb      	ldrb	r3, [r7, #3]
 8008860:	f003 030f 	and.w	r3, r3, #15
 8008864:	68fa      	ldr	r2, [r7, #12]
 8008866:	fa22 f303 	lsr.w	r3, r2, r3
 800886a:	01db      	lsls	r3, r3, #7
 800886c:	b2db      	uxtb	r3, r3
 800886e:	693a      	ldr	r2, [r7, #16]
 8008870:	4313      	orrs	r3, r2
 8008872:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8008874:	78fb      	ldrb	r3, [r7, #3]
 8008876:	015a      	lsls	r2, r3, #5
 8008878:	697b      	ldr	r3, [r7, #20]
 800887a:	4413      	add	r3, r2
 800887c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008880:	689b      	ldr	r3, [r3, #8]
 8008882:	693a      	ldr	r2, [r7, #16]
 8008884:	4013      	ands	r3, r2
 8008886:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008888:	68bb      	ldr	r3, [r7, #8]
}
 800888a:	4618      	mov	r0, r3
 800888c:	371c      	adds	r7, #28
 800888e:	46bd      	mov	sp, r7
 8008890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008894:	4770      	bx	lr

08008896 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8008896:	b480      	push	{r7}
 8008898:	b083      	sub	sp, #12
 800889a:	af00      	add	r7, sp, #0
 800889c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	695b      	ldr	r3, [r3, #20]
 80088a2:	f003 0301 	and.w	r3, r3, #1
}
 80088a6:	4618      	mov	r0, r3
 80088a8:	370c      	adds	r7, #12
 80088aa:	46bd      	mov	sp, r7
 80088ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b0:	4770      	bx	lr

080088b2 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 80088b2:	b480      	push	{r7}
 80088b4:	b085      	sub	sp, #20
 80088b6:	af00      	add	r7, sp, #0
 80088b8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	68fa      	ldr	r2, [r7, #12]
 80088c8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80088cc:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80088d0:	f023 0307 	bic.w	r3, r3, #7
 80088d4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80088dc:	685b      	ldr	r3, [r3, #4]
 80088de:	68fa      	ldr	r2, [r7, #12]
 80088e0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80088e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80088e8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80088ea:	2300      	movs	r3, #0
}
 80088ec:	4618      	mov	r0, r3
 80088ee:	3714      	adds	r7, #20
 80088f0:	46bd      	mov	sp, r7
 80088f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f6:	4770      	bx	lr

080088f8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 80088f8:	b480      	push	{r7}
 80088fa:	b087      	sub	sp, #28
 80088fc:	af00      	add	r7, sp, #0
 80088fe:	60f8      	str	r0, [r7, #12]
 8008900:	460b      	mov	r3, r1
 8008902:	607a      	str	r2, [r7, #4]
 8008904:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	333c      	adds	r3, #60	@ 0x3c
 800890e:	3304      	adds	r3, #4
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8008914:	693b      	ldr	r3, [r7, #16]
 8008916:	4a26      	ldr	r2, [pc, #152]	@ (80089b0 <USB_EP0_OutStart+0xb8>)
 8008918:	4293      	cmp	r3, r2
 800891a:	d90a      	bls.n	8008932 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800891c:	697b      	ldr	r3, [r7, #20]
 800891e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008928:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800892c:	d101      	bne.n	8008932 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800892e:	2300      	movs	r3, #0
 8008930:	e037      	b.n	80089a2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8008932:	697b      	ldr	r3, [r7, #20]
 8008934:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008938:	461a      	mov	r2, r3
 800893a:	2300      	movs	r3, #0
 800893c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800893e:	697b      	ldr	r3, [r7, #20]
 8008940:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008944:	691b      	ldr	r3, [r3, #16]
 8008946:	697a      	ldr	r2, [r7, #20]
 8008948:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800894c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008950:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8008952:	697b      	ldr	r3, [r7, #20]
 8008954:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008958:	691b      	ldr	r3, [r3, #16]
 800895a:	697a      	ldr	r2, [r7, #20]
 800895c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008960:	f043 0318 	orr.w	r3, r3, #24
 8008964:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8008966:	697b      	ldr	r3, [r7, #20]
 8008968:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800896c:	691b      	ldr	r3, [r3, #16]
 800896e:	697a      	ldr	r2, [r7, #20]
 8008970:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008974:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8008978:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800897a:	7afb      	ldrb	r3, [r7, #11]
 800897c:	2b01      	cmp	r3, #1
 800897e:	d10f      	bne.n	80089a0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8008980:	697b      	ldr	r3, [r7, #20]
 8008982:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008986:	461a      	mov	r2, r3
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800898c:	697b      	ldr	r3, [r7, #20]
 800898e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	697a      	ldr	r2, [r7, #20]
 8008996:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800899a:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800899e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80089a0:	2300      	movs	r3, #0
}
 80089a2:	4618      	mov	r0, r3
 80089a4:	371c      	adds	r7, #28
 80089a6:	46bd      	mov	sp, r7
 80089a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ac:	4770      	bx	lr
 80089ae:	bf00      	nop
 80089b0:	4f54300a 	.word	0x4f54300a

080089b4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80089b4:	b480      	push	{r7}
 80089b6:	b085      	sub	sp, #20
 80089b8:	af00      	add	r7, sp, #0
 80089ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80089bc:	2300      	movs	r3, #0
 80089be:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	3301      	adds	r3, #1
 80089c4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80089cc:	d901      	bls.n	80089d2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80089ce:	2303      	movs	r3, #3
 80089d0:	e01b      	b.n	8008a0a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	691b      	ldr	r3, [r3, #16]
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	daf2      	bge.n	80089c0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80089da:	2300      	movs	r3, #0
 80089dc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	691b      	ldr	r3, [r3, #16]
 80089e2:	f043 0201 	orr.w	r2, r3, #1
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	3301      	adds	r3, #1
 80089ee:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80089f6:	d901      	bls.n	80089fc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80089f8:	2303      	movs	r3, #3
 80089fa:	e006      	b.n	8008a0a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	691b      	ldr	r3, [r3, #16]
 8008a00:	f003 0301 	and.w	r3, r3, #1
 8008a04:	2b01      	cmp	r3, #1
 8008a06:	d0f0      	beq.n	80089ea <USB_CoreReset+0x36>

  return HAL_OK;
 8008a08:	2300      	movs	r3, #0
}
 8008a0a:	4618      	mov	r0, r3
 8008a0c:	3714      	adds	r7, #20
 8008a0e:	46bd      	mov	sp, r7
 8008a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a14:	4770      	bx	lr
	...

08008a18 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8008a18:	b580      	push	{r7, lr}
 8008a1a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8008a1c:	4904      	ldr	r1, [pc, #16]	@ (8008a30 <MX_FATFS_Init+0x18>)
 8008a1e:	4805      	ldr	r0, [pc, #20]	@ (8008a34 <MX_FATFS_Init+0x1c>)
 8008a20:	f006 ffe4 	bl	800f9ec <FATFS_LinkDriver>
 8008a24:	4603      	mov	r3, r0
 8008a26:	461a      	mov	r2, r3
 8008a28:	4b03      	ldr	r3, [pc, #12]	@ (8008a38 <MX_FATFS_Init+0x20>)
 8008a2a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8008a2c:	bf00      	nop
 8008a2e:	bd80      	pop	{r7, pc}
 8008a30:	200007d8 	.word	0x200007d8
 8008a34:	20000014 	.word	0x20000014
 8008a38:	200007d4 	.word	0x200007d4

08008a3c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8008a3c:	b480      	push	{r7}
 8008a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8008a40:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8008a42:	4618      	mov	r0, r3
 8008a44:	46bd      	mov	sp, r7
 8008a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a4a:	4770      	bx	lr

08008a4c <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8008a4c:	b580      	push	{r7, lr}
 8008a4e:	b082      	sub	sp, #8
 8008a50:	af00      	add	r7, sp, #0
 8008a52:	4603      	mov	r3, r0
 8008a54:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return USER_SPI_initialize(pdrv);
 8008a56:	79fb      	ldrb	r3, [r7, #7]
 8008a58:	4618      	mov	r0, r3
 8008a5a:	f000 f9b5 	bl	8008dc8 <USER_SPI_initialize>
 8008a5e:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8008a60:	4618      	mov	r0, r3
 8008a62:	3708      	adds	r7, #8
 8008a64:	46bd      	mov	sp, r7
 8008a66:	bd80      	pop	{r7, pc}

08008a68 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8008a68:	b580      	push	{r7, lr}
 8008a6a:	b082      	sub	sp, #8
 8008a6c:	af00      	add	r7, sp, #0
 8008a6e:	4603      	mov	r3, r0
 8008a70:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return USER_SPI_status(pdrv);
 8008a72:	79fb      	ldrb	r3, [r7, #7]
 8008a74:	4618      	mov	r0, r3
 8008a76:	f000 fa79 	bl	8008f6c <USER_SPI_status>
 8008a7a:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8008a7c:	4618      	mov	r0, r3
 8008a7e:	3708      	adds	r7, #8
 8008a80:	46bd      	mov	sp, r7
 8008a82:	bd80      	pop	{r7, pc}

08008a84 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8008a84:	b580      	push	{r7, lr}
 8008a86:	b084      	sub	sp, #16
 8008a88:	af00      	add	r7, sp, #0
 8008a8a:	60b9      	str	r1, [r7, #8]
 8008a8c:	607a      	str	r2, [r7, #4]
 8008a8e:	603b      	str	r3, [r7, #0]
 8008a90:	4603      	mov	r3, r0
 8008a92:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return USER_SPI_read(pdrv, buff, sector, count);
 8008a94:	7bf8      	ldrb	r0, [r7, #15]
 8008a96:	683b      	ldr	r3, [r7, #0]
 8008a98:	687a      	ldr	r2, [r7, #4]
 8008a9a:	68b9      	ldr	r1, [r7, #8]
 8008a9c:	f000 fa9a 	bl	8008fd4 <USER_SPI_read>
 8008aa0:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8008aa2:	4618      	mov	r0, r3
 8008aa4:	3710      	adds	r7, #16
 8008aa6:	46bd      	mov	sp, r7
 8008aa8:	bd80      	pop	{r7, pc}

08008aaa <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8008aaa:	b580      	push	{r7, lr}
 8008aac:	b084      	sub	sp, #16
 8008aae:	af00      	add	r7, sp, #0
 8008ab0:	60b9      	str	r1, [r7, #8]
 8008ab2:	607a      	str	r2, [r7, #4]
 8008ab4:	603b      	str	r3, [r7, #0]
 8008ab6:	4603      	mov	r3, r0
 8008ab8:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return USER_SPI_write(pdrv, buff, sector, count);
 8008aba:	7bf8      	ldrb	r0, [r7, #15]
 8008abc:	683b      	ldr	r3, [r7, #0]
 8008abe:	687a      	ldr	r2, [r7, #4]
 8008ac0:	68b9      	ldr	r1, [r7, #8]
 8008ac2:	f000 fb1f 	bl	8009104 <USER_SPI_write>
 8008ac6:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8008ac8:	4618      	mov	r0, r3
 8008aca:	3710      	adds	r7, #16
 8008acc:	46bd      	mov	sp, r7
 8008ace:	bd80      	pop	{r7, pc}

08008ad0 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8008ad0:	b580      	push	{r7, lr}
 8008ad2:	b082      	sub	sp, #8
 8008ad4:	af00      	add	r7, sp, #0
 8008ad6:	4603      	mov	r3, r0
 8008ad8:	603a      	str	r2, [r7, #0]
 8008ada:	71fb      	strb	r3, [r7, #7]
 8008adc:	460b      	mov	r3, r1
 8008ade:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return  USER_SPI_ioctl(pdrv, cmd, buff);
 8008ae0:	79b9      	ldrb	r1, [r7, #6]
 8008ae2:	79fb      	ldrb	r3, [r7, #7]
 8008ae4:	683a      	ldr	r2, [r7, #0]
 8008ae6:	4618      	mov	r0, r3
 8008ae8:	f000 fb88 	bl	80091fc <USER_SPI_ioctl>
 8008aec:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8008aee:	4618      	mov	r0, r3
 8008af0:	3708      	adds	r7, #8
 8008af2:	46bd      	mov	sp, r7
 8008af4:	bd80      	pop	{r7, pc}
	...

08008af8 <set_sd_interface_speed>:
#define DESELECT()			(GPIO_SD_CS->BSRR = GPIO_SD_CS_PIN)

//скорость интерфейса SPI
//speed от 0 (FCLK/2) до 7 (FCLK/256)
static void set_sd_interface_speed(uint8_t speed)
{
 8008af8:	b480      	push	{r7}
 8008afa:	b083      	sub	sp, #12
 8008afc:	af00      	add	r7, sp, #0
 8008afe:	4603      	mov	r3, r0
 8008b00:	71fb      	strb	r3, [r7, #7]
	if (speed > 7) speed = 7;
 8008b02:	79fb      	ldrb	r3, [r7, #7]
 8008b04:	2b07      	cmp	r3, #7
 8008b06:	d901      	bls.n	8008b0c <set_sd_interface_speed+0x14>
 8008b08:	2307      	movs	r3, #7
 8008b0a:	71fb      	strb	r3, [r7, #7]
	SPI_SD->CR1 &= ~SPI_CR1_SPE; //SPI отключено
 8008b0c:	4b13      	ldr	r3, [pc, #76]	@ (8008b5c <set_sd_interface_speed+0x64>)
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	681a      	ldr	r2, [r3, #0]
 8008b12:	4b12      	ldr	r3, [pc, #72]	@ (8008b5c <set_sd_interface_speed+0x64>)
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008b1a:	601a      	str	r2, [r3, #0]
	SPI_SD->CR1 &= ~(0x07UL<<(3U)); //маска бит скорости
 8008b1c:	4b0f      	ldr	r3, [pc, #60]	@ (8008b5c <set_sd_interface_speed+0x64>)
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	681a      	ldr	r2, [r3, #0]
 8008b22:	4b0e      	ldr	r3, [pc, #56]	@ (8008b5c <set_sd_interface_speed+0x64>)
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	f022 0238 	bic.w	r2, r2, #56	@ 0x38
 8008b2a:	601a      	str	r2, [r3, #0]
	SPI_SD->CR1 |= (uint32_t)(speed<<(3U));
 8008b2c:	4b0b      	ldr	r3, [pc, #44]	@ (8008b5c <set_sd_interface_speed+0x64>)
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	6819      	ldr	r1, [r3, #0]
 8008b32:	79fb      	ldrb	r3, [r7, #7]
 8008b34:	00da      	lsls	r2, r3, #3
 8008b36:	4b09      	ldr	r3, [pc, #36]	@ (8008b5c <set_sd_interface_speed+0x64>)
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	430a      	orrs	r2, r1
 8008b3c:	601a      	str	r2, [r3, #0]
	SPI_SD->CR1 |= SPI_CR1_SPE; // SPI enable
 8008b3e:	4b07      	ldr	r3, [pc, #28]	@ (8008b5c <set_sd_interface_speed+0x64>)
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	681a      	ldr	r2, [r3, #0]
 8008b44:	4b05      	ldr	r3, [pc, #20]	@ (8008b5c <set_sd_interface_speed+0x64>)
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008b4c:	601a      	str	r2, [r3, #0]
}
 8008b4e:	bf00      	nop
 8008b50:	370c      	adds	r7, #12
 8008b52:	46bd      	mov	sp, r7
 8008b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b58:	4770      	bx	lr
 8008b5a:	bf00      	nop
 8008b5c:	20000244 	.word	0x20000244

08008b60 <spi_rw>:

static BYTE spi_rw(BYTE wval)
{
 8008b60:	b480      	push	{r7}
 8008b62:	b083      	sub	sp, #12
 8008b64:	af00      	add	r7, sp, #0
 8008b66:	4603      	mov	r3, r0
 8008b68:	71fb      	strb	r3, [r7, #7]
	*((volatile uint8_t *)&SPI_SD->DR) = wval;
 8008b6a:	4b10      	ldr	r3, [pc, #64]	@ (8008bac <spi_rw+0x4c>)
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	330c      	adds	r3, #12
 8008b70:	79fa      	ldrb	r2, [r7, #7]
 8008b72:	701a      	strb	r2, [r3, #0]
	while(!(SPI_SD->SR & SPI_SR_RXNE)) ;
 8008b74:	bf00      	nop
 8008b76:	4b0d      	ldr	r3, [pc, #52]	@ (8008bac <spi_rw+0x4c>)
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	689b      	ldr	r3, [r3, #8]
 8008b7c:	f003 0301 	and.w	r3, r3, #1
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d0f8      	beq.n	8008b76 <spi_rw+0x16>
	while(SPI_SD->SR & SPI_SR_BSY) ;
 8008b84:	bf00      	nop
 8008b86:	4b09      	ldr	r3, [pc, #36]	@ (8008bac <spi_rw+0x4c>)
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	689b      	ldr	r3, [r3, #8]
 8008b8c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d1f8      	bne.n	8008b86 <spi_rw+0x26>
	return *((volatile uint8_t *)&SPI_SD->DR);
 8008b94:	4b05      	ldr	r3, [pc, #20]	@ (8008bac <spi_rw+0x4c>)
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	330c      	adds	r3, #12
 8008b9a:	781b      	ldrb	r3, [r3, #0]
 8008b9c:	b2db      	uxtb	r3, r3
}
 8008b9e:	4618      	mov	r0, r3
 8008ba0:	370c      	adds	r7, #12
 8008ba2:	46bd      	mov	sp, r7
 8008ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba8:	4770      	bx	lr
 8008baa:	bf00      	nop
 8008bac:	20000244 	.word	0x20000244

08008bb0 <HAL_SPI_TxRxCpltCallback>:
#define rcvr_spi_m(dst)  *(dst)=spi_rw(0xFF)

#ifdef SD_USE_DMA

void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) //коллбэк по окончанию приема/передачи
{
 8008bb0:	b580      	push	{r7, lr}
 8008bb2:	b082      	sub	sp, #8
 8008bb4:	af00      	add	r7, sp, #0
 8008bb6:	6078      	str	r0, [r7, #4]
	if (hspi == &SD_SPI_HANDLE)
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	4a05      	ldr	r2, [pc, #20]	@ (8008bd0 <HAL_SPI_TxRxCpltCallback+0x20>)
 8008bbc:	4293      	cmp	r3, r2
 8008bbe:	d102      	bne.n	8008bc6 <HAL_SPI_TxRxCpltCallback+0x16>
	{
		HAL_SPI_DMAStop(&SD_SPI_HANDLE);
 8008bc0:	4803      	ldr	r0, [pc, #12]	@ (8008bd0 <HAL_SPI_TxRxCpltCallback+0x20>)
 8008bc2:	f7fd fe9b 	bl	80068fc <HAL_SPI_DMAStop>
	}
}
 8008bc6:	bf00      	nop
 8008bc8:	3708      	adds	r7, #8
 8008bca:	46bd      	mov	sp, r7
 8008bcc:	bd80      	pop	{r7, pc}
 8008bce:	bf00      	nop
 8008bd0:	20000244 	.word	0x20000244

08008bd4 <SPI_DMA_TransmitReceive>:
	SPI_Transfer_Transmit
} SPI_TransferType;

//SPI DMA прием/передача полный дуплекс мастер
static void SPI_DMA_TransmitReceive(SPI_TransferType type, const BYTE* buff, uint16_t buff_size)
{
 8008bd4:	b580      	push	{r7, lr}
 8008bd6:	b088      	sub	sp, #32
 8008bd8:	af00      	add	r7, sp, #0
 8008bda:	4603      	mov	r3, r0
 8008bdc:	6039      	str	r1, [r7, #0]
 8008bde:	71fb      	strb	r3, [r7, #7]
 8008be0:	4613      	mov	r3, r2
 8008be2:	80bb      	strh	r3, [r7, #4]
	uint8_t tmp = 0xFF;
 8008be4:	23ff      	movs	r3, #255	@ 0xff
 8008be6:	73fb      	strb	r3, [r7, #15]
	uint8_t *TXdata, *RXdata;
	DMA_Stream_TypeDef *hdma_rx = SD_SPI_HANDLE.hdmarx->Instance;
 8008be8:	4b34      	ldr	r3, [pc, #208]	@ (8008cbc <SPI_DMA_TransmitReceive+0xe8>)
 8008bea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	617b      	str	r3, [r7, #20]
	DMA_Stream_TypeDef *hdma_tx = SD_SPI_HANDLE.hdmatx->Instance;
 8008bf0:	4b32      	ldr	r3, [pc, #200]	@ (8008cbc <SPI_DMA_TransmitReceive+0xe8>)
 8008bf2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	613b      	str	r3, [r7, #16]
	hdma_tx->CR &= ~DMA_SxCR_EN; //выключаем канал DMA передачи
 8008bf8:	693b      	ldr	r3, [r7, #16]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	f023 0201 	bic.w	r2, r3, #1
 8008c00:	693b      	ldr	r3, [r7, #16]
 8008c02:	601a      	str	r2, [r3, #0]
	hdma_rx->CR &= ~DMA_SxCR_EN; //выключаем канал DMA приема
 8008c04:	697b      	ldr	r3, [r7, #20]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	f023 0201 	bic.w	r2, r3, #1
 8008c0c:	697b      	ldr	r3, [r7, #20]
 8008c0e:	601a      	str	r2, [r3, #0]
	//ждем отключения каналов DMA
	while ((hdma_tx->CR & DMA_SxCR_EN) || (hdma_rx->CR & DMA_SxCR_EN)) {__NOP();}
 8008c10:	e000      	b.n	8008c14 <SPI_DMA_TransmitReceive+0x40>
 8008c12:	bf00      	nop
 8008c14:	693b      	ldr	r3, [r7, #16]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	f003 0301 	and.w	r3, r3, #1
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d1f8      	bne.n	8008c12 <SPI_DMA_TransmitReceive+0x3e>
 8008c20:	697b      	ldr	r3, [r7, #20]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	f003 0301 	and.w	r3, r3, #1
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d1f2      	bne.n	8008c12 <SPI_DMA_TransmitReceive+0x3e>
	if(type == SPI_Transfer_Receive) //настройка каналов DMA для приема данных с карты
 8008c2c:	79fb      	ldrb	r3, [r7, #7]
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d117      	bne.n	8008c62 <SPI_DMA_TransmitReceive+0x8e>
	{
		hdma_rx->CR &= ~DMA_SxCR_PINC; 	//DMA_PINC_DISABLE
 8008c32:	697b      	ldr	r3, [r7, #20]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8008c3a:	697b      	ldr	r3, [r7, #20]
 8008c3c:	601a      	str	r2, [r3, #0]
		hdma_rx->CR |= DMA_SxCR_MINC;  	//DMA_MINC_ENABLE
 8008c3e:	697b      	ldr	r3, [r7, #20]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8008c46:	697b      	ldr	r3, [r7, #20]
 8008c48:	601a      	str	r2, [r3, #0]
		hdma_tx->CR &= ~(DMA_SxCR_PINC | DMA_SxCR_MINC); 	//DMA_PINC_DISABLE & DMA_MINC_DISABLE
 8008c4a:	693b      	ldr	r3, [r7, #16]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8008c52:	693b      	ldr	r3, [r7, #16]
 8008c54:	601a      	str	r2, [r3, #0]
	    TXdata = (uint8_t*)&tmp;
 8008c56:	f107 030f 	add.w	r3, r7, #15
 8008c5a:	61fb      	str	r3, [r7, #28]
	    RXdata = (uint8_t*)buff;
 8008c5c:	683b      	ldr	r3, [r7, #0]
 8008c5e:	61bb      	str	r3, [r7, #24]
 8008c60:	e019      	b.n	8008c96 <SPI_DMA_TransmitReceive+0xc2>
	}
	else if (type == SPI_Transfer_Transmit)//настройка канала DMA для передачи данных на карту
 8008c62:	79fb      	ldrb	r3, [r7, #7]
 8008c64:	2b01      	cmp	r3, #1
 8008c66:	d116      	bne.n	8008c96 <SPI_DMA_TransmitReceive+0xc2>
	{
		hdma_rx->CR &= ~(DMA_SxCR_PINC | DMA_SxCR_MINC); 	//DMA_PINC_DISABLE & DMA_MINC_DISABLE
 8008c68:	697b      	ldr	r3, [r7, #20]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8008c70:	697b      	ldr	r3, [r7, #20]
 8008c72:	601a      	str	r2, [r3, #0]
		hdma_tx->CR &= ~DMA_SxCR_PINC; 	//DMA_PINC_DISABLE
 8008c74:	693b      	ldr	r3, [r7, #16]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8008c7c:	693b      	ldr	r3, [r7, #16]
 8008c7e:	601a      	str	r2, [r3, #0]
		hdma_tx->CR |= DMA_SxCR_MINC; 	//DMA_MINC_ENABLE
 8008c80:	693b      	ldr	r3, [r7, #16]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8008c88:	693b      	ldr	r3, [r7, #16]
 8008c8a:	601a      	str	r2, [r3, #0]
	    TXdata = (uint8_t*)buff;
 8008c8c:	683b      	ldr	r3, [r7, #0]
 8008c8e:	61fb      	str	r3, [r7, #28]
	    RXdata = (uint8_t*)&tmp;
 8008c90:	f107 030f 	add.w	r3, r7, #15
 8008c94:	61bb      	str	r3, [r7, #24]
	}
	HAL_SPI_TransmitReceive_DMA(&SD_SPI_HANDLE, TXdata, RXdata, buff_size);
 8008c96:	88bb      	ldrh	r3, [r7, #4]
 8008c98:	69ba      	ldr	r2, [r7, #24]
 8008c9a:	69f9      	ldr	r1, [r7, #28]
 8008c9c:	4807      	ldr	r0, [pc, #28]	@ (8008cbc <SPI_DMA_TransmitReceive+0xe8>)
 8008c9e:	f7fd fd31 	bl	8006704 <HAL_SPI_TransmitReceive_DMA>
	while (SD_SPI_HANDLE.State != HAL_SPI_STATE_READY) ;
 8008ca2:	bf00      	nop
 8008ca4:	4b05      	ldr	r3, [pc, #20]	@ (8008cbc <SPI_DMA_TransmitReceive+0xe8>)
 8008ca6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8008caa:	b2db      	uxtb	r3, r3
 8008cac:	2b01      	cmp	r3, #1
 8008cae:	d1f9      	bne.n	8008ca4 <SPI_DMA_TransmitReceive+0xd0>
}
 8008cb0:	bf00      	nop
 8008cb2:	bf00      	nop
 8008cb4:	3720      	adds	r7, #32
 8008cb6:	46bd      	mov	sp, r7
 8008cb8:	bd80      	pop	{r7, pc}
 8008cba:	bf00      	nop
 8008cbc:	20000244 	.word	0x20000244

08008cc0 <wait_ready>:
/* SD card definitions */
static volatile DSTATUS Stat = STA_NOINIT; //	Disk status
static BYTE CardType;	 // Card type flags

static BYTE wait_ready(void)
{
 8008cc0:	b580      	push	{r7, lr}
 8008cc2:	b082      	sub	sp, #8
 8008cc4:	af00      	add	r7, sp, #0
	BYTE res;
	rcvr_spi();
 8008cc6:	20ff      	movs	r0, #255	@ 0xff
 8008cc8:	f7ff ff4a 	bl	8008b60 <spi_rw>
	do {
		res = rcvr_spi();
 8008ccc:	20ff      	movs	r0, #255	@ 0xff
 8008cce:	f7ff ff47 	bl	8008b60 <spi_rw>
 8008cd2:	4603      	mov	r3, r0
 8008cd4:	71fb      	strb	r3, [r7, #7]
	} while (res != 0xFF); // check timeout
 8008cd6:	79fb      	ldrb	r3, [r7, #7]
 8008cd8:	2bff      	cmp	r3, #255	@ 0xff
 8008cda:	d1f7      	bne.n	8008ccc <wait_ready+0xc>
	return res;
 8008cdc:	79fb      	ldrb	r3, [r7, #7]
}
 8008cde:	4618      	mov	r0, r3
 8008ce0:	3708      	adds	r7, #8
 8008ce2:	46bd      	mov	sp, r7
 8008ce4:	bd80      	pop	{r7, pc}
	...

08008ce8 <send_cmd>:

static BYTE send_cmd(BYTE cmd, DWORD arg)
{
 8008ce8:	b580      	push	{r7, lr}
 8008cea:	b084      	sub	sp, #16
 8008cec:	af00      	add	r7, sp, #0
 8008cee:	4603      	mov	r3, r0
 8008cf0:	6039      	str	r1, [r7, #0]
 8008cf2:	71fb      	strb	r3, [r7, #7]
	BYTE res;

	if(cmd & 0x80){	// ACMD<n> is the command sequence of CMD55-CMD<n>
 8008cf4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	da0e      	bge.n	8008d1a <send_cmd+0x32>
		cmd &= 0x7F;
 8008cfc:	79fb      	ldrb	r3, [r7, #7]
 8008cfe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008d02:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 8008d04:	2100      	movs	r1, #0
 8008d06:	2077      	movs	r0, #119	@ 0x77
 8008d08:	f7ff ffee 	bl	8008ce8 <send_cmd>
 8008d0c:	4603      	mov	r3, r0
 8008d0e:	737b      	strb	r3, [r7, #13]
		if(res > 1) return res;
 8008d10:	7b7b      	ldrb	r3, [r7, #13]
 8008d12:	2b01      	cmp	r3, #1
 8008d14:	d901      	bls.n	8008d1a <send_cmd+0x32>
 8008d16:	7b7b      	ldrb	r3, [r7, #13]
 8008d18:	e050      	b.n	8008dbc <send_cmd+0xd4>
	}

	DESELECT();
 8008d1a:	4b2a      	ldr	r3, [pc, #168]	@ (8008dc4 <send_cmd+0xdc>)
 8008d1c:	2210      	movs	r2, #16
 8008d1e:	619a      	str	r2, [r3, #24]
	SELECT();
 8008d20:	4b28      	ldr	r3, [pc, #160]	@ (8008dc4 <send_cmd+0xdc>)
 8008d22:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8008d26:	619a      	str	r2, [r3, #24]
	if(wait_ready() != 0xFF){
 8008d28:	f7ff ffca 	bl	8008cc0 <wait_ready>
 8008d2c:	4603      	mov	r3, r0
 8008d2e:	2bff      	cmp	r3, #255	@ 0xff
 8008d30:	d001      	beq.n	8008d36 <send_cmd+0x4e>
		return 0xFF;
 8008d32:	23ff      	movs	r3, #255	@ 0xff
 8008d34:	e042      	b.n	8008dbc <send_cmd+0xd4>
	}

	// transmit cmd + arg + crc
	xmit_spi(cmd);								// Start + Command index
 8008d36:	79fb      	ldrb	r3, [r7, #7]
 8008d38:	4618      	mov	r0, r3
 8008d3a:	f7ff ff11 	bl	8008b60 <spi_rw>
	xmit_spi((BYTE)(arg >> 24));	// Argument[31..24]
 8008d3e:	683b      	ldr	r3, [r7, #0]
 8008d40:	0e1b      	lsrs	r3, r3, #24
 8008d42:	b2db      	uxtb	r3, r3
 8008d44:	4618      	mov	r0, r3
 8008d46:	f7ff ff0b 	bl	8008b60 <spi_rw>
	xmit_spi((BYTE)(arg >> 16));	// Argument[23..16]
 8008d4a:	683b      	ldr	r3, [r7, #0]
 8008d4c:	0c1b      	lsrs	r3, r3, #16
 8008d4e:	b2db      	uxtb	r3, r3
 8008d50:	4618      	mov	r0, r3
 8008d52:	f7ff ff05 	bl	8008b60 <spi_rw>
	xmit_spi((BYTE)(arg >> 8));		// Argument[15..8]
 8008d56:	683b      	ldr	r3, [r7, #0]
 8008d58:	0a1b      	lsrs	r3, r3, #8
 8008d5a:	b2db      	uxtb	r3, r3
 8008d5c:	4618      	mov	r0, r3
 8008d5e:	f7ff feff 	bl	8008b60 <spi_rw>
	xmit_spi((BYTE)arg);					// Argument[7..0]
 8008d62:	683b      	ldr	r3, [r7, #0]
 8008d64:	b2db      	uxtb	r3, r3
 8008d66:	4618      	mov	r0, r3
 8008d68:	f7ff fefa 	bl	8008b60 <spi_rw>
	BYTE crc = 0x01; // Dummy CRC + Stop
 8008d6c:	2301      	movs	r3, #1
 8008d6e:	73fb      	strb	r3, [r7, #15]
	if(cmd == CMD0) crc = 0x95;			// Valid CRC for CMD0(0)
 8008d70:	79fb      	ldrb	r3, [r7, #7]
 8008d72:	2b40      	cmp	r3, #64	@ 0x40
 8008d74:	d101      	bne.n	8008d7a <send_cmd+0x92>
 8008d76:	2395      	movs	r3, #149	@ 0x95
 8008d78:	73fb      	strb	r3, [r7, #15]
	if(cmd == CMD8) crc = 0x87;			// Valid CRC for CMD8(0x1AA)
 8008d7a:	79fb      	ldrb	r3, [r7, #7]
 8008d7c:	2b48      	cmp	r3, #72	@ 0x48
 8008d7e:	d101      	bne.n	8008d84 <send_cmd+0x9c>
 8008d80:	2387      	movs	r3, #135	@ 0x87
 8008d82:	73fb      	strb	r3, [r7, #15]
	xmit_spi(crc);
 8008d84:	7bfb      	ldrb	r3, [r7, #15]
 8008d86:	4618      	mov	r0, r3
 8008d88:	f7ff feea 	bl	8008b60 <spi_rw>

	// Receive command response
	if(cmd == CMD12) rcvr_spi();		// Skip a stuff byte when stop reading
 8008d8c:	79fb      	ldrb	r3, [r7, #7]
 8008d8e:	2b4c      	cmp	r3, #76	@ 0x4c
 8008d90:	d102      	bne.n	8008d98 <send_cmd+0xb0>
 8008d92:	20ff      	movs	r0, #255	@ 0xff
 8008d94:	f7ff fee4 	bl	8008b60 <spi_rw>

	// Wait for a valid response in timeout of 10 attempts
	BYTE attempt = 10;
 8008d98:	230a      	movs	r3, #10
 8008d9a:	73bb      	strb	r3, [r7, #14]
	do {
		res = rcvr_spi();
 8008d9c:	20ff      	movs	r0, #255	@ 0xff
 8008d9e:	f7ff fedf 	bl	8008b60 <spi_rw>
 8008da2:	4603      	mov	r3, r0
 8008da4:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && (--attempt));
 8008da6:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	da05      	bge.n	8008dba <send_cmd+0xd2>
 8008dae:	7bbb      	ldrb	r3, [r7, #14]
 8008db0:	3b01      	subs	r3, #1
 8008db2:	73bb      	strb	r3, [r7, #14]
 8008db4:	7bbb      	ldrb	r3, [r7, #14]
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d1f0      	bne.n	8008d9c <send_cmd+0xb4>

	return res;
 8008dba:	7b7b      	ldrb	r3, [r7, #13]
}
 8008dbc:	4618      	mov	r0, r3
 8008dbe:	3710      	adds	r7, #16
 8008dc0:	46bd      	mov	sp, r7
 8008dc2:	bd80      	pop	{r7, pc}
 8008dc4:	40020800 	.word	0x40020800

08008dc8 <USER_SPI_initialize>:

DSTATUS USER_SPI_initialize(BYTE drv)
{
 8008dc8:	b590      	push	{r4, r7, lr}
 8008dca:	b085      	sub	sp, #20
 8008dcc:	af00      	add	r7, sp, #0
 8008dce:	4603      	mov	r3, r0
 8008dd0:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty = 0, ocr[4];
 8008dd2:	2300      	movs	r3, #0
 8008dd4:	737b      	strb	r3, [r7, #13]
	DESELECT();
 8008dd6:	4b62      	ldr	r3, [pc, #392]	@ (8008f60 <USER_SPI_initialize+0x198>)
 8008dd8:	2210      	movs	r2, #16
 8008dda:	619a      	str	r2, [r3, #24]
	set_sd_interface_speed(SD_INI_SPEED); //медленное spi
 8008ddc:	2006      	movs	r0, #6
 8008dde:	f7ff fe8b 	bl	8008af8 <set_sd_interface_speed>
	SELECT();
 8008de2:	4b5f      	ldr	r3, [pc, #380]	@ (8008f60 <USER_SPI_initialize+0x198>)
 8008de4:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8008de8:	619a      	str	r2, [r3, #24]

	for(n=10; n; n--) rcvr_spi();	// 80 dummy clocks
 8008dea:	230a      	movs	r3, #10
 8008dec:	73fb      	strb	r3, [r7, #15]
 8008dee:	e005      	b.n	8008dfc <USER_SPI_initialize+0x34>
 8008df0:	20ff      	movs	r0, #255	@ 0xff
 8008df2:	f7ff feb5 	bl	8008b60 <spi_rw>
 8008df6:	7bfb      	ldrb	r3, [r7, #15]
 8008df8:	3b01      	subs	r3, #1
 8008dfa:	73fb      	strb	r3, [r7, #15]
 8008dfc:	7bfb      	ldrb	r3, [r7, #15]
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d1f6      	bne.n	8008df0 <USER_SPI_initialize+0x28>

	if(0x01 == send_cmd(CMD0, 0))
 8008e02:	2100      	movs	r1, #0
 8008e04:	2040      	movs	r0, #64	@ 0x40
 8008e06:	f7ff ff6f 	bl	8008ce8 <send_cmd>
 8008e0a:	4603      	mov	r3, r0
 8008e0c:	2b01      	cmp	r3, #1
 8008e0e:	d172      	bne.n	8008ef6 <USER_SPI_initialize+0x12e>
	{
		// Enter Idle state
		if(0x01 == send_cmd(CMD8, 0x1AA))
 8008e10:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 8008e14:	2048      	movs	r0, #72	@ 0x48
 8008e16:	f7ff ff67 	bl	8008ce8 <send_cmd>
 8008e1a:	4603      	mov	r3, r0
 8008e1c:	2b01      	cmp	r3, #1
 8008e1e:	d147      	bne.n	8008eb0 <USER_SPI_initialize+0xe8>
		{
			// SDHC ?
			for(n=0; n<4; n++) ocr[n] = rcvr_spi(); // Get trailing return value of R7 response
 8008e20:	2300      	movs	r3, #0
 8008e22:	73fb      	strb	r3, [r7, #15]
 8008e24:	e00d      	b.n	8008e42 <USER_SPI_initialize+0x7a>
 8008e26:	7bfc      	ldrb	r4, [r7, #15]
 8008e28:	20ff      	movs	r0, #255	@ 0xff
 8008e2a:	f7ff fe99 	bl	8008b60 <spi_rw>
 8008e2e:	4603      	mov	r3, r0
 8008e30:	461a      	mov	r2, r3
 8008e32:	f104 0310 	add.w	r3, r4, #16
 8008e36:	443b      	add	r3, r7
 8008e38:	f803 2c08 	strb.w	r2, [r3, #-8]
 8008e3c:	7bfb      	ldrb	r3, [r7, #15]
 8008e3e:	3301      	adds	r3, #1
 8008e40:	73fb      	strb	r3, [r7, #15]
 8008e42:	7bfb      	ldrb	r3, [r7, #15]
 8008e44:	2b03      	cmp	r3, #3
 8008e46:	d9ee      	bls.n	8008e26 <USER_SPI_initialize+0x5e>

			if((0x01 == ocr[2]) && (0xAA == ocr[3]))
 8008e48:	7abb      	ldrb	r3, [r7, #10]
 8008e4a:	2b01      	cmp	r3, #1
 8008e4c:	d153      	bne.n	8008ef6 <USER_SPI_initialize+0x12e>
 8008e4e:	7afb      	ldrb	r3, [r7, #11]
 8008e50:	2baa      	cmp	r3, #170	@ 0xaa
 8008e52:	d150      	bne.n	8008ef6 <USER_SPI_initialize+0x12e>
			{
				// The card can work at VDD range of 2.7-3.6V
				while(send_cmd(ACMD41, (1UL << 30)));	// Wait for leaving idle state (ACMD41 with HCS bit)
 8008e54:	bf00      	nop
 8008e56:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8008e5a:	20e9      	movs	r0, #233	@ 0xe9
 8008e5c:	f7ff ff44 	bl	8008ce8 <send_cmd>
 8008e60:	4603      	mov	r3, r0
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d1f7      	bne.n	8008e56 <USER_SPI_initialize+0x8e>

				if(0x00 == send_cmd(CMD58, 0))
 8008e66:	2100      	movs	r1, #0
 8008e68:	207a      	movs	r0, #122	@ 0x7a
 8008e6a:	f7ff ff3d 	bl	8008ce8 <send_cmd>
 8008e6e:	4603      	mov	r3, r0
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d140      	bne.n	8008ef6 <USER_SPI_initialize+0x12e>
				{
					// Check CCS bit in the OCR
					for(n=0; n<4; n++) ocr[n] = rcvr_spi();
 8008e74:	2300      	movs	r3, #0
 8008e76:	73fb      	strb	r3, [r7, #15]
 8008e78:	e00d      	b.n	8008e96 <USER_SPI_initialize+0xce>
 8008e7a:	7bfc      	ldrb	r4, [r7, #15]
 8008e7c:	20ff      	movs	r0, #255	@ 0xff
 8008e7e:	f7ff fe6f 	bl	8008b60 <spi_rw>
 8008e82:	4603      	mov	r3, r0
 8008e84:	461a      	mov	r2, r3
 8008e86:	f104 0310 	add.w	r3, r4, #16
 8008e8a:	443b      	add	r3, r7
 8008e8c:	f803 2c08 	strb.w	r2, [r3, #-8]
 8008e90:	7bfb      	ldrb	r3, [r7, #15]
 8008e92:	3301      	adds	r3, #1
 8008e94:	73fb      	strb	r3, [r7, #15]
 8008e96:	7bfb      	ldrb	r3, [r7, #15]
 8008e98:	2b03      	cmp	r3, #3
 8008e9a:	d9ee      	bls.n	8008e7a <USER_SPI_initialize+0xb2>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 8008e9c:	7a3b      	ldrb	r3, [r7, #8]
 8008e9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d001      	beq.n	8008eaa <USER_SPI_initialize+0xe2>
 8008ea6:	230c      	movs	r3, #12
 8008ea8:	e000      	b.n	8008eac <USER_SPI_initialize+0xe4>
 8008eaa:	2304      	movs	r3, #4
 8008eac:	737b      	strb	r3, [r7, #13]
 8008eae:	e022      	b.n	8008ef6 <USER_SPI_initialize+0x12e>
			}
		}
		else
		{
			// SDSC or MMC
			if(send_cmd(ACMD41, 0) <= 0x01)
 8008eb0:	2100      	movs	r1, #0
 8008eb2:	20e9      	movs	r0, #233	@ 0xe9
 8008eb4:	f7ff ff18 	bl	8008ce8 <send_cmd>
 8008eb8:	4603      	mov	r3, r0
 8008eba:	2b01      	cmp	r3, #1
 8008ebc:	d804      	bhi.n	8008ec8 <USER_SPI_initialize+0x100>
			{
				// SDSC
				ty = CT_SD1;
 8008ebe:	2302      	movs	r3, #2
 8008ec0:	737b      	strb	r3, [r7, #13]
				cmd = ACMD41;
 8008ec2:	23e9      	movs	r3, #233	@ 0xe9
 8008ec4:	73bb      	strb	r3, [r7, #14]
 8008ec6:	e003      	b.n	8008ed0 <USER_SPI_initialize+0x108>
			}
			else
			{
				// MMC
				ty = CT_MMC;
 8008ec8:	2301      	movs	r3, #1
 8008eca:	737b      	strb	r3, [r7, #13]
				cmd = CMD1;
 8008ecc:	2341      	movs	r3, #65	@ 0x41
 8008ece:	73bb      	strb	r3, [r7, #14]
			}

			while(send_cmd(cmd, 0)); // Wait for leaving idle state
 8008ed0:	bf00      	nop
 8008ed2:	7bbb      	ldrb	r3, [r7, #14]
 8008ed4:	2100      	movs	r1, #0
 8008ed6:	4618      	mov	r0, r3
 8008ed8:	f7ff ff06 	bl	8008ce8 <send_cmd>
 8008edc:	4603      	mov	r3, r0
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d1f7      	bne.n	8008ed2 <USER_SPI_initialize+0x10a>

			if(send_cmd(CMD16, 512) != 0)	// Set R/W block length to 512
 8008ee2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8008ee6:	2050      	movs	r0, #80	@ 0x50
 8008ee8:	f7ff fefe 	bl	8008ce8 <send_cmd>
 8008eec:	4603      	mov	r3, r0
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d001      	beq.n	8008ef6 <USER_SPI_initialize+0x12e>
				ty = 0;
 8008ef2:	2300      	movs	r3, #0
 8008ef4:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;
 8008ef6:	4a1b      	ldr	r2, [pc, #108]	@ (8008f64 <USER_SPI_initialize+0x19c>)
 8008ef8:	7b7b      	ldrb	r3, [r7, #13]
 8008efa:	7013      	strb	r3, [r2, #0]
	DESELECT();
 8008efc:	4b18      	ldr	r3, [pc, #96]	@ (8008f60 <USER_SPI_initialize+0x198>)
 8008efe:	2210      	movs	r2, #16
 8008f00:	619a      	str	r2, [r3, #24]

	if(ty)
 8008f02:	7b7b      	ldrb	r3, [r7, #13]
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d00b      	beq.n	8008f20 <USER_SPI_initialize+0x158>
	{
		// Initialization succeeded
		Stat &= ~STA_NOINIT; // Clear STA_NOINIT
 8008f08:	4b17      	ldr	r3, [pc, #92]	@ (8008f68 <USER_SPI_initialize+0x1a0>)
 8008f0a:	781b      	ldrb	r3, [r3, #0]
 8008f0c:	b2db      	uxtb	r3, r3
 8008f0e:	f023 0301 	bic.w	r3, r3, #1
 8008f12:	b2da      	uxtb	r2, r3
 8008f14:	4b14      	ldr	r3, [pc, #80]	@ (8008f68 <USER_SPI_initialize+0x1a0>)
 8008f16:	701a      	strb	r2, [r3, #0]
		set_sd_interface_speed(SD_MAX_SPEED); // быстрое SPI
 8008f18:	2001      	movs	r0, #1
 8008f1a:	f7ff fded 	bl	8008af8 <set_sd_interface_speed>
 8008f1e:	e017      	b.n	8008f50 <USER_SPI_initialize+0x188>
	}
	else
	{
		// Initialization failed
		if(!(Stat & STA_NOINIT))
 8008f20:	4b11      	ldr	r3, [pc, #68]	@ (8008f68 <USER_SPI_initialize+0x1a0>)
 8008f22:	781b      	ldrb	r3, [r3, #0]
 8008f24:	b2db      	uxtb	r3, r3
 8008f26:	f003 0301 	and.w	r3, r3, #1
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d108      	bne.n	8008f40 <USER_SPI_initialize+0x178>
		{
			SELECT();
 8008f2e:	4b0c      	ldr	r3, [pc, #48]	@ (8008f60 <USER_SPI_initialize+0x198>)
 8008f30:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8008f34:	619a      	str	r2, [r3, #24]
			wait_ready();
 8008f36:	f7ff fec3 	bl	8008cc0 <wait_ready>
			DESELECT();
 8008f3a:	4b09      	ldr	r3, [pc, #36]	@ (8008f60 <USER_SPI_initialize+0x198>)
 8008f3c:	2210      	movs	r2, #16
 8008f3e:	619a      	str	r2, [r3, #24]
		}

		Stat |= STA_NOINIT;
 8008f40:	4b09      	ldr	r3, [pc, #36]	@ (8008f68 <USER_SPI_initialize+0x1a0>)
 8008f42:	781b      	ldrb	r3, [r3, #0]
 8008f44:	b2db      	uxtb	r3, r3
 8008f46:	f043 0301 	orr.w	r3, r3, #1
 8008f4a:	b2da      	uxtb	r2, r3
 8008f4c:	4b06      	ldr	r3, [pc, #24]	@ (8008f68 <USER_SPI_initialize+0x1a0>)
 8008f4e:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 8008f50:	4b05      	ldr	r3, [pc, #20]	@ (8008f68 <USER_SPI_initialize+0x1a0>)
 8008f52:	781b      	ldrb	r3, [r3, #0]
 8008f54:	b2db      	uxtb	r3, r3
}
 8008f56:	4618      	mov	r0, r3
 8008f58:	3714      	adds	r7, #20
 8008f5a:	46bd      	mov	sp, r7
 8008f5c:	bd90      	pop	{r4, r7, pc}
 8008f5e:	bf00      	nop
 8008f60:	40020800 	.word	0x40020800
 8008f64:	20000a10 	.word	0x20000a10
 8008f68:	20000028 	.word	0x20000028

08008f6c <USER_SPI_status>:

DSTATUS USER_SPI_status(BYTE drv)
{
 8008f6c:	b480      	push	{r7}
 8008f6e:	b083      	sub	sp, #12
 8008f70:	af00      	add	r7, sp, #0
 8008f72:	4603      	mov	r3, r0
 8008f74:	71fb      	strb	r3, [r7, #7]
	return Stat;
 8008f76:	4b04      	ldr	r3, [pc, #16]	@ (8008f88 <USER_SPI_status+0x1c>)
 8008f78:	781b      	ldrb	r3, [r3, #0]
 8008f7a:	b2db      	uxtb	r3, r3
}
 8008f7c:	4618      	mov	r0, r3
 8008f7e:	370c      	adds	r7, #12
 8008f80:	46bd      	mov	sp, r7
 8008f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f86:	4770      	bx	lr
 8008f88:	20000028 	.word	0x20000028

08008f8c <rcvr_datablock>:

// NOTE: btr must be multiple of 4
static uint8_t rcvr_datablock(BYTE *buff, UINT btr)
{
 8008f8c:	b580      	push	{r7, lr}
 8008f8e:	b084      	sub	sp, #16
 8008f90:	af00      	add	r7, sp, #0
 8008f92:	6078      	str	r0, [r7, #4]
 8008f94:	6039      	str	r1, [r7, #0]
	BYTE token;

	do {
		token = rcvr_spi();
 8008f96:	20ff      	movs	r0, #255	@ 0xff
 8008f98:	f7ff fde2 	bl	8008b60 <spi_rw>
 8008f9c:	4603      	mov	r3, r0
 8008f9e:	73fb      	strb	r3, [r7, #15]
	} while (token == 0xFF); // wait for data packet in timeout of 100ms
 8008fa0:	7bfb      	ldrb	r3, [r7, #15]
 8008fa2:	2bff      	cmp	r3, #255	@ 0xff
 8008fa4:	d0f7      	beq.n	8008f96 <rcvr_datablock+0xa>
	if(token != 0xFE) return 0;	// not a valid data token
 8008fa6:	7bfb      	ldrb	r3, [r7, #15]
 8008fa8:	2bfe      	cmp	r3, #254	@ 0xfe
 8008faa:	d001      	beq.n	8008fb0 <rcvr_datablock+0x24>
 8008fac:	2300      	movs	r3, #0
 8008fae:	e00d      	b.n	8008fcc <rcvr_datablock+0x40>

#ifdef SD_USE_DMA
	SPI_DMA_TransmitReceive(SPI_Transfer_Receive, buff, btr);
 8008fb0:	683b      	ldr	r3, [r7, #0]
 8008fb2:	b29b      	uxth	r3, r3
 8008fb4:	461a      	mov	r2, r3
 8008fb6:	6879      	ldr	r1, [r7, #4]
 8008fb8:	2000      	movs	r0, #0
 8008fba:	f7ff fe0b 	bl	8008bd4 <SPI_DMA_TransmitReceive>
			rcvr_spi_m(buff++);
		} while (btr -= 4);
	}
#endif

	rcvr_spi(); // discard CRC
 8008fbe:	20ff      	movs	r0, #255	@ 0xff
 8008fc0:	f7ff fdce 	bl	8008b60 <spi_rw>
	rcvr_spi();
 8008fc4:	20ff      	movs	r0, #255	@ 0xff
 8008fc6:	f7ff fdcb 	bl	8008b60 <spi_rw>
	return 1;
 8008fca:	2301      	movs	r3, #1
}
 8008fcc:	4618      	mov	r0, r3
 8008fce:	3710      	adds	r7, #16
 8008fd0:	46bd      	mov	sp, r7
 8008fd2:	bd80      	pop	{r7, pc}

08008fd4 <USER_SPI_read>:

DRESULT USER_SPI_read(BYTE drv, BYTE *buff, DWORD sector, UINT count)
{
 8008fd4:	b580      	push	{r7, lr}
 8008fd6:	b084      	sub	sp, #16
 8008fd8:	af00      	add	r7, sp, #0
 8008fda:	60b9      	str	r1, [r7, #8]
 8008fdc:	607a      	str	r2, [r7, #4]
 8008fde:	603b      	str	r3, [r7, #0]
 8008fe0:	4603      	mov	r3, r0
 8008fe2:	73fb      	strb	r3, [r7, #15]
	if(!count) return RES_PARERR;
 8008fe4:	683b      	ldr	r3, [r7, #0]
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d101      	bne.n	8008fee <USER_SPI_read+0x1a>
 8008fea:	2304      	movs	r3, #4
 8008fec:	e04e      	b.n	800908c <USER_SPI_read+0xb8>
	if(Stat & STA_NOINIT) return RES_NOTRDY;
 8008fee:	4b29      	ldr	r3, [pc, #164]	@ (8009094 <USER_SPI_read+0xc0>)
 8008ff0:	781b      	ldrb	r3, [r3, #0]
 8008ff2:	b2db      	uxtb	r3, r3
 8008ff4:	f003 0301 	and.w	r3, r3, #1
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d001      	beq.n	8009000 <USER_SPI_read+0x2c>
 8008ffc:	2303      	movs	r3, #3
 8008ffe:	e045      	b.n	800908c <USER_SPI_read+0xb8>
	if(!(CardType & CT_BLOCK)) sector *= 512;	// Convert to byte address if needed
 8009000:	4b25      	ldr	r3, [pc, #148]	@ (8009098 <USER_SPI_read+0xc4>)
 8009002:	781b      	ldrb	r3, [r3, #0]
 8009004:	f003 0308 	and.w	r3, r3, #8
 8009008:	2b00      	cmp	r3, #0
 800900a:	d102      	bne.n	8009012 <USER_SPI_read+0x3e>
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	025b      	lsls	r3, r3, #9
 8009010:	607b      	str	r3, [r7, #4]

	if(1 == count)
 8009012:	683b      	ldr	r3, [r7, #0]
 8009014:	2b01      	cmp	r3, #1
 8009016:	d111      	bne.n	800903c <USER_SPI_read+0x68>
	{
		// CMD17 - READ_SINGLE_BLOCK
		if(0x00 == send_cmd(CMD17, sector))
 8009018:	6879      	ldr	r1, [r7, #4]
 800901a:	2051      	movs	r0, #81	@ 0x51
 800901c:	f7ff fe64 	bl	8008ce8 <send_cmd>
 8009020:	4603      	mov	r3, r0
 8009022:	2b00      	cmp	r3, #0
 8009024:	d129      	bne.n	800907a <USER_SPI_read+0xa6>
		{
			if(rcvr_datablock(buff, 512)) count = 0;
 8009026:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800902a:	68b8      	ldr	r0, [r7, #8]
 800902c:	f7ff ffae 	bl	8008f8c <rcvr_datablock>
 8009030:	4603      	mov	r3, r0
 8009032:	2b00      	cmp	r3, #0
 8009034:	d021      	beq.n	800907a <USER_SPI_read+0xa6>
 8009036:	2300      	movs	r3, #0
 8009038:	603b      	str	r3, [r7, #0]
 800903a:	e01e      	b.n	800907a <USER_SPI_read+0xa6>
		}
	}
	else
	{
		// CMD18 - READ_MULTIPLE_BLOCK
		if(0x00 == send_cmd(CMD18, sector))
 800903c:	6879      	ldr	r1, [r7, #4]
 800903e:	2052      	movs	r0, #82	@ 0x52
 8009040:	f7ff fe52 	bl	8008ce8 <send_cmd>
 8009044:	4603      	mov	r3, r0
 8009046:	2b00      	cmp	r3, #0
 8009048:	d117      	bne.n	800907a <USER_SPI_read+0xa6>
		{
			do {
				if(!rcvr_datablock(buff, 512)) break;
 800904a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800904e:	68b8      	ldr	r0, [r7, #8]
 8009050:	f7ff ff9c 	bl	8008f8c <rcvr_datablock>
 8009054:	4603      	mov	r3, r0
 8009056:	2b00      	cmp	r3, #0
 8009058:	d00a      	beq.n	8009070 <USER_SPI_read+0x9c>
				buff += 512;
 800905a:	68bb      	ldr	r3, [r7, #8]
 800905c:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8009060:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8009062:	683b      	ldr	r3, [r7, #0]
 8009064:	3b01      	subs	r3, #1
 8009066:	603b      	str	r3, [r7, #0]
 8009068:	683b      	ldr	r3, [r7, #0]
 800906a:	2b00      	cmp	r3, #0
 800906c:	d1ed      	bne.n	800904a <USER_SPI_read+0x76>
 800906e:	e000      	b.n	8009072 <USER_SPI_read+0x9e>
				if(!rcvr_datablock(buff, 512)) break;
 8009070:	bf00      	nop
			send_cmd(CMD12, 0); // CMD12 - STOP_TRANSMISSION
 8009072:	2100      	movs	r1, #0
 8009074:	204c      	movs	r0, #76	@ 0x4c
 8009076:	f7ff fe37 	bl	8008ce8 <send_cmd>
		}
	}
	DESELECT();
 800907a:	4b08      	ldr	r3, [pc, #32]	@ (800909c <USER_SPI_read+0xc8>)
 800907c:	2210      	movs	r2, #16
 800907e:	619a      	str	r2, [r3, #24]

	return count ? RES_ERROR : RES_OK;
 8009080:	683b      	ldr	r3, [r7, #0]
 8009082:	2b00      	cmp	r3, #0
 8009084:	bf14      	ite	ne
 8009086:	2301      	movne	r3, #1
 8009088:	2300      	moveq	r3, #0
 800908a:	b2db      	uxtb	r3, r3
}
 800908c:	4618      	mov	r0, r3
 800908e:	3710      	adds	r7, #16
 8009090:	46bd      	mov	sp, r7
 8009092:	bd80      	pop	{r7, pc}
 8009094:	20000028 	.word	0x20000028
 8009098:	20000a10 	.word	0x20000a10
 800909c:	40020800 	.word	0x40020800

080090a0 <xmit_datablock>:

#if _FS_READONLY == 0
// token - Data/Stop token
static uint8_t xmit_datablock(const BYTE *buff, BYTE token)
{
 80090a0:	b580      	push	{r7, lr}
 80090a2:	b084      	sub	sp, #16
 80090a4:	af00      	add	r7, sp, #0
 80090a6:	6078      	str	r0, [r7, #4]
 80090a8:	460b      	mov	r3, r1
 80090aa:	70fb      	strb	r3, [r7, #3]
	BYTE resp;
#ifndef SD_USE_DMA
	BYTE wc;
#endif

	if(0xFF != wait_ready()) return 0;
 80090ac:	f7ff fe08 	bl	8008cc0 <wait_ready>
 80090b0:	4603      	mov	r3, r0
 80090b2:	2bff      	cmp	r3, #255	@ 0xff
 80090b4:	d001      	beq.n	80090ba <xmit_datablock+0x1a>
 80090b6:	2300      	movs	r3, #0
 80090b8:	e01f      	b.n	80090fa <xmit_datablock+0x5a>
	xmit_spi(token); // transmit Data token
 80090ba:	78fb      	ldrb	r3, [r7, #3]
 80090bc:	4618      	mov	r0, r3
 80090be:	f7ff fd4f 	bl	8008b60 <spi_rw>

	if(0xFD != token) // Is data token
 80090c2:	78fb      	ldrb	r3, [r7, #3]
 80090c4:	2bfd      	cmp	r3, #253	@ 0xfd
 80090c6:	d017      	beq.n	80090f8 <xmit_datablock+0x58>
	{
		// transmit the 512 byte data block to MMC
#ifdef SD_USE_DMA
		SPI_DMA_TransmitReceive(SPI_Transfer_Transmit, buff, 512);
 80090c8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80090cc:	6879      	ldr	r1, [r7, #4]
 80090ce:	2001      	movs	r0, #1
 80090d0:	f7ff fd80 	bl	8008bd4 <SPI_DMA_TransmitReceive>
			xmit_spi(*buff++);
		} while (--wc);
#endif

		// CRC (Dummy)
		xmit_spi(0xFF);
 80090d4:	20ff      	movs	r0, #255	@ 0xff
 80090d6:	f7ff fd43 	bl	8008b60 <spi_rw>
		xmit_spi(0xFF);
 80090da:	20ff      	movs	r0, #255	@ 0xff
 80090dc:	f7ff fd40 	bl	8008b60 <spi_rw>

		// Receive data response
		resp = rcvr_spi();
 80090e0:	20ff      	movs	r0, #255	@ 0xff
 80090e2:	f7ff fd3d 	bl	8008b60 <spi_rw>
 80090e6:	4603      	mov	r3, r0
 80090e8:	73fb      	strb	r3, [r7, #15]
		if((resp & 0x1F) != 0x05) // If not accepted, return with error
 80090ea:	7bfb      	ldrb	r3, [r7, #15]
 80090ec:	f003 031f 	and.w	r3, r3, #31
 80090f0:	2b05      	cmp	r3, #5
 80090f2:	d001      	beq.n	80090f8 <xmit_datablock+0x58>
			return 0;
 80090f4:	2300      	movs	r3, #0
 80090f6:	e000      	b.n	80090fa <xmit_datablock+0x5a>
	}

	return 1;
 80090f8:	2301      	movs	r3, #1
}
 80090fa:	4618      	mov	r0, r3
 80090fc:	3710      	adds	r7, #16
 80090fe:	46bd      	mov	sp, r7
 8009100:	bd80      	pop	{r7, pc}
	...

08009104 <USER_SPI_write>:

DRESULT USER_SPI_write(BYTE drv, const BYTE *buff, DWORD sector, UINT count)
{
 8009104:	b580      	push	{r7, lr}
 8009106:	b084      	sub	sp, #16
 8009108:	af00      	add	r7, sp, #0
 800910a:	60b9      	str	r1, [r7, #8]
 800910c:	607a      	str	r2, [r7, #4]
 800910e:	603b      	str	r3, [r7, #0]
 8009110:	4603      	mov	r3, r0
 8009112:	73fb      	strb	r3, [r7, #15]
	if(!count) return RES_PARERR;
 8009114:	683b      	ldr	r3, [r7, #0]
 8009116:	2b00      	cmp	r3, #0
 8009118:	d101      	bne.n	800911e <USER_SPI_write+0x1a>
 800911a:	2304      	movs	r3, #4
 800911c:	e064      	b.n	80091e8 <USER_SPI_write+0xe4>
	if(Stat & STA_NOINIT) return RES_NOTRDY;
 800911e:	4b34      	ldr	r3, [pc, #208]	@ (80091f0 <USER_SPI_write+0xec>)
 8009120:	781b      	ldrb	r3, [r3, #0]
 8009122:	b2db      	uxtb	r3, r3
 8009124:	f003 0301 	and.w	r3, r3, #1
 8009128:	2b00      	cmp	r3, #0
 800912a:	d001      	beq.n	8009130 <USER_SPI_write+0x2c>
 800912c:	2303      	movs	r3, #3
 800912e:	e05b      	b.n	80091e8 <USER_SPI_write+0xe4>
	if(Stat & STA_PROTECT) return RES_WRPRT;
 8009130:	4b2f      	ldr	r3, [pc, #188]	@ (80091f0 <USER_SPI_write+0xec>)
 8009132:	781b      	ldrb	r3, [r3, #0]
 8009134:	b2db      	uxtb	r3, r3
 8009136:	f003 0304 	and.w	r3, r3, #4
 800913a:	2b00      	cmp	r3, #0
 800913c:	d001      	beq.n	8009142 <USER_SPI_write+0x3e>
 800913e:	2302      	movs	r3, #2
 8009140:	e052      	b.n	80091e8 <USER_SPI_write+0xe4>
	if(!(CardType & CT_BLOCK)) sector *= 512;	// Convert to byte address if needed
 8009142:	4b2c      	ldr	r3, [pc, #176]	@ (80091f4 <USER_SPI_write+0xf0>)
 8009144:	781b      	ldrb	r3, [r3, #0]
 8009146:	f003 0308 	and.w	r3, r3, #8
 800914a:	2b00      	cmp	r3, #0
 800914c:	d102      	bne.n	8009154 <USER_SPI_write+0x50>
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	025b      	lsls	r3, r3, #9
 8009152:	607b      	str	r3, [r7, #4]

	if(1 == count)
 8009154:	683b      	ldr	r3, [r7, #0]
 8009156:	2b01      	cmp	r3, #1
 8009158:	d110      	bne.n	800917c <USER_SPI_write+0x78>
	{
		// CMD24 - WRITE_BLOCK
		if((0x00 == send_cmd(CMD24, sector)) && xmit_datablock(buff, 0xFE)) count = 0;
 800915a:	6879      	ldr	r1, [r7, #4]
 800915c:	2058      	movs	r0, #88	@ 0x58
 800915e:	f7ff fdc3 	bl	8008ce8 <send_cmd>
 8009162:	4603      	mov	r3, r0
 8009164:	2b00      	cmp	r3, #0
 8009166:	d136      	bne.n	80091d6 <USER_SPI_write+0xd2>
 8009168:	21fe      	movs	r1, #254	@ 0xfe
 800916a:	68b8      	ldr	r0, [r7, #8]
 800916c:	f7ff ff98 	bl	80090a0 <xmit_datablock>
 8009170:	4603      	mov	r3, r0
 8009172:	2b00      	cmp	r3, #0
 8009174:	d02f      	beq.n	80091d6 <USER_SPI_write+0xd2>
 8009176:	2300      	movs	r3, #0
 8009178:	603b      	str	r3, [r7, #0]
 800917a:	e02c      	b.n	80091d6 <USER_SPI_write+0xd2>
	}
	else
	{
		// CMD25 - WRITE_MULTIPLE_BLOCK
		if(CardType & CT_SDC) send_cmd(ACMD23, count);
 800917c:	4b1d      	ldr	r3, [pc, #116]	@ (80091f4 <USER_SPI_write+0xf0>)
 800917e:	781b      	ldrb	r3, [r3, #0]
 8009180:	f003 0306 	and.w	r3, r3, #6
 8009184:	2b00      	cmp	r3, #0
 8009186:	d003      	beq.n	8009190 <USER_SPI_write+0x8c>
 8009188:	6839      	ldr	r1, [r7, #0]
 800918a:	20d7      	movs	r0, #215	@ 0xd7
 800918c:	f7ff fdac 	bl	8008ce8 <send_cmd>
		if(0x00 == send_cmd(CMD25, sector))
 8009190:	6879      	ldr	r1, [r7, #4]
 8009192:	2059      	movs	r0, #89	@ 0x59
 8009194:	f7ff fda8 	bl	8008ce8 <send_cmd>
 8009198:	4603      	mov	r3, r0
 800919a:	2b00      	cmp	r3, #0
 800919c:	d11b      	bne.n	80091d6 <USER_SPI_write+0xd2>
		{
			do {
				if(!xmit_datablock(buff, 0xFC)) break;
 800919e:	21fc      	movs	r1, #252	@ 0xfc
 80091a0:	68b8      	ldr	r0, [r7, #8]
 80091a2:	f7ff ff7d 	bl	80090a0 <xmit_datablock>
 80091a6:	4603      	mov	r3, r0
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d00a      	beq.n	80091c2 <USER_SPI_write+0xbe>
				buff += 512;
 80091ac:	68bb      	ldr	r3, [r7, #8]
 80091ae:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80091b2:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80091b4:	683b      	ldr	r3, [r7, #0]
 80091b6:	3b01      	subs	r3, #1
 80091b8:	603b      	str	r3, [r7, #0]
 80091ba:	683b      	ldr	r3, [r7, #0]
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d1ee      	bne.n	800919e <USER_SPI_write+0x9a>
 80091c0:	e000      	b.n	80091c4 <USER_SPI_write+0xc0>
				if(!xmit_datablock(buff, 0xFC)) break;
 80091c2:	bf00      	nop

			if(!xmit_datablock(0, 0xFD)) // STOP_TRAN token
 80091c4:	21fd      	movs	r1, #253	@ 0xfd
 80091c6:	2000      	movs	r0, #0
 80091c8:	f7ff ff6a 	bl	80090a0 <xmit_datablock>
 80091cc:	4603      	mov	r3, r0
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d101      	bne.n	80091d6 <USER_SPI_write+0xd2>
				count = 1;
 80091d2:	2301      	movs	r3, #1
 80091d4:	603b      	str	r3, [r7, #0]
		}
	}
	DESELECT();
 80091d6:	4b08      	ldr	r3, [pc, #32]	@ (80091f8 <USER_SPI_write+0xf4>)
 80091d8:	2210      	movs	r2, #16
 80091da:	619a      	str	r2, [r3, #24]

	return count ? RES_ERROR : RES_OK;
 80091dc:	683b      	ldr	r3, [r7, #0]
 80091de:	2b00      	cmp	r3, #0
 80091e0:	bf14      	ite	ne
 80091e2:	2301      	movne	r3, #1
 80091e4:	2300      	moveq	r3, #0
 80091e6:	b2db      	uxtb	r3, r3
}
 80091e8:	4618      	mov	r0, r3
 80091ea:	3710      	adds	r7, #16
 80091ec:	46bd      	mov	sp, r7
 80091ee:	bd80      	pop	{r7, pc}
 80091f0:	20000028 	.word	0x20000028
 80091f4:	20000a10 	.word	0x20000a10
 80091f8:	40020800 	.word	0x40020800

080091fc <USER_SPI_ioctl>:
#endif /* _READONLY == 0 */

DRESULT USER_SPI_ioctl(BYTE drv, BYTE ctrl,	void *buff)
{
 80091fc:	b590      	push	{r4, r7, lr}
 80091fe:	b08b      	sub	sp, #44	@ 0x2c
 8009200:	af00      	add	r7, sp, #0
 8009202:	4603      	mov	r3, r0
 8009204:	603a      	str	r2, [r7, #0]
 8009206:	71fb      	strb	r3, [r7, #7]
 8009208:	460b      	mov	r3, r1
 800920a:	71bb      	strb	r3, [r7, #6]
	DRESULT res = RES_ERROR;
 800920c:	2301      	movs	r3, #1
 800920e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	BYTE n, csd[16], *ptr = buff;
 8009212:	683b      	ldr	r3, [r7, #0]
 8009214:	623b      	str	r3, [r7, #32]
	WORD csize;

	if(Stat & STA_NOINIT) return RES_NOTRDY;
 8009216:	4bc0      	ldr	r3, [pc, #768]	@ (8009518 <USER_SPI_ioctl+0x31c>)
 8009218:	781b      	ldrb	r3, [r3, #0]
 800921a:	b2db      	uxtb	r3, r3
 800921c:	f003 0301 	and.w	r3, r3, #1
 8009220:	2b00      	cmp	r3, #0
 8009222:	d001      	beq.n	8009228 <USER_SPI_ioctl+0x2c>
 8009224:	2303      	movs	r3, #3
 8009226:	e185      	b.n	8009534 <USER_SPI_ioctl+0x338>

	switch(ctrl)
 8009228:	79bb      	ldrb	r3, [r7, #6]
 800922a:	2b0e      	cmp	r3, #14
 800922c:	f200 8167 	bhi.w	80094fe <USER_SPI_ioctl+0x302>
 8009230:	a201      	add	r2, pc, #4	@ (adr r2, 8009238 <USER_SPI_ioctl+0x3c>)
 8009232:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009236:	bf00      	nop
 8009238:	08009275 	.word	0x08009275
 800923c:	08009289 	.word	0x08009289
 8009240:	08009337 	.word	0x08009337
 8009244:	08009347 	.word	0x08009347
 8009248:	080094ff 	.word	0x080094ff
 800924c:	080094ff 	.word	0x080094ff
 8009250:	080094ff 	.word	0x080094ff
 8009254:	080094ff 	.word	0x080094ff
 8009258:	080094ff 	.word	0x080094ff
 800925c:	080094ff 	.word	0x080094ff
 8009260:	0800943d 	.word	0x0800943d
 8009264:	0800944d 	.word	0x0800944d
 8009268:	08009471 	.word	0x08009471
 800926c:	08009495 	.word	0x08009495
 8009270:	080094d5 	.word	0x080094d5
	{
		case CTRL_SYNC:
			// Make sure that no pending write process
			if(0xFF == wait_ready()) res = RES_OK;
 8009274:	f7ff fd24 	bl	8008cc0 <wait_ready>
 8009278:	4603      	mov	r3, r0
 800927a:	2bff      	cmp	r3, #255	@ 0xff
 800927c:	f040 8143 	bne.w	8009506 <USER_SPI_ioctl+0x30a>
 8009280:	2300      	movs	r3, #0
 8009282:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		break;
 8009286:	e13e      	b.n	8009506 <USER_SPI_ioctl+0x30a>

		case GET_SECTOR_COUNT:
			// Get number of sectors on the disk (DWORD)
			if((0x00 == send_cmd(CMD9, 0)) && rcvr_datablock(csd, 16))
 8009288:	2100      	movs	r1, #0
 800928a:	2049      	movs	r0, #73	@ 0x49
 800928c:	f7ff fd2c 	bl	8008ce8 <send_cmd>
 8009290:	4603      	mov	r3, r0
 8009292:	2b00      	cmp	r3, #0
 8009294:	f040 8139 	bne.w	800950a <USER_SPI_ioctl+0x30e>
 8009298:	f107 030c 	add.w	r3, r7, #12
 800929c:	2110      	movs	r1, #16
 800929e:	4618      	mov	r0, r3
 80092a0:	f7ff fe74 	bl	8008f8c <rcvr_datablock>
 80092a4:	4603      	mov	r3, r0
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	f000 812f 	beq.w	800950a <USER_SPI_ioctl+0x30e>
			{
				if((csd[0] >> 6) == 1)
 80092ac:	7b3b      	ldrb	r3, [r7, #12]
 80092ae:	099b      	lsrs	r3, r3, #6
 80092b0:	b2db      	uxtb	r3, r3
 80092b2:	2b01      	cmp	r3, #1
 80092b4:	d10d      	bne.n	80092d2 <USER_SPI_ioctl+0xd6>
				{
					// SDC version 2.00
					csize = csd[9] + ((WORD)csd[8] << 8) + 1;
 80092b6:	7d7b      	ldrb	r3, [r7, #21]
 80092b8:	461a      	mov	r2, r3
 80092ba:	7d3b      	ldrb	r3, [r7, #20]
 80092bc:	021b      	lsls	r3, r3, #8
 80092be:	b29b      	uxth	r3, r3
 80092c0:	4413      	add	r3, r2
 80092c2:	b29b      	uxth	r3, r3
 80092c4:	3301      	adds	r3, #1
 80092c6:	83fb      	strh	r3, [r7, #30]
					*(DWORD*)buff = (DWORD)csize << 10;
 80092c8:	8bfb      	ldrh	r3, [r7, #30]
 80092ca:	029a      	lsls	r2, r3, #10
 80092cc:	683b      	ldr	r3, [r7, #0]
 80092ce:	601a      	str	r2, [r3, #0]
 80092d0:	e02d      	b.n	800932e <USER_SPI_ioctl+0x132>
				}
				else
				{
					// SDC version 1.XX or MMC
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 80092d2:	7c7b      	ldrb	r3, [r7, #17]
 80092d4:	f003 030f 	and.w	r3, r3, #15
 80092d8:	b2da      	uxtb	r2, r3
 80092da:	7dbb      	ldrb	r3, [r7, #22]
 80092dc:	09db      	lsrs	r3, r3, #7
 80092de:	b2db      	uxtb	r3, r3
 80092e0:	4413      	add	r3, r2
 80092e2:	b2da      	uxtb	r2, r3
 80092e4:	7d7b      	ldrb	r3, [r7, #21]
 80092e6:	005b      	lsls	r3, r3, #1
 80092e8:	b2db      	uxtb	r3, r3
 80092ea:	f003 0306 	and.w	r3, r3, #6
 80092ee:	b2db      	uxtb	r3, r3
 80092f0:	4413      	add	r3, r2
 80092f2:	b2db      	uxtb	r3, r3
 80092f4:	3302      	adds	r3, #2
 80092f6:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
					csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 80092fa:	7d3b      	ldrb	r3, [r7, #20]
 80092fc:	099b      	lsrs	r3, r3, #6
 80092fe:	b2db      	uxtb	r3, r3
 8009300:	461a      	mov	r2, r3
 8009302:	7cfb      	ldrb	r3, [r7, #19]
 8009304:	009b      	lsls	r3, r3, #2
 8009306:	b29b      	uxth	r3, r3
 8009308:	4413      	add	r3, r2
 800930a:	b29a      	uxth	r2, r3
 800930c:	7cbb      	ldrb	r3, [r7, #18]
 800930e:	029b      	lsls	r3, r3, #10
 8009310:	b29b      	uxth	r3, r3
 8009312:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8009316:	b29b      	uxth	r3, r3
 8009318:	4413      	add	r3, r2
 800931a:	b29b      	uxth	r3, r3
 800931c:	3301      	adds	r3, #1
 800931e:	83fb      	strh	r3, [r7, #30]
					*(DWORD*)buff = (DWORD)csize << (n - 9);
 8009320:	8bfa      	ldrh	r2, [r7, #30]
 8009322:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009326:	3b09      	subs	r3, #9
 8009328:	409a      	lsls	r2, r3
 800932a:	683b      	ldr	r3, [r7, #0]
 800932c:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 800932e:	2300      	movs	r3, #0
 8009330:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			}
		break;
 8009334:	e0e9      	b.n	800950a <USER_SPI_ioctl+0x30e>

		case GET_SECTOR_SIZE:
			// Get R/W sector size (WORD)
			*(WORD*)buff = 512;
 8009336:	683b      	ldr	r3, [r7, #0]
 8009338:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800933c:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 800933e:	2300      	movs	r3, #0
 8009340:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		break;
 8009344:	e0f1      	b.n	800952a <USER_SPI_ioctl+0x32e>

		case GET_BLOCK_SIZE:
			// Get erase block size in unit of sector (DWORD)
			if(CardType & CT_SD2)
 8009346:	4b75      	ldr	r3, [pc, #468]	@ (800951c <USER_SPI_ioctl+0x320>)
 8009348:	781b      	ldrb	r3, [r3, #0]
 800934a:	f003 0304 	and.w	r3, r3, #4
 800934e:	2b00      	cmp	r3, #0
 8009350:	d031      	beq.n	80093b6 <USER_SPI_ioctl+0x1ba>
			{
				// SDC version 2.00
				if(0x00 == send_cmd(ACMD13, 0))
 8009352:	2100      	movs	r1, #0
 8009354:	20cd      	movs	r0, #205	@ 0xcd
 8009356:	f7ff fcc7 	bl	8008ce8 <send_cmd>
 800935a:	4603      	mov	r3, r0
 800935c:	2b00      	cmp	r3, #0
 800935e:	f040 80d6 	bne.w	800950e <USER_SPI_ioctl+0x312>
				{
					// Read SD status
					rcvr_spi();
 8009362:	20ff      	movs	r0, #255	@ 0xff
 8009364:	f7ff fbfc 	bl	8008b60 <spi_rw>
					if(rcvr_datablock(csd, 16))
 8009368:	f107 030c 	add.w	r3, r7, #12
 800936c:	2110      	movs	r1, #16
 800936e:	4618      	mov	r0, r3
 8009370:	f7ff fe0c 	bl	8008f8c <rcvr_datablock>
 8009374:	4603      	mov	r3, r0
 8009376:	2b00      	cmp	r3, #0
 8009378:	f000 80c9 	beq.w	800950e <USER_SPI_ioctl+0x312>
					{
						// Read partial block
						for (n = 64 - 16; n; n--) rcvr_spi();	// Purge trailing data
 800937c:	2330      	movs	r3, #48	@ 0x30
 800937e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8009382:	e007      	b.n	8009394 <USER_SPI_ioctl+0x198>
 8009384:	20ff      	movs	r0, #255	@ 0xff
 8009386:	f7ff fbeb 	bl	8008b60 <spi_rw>
 800938a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800938e:	3b01      	subs	r3, #1
 8009390:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8009394:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009398:	2b00      	cmp	r3, #0
 800939a:	d1f3      	bne.n	8009384 <USER_SPI_ioctl+0x188>
						*(DWORD*)buff = 16UL << (csd[10] >> 4);
 800939c:	7dbb      	ldrb	r3, [r7, #22]
 800939e:	091b      	lsrs	r3, r3, #4
 80093a0:	b2db      	uxtb	r3, r3
 80093a2:	461a      	mov	r2, r3
 80093a4:	2310      	movs	r3, #16
 80093a6:	fa03 f202 	lsl.w	r2, r3, r2
 80093aa:	683b      	ldr	r3, [r7, #0]
 80093ac:	601a      	str	r2, [r3, #0]
						res = RES_OK;
 80093ae:	2300      	movs	r3, #0
 80093b0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
						*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
					}
					res = RES_OK;
				}
			}
		break;
 80093b4:	e0ab      	b.n	800950e <USER_SPI_ioctl+0x312>
				if((0x00 == send_cmd(CMD9, 0)) && rcvr_datablock(csd, 16))
 80093b6:	2100      	movs	r1, #0
 80093b8:	2049      	movs	r0, #73	@ 0x49
 80093ba:	f7ff fc95 	bl	8008ce8 <send_cmd>
 80093be:	4603      	mov	r3, r0
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	f040 80a4 	bne.w	800950e <USER_SPI_ioctl+0x312>
 80093c6:	f107 030c 	add.w	r3, r7, #12
 80093ca:	2110      	movs	r1, #16
 80093cc:	4618      	mov	r0, r3
 80093ce:	f7ff fddd 	bl	8008f8c <rcvr_datablock>
 80093d2:	4603      	mov	r3, r0
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	f000 809a 	beq.w	800950e <USER_SPI_ioctl+0x312>
					if(CardType & CT_SD1)
 80093da:	4b50      	ldr	r3, [pc, #320]	@ (800951c <USER_SPI_ioctl+0x320>)
 80093dc:	781b      	ldrb	r3, [r3, #0]
 80093de:	f003 0302 	and.w	r3, r3, #2
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d012      	beq.n	800940c <USER_SPI_ioctl+0x210>
						*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 80093e6:	7dbb      	ldrb	r3, [r7, #22]
 80093e8:	005b      	lsls	r3, r3, #1
 80093ea:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 80093ee:	7dfa      	ldrb	r2, [r7, #23]
 80093f0:	09d2      	lsrs	r2, r2, #7
 80093f2:	b2d2      	uxtb	r2, r2
 80093f4:	4413      	add	r3, r2
 80093f6:	1c5a      	adds	r2, r3, #1
 80093f8:	7e7b      	ldrb	r3, [r7, #25]
 80093fa:	099b      	lsrs	r3, r3, #6
 80093fc:	b2db      	uxtb	r3, r3
 80093fe:	3b01      	subs	r3, #1
 8009400:	fa02 f303 	lsl.w	r3, r2, r3
 8009404:	461a      	mov	r2, r3
 8009406:	683b      	ldr	r3, [r7, #0]
 8009408:	601a      	str	r2, [r3, #0]
 800940a:	e013      	b.n	8009434 <USER_SPI_ioctl+0x238>
						*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 800940c:	7dbb      	ldrb	r3, [r7, #22]
 800940e:	109b      	asrs	r3, r3, #2
 8009410:	b29b      	uxth	r3, r3
 8009412:	f003 031f 	and.w	r3, r3, #31
 8009416:	3301      	adds	r3, #1
 8009418:	7dfa      	ldrb	r2, [r7, #23]
 800941a:	00d2      	lsls	r2, r2, #3
 800941c:	f002 0218 	and.w	r2, r2, #24
 8009420:	7df9      	ldrb	r1, [r7, #23]
 8009422:	0949      	lsrs	r1, r1, #5
 8009424:	b2c9      	uxtb	r1, r1
 8009426:	440a      	add	r2, r1
 8009428:	3201      	adds	r2, #1
 800942a:	fb02 f303 	mul.w	r3, r2, r3
 800942e:	461a      	mov	r2, r3
 8009430:	683b      	ldr	r3, [r7, #0]
 8009432:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 8009434:	2300      	movs	r3, #0
 8009436:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		break;
 800943a:	e068      	b.n	800950e <USER_SPI_ioctl+0x312>

		case MMC_GET_TYPE:
			// Get card type flags (1 byte)
			*ptr = CardType;
 800943c:	4b37      	ldr	r3, [pc, #220]	@ (800951c <USER_SPI_ioctl+0x320>)
 800943e:	781a      	ldrb	r2, [r3, #0]
 8009440:	6a3b      	ldr	r3, [r7, #32]
 8009442:	701a      	strb	r2, [r3, #0]
			res = RES_OK;
 8009444:	2300      	movs	r3, #0
 8009446:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		break;
 800944a:	e06e      	b.n	800952a <USER_SPI_ioctl+0x32e>

		case MMC_GET_CSD:
			// Receive CSD (CMD9) as a data block (16 bytes)
			if((0x00 == send_cmd(CMD9, 0)) && rcvr_datablock(ptr, 16)) res = RES_OK;
 800944c:	2100      	movs	r1, #0
 800944e:	2049      	movs	r0, #73	@ 0x49
 8009450:	f7ff fc4a 	bl	8008ce8 <send_cmd>
 8009454:	4603      	mov	r3, r0
 8009456:	2b00      	cmp	r3, #0
 8009458:	d15b      	bne.n	8009512 <USER_SPI_ioctl+0x316>
 800945a:	2110      	movs	r1, #16
 800945c:	6a38      	ldr	r0, [r7, #32]
 800945e:	f7ff fd95 	bl	8008f8c <rcvr_datablock>
 8009462:	4603      	mov	r3, r0
 8009464:	2b00      	cmp	r3, #0
 8009466:	d054      	beq.n	8009512 <USER_SPI_ioctl+0x316>
 8009468:	2300      	movs	r3, #0
 800946a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		break;
 800946e:	e050      	b.n	8009512 <USER_SPI_ioctl+0x316>

		case MMC_GET_CID:
			// Receive CID (CMD10) as a data block (16 bytes)
			if((0x00 == send_cmd(CMD10, 0)) && rcvr_datablock(ptr, 16))	res = RES_OK;
 8009470:	2100      	movs	r1, #0
 8009472:	204a      	movs	r0, #74	@ 0x4a
 8009474:	f7ff fc38 	bl	8008ce8 <send_cmd>
 8009478:	4603      	mov	r3, r0
 800947a:	2b00      	cmp	r3, #0
 800947c:	d150      	bne.n	8009520 <USER_SPI_ioctl+0x324>
 800947e:	2110      	movs	r1, #16
 8009480:	6a38      	ldr	r0, [r7, #32]
 8009482:	f7ff fd83 	bl	8008f8c <rcvr_datablock>
 8009486:	4603      	mov	r3, r0
 8009488:	2b00      	cmp	r3, #0
 800948a:	d049      	beq.n	8009520 <USER_SPI_ioctl+0x324>
 800948c:	2300      	movs	r3, #0
 800948e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		break;
 8009492:	e045      	b.n	8009520 <USER_SPI_ioctl+0x324>

		case MMC_GET_OCR:
			// Receive OCR (CMD58) as an R3 resp (4 bytes)
			if(0x00 == send_cmd(CMD58, 0))
 8009494:	2100      	movs	r1, #0
 8009496:	207a      	movs	r0, #122	@ 0x7a
 8009498:	f7ff fc26 	bl	8008ce8 <send_cmd>
 800949c:	4603      	mov	r3, r0
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d140      	bne.n	8009524 <USER_SPI_ioctl+0x328>
			{
				for(n=4; n; n--) *ptr++ = rcvr_spi();
 80094a2:	2304      	movs	r3, #4
 80094a4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80094a8:	e00c      	b.n	80094c4 <USER_SPI_ioctl+0x2c8>
 80094aa:	6a3c      	ldr	r4, [r7, #32]
 80094ac:	1c63      	adds	r3, r4, #1
 80094ae:	623b      	str	r3, [r7, #32]
 80094b0:	20ff      	movs	r0, #255	@ 0xff
 80094b2:	f7ff fb55 	bl	8008b60 <spi_rw>
 80094b6:	4603      	mov	r3, r0
 80094b8:	7023      	strb	r3, [r4, #0]
 80094ba:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80094be:	3b01      	subs	r3, #1
 80094c0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80094c4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d1ee      	bne.n	80094aa <USER_SPI_ioctl+0x2ae>
				res = RES_OK;
 80094cc:	2300      	movs	r3, #0
 80094ce:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			}
		break;
 80094d2:	e027      	b.n	8009524 <USER_SPI_ioctl+0x328>

		case MMC_GET_SDSTAT:
			// Receive SD status (ACMD13) as a data block (64 bytes)
			if(0x00 == send_cmd(ACMD13, 0))
 80094d4:	2100      	movs	r1, #0
 80094d6:	20cd      	movs	r0, #205	@ 0xcd
 80094d8:	f7ff fc06 	bl	8008ce8 <send_cmd>
 80094dc:	4603      	mov	r3, r0
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d122      	bne.n	8009528 <USER_SPI_ioctl+0x32c>
			{
				rcvr_spi();
 80094e2:	20ff      	movs	r0, #255	@ 0xff
 80094e4:	f7ff fb3c 	bl	8008b60 <spi_rw>
				if(rcvr_datablock(ptr, 64)) res = RES_OK;
 80094e8:	2140      	movs	r1, #64	@ 0x40
 80094ea:	6a38      	ldr	r0, [r7, #32]
 80094ec:	f7ff fd4e 	bl	8008f8c <rcvr_datablock>
 80094f0:	4603      	mov	r3, r0
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d018      	beq.n	8009528 <USER_SPI_ioctl+0x32c>
 80094f6:	2300      	movs	r3, #0
 80094f8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			}
		break;
 80094fc:	e014      	b.n	8009528 <USER_SPI_ioctl+0x32c>

		default:
			res = RES_PARERR;
 80094fe:	2304      	movs	r3, #4
 8009500:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8009504:	e011      	b.n	800952a <USER_SPI_ioctl+0x32e>
		break;
 8009506:	bf00      	nop
 8009508:	e00f      	b.n	800952a <USER_SPI_ioctl+0x32e>
		break;
 800950a:	bf00      	nop
 800950c:	e00d      	b.n	800952a <USER_SPI_ioctl+0x32e>
		break;
 800950e:	bf00      	nop
 8009510:	e00b      	b.n	800952a <USER_SPI_ioctl+0x32e>
		break;
 8009512:	bf00      	nop
 8009514:	e009      	b.n	800952a <USER_SPI_ioctl+0x32e>
 8009516:	bf00      	nop
 8009518:	20000028 	.word	0x20000028
 800951c:	20000a10 	.word	0x20000a10
		break;
 8009520:	bf00      	nop
 8009522:	e002      	b.n	800952a <USER_SPI_ioctl+0x32e>
		break;
 8009524:	bf00      	nop
 8009526:	e000      	b.n	800952a <USER_SPI_ioctl+0x32e>
		break;
 8009528:	bf00      	nop
	}

	DESELECT();
 800952a:	4b04      	ldr	r3, [pc, #16]	@ (800953c <USER_SPI_ioctl+0x340>)
 800952c:	2210      	movs	r2, #16
 800952e:	619a      	str	r2, [r3, #24]
	return res;
 8009530:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8009534:	4618      	mov	r0, r3
 8009536:	372c      	adds	r7, #44	@ 0x2c
 8009538:	46bd      	mov	sp, r7
 800953a:	bd90      	pop	{r4, r7, pc}
 800953c:	40020800 	.word	0x40020800

08009540 <USBD_MSC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009540:	b580      	push	{r7, lr}
 8009542:	b084      	sub	sp, #16
 8009544:	af00      	add	r7, sp, #0
 8009546:	6078      	str	r0, [r7, #4]
 8009548:	460b      	mov	r3, r1
 800954a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_MSC_BOT_HandleTypeDef *hmsc;

  hmsc = (USBD_MSC_BOT_HandleTypeDef *)USBD_malloc(sizeof(USBD_MSC_BOT_HandleTypeDef));
 800954c:	f44f 701d 	mov.w	r0, #628	@ 0x274
 8009550:	f006 ffac 	bl	80104ac <USBD_static_malloc>
 8009554:	60f8      	str	r0, [r7, #12]

  if (hmsc == NULL)
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	2b00      	cmp	r3, #0
 800955a:	d109      	bne.n	8009570 <USBD_MSC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	32b0      	adds	r2, #176	@ 0xb0
 8009566:	2100      	movs	r1, #0
 8009568:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800956c:	2302      	movs	r3, #2
 800956e:	e06e      	b.n	800964e <USBD_MSC_Init+0x10e>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hmsc;
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	32b0      	adds	r2, #176	@ 0xb0
 800957a:	68f9      	ldr	r1, [r7, #12]
 800957c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	32b0      	adds	r2, #176	@ 0xb0
 800958a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	7c1b      	ldrb	r3, [r3, #16]
 8009598:	2b00      	cmp	r3, #0
 800959a:	d12b      	bne.n	80095f4 <USBD_MSC_Init+0xb4>
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSCOutEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 800959c:	4b2e      	ldr	r3, [pc, #184]	@ (8009658 <USBD_MSC_Init+0x118>)
 800959e:	7819      	ldrb	r1, [r3, #0]
 80095a0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80095a4:	2202      	movs	r2, #2
 80095a6:	6878      	ldr	r0, [r7, #4]
 80095a8:	f006 fe3d 	bl	8010226 <USBD_LL_OpenEP>
    pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 1U;
 80095ac:	4b2a      	ldr	r3, [pc, #168]	@ (8009658 <USBD_MSC_Init+0x118>)
 80095ae:	781b      	ldrb	r3, [r3, #0]
 80095b0:	f003 020f 	and.w	r2, r3, #15
 80095b4:	6879      	ldr	r1, [r7, #4]
 80095b6:	4613      	mov	r3, r2
 80095b8:	009b      	lsls	r3, r3, #2
 80095ba:	4413      	add	r3, r2
 80095bc:	009b      	lsls	r3, r3, #2
 80095be:	440b      	add	r3, r1
 80095c0:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80095c4:	2201      	movs	r2, #1
 80095c6:	801a      	strh	r2, [r3, #0]

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSCInEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 80095c8:	4b24      	ldr	r3, [pc, #144]	@ (800965c <USBD_MSC_Init+0x11c>)
 80095ca:	7819      	ldrb	r1, [r3, #0]
 80095cc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80095d0:	2202      	movs	r2, #2
 80095d2:	6878      	ldr	r0, [r7, #4]
 80095d4:	f006 fe27 	bl	8010226 <USBD_LL_OpenEP>
    pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 1U;
 80095d8:	4b20      	ldr	r3, [pc, #128]	@ (800965c <USBD_MSC_Init+0x11c>)
 80095da:	781b      	ldrb	r3, [r3, #0]
 80095dc:	f003 020f 	and.w	r2, r3, #15
 80095e0:	6879      	ldr	r1, [r7, #4]
 80095e2:	4613      	mov	r3, r2
 80095e4:	009b      	lsls	r3, r3, #2
 80095e6:	4413      	add	r3, r2
 80095e8:	009b      	lsls	r3, r3, #2
 80095ea:	440b      	add	r3, r1
 80095ec:	3324      	adds	r3, #36	@ 0x24
 80095ee:	2201      	movs	r2, #1
 80095f0:	801a      	strh	r2, [r3, #0]
 80095f2:	e028      	b.n	8009646 <USBD_MSC_Init+0x106>
  }
  else
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSCOutEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 80095f4:	4b18      	ldr	r3, [pc, #96]	@ (8009658 <USBD_MSC_Init+0x118>)
 80095f6:	7819      	ldrb	r1, [r3, #0]
 80095f8:	2340      	movs	r3, #64	@ 0x40
 80095fa:	2202      	movs	r2, #2
 80095fc:	6878      	ldr	r0, [r7, #4]
 80095fe:	f006 fe12 	bl	8010226 <USBD_LL_OpenEP>
    pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 1U;
 8009602:	4b15      	ldr	r3, [pc, #84]	@ (8009658 <USBD_MSC_Init+0x118>)
 8009604:	781b      	ldrb	r3, [r3, #0]
 8009606:	f003 020f 	and.w	r2, r3, #15
 800960a:	6879      	ldr	r1, [r7, #4]
 800960c:	4613      	mov	r3, r2
 800960e:	009b      	lsls	r3, r3, #2
 8009610:	4413      	add	r3, r2
 8009612:	009b      	lsls	r3, r3, #2
 8009614:	440b      	add	r3, r1
 8009616:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800961a:	2201      	movs	r2, #1
 800961c:	801a      	strh	r2, [r3, #0]

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSCInEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 800961e:	4b0f      	ldr	r3, [pc, #60]	@ (800965c <USBD_MSC_Init+0x11c>)
 8009620:	7819      	ldrb	r1, [r3, #0]
 8009622:	2340      	movs	r3, #64	@ 0x40
 8009624:	2202      	movs	r2, #2
 8009626:	6878      	ldr	r0, [r7, #4]
 8009628:	f006 fdfd 	bl	8010226 <USBD_LL_OpenEP>
    pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 1U;
 800962c:	4b0b      	ldr	r3, [pc, #44]	@ (800965c <USBD_MSC_Init+0x11c>)
 800962e:	781b      	ldrb	r3, [r3, #0]
 8009630:	f003 020f 	and.w	r2, r3, #15
 8009634:	6879      	ldr	r1, [r7, #4]
 8009636:	4613      	mov	r3, r2
 8009638:	009b      	lsls	r3, r3, #2
 800963a:	4413      	add	r3, r2
 800963c:	009b      	lsls	r3, r3, #2
 800963e:	440b      	add	r3, r1
 8009640:	3324      	adds	r3, #36	@ 0x24
 8009642:	2201      	movs	r2, #1
 8009644:	801a      	strh	r2, [r3, #0]
  }

  /* Init the BOT  layer */
  MSC_BOT_Init(pdev);
 8009646:	6878      	ldr	r0, [r7, #4]
 8009648:	f000 fa2c 	bl	8009aa4 <MSC_BOT_Init>

  return (uint8_t)USBD_OK;
 800964c:	2300      	movs	r3, #0
}
 800964e:	4618      	mov	r0, r3
 8009650:	3710      	adds	r7, #16
 8009652:	46bd      	mov	sp, r7
 8009654:	bd80      	pop	{r7, pc}
 8009656:	bf00      	nop
 8009658:	2000008f 	.word	0x2000008f
 800965c:	2000008e 	.word	0x2000008e

08009660 <USBD_MSC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009660:	b580      	push	{r7, lr}
 8009662:	b082      	sub	sp, #8
 8009664:	af00      	add	r7, sp, #0
 8009666:	6078      	str	r0, [r7, #4]
 8009668:	460b      	mov	r3, r1
 800966a:	70fb      	strb	r3, [r7, #3]
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close MSC EPs */
  (void)USBD_LL_CloseEP(pdev, MSCOutEpAdd);
 800966c:	4b26      	ldr	r3, [pc, #152]	@ (8009708 <USBD_MSC_DeInit+0xa8>)
 800966e:	781b      	ldrb	r3, [r3, #0]
 8009670:	4619      	mov	r1, r3
 8009672:	6878      	ldr	r0, [r7, #4]
 8009674:	f006 fdfd 	bl	8010272 <USBD_LL_CloseEP>
  pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 0U;
 8009678:	4b23      	ldr	r3, [pc, #140]	@ (8009708 <USBD_MSC_DeInit+0xa8>)
 800967a:	781b      	ldrb	r3, [r3, #0]
 800967c:	f003 020f 	and.w	r2, r3, #15
 8009680:	6879      	ldr	r1, [r7, #4]
 8009682:	4613      	mov	r3, r2
 8009684:	009b      	lsls	r3, r3, #2
 8009686:	4413      	add	r3, r2
 8009688:	009b      	lsls	r3, r3, #2
 800968a:	440b      	add	r3, r1
 800968c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8009690:	2200      	movs	r2, #0
 8009692:	801a      	strh	r2, [r3, #0]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, MSCInEpAdd);
 8009694:	4b1d      	ldr	r3, [pc, #116]	@ (800970c <USBD_MSC_DeInit+0xac>)
 8009696:	781b      	ldrb	r3, [r3, #0]
 8009698:	4619      	mov	r1, r3
 800969a:	6878      	ldr	r0, [r7, #4]
 800969c:	f006 fde9 	bl	8010272 <USBD_LL_CloseEP>
  pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 0U;
 80096a0:	4b1a      	ldr	r3, [pc, #104]	@ (800970c <USBD_MSC_DeInit+0xac>)
 80096a2:	781b      	ldrb	r3, [r3, #0]
 80096a4:	f003 020f 	and.w	r2, r3, #15
 80096a8:	6879      	ldr	r1, [r7, #4]
 80096aa:	4613      	mov	r3, r2
 80096ac:	009b      	lsls	r3, r3, #2
 80096ae:	4413      	add	r3, r2
 80096b0:	009b      	lsls	r3, r3, #2
 80096b2:	440b      	add	r3, r1
 80096b4:	3324      	adds	r3, #36	@ 0x24
 80096b6:	2200      	movs	r2, #0
 80096b8:	801a      	strh	r2, [r3, #0]

  /* Free MSC Class Resources */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	32b0      	adds	r2, #176	@ 0xb0
 80096c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d018      	beq.n	80096fe <USBD_MSC_DeInit+0x9e>
  {
    /* De-Init the BOT layer */
    MSC_BOT_DeInit(pdev);
 80096cc:	6878      	ldr	r0, [r7, #4]
 80096ce:	f000 fa67 	bl	8009ba0 <MSC_BOT_DeInit>

    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	32b0      	adds	r2, #176	@ 0xb0
 80096dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80096e0:	4618      	mov	r0, r3
 80096e2:	f006 fef1 	bl	80104c8 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId]  = NULL;
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	32b0      	adds	r2, #176	@ 0xb0
 80096f0:	2100      	movs	r1, #0
 80096f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	2200      	movs	r2, #0
 80096fa:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 80096fe:	2300      	movs	r3, #0
}
 8009700:	4618      	mov	r0, r3
 8009702:	3708      	adds	r7, #8
 8009704:	46bd      	mov	sp, r7
 8009706:	bd80      	pop	{r7, pc}
 8009708:	2000008f 	.word	0x2000008f
 800970c:	2000008e 	.word	0x2000008e

08009710 <USBD_MSC_Setup>:
  * @param  pdev: device instance
  * @param  req: USB request
  * @retval status
  */
uint8_t USBD_MSC_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009710:	b580      	push	{r7, lr}
 8009712:	b086      	sub	sp, #24
 8009714:	af00      	add	r7, sp, #0
 8009716:	6078      	str	r0, [r7, #4]
 8009718:	6039      	str	r1, [r7, #0]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	32b0      	adds	r2, #176	@ 0xb0
 8009724:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009728:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 800972a:	2300      	movs	r3, #0
 800972c:	75fb      	strb	r3, [r7, #23]
  uint16_t status_info = 0U;
 800972e:	2300      	movs	r3, #0
 8009730:	81fb      	strh	r3, [r7, #14]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8009732:	693b      	ldr	r3, [r7, #16]
 8009734:	2b00      	cmp	r3, #0
 8009736:	d101      	bne.n	800973c <USBD_MSC_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 8009738:	2303      	movs	r3, #3
 800973a:	e0e1      	b.n	8009900 <USBD_MSC_Setup+0x1f0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800973c:	683b      	ldr	r3, [r7, #0]
 800973e:	781b      	ldrb	r3, [r3, #0]
 8009740:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009744:	2b00      	cmp	r3, #0
 8009746:	d053      	beq.n	80097f0 <USBD_MSC_Setup+0xe0>
 8009748:	2b20      	cmp	r3, #32
 800974a:	f040 80d1 	bne.w	80098f0 <USBD_MSC_Setup+0x1e0>
  {
    /* Class request */
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 800974e:	683b      	ldr	r3, [r7, #0]
 8009750:	785b      	ldrb	r3, [r3, #1]
 8009752:	2bfe      	cmp	r3, #254	@ 0xfe
 8009754:	d002      	beq.n	800975c <USBD_MSC_Setup+0x4c>
 8009756:	2bff      	cmp	r3, #255	@ 0xff
 8009758:	d02a      	beq.n	80097b0 <USBD_MSC_Setup+0xa0>
 800975a:	e041      	b.n	80097e0 <USBD_MSC_Setup+0xd0>
      {
        case BOT_GET_MAX_LUN:
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 800975c:	683b      	ldr	r3, [r7, #0]
 800975e:	885b      	ldrh	r3, [r3, #2]
 8009760:	2b00      	cmp	r3, #0
 8009762:	d11e      	bne.n	80097a2 <USBD_MSC_Setup+0x92>
 8009764:	683b      	ldr	r3, [r7, #0]
 8009766:	88db      	ldrh	r3, [r3, #6]
 8009768:	2b01      	cmp	r3, #1
 800976a:	d11a      	bne.n	80097a2 <USBD_MSC_Setup+0x92>
              ((req->bmRequest & 0x80U) == 0x80U))
 800976c:	683b      	ldr	r3, [r7, #0]
 800976e:	781b      	ldrb	r3, [r3, #0]
 8009770:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 8009772:	2b00      	cmp	r3, #0
 8009774:	da15      	bge.n	80097a2 <USBD_MSC_Setup+0x92>
          {
            hmsc->max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetMaxLun();
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800977c:	687a      	ldr	r2, [r7, #4]
 800977e:	33b0      	adds	r3, #176	@ 0xb0
 8009780:	009b      	lsls	r3, r3, #2
 8009782:	4413      	add	r3, r2
 8009784:	685b      	ldr	r3, [r3, #4]
 8009786:	699b      	ldr	r3, [r3, #24]
 8009788:	4798      	blx	r3
 800978a:	4603      	mov	r3, r0
 800978c:	461a      	mov	r2, r3
 800978e:	693b      	ldr	r3, [r7, #16]
 8009790:	601a      	str	r2, [r3, #0]
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->max_lun, 1U);
 8009792:	693b      	ldr	r3, [r7, #16]
 8009794:	2201      	movs	r2, #1
 8009796:	4619      	mov	r1, r3
 8009798:	6878      	ldr	r0, [r7, #4]
 800979a:	f003 f933 	bl	800ca04 <USBD_CtlSendData>
 800979e:	bf00      	nop
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80097a0:	e025      	b.n	80097ee <USBD_MSC_Setup+0xde>
            USBD_CtlError(pdev, req);
 80097a2:	6839      	ldr	r1, [r7, #0]
 80097a4:	6878      	ldr	r0, [r7, #4]
 80097a6:	f003 f8b0 	bl	800c90a <USBD_CtlError>
            ret = USBD_FAIL;
 80097aa:	2303      	movs	r3, #3
 80097ac:	75fb      	strb	r3, [r7, #23]
          break;
 80097ae:	e01e      	b.n	80097ee <USBD_MSC_Setup+0xde>

        case BOT_RESET :
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 80097b0:	683b      	ldr	r3, [r7, #0]
 80097b2:	885b      	ldrh	r3, [r3, #2]
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d10c      	bne.n	80097d2 <USBD_MSC_Setup+0xc2>
 80097b8:	683b      	ldr	r3, [r7, #0]
 80097ba:	88db      	ldrh	r3, [r3, #6]
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d108      	bne.n	80097d2 <USBD_MSC_Setup+0xc2>
              ((req->bmRequest & 0x80U) != 0x80U))
 80097c0:	683b      	ldr	r3, [r7, #0]
 80097c2:	781b      	ldrb	r3, [r3, #0]
 80097c4:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	db03      	blt.n	80097d2 <USBD_MSC_Setup+0xc2>
          {
            MSC_BOT_Reset(pdev);
 80097ca:	6878      	ldr	r0, [r7, #4]
 80097cc:	f000 f9b4 	bl	8009b38 <MSC_BOT_Reset>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80097d0:	e00d      	b.n	80097ee <USBD_MSC_Setup+0xde>
            USBD_CtlError(pdev, req);
 80097d2:	6839      	ldr	r1, [r7, #0]
 80097d4:	6878      	ldr	r0, [r7, #4]
 80097d6:	f003 f898 	bl	800c90a <USBD_CtlError>
            ret = USBD_FAIL;
 80097da:	2303      	movs	r3, #3
 80097dc:	75fb      	strb	r3, [r7, #23]
          break;
 80097de:	e006      	b.n	80097ee <USBD_MSC_Setup+0xde>

        default:
          USBD_CtlError(pdev, req);
 80097e0:	6839      	ldr	r1, [r7, #0]
 80097e2:	6878      	ldr	r0, [r7, #4]
 80097e4:	f003 f891 	bl	800c90a <USBD_CtlError>
          ret = USBD_FAIL;
 80097e8:	2303      	movs	r3, #3
 80097ea:	75fb      	strb	r3, [r7, #23]
          break;
 80097ec:	bf00      	nop
      }
      break;
 80097ee:	e086      	b.n	80098fe <USBD_MSC_Setup+0x1ee>
    /* Interface & Endpoint request */
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80097f0:	683b      	ldr	r3, [r7, #0]
 80097f2:	785b      	ldrb	r3, [r3, #1]
 80097f4:	2b0b      	cmp	r3, #11
 80097f6:	d872      	bhi.n	80098de <USBD_MSC_Setup+0x1ce>
 80097f8:	a201      	add	r2, pc, #4	@ (adr r2, 8009800 <USBD_MSC_Setup+0xf0>)
 80097fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097fe:	bf00      	nop
 8009800:	08009831 	.word	0x08009831
 8009804:	080098ad 	.word	0x080098ad
 8009808:	080098df 	.word	0x080098df
 800980c:	080098df 	.word	0x080098df
 8009810:	080098df 	.word	0x080098df
 8009814:	080098df 	.word	0x080098df
 8009818:	080098df 	.word	0x080098df
 800981c:	080098df 	.word	0x080098df
 8009820:	080098df 	.word	0x080098df
 8009824:	080098df 	.word	0x080098df
 8009828:	0800985b 	.word	0x0800985b
 800982c:	08009885 	.word	0x08009885
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009836:	b2db      	uxtb	r3, r3
 8009838:	2b03      	cmp	r3, #3
 800983a:	d107      	bne.n	800984c <USBD_MSC_Setup+0x13c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800983c:	f107 030e 	add.w	r3, r7, #14
 8009840:	2202      	movs	r2, #2
 8009842:	4619      	mov	r1, r3
 8009844:	6878      	ldr	r0, [r7, #4]
 8009846:	f003 f8dd 	bl	800ca04 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800984a:	e050      	b.n	80098ee <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 800984c:	6839      	ldr	r1, [r7, #0]
 800984e:	6878      	ldr	r0, [r7, #4]
 8009850:	f003 f85b 	bl	800c90a <USBD_CtlError>
            ret = USBD_FAIL;
 8009854:	2303      	movs	r3, #3
 8009856:	75fb      	strb	r3, [r7, #23]
          break;
 8009858:	e049      	b.n	80098ee <USBD_MSC_Setup+0x1de>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009860:	b2db      	uxtb	r3, r3
 8009862:	2b03      	cmp	r3, #3
 8009864:	d107      	bne.n	8009876 <USBD_MSC_Setup+0x166>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->interface, 1U);
 8009866:	693b      	ldr	r3, [r7, #16]
 8009868:	3304      	adds	r3, #4
 800986a:	2201      	movs	r2, #1
 800986c:	4619      	mov	r1, r3
 800986e:	6878      	ldr	r0, [r7, #4]
 8009870:	f003 f8c8 	bl	800ca04 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009874:	e03b      	b.n	80098ee <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 8009876:	6839      	ldr	r1, [r7, #0]
 8009878:	6878      	ldr	r0, [r7, #4]
 800987a:	f003 f846 	bl	800c90a <USBD_CtlError>
            ret = USBD_FAIL;
 800987e:	2303      	movs	r3, #3
 8009880:	75fb      	strb	r3, [r7, #23]
          break;
 8009882:	e034      	b.n	80098ee <USBD_MSC_Setup+0x1de>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800988a:	b2db      	uxtb	r3, r3
 800988c:	2b03      	cmp	r3, #3
 800988e:	d106      	bne.n	800989e <USBD_MSC_Setup+0x18e>
          {
            hmsc->interface = (uint8_t)(req->wValue);
 8009890:	683b      	ldr	r3, [r7, #0]
 8009892:	885b      	ldrh	r3, [r3, #2]
 8009894:	b2db      	uxtb	r3, r3
 8009896:	461a      	mov	r2, r3
 8009898:	693b      	ldr	r3, [r7, #16]
 800989a:	605a      	str	r2, [r3, #4]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800989c:	e027      	b.n	80098ee <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 800989e:	6839      	ldr	r1, [r7, #0]
 80098a0:	6878      	ldr	r0, [r7, #4]
 80098a2:	f003 f832 	bl	800c90a <USBD_CtlError>
            ret = USBD_FAIL;
 80098a6:	2303      	movs	r3, #3
 80098a8:	75fb      	strb	r3, [r7, #23]
          break;
 80098aa:	e020      	b.n	80098ee <USBD_MSC_Setup+0x1de>

        case USB_REQ_CLEAR_FEATURE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80098b2:	b2db      	uxtb	r3, r3
 80098b4:	2b03      	cmp	r3, #3
 80098b6:	d119      	bne.n	80098ec <USBD_MSC_Setup+0x1dc>
          {
            if (req->wValue == USB_FEATURE_EP_HALT)
 80098b8:	683b      	ldr	r3, [r7, #0]
 80098ba:	885b      	ldrh	r3, [r3, #2]
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d115      	bne.n	80098ec <USBD_MSC_Setup+0x1dc>
            {
              /* Flush the FIFO */
              (void)USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 80098c0:	683b      	ldr	r3, [r7, #0]
 80098c2:	889b      	ldrh	r3, [r3, #4]
 80098c4:	b2db      	uxtb	r3, r3
 80098c6:	4619      	mov	r1, r3
 80098c8:	6878      	ldr	r0, [r7, #4]
 80098ca:	f006 fcf1 	bl	80102b0 <USBD_LL_FlushEP>

              /* Handle BOT error */
              MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 80098ce:	683b      	ldr	r3, [r7, #0]
 80098d0:	889b      	ldrh	r3, [r3, #4]
 80098d2:	b2db      	uxtb	r3, r3
 80098d4:	4619      	mov	r1, r3
 80098d6:	6878      	ldr	r0, [r7, #4]
 80098d8:	f000 fb2e 	bl	8009f38 <MSC_BOT_CplClrFeature>
            }
          }
          break;
 80098dc:	e006      	b.n	80098ec <USBD_MSC_Setup+0x1dc>

        default:
          USBD_CtlError(pdev, req);
 80098de:	6839      	ldr	r1, [r7, #0]
 80098e0:	6878      	ldr	r0, [r7, #4]
 80098e2:	f003 f812 	bl	800c90a <USBD_CtlError>
          ret = USBD_FAIL;
 80098e6:	2303      	movs	r3, #3
 80098e8:	75fb      	strb	r3, [r7, #23]
          break;
 80098ea:	e000      	b.n	80098ee <USBD_MSC_Setup+0x1de>
          break;
 80098ec:	bf00      	nop
      }
      break;
 80098ee:	e006      	b.n	80098fe <USBD_MSC_Setup+0x1ee>

    default:
      USBD_CtlError(pdev, req);
 80098f0:	6839      	ldr	r1, [r7, #0]
 80098f2:	6878      	ldr	r0, [r7, #4]
 80098f4:	f003 f809 	bl	800c90a <USBD_CtlError>
      ret = USBD_FAIL;
 80098f8:	2303      	movs	r3, #3
 80098fa:	75fb      	strb	r3, [r7, #23]
      break;
 80098fc:	bf00      	nop
  }

  return (uint8_t)ret;
 80098fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8009900:	4618      	mov	r0, r3
 8009902:	3718      	adds	r7, #24
 8009904:	46bd      	mov	sp, r7
 8009906:	bd80      	pop	{r7, pc}

08009908 <USBD_MSC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009908:	b580      	push	{r7, lr}
 800990a:	b082      	sub	sp, #8
 800990c:	af00      	add	r7, sp, #0
 800990e:	6078      	str	r0, [r7, #4]
 8009910:	460b      	mov	r3, r1
 8009912:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataIn(pdev, epnum);
 8009914:	78fb      	ldrb	r3, [r7, #3]
 8009916:	4619      	mov	r1, r3
 8009918:	6878      	ldr	r0, [r7, #4]
 800991a:	f000 f959 	bl	8009bd0 <MSC_BOT_DataIn>

  return (uint8_t)USBD_OK;
 800991e:	2300      	movs	r3, #0
}
 8009920:	4618      	mov	r0, r3
 8009922:	3708      	adds	r7, #8
 8009924:	46bd      	mov	sp, r7
 8009926:	bd80      	pop	{r7, pc}

08009928 <USBD_MSC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009928:	b580      	push	{r7, lr}
 800992a:	b082      	sub	sp, #8
 800992c:	af00      	add	r7, sp, #0
 800992e:	6078      	str	r0, [r7, #4]
 8009930:	460b      	mov	r3, r1
 8009932:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataOut(pdev, epnum);
 8009934:	78fb      	ldrb	r3, [r7, #3]
 8009936:	4619      	mov	r1, r3
 8009938:	6878      	ldr	r0, [r7, #4]
 800993a:	f000 f983 	bl	8009c44 <MSC_BOT_DataOut>

  return (uint8_t)USBD_OK;
 800993e:	2300      	movs	r3, #0
}
 8009940:	4618      	mov	r0, r3
 8009942:	3708      	adds	r7, #8
 8009944:	46bd      	mov	sp, r7
 8009946:	bd80      	pop	{r7, pc}

08009948 <USBD_MSC_GetHSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetHSCfgDesc(uint16_t *length)
{
 8009948:	b580      	push	{r7, lr}
 800994a:	b084      	sub	sp, #16
 800994c:	af00      	add	r7, sp, #0
 800994e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 8009950:	2181      	movs	r1, #129	@ 0x81
 8009952:	4812      	ldr	r0, [pc, #72]	@ (800999c <USBD_MSC_GetHSCfgDesc+0x54>)
 8009954:	f002 f9a4 	bl	800bca0 <USBD_GetEpDesc>
 8009958:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 800995a:	2101      	movs	r1, #1
 800995c:	480f      	ldr	r0, [pc, #60]	@ (800999c <USBD_MSC_GetHSCfgDesc+0x54>)
 800995e:	f002 f99f 	bl	800bca0 <USBD_GetEpDesc>
 8009962:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	2b00      	cmp	r3, #0
 8009968:	d006      	beq.n	8009978 <USBD_MSC_GetHSCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_HS_PACKET;
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	2200      	movs	r2, #0
 800996e:	711a      	strb	r2, [r3, #4]
 8009970:	2200      	movs	r2, #0
 8009972:	f042 0202 	orr.w	r2, r2, #2
 8009976:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 8009978:	68bb      	ldr	r3, [r7, #8]
 800997a:	2b00      	cmp	r3, #0
 800997c:	d006      	beq.n	800998c <USBD_MSC_GetHSCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_HS_PACKET;
 800997e:	68bb      	ldr	r3, [r7, #8]
 8009980:	2200      	movs	r2, #0
 8009982:	711a      	strb	r2, [r3, #4]
 8009984:	2200      	movs	r2, #0
 8009986:	f042 0202 	orr.w	r2, r2, #2
 800998a:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	2220      	movs	r2, #32
 8009990:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 8009992:	4b02      	ldr	r3, [pc, #8]	@ (800999c <USBD_MSC_GetHSCfgDesc+0x54>)
}
 8009994:	4618      	mov	r0, r3
 8009996:	3710      	adds	r7, #16
 8009998:	46bd      	mov	sp, r7
 800999a:	bd80      	pop	{r7, pc}
 800999c:	20000064 	.word	0x20000064

080099a0 <USBD_MSC_GetFSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetFSCfgDesc(uint16_t *length)
{
 80099a0:	b580      	push	{r7, lr}
 80099a2:	b084      	sub	sp, #16
 80099a4:	af00      	add	r7, sp, #0
 80099a6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 80099a8:	2181      	movs	r1, #129	@ 0x81
 80099aa:	4812      	ldr	r0, [pc, #72]	@ (80099f4 <USBD_MSC_GetFSCfgDesc+0x54>)
 80099ac:	f002 f978 	bl	800bca0 <USBD_GetEpDesc>
 80099b0:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 80099b2:	2101      	movs	r1, #1
 80099b4:	480f      	ldr	r0, [pc, #60]	@ (80099f4 <USBD_MSC_GetFSCfgDesc+0x54>)
 80099b6:	f002 f973 	bl	800bca0 <USBD_GetEpDesc>
 80099ba:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d006      	beq.n	80099d0 <USBD_MSC_GetFSCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	2200      	movs	r2, #0
 80099c6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80099ca:	711a      	strb	r2, [r3, #4]
 80099cc:	2200      	movs	r2, #0
 80099ce:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 80099d0:	68bb      	ldr	r3, [r7, #8]
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d006      	beq.n	80099e4 <USBD_MSC_GetFSCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 80099d6:	68bb      	ldr	r3, [r7, #8]
 80099d8:	2200      	movs	r2, #0
 80099da:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80099de:	711a      	strb	r2, [r3, #4]
 80099e0:	2200      	movs	r2, #0
 80099e2:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	2220      	movs	r2, #32
 80099e8:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 80099ea:	4b02      	ldr	r3, [pc, #8]	@ (80099f4 <USBD_MSC_GetFSCfgDesc+0x54>)
}
 80099ec:	4618      	mov	r0, r3
 80099ee:	3710      	adds	r7, #16
 80099f0:	46bd      	mov	sp, r7
 80099f2:	bd80      	pop	{r7, pc}
 80099f4:	20000064 	.word	0x20000064

080099f8 <USBD_MSC_GetOtherSpeedCfgDesc>:
  *         return other speed configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80099f8:	b580      	push	{r7, lr}
 80099fa:	b084      	sub	sp, #16
 80099fc:	af00      	add	r7, sp, #0
 80099fe:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 8009a00:	2181      	movs	r1, #129	@ 0x81
 8009a02:	4812      	ldr	r0, [pc, #72]	@ (8009a4c <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
 8009a04:	f002 f94c 	bl	800bca0 <USBD_GetEpDesc>
 8009a08:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 8009a0a:	2101      	movs	r1, #1
 8009a0c:	480f      	ldr	r0, [pc, #60]	@ (8009a4c <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
 8009a0e:	f002 f947 	bl	800bca0 <USBD_GetEpDesc>
 8009a12:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d006      	beq.n	8009a28 <USBD_MSC_GetOtherSpeedCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	2200      	movs	r2, #0
 8009a1e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009a22:	711a      	strb	r2, [r3, #4]
 8009a24:	2200      	movs	r2, #0
 8009a26:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 8009a28:	68bb      	ldr	r3, [r7, #8]
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d006      	beq.n	8009a3c <USBD_MSC_GetOtherSpeedCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 8009a2e:	68bb      	ldr	r3, [r7, #8]
 8009a30:	2200      	movs	r2, #0
 8009a32:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009a36:	711a      	strb	r2, [r3, #4]
 8009a38:	2200      	movs	r2, #0
 8009a3a:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	2220      	movs	r2, #32
 8009a40:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 8009a42:	4b02      	ldr	r3, [pc, #8]	@ (8009a4c <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
}
 8009a44:	4618      	mov	r0, r3
 8009a46:	3710      	adds	r7, #16
 8009a48:	46bd      	mov	sp, r7
 8009a4a:	bd80      	pop	{r7, pc}
 8009a4c:	20000064 	.word	0x20000064

08009a50 <USBD_MSC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8009a50:	b480      	push	{r7}
 8009a52:	b083      	sub	sp, #12
 8009a54:	af00      	add	r7, sp, #0
 8009a56:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_DeviceQualifierDesc);
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	220a      	movs	r2, #10
 8009a5c:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_DeviceQualifierDesc;
 8009a5e:	4b03      	ldr	r3, [pc, #12]	@ (8009a6c <USBD_MSC_GetDeviceQualifierDescriptor+0x1c>)
}
 8009a60:	4618      	mov	r0, r3
 8009a62:	370c      	adds	r7, #12
 8009a64:	46bd      	mov	sp, r7
 8009a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a6a:	4770      	bx	lr
 8009a6c:	20000084 	.word	0x20000084

08009a70 <USBD_MSC_RegisterStorage>:
  * @brief  USBD_MSC_RegisterStorage
  * @param  fops: storage callback
  * @retval status
  */
uint8_t USBD_MSC_RegisterStorage(USBD_HandleTypeDef *pdev, USBD_StorageTypeDef *fops)
{
 8009a70:	b480      	push	{r7}
 8009a72:	b083      	sub	sp, #12
 8009a74:	af00      	add	r7, sp, #0
 8009a76:	6078      	str	r0, [r7, #4]
 8009a78:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8009a7a:	683b      	ldr	r3, [r7, #0]
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d101      	bne.n	8009a84 <USBD_MSC_RegisterStorage+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8009a80:	2303      	movs	r3, #3
 8009a82:	e009      	b.n	8009a98 <USBD_MSC_RegisterStorage+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009a8a:	687a      	ldr	r2, [r7, #4]
 8009a8c:	33b0      	adds	r3, #176	@ 0xb0
 8009a8e:	009b      	lsls	r3, r3, #2
 8009a90:	4413      	add	r3, r2
 8009a92:	683a      	ldr	r2, [r7, #0]
 8009a94:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8009a96:	2300      	movs	r3, #0
}
 8009a98:	4618      	mov	r0, r3
 8009a9a:	370c      	adds	r7, #12
 8009a9c:	46bd      	mov	sp, r7
 8009a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aa2:	4770      	bx	lr

08009aa4 <MSC_BOT_Init>:
  *         Initialize the BOT Process
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_Init(USBD_HandleTypeDef *pdev)
{
 8009aa4:	b580      	push	{r7, lr}
 8009aa6:	b084      	sub	sp, #16
 8009aa8:	af00      	add	r7, sp, #0
 8009aaa:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	32b0      	adds	r2, #176	@ 0xb0
 8009ab6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009aba:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d032      	beq.n	8009b28 <MSC_BOT_Init+0x84>
  {
    return;
  }

  hmsc->bot_state = USBD_BOT_IDLE;
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	2200      	movs	r2, #0
 8009ac6:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	2200      	movs	r2, #0
 8009acc:	725a      	strb	r2, [r3, #9]

  hmsc->scsi_sense_tail = 0U;
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	2200      	movs	r2, #0
 8009ad2:	f883 2261 	strb.w	r2, [r3, #609]	@ 0x261
  hmsc->scsi_sense_head = 0U;
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	2200      	movs	r2, #0
 8009ada:	f883 2260 	strb.w	r2, [r3, #608]	@ 0x260
  hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	2200      	movs	r2, #0
 8009ae2:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262

  ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Init(0U);
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009aec:	687a      	ldr	r2, [r7, #4]
 8009aee:	33b0      	adds	r3, #176	@ 0xb0
 8009af0:	009b      	lsls	r3, r3, #2
 8009af2:	4413      	add	r3, r2
 8009af4:	685b      	ldr	r3, [r3, #4]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	2000      	movs	r0, #0
 8009afa:	4798      	blx	r3

  (void)USBD_LL_FlushEP(pdev, MSCOutEpAdd);
 8009afc:	4b0c      	ldr	r3, [pc, #48]	@ (8009b30 <MSC_BOT_Init+0x8c>)
 8009afe:	781b      	ldrb	r3, [r3, #0]
 8009b00:	4619      	mov	r1, r3
 8009b02:	6878      	ldr	r0, [r7, #4]
 8009b04:	f006 fbd4 	bl	80102b0 <USBD_LL_FlushEP>
  (void)USBD_LL_FlushEP(pdev, MSCInEpAdd);
 8009b08:	4b0a      	ldr	r3, [pc, #40]	@ (8009b34 <MSC_BOT_Init+0x90>)
 8009b0a:	781b      	ldrb	r3, [r3, #0]
 8009b0c:	4619      	mov	r1, r3
 8009b0e:	6878      	ldr	r0, [r7, #4]
 8009b10:	f006 fbce 	bl	80102b0 <USBD_LL_FlushEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 8009b14:	4b06      	ldr	r3, [pc, #24]	@ (8009b30 <MSC_BOT_Init+0x8c>)
 8009b16:	7819      	ldrb	r1, [r3, #0]
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	f503 7204 	add.w	r2, r3, #528	@ 0x210
 8009b1e:	231f      	movs	r3, #31
 8009b20:	6878      	ldr	r0, [r7, #4]
 8009b22:	f006 fc8e 	bl	8010442 <USBD_LL_PrepareReceive>
 8009b26:	e000      	b.n	8009b2a <MSC_BOT_Init+0x86>
    return;
 8009b28:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 8009b2a:	3710      	adds	r7, #16
 8009b2c:	46bd      	mov	sp, r7
 8009b2e:	bd80      	pop	{r7, pc}
 8009b30:	2000008f 	.word	0x2000008f
 8009b34:	2000008e 	.word	0x2000008e

08009b38 <MSC_BOT_Reset>:
  *         Reset the BOT Machine
  * @param  pdev: device instance
  * @retval  None
  */
void MSC_BOT_Reset(USBD_HandleTypeDef *pdev)
{
 8009b38:	b580      	push	{r7, lr}
 8009b3a:	b084      	sub	sp, #16
 8009b3c:	af00      	add	r7, sp, #0
 8009b3e:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	32b0      	adds	r2, #176	@ 0xb0
 8009b4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b4e:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d01b      	beq.n	8009b8e <MSC_BOT_Reset+0x56>
  {
    return;
  }

  hmsc->bot_state  = USBD_BOT_IDLE;
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	2200      	movs	r2, #0
 8009b5a:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	2201      	movs	r2, #1
 8009b60:	725a      	strb	r2, [r3, #9]

  (void)USBD_LL_ClearStallEP(pdev, MSCInEpAdd);
 8009b62:	4b0d      	ldr	r3, [pc, #52]	@ (8009b98 <MSC_BOT_Reset+0x60>)
 8009b64:	781b      	ldrb	r3, [r3, #0]
 8009b66:	4619      	mov	r1, r3
 8009b68:	6878      	ldr	r0, [r7, #4]
 8009b6a:	f006 fbdf 	bl	801032c <USBD_LL_ClearStallEP>
  (void)USBD_LL_ClearStallEP(pdev, MSCOutEpAdd);
 8009b6e:	4b0b      	ldr	r3, [pc, #44]	@ (8009b9c <MSC_BOT_Reset+0x64>)
 8009b70:	781b      	ldrb	r3, [r3, #0]
 8009b72:	4619      	mov	r1, r3
 8009b74:	6878      	ldr	r0, [r7, #4]
 8009b76:	f006 fbd9 	bl	801032c <USBD_LL_ClearStallEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 8009b7a:	4b08      	ldr	r3, [pc, #32]	@ (8009b9c <MSC_BOT_Reset+0x64>)
 8009b7c:	7819      	ldrb	r1, [r3, #0]
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	f503 7204 	add.w	r2, r3, #528	@ 0x210
 8009b84:	231f      	movs	r3, #31
 8009b86:	6878      	ldr	r0, [r7, #4]
 8009b88:	f006 fc5b 	bl	8010442 <USBD_LL_PrepareReceive>
 8009b8c:	e000      	b.n	8009b90 <MSC_BOT_Reset+0x58>
    return;
 8009b8e:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 8009b90:	3710      	adds	r7, #16
 8009b92:	46bd      	mov	sp, r7
 8009b94:	bd80      	pop	{r7, pc}
 8009b96:	bf00      	nop
 8009b98:	2000008e 	.word	0x2000008e
 8009b9c:	2000008f 	.word	0x2000008f

08009ba0 <MSC_BOT_DeInit>:
  *         DeInitialize the BOT Machine
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_DeInit(USBD_HandleTypeDef  *pdev)
{
 8009ba0:	b480      	push	{r7}
 8009ba2:	b085      	sub	sp, #20
 8009ba4:	af00      	add	r7, sp, #0
 8009ba6:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	32b0      	adds	r2, #176	@ 0xb0
 8009bb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009bb6:	60fb      	str	r3, [r7, #12]

  if (hmsc != NULL)
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d002      	beq.n	8009bc4 <MSC_BOT_DeInit+0x24>
  {
    hmsc->bot_state = USBD_BOT_IDLE;
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	2200      	movs	r2, #0
 8009bc2:	721a      	strb	r2, [r3, #8]
  }
}
 8009bc4:	bf00      	nop
 8009bc6:	3714      	adds	r7, #20
 8009bc8:	46bd      	mov	sp, r7
 8009bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bce:	4770      	bx	lr

08009bd0 <MSC_BOT_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009bd0:	b580      	push	{r7, lr}
 8009bd2:	b084      	sub	sp, #16
 8009bd4:	af00      	add	r7, sp, #0
 8009bd6:	6078      	str	r0, [r7, #4]
 8009bd8:	460b      	mov	r3, r1
 8009bda:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	32b0      	adds	r2, #176	@ 0xb0
 8009be6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009bea:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d020      	beq.n	8009c34 <MSC_BOT_DataIn+0x64>
  {
    return;
  }

  switch (hmsc->bot_state)
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	7a1b      	ldrb	r3, [r3, #8]
 8009bf6:	2b02      	cmp	r3, #2
 8009bf8:	d005      	beq.n	8009c06 <MSC_BOT_DataIn+0x36>
 8009bfa:	2b02      	cmp	r3, #2
 8009bfc:	db1c      	blt.n	8009c38 <MSC_BOT_DataIn+0x68>
 8009bfe:	3b03      	subs	r3, #3
 8009c00:	2b01      	cmp	r3, #1
 8009c02:	d819      	bhi.n	8009c38 <MSC_BOT_DataIn+0x68>
 8009c04:	e011      	b.n	8009c2a <MSC_BOT_DataIn+0x5a>
  {
    case USBD_BOT_DATA_IN:
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	f203 231f 	addw	r3, r3, #543	@ 0x21f
 8009c12:	461a      	mov	r2, r3
 8009c14:	6878      	ldr	r0, [r7, #4]
 8009c16:	f000 f9c9 	bl	8009fac <SCSI_ProcessCmd>
 8009c1a:	4603      	mov	r3, r0
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	da0d      	bge.n	8009c3c <MSC_BOT_DataIn+0x6c>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8009c20:	2101      	movs	r1, #1
 8009c22:	6878      	ldr	r0, [r7, #4]
 8009c24:	f000 f90c 	bl	8009e40 <MSC_BOT_SendCSW>
      }
      break;
 8009c28:	e008      	b.n	8009c3c <MSC_BOT_DataIn+0x6c>

    case USBD_BOT_SEND_DATA:
    case USBD_BOT_LAST_DATA_IN:
      MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8009c2a:	2100      	movs	r1, #0
 8009c2c:	6878      	ldr	r0, [r7, #4]
 8009c2e:	f000 f907 	bl	8009e40 <MSC_BOT_SendCSW>
      break;
 8009c32:	e004      	b.n	8009c3e <MSC_BOT_DataIn+0x6e>
    return;
 8009c34:	bf00      	nop
 8009c36:	e002      	b.n	8009c3e <MSC_BOT_DataIn+0x6e>

    default:
      break;
 8009c38:	bf00      	nop
 8009c3a:	e000      	b.n	8009c3e <MSC_BOT_DataIn+0x6e>
      break;
 8009c3c:	bf00      	nop
  }
}
 8009c3e:	3710      	adds	r7, #16
 8009c40:	46bd      	mov	sp, r7
 8009c42:	bd80      	pop	{r7, pc}

08009c44 <MSC_BOT_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009c44:	b580      	push	{r7, lr}
 8009c46:	b084      	sub	sp, #16
 8009c48:	af00      	add	r7, sp, #0
 8009c4a:	6078      	str	r0, [r7, #4]
 8009c4c:	460b      	mov	r3, r1
 8009c4e:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	32b0      	adds	r2, #176	@ 0xb0
 8009c5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c5e:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d01c      	beq.n	8009ca0 <MSC_BOT_DataOut+0x5c>
  {
    return;
  }

  switch (hmsc->bot_state)
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	7a1b      	ldrb	r3, [r3, #8]
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d002      	beq.n	8009c74 <MSC_BOT_DataOut+0x30>
 8009c6e:	2b01      	cmp	r3, #1
 8009c70:	d004      	beq.n	8009c7c <MSC_BOT_DataOut+0x38>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
      }
      break;

    default:
      break;
 8009c72:	e018      	b.n	8009ca6 <MSC_BOT_DataOut+0x62>
      MSC_BOT_CBW_Decode(pdev);
 8009c74:	6878      	ldr	r0, [r7, #4]
 8009c76:	f000 f819 	bl	8009cac <MSC_BOT_CBW_Decode>
      break;
 8009c7a:	e014      	b.n	8009ca6 <MSC_BOT_DataOut+0x62>
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	f203 231f 	addw	r3, r3, #543	@ 0x21f
 8009c88:	461a      	mov	r2, r3
 8009c8a:	6878      	ldr	r0, [r7, #4]
 8009c8c:	f000 f98e 	bl	8009fac <SCSI_ProcessCmd>
 8009c90:	4603      	mov	r3, r0
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	da06      	bge.n	8009ca4 <MSC_BOT_DataOut+0x60>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8009c96:	2101      	movs	r1, #1
 8009c98:	6878      	ldr	r0, [r7, #4]
 8009c9a:	f000 f8d1 	bl	8009e40 <MSC_BOT_SendCSW>
      break;
 8009c9e:	e001      	b.n	8009ca4 <MSC_BOT_DataOut+0x60>
    return;
 8009ca0:	bf00      	nop
 8009ca2:	e000      	b.n	8009ca6 <MSC_BOT_DataOut+0x62>
      break;
 8009ca4:	bf00      	nop
  }
}
 8009ca6:	3710      	adds	r7, #16
 8009ca8:	46bd      	mov	sp, r7
 8009caa:	bd80      	pop	{r7, pc}

08009cac <MSC_BOT_CBW_Decode>:
  *         Decode the CBW command and set the BOT state machine accordingly
  * @param  pdev: device instance
  * @retval None
  */
static void  MSC_BOT_CBW_Decode(USBD_HandleTypeDef *pdev)
{
 8009cac:	b580      	push	{r7, lr}
 8009cae:	b084      	sub	sp, #16
 8009cb0:	af00      	add	r7, sp, #0
 8009cb2:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	32b0      	adds	r2, #176	@ 0xb0
 8009cbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009cc2:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d079      	beq.n	8009dbe <MSC_BOT_CBW_Decode+0x112>
  {
    return;
  }

  hmsc->csw.dTag = hmsc->cbw.dTag;
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	f8c3 2234 	str.w	r2, [r3, #564]	@ 0x234
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	f8d3 2218 	ldr.w	r2, [r3, #536]	@ 0x218
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	f8c3 2238 	str.w	r2, [r3, #568]	@ 0x238

  if ((USBD_LL_GetRxDataSize(pdev, MSCOutEpAdd) != USBD_BOT_CBW_LENGTH) ||
 8009ce2:	4b3a      	ldr	r3, [pc, #232]	@ (8009dcc <MSC_BOT_CBW_Decode+0x120>)
 8009ce4:	781b      	ldrb	r3, [r3, #0]
 8009ce6:	4619      	mov	r1, r3
 8009ce8:	6878      	ldr	r0, [r7, #4]
 8009cea:	f006 fbcb 	bl	8010484 <USBD_LL_GetRxDataSize>
 8009cee:	4603      	mov	r3, r0
 8009cf0:	2b1f      	cmp	r3, #31
 8009cf2:	d114      	bne.n	8009d1e <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
  if ((USBD_LL_GetRxDataSize(pdev, MSCOutEpAdd) != USBD_BOT_CBW_LENGTH) ||
 8009cfa:	4a35      	ldr	r2, [pc, #212]	@ (8009dd0 <MSC_BOT_CBW_Decode+0x124>)
 8009cfc:	4293      	cmp	r3, r2
 8009cfe:	d10e      	bne.n	8009d1e <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	f893 321d 	ldrb.w	r3, [r3, #541]	@ 0x21d
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 8009d06:	2b01      	cmp	r3, #1
 8009d08:	d809      	bhi.n	8009d1e <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	f893 321e 	ldrb.w	r3, [r3, #542]	@ 0x21e
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d004      	beq.n	8009d1e <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.bCBLength > 16U))
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	f893 321e 	ldrb.w	r3, [r3, #542]	@ 0x21e
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 8009d1a:	2b10      	cmp	r3, #16
 8009d1c:	d90e      	bls.n	8009d3c <MSC_BOT_CBW_Decode+0x90>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 8009d24:	2320      	movs	r3, #32
 8009d26:	2205      	movs	r2, #5
 8009d28:	6878      	ldr	r0, [r7, #4]
 8009d2a:	f000 fe54 	bl	800a9d6 <SCSI_SenseCode>

    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	2202      	movs	r2, #2
 8009d32:	725a      	strb	r2, [r3, #9]
    MSC_BOT_Abort(pdev);
 8009d34:	6878      	ldr	r0, [r7, #4]
 8009d36:	f000 f8bd 	bl	8009eb4 <MSC_BOT_Abort>
 8009d3a:	e043      	b.n	8009dc4 <MSC_BOT_CBW_Decode+0x118>
  }
  else
  {
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	f203 231f 	addw	r3, r3, #543	@ 0x21f
 8009d48:	461a      	mov	r2, r3
 8009d4a:	6878      	ldr	r0, [r7, #4]
 8009d4c:	f000 f92e 	bl	8009fac <SCSI_ProcessCmd>
 8009d50:	4603      	mov	r3, r0
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	da0c      	bge.n	8009d70 <MSC_BOT_CBW_Decode+0xc4>
    {
      if (hmsc->bot_state == USBD_BOT_NO_DATA)
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	7a1b      	ldrb	r3, [r3, #8]
 8009d5a:	2b05      	cmp	r3, #5
 8009d5c:	d104      	bne.n	8009d68 <MSC_BOT_CBW_Decode+0xbc>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8009d5e:	2101      	movs	r1, #1
 8009d60:	6878      	ldr	r0, [r7, #4]
 8009d62:	f000 f86d 	bl	8009e40 <MSC_BOT_SendCSW>
 8009d66:	e02d      	b.n	8009dc4 <MSC_BOT_CBW_Decode+0x118>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 8009d68:	6878      	ldr	r0, [r7, #4]
 8009d6a:	f000 f8a3 	bl	8009eb4 <MSC_BOT_Abort>
 8009d6e:	e029      	b.n	8009dc4 <MSC_BOT_CBW_Decode+0x118>
      }
    }
    /* Burst xfer handled internally */
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	7a1b      	ldrb	r3, [r3, #8]
 8009d74:	2b02      	cmp	r3, #2
 8009d76:	d024      	beq.n	8009dc2 <MSC_BOT_CBW_Decode+0x116>
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	7a1b      	ldrb	r3, [r3, #8]
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 8009d7c:	2b01      	cmp	r3, #1
 8009d7e:	d020      	beq.n	8009dc2 <MSC_BOT_CBW_Decode+0x116>
             (hmsc->bot_state != USBD_BOT_LAST_DATA_IN))
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	7a1b      	ldrb	r3, [r3, #8]
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 8009d84:	2b03      	cmp	r3, #3
 8009d86:	d01c      	beq.n	8009dc2 <MSC_BOT_CBW_Decode+0x116>
    {
      if (hmsc->bot_data_length > 0U)
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	68db      	ldr	r3, [r3, #12]
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d009      	beq.n	8009da4 <MSC_BOT_CBW_Decode+0xf8>
      {
        MSC_BOT_SendData(pdev, hmsc->bot_data, hmsc->bot_data_length);
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	f103 0110 	add.w	r1, r3, #16
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	68db      	ldr	r3, [r3, #12]
 8009d9a:	461a      	mov	r2, r3
 8009d9c:	6878      	ldr	r0, [r7, #4]
 8009d9e:	f000 f819 	bl	8009dd4 <MSC_BOT_SendData>
      if (hmsc->bot_data_length > 0U)
 8009da2:	e00f      	b.n	8009dc4 <MSC_BOT_CBW_Decode+0x118>
      }
      else if (hmsc->bot_data_length == 0U)
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	68db      	ldr	r3, [r3, #12]
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d104      	bne.n	8009db6 <MSC_BOT_CBW_Decode+0x10a>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8009dac:	2100      	movs	r1, #0
 8009dae:	6878      	ldr	r0, [r7, #4]
 8009db0:	f000 f846 	bl	8009e40 <MSC_BOT_SendCSW>
      if (hmsc->bot_data_length > 0U)
 8009db4:	e006      	b.n	8009dc4 <MSC_BOT_CBW_Decode+0x118>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 8009db6:	6878      	ldr	r0, [r7, #4]
 8009db8:	f000 f87c 	bl	8009eb4 <MSC_BOT_Abort>
      if (hmsc->bot_data_length > 0U)
 8009dbc:	e002      	b.n	8009dc4 <MSC_BOT_CBW_Decode+0x118>
    return;
 8009dbe:	bf00      	nop
 8009dc0:	e000      	b.n	8009dc4 <MSC_BOT_CBW_Decode+0x118>
      }
    }
    else
    {
      return;
 8009dc2:	bf00      	nop
    }
  }
}
 8009dc4:	3710      	adds	r7, #16
 8009dc6:	46bd      	mov	sp, r7
 8009dc8:	bd80      	pop	{r7, pc}
 8009dca:	bf00      	nop
 8009dcc:	2000008f 	.word	0x2000008f
 8009dd0:	43425355 	.word	0x43425355

08009dd4 <MSC_BOT_SendData>:
  * @param  buf: pointer to data buffer
  * @param  len: Data Length
  * @retval None
  */
static void  MSC_BOT_SendData(USBD_HandleTypeDef *pdev, uint8_t *pbuf, uint32_t len)
{
 8009dd4:	b580      	push	{r7, lr}
 8009dd6:	b086      	sub	sp, #24
 8009dd8:	af00      	add	r7, sp, #0
 8009dda:	60f8      	str	r0, [r7, #12]
 8009ddc:	60b9      	str	r1, [r7, #8]
 8009dde:	607a      	str	r2, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	32b0      	adds	r2, #176	@ 0xb0
 8009dea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009dee:	617b      	str	r3, [r7, #20]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8009df0:	697b      	ldr	r3, [r7, #20]
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d01e      	beq.n	8009e34 <MSC_BOT_SendData+0x60>
  {
    return;
  }

  length = MIN(hmsc->cbw.dDataLength, len);
 8009df6:	697b      	ldr	r3, [r7, #20]
 8009df8:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8009dfc:	687a      	ldr	r2, [r7, #4]
 8009dfe:	4293      	cmp	r3, r2
 8009e00:	bf28      	it	cs
 8009e02:	4613      	movcs	r3, r2
 8009e04:	613b      	str	r3, [r7, #16]

  hmsc->csw.dDataResidue -= len;
 8009e06:	697b      	ldr	r3, [r7, #20]
 8009e08:	f8d3 2238 	ldr.w	r2, [r3, #568]	@ 0x238
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	1ad2      	subs	r2, r2, r3
 8009e10:	697b      	ldr	r3, [r7, #20]
 8009e12:	f8c3 2238 	str.w	r2, [r3, #568]	@ 0x238
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 8009e16:	697b      	ldr	r3, [r7, #20]
 8009e18:	2200      	movs	r2, #0
 8009e1a:	f883 223c 	strb.w	r2, [r3, #572]	@ 0x23c
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 8009e1e:	697b      	ldr	r3, [r7, #20]
 8009e20:	2204      	movs	r2, #4
 8009e22:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, pbuf, length);
 8009e24:	4b05      	ldr	r3, [pc, #20]	@ (8009e3c <MSC_BOT_SendData+0x68>)
 8009e26:	7819      	ldrb	r1, [r3, #0]
 8009e28:	693b      	ldr	r3, [r7, #16]
 8009e2a:	68ba      	ldr	r2, [r7, #8]
 8009e2c:	68f8      	ldr	r0, [r7, #12]
 8009e2e:	f006 fae7 	bl	8010400 <USBD_LL_Transmit>
 8009e32:	e000      	b.n	8009e36 <MSC_BOT_SendData+0x62>
    return;
 8009e34:	bf00      	nop
}
 8009e36:	3718      	adds	r7, #24
 8009e38:	46bd      	mov	sp, r7
 8009e3a:	bd80      	pop	{r7, pc}
 8009e3c:	2000008e 	.word	0x2000008e

08009e40 <MSC_BOT_SendCSW>:
  * @param  pdev: device instance
  * @param  status : CSW status
  * @retval None
  */
void  MSC_BOT_SendCSW(USBD_HandleTypeDef *pdev, uint8_t CSW_Status)
{
 8009e40:	b580      	push	{r7, lr}
 8009e42:	b084      	sub	sp, #16
 8009e44:	af00      	add	r7, sp, #0
 8009e46:	6078      	str	r0, [r7, #4]
 8009e48:	460b      	mov	r3, r1
 8009e4a:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	32b0      	adds	r2, #176	@ 0xb0
 8009e56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e5a:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d01d      	beq.n	8009e9e <MSC_BOT_SendCSW+0x5e>
  {
    return;
  }

  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	4a10      	ldr	r2, [pc, #64]	@ (8009ea8 <MSC_BOT_SendCSW+0x68>)
 8009e66:	f8c3 2230 	str.w	r2, [r3, #560]	@ 0x230
  hmsc->csw.bStatus = CSW_Status;
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	78fa      	ldrb	r2, [r7, #3]
 8009e6e:	f883 223c 	strb.w	r2, [r3, #572]	@ 0x23c
  hmsc->bot_state = USBD_BOT_IDLE;
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	2200      	movs	r2, #0
 8009e76:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, (uint8_t *)&hmsc->csw,
 8009e78:	4b0c      	ldr	r3, [pc, #48]	@ (8009eac <MSC_BOT_SendCSW+0x6c>)
 8009e7a:	7819      	ldrb	r1, [r3, #0]
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	f503 720c 	add.w	r2, r3, #560	@ 0x230
 8009e82:	230d      	movs	r3, #13
 8009e84:	6878      	ldr	r0, [r7, #4]
 8009e86:	f006 fabb 	bl	8010400 <USBD_LL_Transmit>
                         USBD_BOT_CSW_LENGTH);

  /* Prepare EP to Receive next Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 8009e8a:	4b09      	ldr	r3, [pc, #36]	@ (8009eb0 <MSC_BOT_SendCSW+0x70>)
 8009e8c:	7819      	ldrb	r1, [r3, #0]
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	f503 7204 	add.w	r2, r3, #528	@ 0x210
 8009e94:	231f      	movs	r3, #31
 8009e96:	6878      	ldr	r0, [r7, #4]
 8009e98:	f006 fad3 	bl	8010442 <USBD_LL_PrepareReceive>
 8009e9c:	e000      	b.n	8009ea0 <MSC_BOT_SendCSW+0x60>
    return;
 8009e9e:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 8009ea0:	3710      	adds	r7, #16
 8009ea2:	46bd      	mov	sp, r7
 8009ea4:	bd80      	pop	{r7, pc}
 8009ea6:	bf00      	nop
 8009ea8:	53425355 	.word	0x53425355
 8009eac:	2000008e 	.word	0x2000008e
 8009eb0:	2000008f 	.word	0x2000008f

08009eb4 <MSC_BOT_Abort>:
  * @param  pdev: device instance
  * @retval status
  */

static void  MSC_BOT_Abort(USBD_HandleTypeDef *pdev)
{
 8009eb4:	b580      	push	{r7, lr}
 8009eb6:	b084      	sub	sp, #16
 8009eb8:	af00      	add	r7, sp, #0
 8009eba:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	32b0      	adds	r2, #176	@ 0xb0
 8009ec6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009eca:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d02a      	beq.n	8009f28 <MSC_BOT_Abort+0x74>
  {
    return;
  }

  if ((hmsc->cbw.bmFlags == 0U) &&
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	f893 321c 	ldrb.w	r3, [r3, #540]	@ 0x21c
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d10e      	bne.n	8009efa <MSC_BOT_Abort+0x46>
      (hmsc->cbw.dDataLength != 0U) &&
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
  if ((hmsc->cbw.bmFlags == 0U) &&
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d009      	beq.n	8009efa <MSC_BOT_Abort+0x46>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL))
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	7a5b      	ldrb	r3, [r3, #9]
      (hmsc->cbw.dDataLength != 0U) &&
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d105      	bne.n	8009efa <MSC_BOT_Abort+0x46>
  {
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 8009eee:	4b10      	ldr	r3, [pc, #64]	@ (8009f30 <MSC_BOT_Abort+0x7c>)
 8009ef0:	781b      	ldrb	r3, [r3, #0]
 8009ef2:	4619      	mov	r1, r3
 8009ef4:	6878      	ldr	r0, [r7, #4]
 8009ef6:	f006 f9fa 	bl	80102ee <USBD_LL_StallEP>
  }

  (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 8009efa:	4b0e      	ldr	r3, [pc, #56]	@ (8009f34 <MSC_BOT_Abort+0x80>)
 8009efc:	781b      	ldrb	r3, [r3, #0]
 8009efe:	4619      	mov	r1, r3
 8009f00:	6878      	ldr	r0, [r7, #4]
 8009f02:	f006 f9f4 	bl	80102ee <USBD_LL_StallEP>

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	7a5b      	ldrb	r3, [r3, #9]
 8009f0a:	2b02      	cmp	r3, #2
 8009f0c:	d10d      	bne.n	8009f2a <MSC_BOT_Abort+0x76>
  {
    (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 8009f0e:	4b09      	ldr	r3, [pc, #36]	@ (8009f34 <MSC_BOT_Abort+0x80>)
 8009f10:	781b      	ldrb	r3, [r3, #0]
 8009f12:	4619      	mov	r1, r3
 8009f14:	6878      	ldr	r0, [r7, #4]
 8009f16:	f006 f9ea 	bl	80102ee <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 8009f1a:	4b05      	ldr	r3, [pc, #20]	@ (8009f30 <MSC_BOT_Abort+0x7c>)
 8009f1c:	781b      	ldrb	r3, [r3, #0]
 8009f1e:	4619      	mov	r1, r3
 8009f20:	6878      	ldr	r0, [r7, #4]
 8009f22:	f006 f9e4 	bl	80102ee <USBD_LL_StallEP>
 8009f26:	e000      	b.n	8009f2a <MSC_BOT_Abort+0x76>
    return;
 8009f28:	bf00      	nop
  }
}
 8009f2a:	3710      	adds	r7, #16
 8009f2c:	46bd      	mov	sp, r7
 8009f2e:	bd80      	pop	{r7, pc}
 8009f30:	2000008f 	.word	0x2000008f
 8009f34:	2000008e 	.word	0x2000008e

08009f38 <MSC_BOT_CplClrFeature>:
  * @param  epnum: endpoint index
  * @retval None
  */

void  MSC_BOT_CplClrFeature(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009f38:	b580      	push	{r7, lr}
 8009f3a:	b084      	sub	sp, #16
 8009f3c:	af00      	add	r7, sp, #0
 8009f3e:	6078      	str	r0, [r7, #4]
 8009f40:	460b      	mov	r3, r1
 8009f42:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	32b0      	adds	r2, #176	@ 0xb0
 8009f4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f52:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d01d      	beq.n	8009f96 <MSC_BOT_CplClrFeature+0x5e>
  {
    return;
  }

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR) /* Bad CBW Signature */
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	7a5b      	ldrb	r3, [r3, #9]
 8009f5e:	2b02      	cmp	r3, #2
 8009f60:	d10c      	bne.n	8009f7c <MSC_BOT_CplClrFeature+0x44>
  {
    (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 8009f62:	4b10      	ldr	r3, [pc, #64]	@ (8009fa4 <MSC_BOT_CplClrFeature+0x6c>)
 8009f64:	781b      	ldrb	r3, [r3, #0]
 8009f66:	4619      	mov	r1, r3
 8009f68:	6878      	ldr	r0, [r7, #4]
 8009f6a:	f006 f9c0 	bl	80102ee <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 8009f6e:	4b0e      	ldr	r3, [pc, #56]	@ (8009fa8 <MSC_BOT_CplClrFeature+0x70>)
 8009f70:	781b      	ldrb	r3, [r3, #0]
 8009f72:	4619      	mov	r1, r3
 8009f74:	6878      	ldr	r0, [r7, #4]
 8009f76:	f006 f9ba 	bl	80102ee <USBD_LL_StallEP>
 8009f7a:	e00f      	b.n	8009f9c <MSC_BOT_CplClrFeature+0x64>
  }
  else if (((epnum & 0x80U) == 0x80U) && (hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 8009f7c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	da0a      	bge.n	8009f9a <MSC_BOT_CplClrFeature+0x62>
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	7a5b      	ldrb	r3, [r3, #9]
 8009f88:	2b01      	cmp	r3, #1
 8009f8a:	d006      	beq.n	8009f9a <MSC_BOT_CplClrFeature+0x62>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8009f8c:	2101      	movs	r1, #1
 8009f8e:	6878      	ldr	r0, [r7, #4]
 8009f90:	f7ff ff56 	bl	8009e40 <MSC_BOT_SendCSW>
 8009f94:	e002      	b.n	8009f9c <MSC_BOT_CplClrFeature+0x64>
    return;
 8009f96:	bf00      	nop
 8009f98:	e000      	b.n	8009f9c <MSC_BOT_CplClrFeature+0x64>
  }
  else
  {
    return;
 8009f9a:	bf00      	nop
  }
}
 8009f9c:	3710      	adds	r7, #16
 8009f9e:	46bd      	mov	sp, r7
 8009fa0:	bd80      	pop	{r7, pc}
 8009fa2:	bf00      	nop
 8009fa4:	2000008e 	.word	0x2000008e
 8009fa8:	2000008f 	.word	0x2000008f

08009fac <SCSI_ProcessCmd>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
int8_t SCSI_ProcessCmd(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *cmd)
{
 8009fac:	b580      	push	{r7, lr}
 8009fae:	b086      	sub	sp, #24
 8009fb0:	af00      	add	r7, sp, #0
 8009fb2:	60f8      	str	r0, [r7, #12]
 8009fb4:	460b      	mov	r3, r1
 8009fb6:	607a      	str	r2, [r7, #4]
 8009fb8:	72fb      	strb	r3, [r7, #11]
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	32b0      	adds	r2, #176	@ 0xb0
 8009fc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009fc8:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 8009fca:	693b      	ldr	r3, [r7, #16]
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d102      	bne.n	8009fd6 <SCSI_ProcessCmd+0x2a>
  {
    return -1;
 8009fd0:	f04f 33ff 	mov.w	r3, #4294967295
 8009fd4:	e168      	b.n	800a2a8 <SCSI_ProcessCmd+0x2fc>
  }

  switch (cmd[0])
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	781b      	ldrb	r3, [r3, #0]
 8009fda:	2baa      	cmp	r3, #170	@ 0xaa
 8009fdc:	f000 8144 	beq.w	800a268 <SCSI_ProcessCmd+0x2bc>
 8009fe0:	2baa      	cmp	r3, #170	@ 0xaa
 8009fe2:	f300 8153 	bgt.w	800a28c <SCSI_ProcessCmd+0x2e0>
 8009fe6:	2ba8      	cmp	r3, #168	@ 0xa8
 8009fe8:	f000 812c 	beq.w	800a244 <SCSI_ProcessCmd+0x298>
 8009fec:	2ba8      	cmp	r3, #168	@ 0xa8
 8009fee:	f300 814d 	bgt.w	800a28c <SCSI_ProcessCmd+0x2e0>
 8009ff2:	2b5a      	cmp	r3, #90	@ 0x5a
 8009ff4:	f300 80c0 	bgt.w	800a178 <SCSI_ProcessCmd+0x1cc>
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	f2c0 8147 	blt.w	800a28c <SCSI_ProcessCmd+0x2e0>
 8009ffe:	2b5a      	cmp	r3, #90	@ 0x5a
 800a000:	f200 8144 	bhi.w	800a28c <SCSI_ProcessCmd+0x2e0>
 800a004:	a201      	add	r2, pc, #4	@ (adr r2, 800a00c <SCSI_ProcessCmd+0x60>)
 800a006:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a00a:	bf00      	nop
 800a00c:	0800a17f 	.word	0x0800a17f
 800a010:	0800a28d 	.word	0x0800a28d
 800a014:	0800a28d 	.word	0x0800a28d
 800a018:	0800a191 	.word	0x0800a191
 800a01c:	0800a28d 	.word	0x0800a28d
 800a020:	0800a28d 	.word	0x0800a28d
 800a024:	0800a28d 	.word	0x0800a28d
 800a028:	0800a28d 	.word	0x0800a28d
 800a02c:	0800a28d 	.word	0x0800a28d
 800a030:	0800a28d 	.word	0x0800a28d
 800a034:	0800a28d 	.word	0x0800a28d
 800a038:	0800a28d 	.word	0x0800a28d
 800a03c:	0800a28d 	.word	0x0800a28d
 800a040:	0800a28d 	.word	0x0800a28d
 800a044:	0800a28d 	.word	0x0800a28d
 800a048:	0800a28d 	.word	0x0800a28d
 800a04c:	0800a28d 	.word	0x0800a28d
 800a050:	0800a28d 	.word	0x0800a28d
 800a054:	0800a1a3 	.word	0x0800a1a3
 800a058:	0800a28d 	.word	0x0800a28d
 800a05c:	0800a28d 	.word	0x0800a28d
 800a060:	0800a28d 	.word	0x0800a28d
 800a064:	0800a28d 	.word	0x0800a28d
 800a068:	0800a28d 	.word	0x0800a28d
 800a06c:	0800a28d 	.word	0x0800a28d
 800a070:	0800a28d 	.word	0x0800a28d
 800a074:	0800a1d9 	.word	0x0800a1d9
 800a078:	0800a1b5 	.word	0x0800a1b5
 800a07c:	0800a28d 	.word	0x0800a28d
 800a080:	0800a28d 	.word	0x0800a28d
 800a084:	0800a1c7 	.word	0x0800a1c7
 800a088:	0800a28d 	.word	0x0800a28d
 800a08c:	0800a28d 	.word	0x0800a28d
 800a090:	0800a28d 	.word	0x0800a28d
 800a094:	0800a28d 	.word	0x0800a28d
 800a098:	0800a1fd 	.word	0x0800a1fd
 800a09c:	0800a28d 	.word	0x0800a28d
 800a0a0:	0800a20f 	.word	0x0800a20f
 800a0a4:	0800a28d 	.word	0x0800a28d
 800a0a8:	0800a28d 	.word	0x0800a28d
 800a0ac:	0800a233 	.word	0x0800a233
 800a0b0:	0800a28d 	.word	0x0800a28d
 800a0b4:	0800a257 	.word	0x0800a257
 800a0b8:	0800a28d 	.word	0x0800a28d
 800a0bc:	0800a28d 	.word	0x0800a28d
 800a0c0:	0800a28d 	.word	0x0800a28d
 800a0c4:	0800a28d 	.word	0x0800a28d
 800a0c8:	0800a27b 	.word	0x0800a27b
 800a0cc:	0800a28d 	.word	0x0800a28d
 800a0d0:	0800a28d 	.word	0x0800a28d
 800a0d4:	0800a28d 	.word	0x0800a28d
 800a0d8:	0800a28d 	.word	0x0800a28d
 800a0dc:	0800a28d 	.word	0x0800a28d
 800a0e0:	0800a28d 	.word	0x0800a28d
 800a0e4:	0800a28d 	.word	0x0800a28d
 800a0e8:	0800a28d 	.word	0x0800a28d
 800a0ec:	0800a28d 	.word	0x0800a28d
 800a0f0:	0800a28d 	.word	0x0800a28d
 800a0f4:	0800a28d 	.word	0x0800a28d
 800a0f8:	0800a28d 	.word	0x0800a28d
 800a0fc:	0800a28d 	.word	0x0800a28d
 800a100:	0800a28d 	.word	0x0800a28d
 800a104:	0800a28d 	.word	0x0800a28d
 800a108:	0800a28d 	.word	0x0800a28d
 800a10c:	0800a28d 	.word	0x0800a28d
 800a110:	0800a28d 	.word	0x0800a28d
 800a114:	0800a28d 	.word	0x0800a28d
 800a118:	0800a28d 	.word	0x0800a28d
 800a11c:	0800a28d 	.word	0x0800a28d
 800a120:	0800a28d 	.word	0x0800a28d
 800a124:	0800a28d 	.word	0x0800a28d
 800a128:	0800a28d 	.word	0x0800a28d
 800a12c:	0800a28d 	.word	0x0800a28d
 800a130:	0800a28d 	.word	0x0800a28d
 800a134:	0800a28d 	.word	0x0800a28d
 800a138:	0800a28d 	.word	0x0800a28d
 800a13c:	0800a28d 	.word	0x0800a28d
 800a140:	0800a28d 	.word	0x0800a28d
 800a144:	0800a28d 	.word	0x0800a28d
 800a148:	0800a28d 	.word	0x0800a28d
 800a14c:	0800a28d 	.word	0x0800a28d
 800a150:	0800a28d 	.word	0x0800a28d
 800a154:	0800a28d 	.word	0x0800a28d
 800a158:	0800a28d 	.word	0x0800a28d
 800a15c:	0800a28d 	.word	0x0800a28d
 800a160:	0800a28d 	.word	0x0800a28d
 800a164:	0800a28d 	.word	0x0800a28d
 800a168:	0800a28d 	.word	0x0800a28d
 800a16c:	0800a28d 	.word	0x0800a28d
 800a170:	0800a28d 	.word	0x0800a28d
 800a174:	0800a1eb 	.word	0x0800a1eb
 800a178:	2b9e      	cmp	r3, #158	@ 0x9e
 800a17a:	d051      	beq.n	800a220 <SCSI_ProcessCmd+0x274>
 800a17c:	e086      	b.n	800a28c <SCSI_ProcessCmd+0x2e0>
  {
    case SCSI_TEST_UNIT_READY:
      ret = SCSI_TestUnitReady(pdev, lun, cmd);
 800a17e:	7afb      	ldrb	r3, [r7, #11]
 800a180:	687a      	ldr	r2, [r7, #4]
 800a182:	4619      	mov	r1, r3
 800a184:	68f8      	ldr	r0, [r7, #12]
 800a186:	f000 f893 	bl	800a2b0 <SCSI_TestUnitReady>
 800a18a:	4603      	mov	r3, r0
 800a18c:	75fb      	strb	r3, [r7, #23]
      break;
 800a18e:	e089      	b.n	800a2a4 <SCSI_ProcessCmd+0x2f8>

    case SCSI_REQUEST_SENSE:
      ret = SCSI_RequestSense(pdev, lun, cmd);
 800a190:	7afb      	ldrb	r3, [r7, #11]
 800a192:	687a      	ldr	r2, [r7, #4]
 800a194:	4619      	mov	r1, r3
 800a196:	68f8      	ldr	r0, [r7, #12]
 800a198:	f000 fb9a 	bl	800a8d0 <SCSI_RequestSense>
 800a19c:	4603      	mov	r3, r0
 800a19e:	75fb      	strb	r3, [r7, #23]
      break;
 800a1a0:	e080      	b.n	800a2a4 <SCSI_ProcessCmd+0x2f8>

    case SCSI_INQUIRY:
      ret = SCSI_Inquiry(pdev, lun, cmd);
 800a1a2:	7afb      	ldrb	r3, [r7, #11]
 800a1a4:	687a      	ldr	r2, [r7, #4]
 800a1a6:	4619      	mov	r1, r3
 800a1a8:	68f8      	ldr	r0, [r7, #12]
 800a1aa:	f000 f8db 	bl	800a364 <SCSI_Inquiry>
 800a1ae:	4603      	mov	r3, r0
 800a1b0:	75fb      	strb	r3, [r7, #23]
      break;
 800a1b2:	e077      	b.n	800a2a4 <SCSI_ProcessCmd+0x2f8>

    case SCSI_START_STOP_UNIT:
      ret = SCSI_StartStopUnit(pdev, lun, cmd);
 800a1b4:	7afb      	ldrb	r3, [r7, #11]
 800a1b6:	687a      	ldr	r2, [r7, #4]
 800a1b8:	4619      	mov	r1, r3
 800a1ba:	68f8      	ldr	r0, [r7, #12]
 800a1bc:	f000 fc56 	bl	800aa6c <SCSI_StartStopUnit>
 800a1c0:	4603      	mov	r3, r0
 800a1c2:	75fb      	strb	r3, [r7, #23]
      break;
 800a1c4:	e06e      	b.n	800a2a4 <SCSI_ProcessCmd+0x2f8>

    case SCSI_ALLOW_MEDIUM_REMOVAL:
      ret = SCSI_AllowPreventRemovable(pdev, lun, cmd);
 800a1c6:	7afb      	ldrb	r3, [r7, #11]
 800a1c8:	687a      	ldr	r2, [r7, #4]
 800a1ca:	4619      	mov	r1, r3
 800a1cc:	68f8      	ldr	r0, [r7, #12]
 800a1ce:	f000 fca2 	bl	800ab16 <SCSI_AllowPreventRemovable>
 800a1d2:	4603      	mov	r3, r0
 800a1d4:	75fb      	strb	r3, [r7, #23]
      break;
 800a1d6:	e065      	b.n	800a2a4 <SCSI_ProcessCmd+0x2f8>

    case SCSI_MODE_SENSE6:
      ret = SCSI_ModeSense6(pdev, lun, cmd);
 800a1d8:	7afb      	ldrb	r3, [r7, #11]
 800a1da:	687a      	ldr	r2, [r7, #4]
 800a1dc:	4619      	mov	r1, r3
 800a1de:	68f8      	ldr	r0, [r7, #12]
 800a1e0:	f000 faea 	bl	800a7b8 <SCSI_ModeSense6>
 800a1e4:	4603      	mov	r3, r0
 800a1e6:	75fb      	strb	r3, [r7, #23]
      break;
 800a1e8:	e05c      	b.n	800a2a4 <SCSI_ProcessCmd+0x2f8>

    case SCSI_MODE_SENSE10:
      ret = SCSI_ModeSense10(pdev, lun, cmd);
 800a1ea:	7afb      	ldrb	r3, [r7, #11]
 800a1ec:	687a      	ldr	r2, [r7, #4]
 800a1ee:	4619      	mov	r1, r3
 800a1f0:	68f8      	ldr	r0, [r7, #12]
 800a1f2:	f000 fb27 	bl	800a844 <SCSI_ModeSense10>
 800a1f6:	4603      	mov	r3, r0
 800a1f8:	75fb      	strb	r3, [r7, #23]
      break;
 800a1fa:	e053      	b.n	800a2a4 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_FORMAT_CAPACITIES:
      ret = SCSI_ReadFormatCapacity(pdev, lun, cmd);
 800a1fc:	7afb      	ldrb	r3, [r7, #11]
 800a1fe:	687a      	ldr	r2, [r7, #4]
 800a200:	4619      	mov	r1, r3
 800a202:	68f8      	ldr	r0, [r7, #12]
 800a204:	f000 fa5c 	bl	800a6c0 <SCSI_ReadFormatCapacity>
 800a208:	4603      	mov	r3, r0
 800a20a:	75fb      	strb	r3, [r7, #23]
      break;
 800a20c:	e04a      	b.n	800a2a4 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_CAPACITY10:
      ret = SCSI_ReadCapacity10(pdev, lun, cmd);
 800a20e:	7afb      	ldrb	r3, [r7, #11]
 800a210:	687a      	ldr	r2, [r7, #4]
 800a212:	4619      	mov	r1, r3
 800a214:	68f8      	ldr	r0, [r7, #12]
 800a216:	f000 f921 	bl	800a45c <SCSI_ReadCapacity10>
 800a21a:	4603      	mov	r3, r0
 800a21c:	75fb      	strb	r3, [r7, #23]
      break;
 800a21e:	e041      	b.n	800a2a4 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_CAPACITY16:
      ret = SCSI_ReadCapacity16(pdev, lun, cmd);
 800a220:	7afb      	ldrb	r3, [r7, #11]
 800a222:	687a      	ldr	r2, [r7, #4]
 800a224:	4619      	mov	r1, r3
 800a226:	68f8      	ldr	r0, [r7, #12]
 800a228:	f000 f996 	bl	800a558 <SCSI_ReadCapacity16>
 800a22c:	4603      	mov	r3, r0
 800a22e:	75fb      	strb	r3, [r7, #23]
      break;
 800a230:	e038      	b.n	800a2a4 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ10:
      ret = SCSI_Read10(pdev, lun, cmd);
 800a232:	7afb      	ldrb	r3, [r7, #11]
 800a234:	687a      	ldr	r2, [r7, #4]
 800a236:	4619      	mov	r1, r3
 800a238:	68f8      	ldr	r0, [r7, #12]
 800a23a:	f000 fc99 	bl	800ab70 <SCSI_Read10>
 800a23e:	4603      	mov	r3, r0
 800a240:	75fb      	strb	r3, [r7, #23]
      break;
 800a242:	e02f      	b.n	800a2a4 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ12:
      ret = SCSI_Read12(pdev, lun, cmd);
 800a244:	7afb      	ldrb	r3, [r7, #11]
 800a246:	687a      	ldr	r2, [r7, #4]
 800a248:	4619      	mov	r1, r3
 800a24a:	68f8      	ldr	r0, [r7, #12]
 800a24c:	f000 fd3a 	bl	800acc4 <SCSI_Read12>
 800a250:	4603      	mov	r3, r0
 800a252:	75fb      	strb	r3, [r7, #23]
      break;
 800a254:	e026      	b.n	800a2a4 <SCSI_ProcessCmd+0x2f8>

    case SCSI_WRITE10:
      ret = SCSI_Write10(pdev, lun, cmd);
 800a256:	7afb      	ldrb	r3, [r7, #11]
 800a258:	687a      	ldr	r2, [r7, #4]
 800a25a:	4619      	mov	r1, r3
 800a25c:	68f8      	ldr	r0, [r7, #12]
 800a25e:	f000 fde5 	bl	800ae2c <SCSI_Write10>
 800a262:	4603      	mov	r3, r0
 800a264:	75fb      	strb	r3, [r7, #23]
      break;
 800a266:	e01d      	b.n	800a2a4 <SCSI_ProcessCmd+0x2f8>

    case SCSI_WRITE12:
      ret = SCSI_Write12(pdev, lun, cmd);
 800a268:	7afb      	ldrb	r3, [r7, #11]
 800a26a:	687a      	ldr	r2, [r7, #4]
 800a26c:	4619      	mov	r1, r3
 800a26e:	68f8      	ldr	r0, [r7, #12]
 800a270:	f000 feb2 	bl	800afd8 <SCSI_Write12>
 800a274:	4603      	mov	r3, r0
 800a276:	75fb      	strb	r3, [r7, #23]
      break;
 800a278:	e014      	b.n	800a2a4 <SCSI_ProcessCmd+0x2f8>

    case SCSI_VERIFY10:
      ret = SCSI_Verify10(pdev, lun, cmd);
 800a27a:	7afb      	ldrb	r3, [r7, #11]
 800a27c:	687a      	ldr	r2, [r7, #4]
 800a27e:	4619      	mov	r1, r3
 800a280:	68f8      	ldr	r0, [r7, #12]
 800a282:	f000 ff8f 	bl	800b1a4 <SCSI_Verify10>
 800a286:	4603      	mov	r3, r0
 800a288:	75fb      	strb	r3, [r7, #23]
      break;
 800a28a:	e00b      	b.n	800a2a4 <SCSI_ProcessCmd+0x2f8>

    default:
      SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_CDB);
 800a28c:	7af9      	ldrb	r1, [r7, #11]
 800a28e:	2320      	movs	r3, #32
 800a290:	2205      	movs	r2, #5
 800a292:	68f8      	ldr	r0, [r7, #12]
 800a294:	f000 fb9f 	bl	800a9d6 <SCSI_SenseCode>
      hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 800a298:	693b      	ldr	r3, [r7, #16]
 800a29a:	2202      	movs	r2, #2
 800a29c:	725a      	strb	r2, [r3, #9]
      ret = -1;
 800a29e:	23ff      	movs	r3, #255	@ 0xff
 800a2a0:	75fb      	strb	r3, [r7, #23]
      break;
 800a2a2:	bf00      	nop
  }

  return ret;
 800a2a4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a2a8:	4618      	mov	r0, r3
 800a2aa:	3718      	adds	r7, #24
 800a2ac:	46bd      	mov	sp, r7
 800a2ae:	bd80      	pop	{r7, pc}

0800a2b0 <SCSI_TestUnitReady>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_TestUnitReady(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800a2b0:	b580      	push	{r7, lr}
 800a2b2:	b086      	sub	sp, #24
 800a2b4:	af00      	add	r7, sp, #0
 800a2b6:	60f8      	str	r0, [r7, #12]
 800a2b8:	460b      	mov	r3, r1
 800a2ba:	607a      	str	r2, [r7, #4]
 800a2bc:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	32b0      	adds	r2, #176	@ 0xb0
 800a2c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a2cc:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800a2ce:	697b      	ldr	r3, [r7, #20]
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	d102      	bne.n	800a2da <SCSI_TestUnitReady+0x2a>
  {
    return -1;
 800a2d4:	f04f 33ff 	mov.w	r3, #4294967295
 800a2d8:	e03f      	b.n	800a35a <SCSI_TestUnitReady+0xaa>
  }

  /* case 9 : Hi > D0 */
  if (hmsc->cbw.dDataLength != 0U)
 800a2da:	697b      	ldr	r3, [r7, #20]
 800a2dc:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d00a      	beq.n	800a2fa <SCSI_TestUnitReady+0x4a>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800a2e4:	697b      	ldr	r3, [r7, #20]
 800a2e6:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 800a2ea:	2320      	movs	r3, #32
 800a2ec:	2205      	movs	r2, #5
 800a2ee:	68f8      	ldr	r0, [r7, #12]
 800a2f0:	f000 fb71 	bl	800a9d6 <SCSI_SenseCode>

    return -1;
 800a2f4:	f04f 33ff 	mov.w	r3, #4294967295
 800a2f8:	e02f      	b.n	800a35a <SCSI_TestUnitReady+0xaa>
  }

  if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 800a2fa:	697b      	ldr	r3, [r7, #20]
 800a2fc:	f893 3262 	ldrb.w	r3, [r3, #610]	@ 0x262
 800a300:	2b02      	cmp	r3, #2
 800a302:	d10b      	bne.n	800a31c <SCSI_TestUnitReady+0x6c>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800a304:	7af9      	ldrb	r1, [r7, #11]
 800a306:	233a      	movs	r3, #58	@ 0x3a
 800a308:	2202      	movs	r2, #2
 800a30a:	68f8      	ldr	r0, [r7, #12]
 800a30c:	f000 fb63 	bl	800a9d6 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 800a310:	697b      	ldr	r3, [r7, #20]
 800a312:	2205      	movs	r2, #5
 800a314:	721a      	strb	r2, [r3, #8]
    return -1;
 800a316:	f04f 33ff 	mov.w	r3, #4294967295
 800a31a:	e01e      	b.n	800a35a <SCSI_TestUnitReady+0xaa>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a322:	68fa      	ldr	r2, [r7, #12]
 800a324:	33b0      	adds	r3, #176	@ 0xb0
 800a326:	009b      	lsls	r3, r3, #2
 800a328:	4413      	add	r3, r2
 800a32a:	685b      	ldr	r3, [r3, #4]
 800a32c:	689b      	ldr	r3, [r3, #8]
 800a32e:	7afa      	ldrb	r2, [r7, #11]
 800a330:	4610      	mov	r0, r2
 800a332:	4798      	blx	r3
 800a334:	4603      	mov	r3, r0
 800a336:	2b00      	cmp	r3, #0
 800a338:	d00b      	beq.n	800a352 <SCSI_TestUnitReady+0xa2>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800a33a:	7af9      	ldrb	r1, [r7, #11]
 800a33c:	233a      	movs	r3, #58	@ 0x3a
 800a33e:	2202      	movs	r2, #2
 800a340:	68f8      	ldr	r0, [r7, #12]
 800a342:	f000 fb48 	bl	800a9d6 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 800a346:	697b      	ldr	r3, [r7, #20]
 800a348:	2205      	movs	r2, #5
 800a34a:	721a      	strb	r2, [r3, #8]

    return -1;
 800a34c:	f04f 33ff 	mov.w	r3, #4294967295
 800a350:	e003      	b.n	800a35a <SCSI_TestUnitReady+0xaa>
  }
  hmsc->bot_data_length = 0U;
 800a352:	697b      	ldr	r3, [r7, #20]
 800a354:	2200      	movs	r2, #0
 800a356:	60da      	str	r2, [r3, #12]

  return 0;
 800a358:	2300      	movs	r3, #0
}
 800a35a:	4618      	mov	r0, r3
 800a35c:	3718      	adds	r7, #24
 800a35e:	46bd      	mov	sp, r7
 800a360:	bd80      	pop	{r7, pc}
	...

0800a364 <SCSI_Inquiry>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Inquiry(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800a364:	b580      	push	{r7, lr}
 800a366:	b088      	sub	sp, #32
 800a368:	af00      	add	r7, sp, #0
 800a36a:	60f8      	str	r0, [r7, #12]
 800a36c:	460b      	mov	r3, r1
 800a36e:	607a      	str	r2, [r7, #4]
 800a370:	72fb      	strb	r3, [r7, #11]
  uint8_t *pPage;
  uint16_t len;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	32b0      	adds	r2, #176	@ 0xb0
 800a37c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a380:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 800a382:	69bb      	ldr	r3, [r7, #24]
 800a384:	2b00      	cmp	r3, #0
 800a386:	d102      	bne.n	800a38e <SCSI_Inquiry+0x2a>
  {
    return -1;
 800a388:	f04f 33ff 	mov.w	r3, #4294967295
 800a38c:	e05e      	b.n	800a44c <SCSI_Inquiry+0xe8>
  }

  if (hmsc->cbw.dDataLength == 0U)
 800a38e:	69bb      	ldr	r3, [r7, #24]
 800a390:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 800a394:	2b00      	cmp	r3, #0
 800a396:	d10a      	bne.n	800a3ae <SCSI_Inquiry+0x4a>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800a398:	69bb      	ldr	r3, [r7, #24]
 800a39a:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 800a39e:	2320      	movs	r3, #32
 800a3a0:	2205      	movs	r2, #5
 800a3a2:	68f8      	ldr	r0, [r7, #12]
 800a3a4:	f000 fb17 	bl	800a9d6 <SCSI_SenseCode>
    return -1;
 800a3a8:	f04f 33ff 	mov.w	r3, #4294967295
 800a3ac:	e04e      	b.n	800a44c <SCSI_Inquiry+0xe8>
  }

  if ((params[1] & 0x01U) != 0U) /* Evpd is set */
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	3301      	adds	r3, #1
 800a3b2:	781b      	ldrb	r3, [r3, #0]
 800a3b4:	f003 0301 	and.w	r3, r3, #1
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	d020      	beq.n	800a3fe <SCSI_Inquiry+0x9a>
  {
    if (params[2] == 0U) /* Request for Supported Vital Product Data Pages*/
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	3302      	adds	r3, #2
 800a3c0:	781b      	ldrb	r3, [r3, #0]
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d105      	bne.n	800a3d2 <SCSI_Inquiry+0x6e>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page00_Inquiry_Data, LENGTH_INQUIRY_PAGE00);
 800a3c6:	2206      	movs	r2, #6
 800a3c8:	4922      	ldr	r1, [pc, #136]	@ (800a454 <SCSI_Inquiry+0xf0>)
 800a3ca:	69b8      	ldr	r0, [r7, #24]
 800a3cc:	f001 f870 	bl	800b4b0 <SCSI_UpdateBotData>
 800a3d0:	e03b      	b.n	800a44a <SCSI_Inquiry+0xe6>
    }
    else if (params[2] == 0x80U) /* Request for VPD page 0x80 Unit Serial Number */
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	3302      	adds	r3, #2
 800a3d6:	781b      	ldrb	r3, [r3, #0]
 800a3d8:	2b80      	cmp	r3, #128	@ 0x80
 800a3da:	d105      	bne.n	800a3e8 <SCSI_Inquiry+0x84>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page80_Inquiry_Data, LENGTH_INQUIRY_PAGE80);
 800a3dc:	2208      	movs	r2, #8
 800a3de:	491e      	ldr	r1, [pc, #120]	@ (800a458 <SCSI_Inquiry+0xf4>)
 800a3e0:	69b8      	ldr	r0, [r7, #24]
 800a3e2:	f001 f865 	bl	800b4b0 <SCSI_UpdateBotData>
 800a3e6:	e030      	b.n	800a44a <SCSI_Inquiry+0xe6>
    }
    else /* Request Not supported */
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST,
 800a3e8:	69bb      	ldr	r3, [r7, #24]
 800a3ea:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 800a3ee:	2324      	movs	r3, #36	@ 0x24
 800a3f0:	2205      	movs	r2, #5
 800a3f2:	68f8      	ldr	r0, [r7, #12]
 800a3f4:	f000 faef 	bl	800a9d6 <SCSI_SenseCode>
                     INVALID_FIELED_IN_COMMAND);

      return -1;
 800a3f8:	f04f 33ff 	mov.w	r3, #4294967295
 800a3fc:	e026      	b.n	800a44c <SCSI_Inquiry+0xe8>
    }
  }
  else
  {

    pPage = (uint8_t *) & ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId]) \
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a404:	68fa      	ldr	r2, [r7, #12]
 800a406:	33b0      	adds	r3, #176	@ 0xb0
 800a408:	009b      	lsls	r3, r3, #2
 800a40a:	4413      	add	r3, r2
 800a40c:	685b      	ldr	r3, [r3, #4]
            ->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 800a40e:	69d9      	ldr	r1, [r3, #28]
 800a410:	7afa      	ldrb	r2, [r7, #11]
 800a412:	4613      	mov	r3, r2
 800a414:	00db      	lsls	r3, r3, #3
 800a416:	4413      	add	r3, r2
 800a418:	009b      	lsls	r3, r3, #2
    pPage = (uint8_t *) & ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId]) \
 800a41a:	440b      	add	r3, r1
 800a41c:	617b      	str	r3, [r7, #20]
    len = (uint16_t)pPage[4] + 5U;
 800a41e:	697b      	ldr	r3, [r7, #20]
 800a420:	3304      	adds	r3, #4
 800a422:	781b      	ldrb	r3, [r3, #0]
 800a424:	3305      	adds	r3, #5
 800a426:	83fb      	strh	r3, [r7, #30]

    if (params[4] <= len)
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	3304      	adds	r3, #4
 800a42c:	781b      	ldrb	r3, [r3, #0]
 800a42e:	461a      	mov	r2, r3
 800a430:	8bfb      	ldrh	r3, [r7, #30]
 800a432:	4293      	cmp	r3, r2
 800a434:	d303      	bcc.n	800a43e <SCSI_Inquiry+0xda>
    {
      len = params[4];
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	3304      	adds	r3, #4
 800a43a:	781b      	ldrb	r3, [r3, #0]
 800a43c:	83fb      	strh	r3, [r7, #30]
    }

    (void)SCSI_UpdateBotData(hmsc, pPage, len);
 800a43e:	8bfb      	ldrh	r3, [r7, #30]
 800a440:	461a      	mov	r2, r3
 800a442:	6979      	ldr	r1, [r7, #20]
 800a444:	69b8      	ldr	r0, [r7, #24]
 800a446:	f001 f833 	bl	800b4b0 <SCSI_UpdateBotData>
  }

  return 0;
 800a44a:	2300      	movs	r3, #0
}
 800a44c:	4618      	mov	r0, r3
 800a44e:	3720      	adds	r7, #32
 800a450:	46bd      	mov	sp, r7
 800a452:	bd80      	pop	{r7, pc}
 800a454:	20000090 	.word	0x20000090
 800a458:	20000098 	.word	0x20000098

0800a45c <SCSI_ReadCapacity10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800a45c:	b580      	push	{r7, lr}
 800a45e:	b086      	sub	sp, #24
 800a460:	af00      	add	r7, sp, #0
 800a462:	60f8      	str	r0, [r7, #12]
 800a464:	460b      	mov	r3, r1
 800a466:	607a      	str	r2, [r7, #4]
 800a468:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	32b0      	adds	r2, #176	@ 0xb0
 800a474:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a478:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800a47a:	697b      	ldr	r3, [r7, #20]
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d102      	bne.n	800a486 <SCSI_ReadCapacity10+0x2a>
  {
    return -1;
 800a480:	f04f 33ff 	mov.w	r3, #4294967295
 800a484:	e064      	b.n	800a550 <SCSI_ReadCapacity10+0xf4>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &hmsc->scsi_blk_nbr,
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a48c:	68fa      	ldr	r2, [r7, #12]
 800a48e:	33b0      	adds	r3, #176	@ 0xb0
 800a490:	009b      	lsls	r3, r3, #2
 800a492:	4413      	add	r3, r2
 800a494:	685b      	ldr	r3, [r3, #4]
 800a496:	685b      	ldr	r3, [r3, #4]
 800a498:	697a      	ldr	r2, [r7, #20]
 800a49a:	f502 711a 	add.w	r1, r2, #616	@ 0x268
 800a49e:	697a      	ldr	r2, [r7, #20]
 800a4a0:	f502 7219 	add.w	r2, r2, #612	@ 0x264
 800a4a4:	7af8      	ldrb	r0, [r7, #11]
 800a4a6:	4798      	blx	r3
 800a4a8:	4603      	mov	r3, r0
 800a4aa:	74fb      	strb	r3, [r7, #19]
                                                                             &hmsc->scsi_blk_size);

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 800a4ac:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d104      	bne.n	800a4be <SCSI_ReadCapacity10+0x62>
 800a4b4:	697b      	ldr	r3, [r7, #20]
 800a4b6:	f893 3262 	ldrb.w	r3, [r3, #610]	@ 0x262
 800a4ba:	2b02      	cmp	r3, #2
 800a4bc:	d108      	bne.n	800a4d0 <SCSI_ReadCapacity10+0x74>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800a4be:	7af9      	ldrb	r1, [r7, #11]
 800a4c0:	233a      	movs	r3, #58	@ 0x3a
 800a4c2:	2202      	movs	r2, #2
 800a4c4:	68f8      	ldr	r0, [r7, #12]
 800a4c6:	f000 fa86 	bl	800a9d6 <SCSI_SenseCode>
    return -1;
 800a4ca:	f04f 33ff 	mov.w	r3, #4294967295
 800a4ce:	e03f      	b.n	800a550 <SCSI_ReadCapacity10+0xf4>
  }

  hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 800a4d0:	697b      	ldr	r3, [r7, #20]
 800a4d2:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 800a4d6:	3b01      	subs	r3, #1
 800a4d8:	0e1b      	lsrs	r3, r3, #24
 800a4da:	b2da      	uxtb	r2, r3
 800a4dc:	697b      	ldr	r3, [r7, #20]
 800a4de:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 800a4e0:	697b      	ldr	r3, [r7, #20]
 800a4e2:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 800a4e6:	3b01      	subs	r3, #1
 800a4e8:	0c1b      	lsrs	r3, r3, #16
 800a4ea:	b2da      	uxtb	r2, r3
 800a4ec:	697b      	ldr	r3, [r7, #20]
 800a4ee:	745a      	strb	r2, [r3, #17]
  hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 800a4f0:	697b      	ldr	r3, [r7, #20]
 800a4f2:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 800a4f6:	3b01      	subs	r3, #1
 800a4f8:	0a1b      	lsrs	r3, r3, #8
 800a4fa:	b2da      	uxtb	r2, r3
 800a4fc:	697b      	ldr	r3, [r7, #20]
 800a4fe:	749a      	strb	r2, [r3, #18]
  hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 800a500:	697b      	ldr	r3, [r7, #20]
 800a502:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 800a506:	b2db      	uxtb	r3, r3
 800a508:	3b01      	subs	r3, #1
 800a50a:	b2da      	uxtb	r2, r3
 800a50c:	697b      	ldr	r3, [r7, #20]
 800a50e:	74da      	strb	r2, [r3, #19]

  hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 800a510:	697b      	ldr	r3, [r7, #20]
 800a512:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 800a516:	161b      	asrs	r3, r3, #24
 800a518:	b2da      	uxtb	r2, r3
 800a51a:	697b      	ldr	r3, [r7, #20]
 800a51c:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 800a51e:	697b      	ldr	r3, [r7, #20]
 800a520:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 800a524:	141b      	asrs	r3, r3, #16
 800a526:	b2da      	uxtb	r2, r3
 800a528:	697b      	ldr	r3, [r7, #20]
 800a52a:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 800a52c:	697b      	ldr	r3, [r7, #20]
 800a52e:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 800a532:	0a1b      	lsrs	r3, r3, #8
 800a534:	b29b      	uxth	r3, r3
 800a536:	b2da      	uxtb	r2, r3
 800a538:	697b      	ldr	r3, [r7, #20]
 800a53a:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 800a53c:	697b      	ldr	r3, [r7, #20]
 800a53e:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 800a542:	b2da      	uxtb	r2, r3
 800a544:	697b      	ldr	r3, [r7, #20]
 800a546:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data_length = 8U;
 800a548:	697b      	ldr	r3, [r7, #20]
 800a54a:	2208      	movs	r2, #8
 800a54c:	60da      	str	r2, [r3, #12]

  return 0;
 800a54e:	2300      	movs	r3, #0

}
 800a550:	4618      	mov	r0, r3
 800a552:	3718      	adds	r7, #24
 800a554:	46bd      	mov	sp, r7
 800a556:	bd80      	pop	{r7, pc}

0800a558 <SCSI_ReadCapacity16>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity16(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800a558:	b580      	push	{r7, lr}
 800a55a:	b088      	sub	sp, #32
 800a55c:	af00      	add	r7, sp, #0
 800a55e:	60f8      	str	r0, [r7, #12]
 800a560:	460b      	mov	r3, r1
 800a562:	607a      	str	r2, [r7, #4]
 800a564:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint32_t idx;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	32b0      	adds	r2, #176	@ 0xb0
 800a570:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a574:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 800a576:	69bb      	ldr	r3, [r7, #24]
 800a578:	2b00      	cmp	r3, #0
 800a57a:	d102      	bne.n	800a582 <SCSI_ReadCapacity16+0x2a>
  {
    return -1;
 800a57c:	f04f 33ff 	mov.w	r3, #4294967295
 800a580:	e09a      	b.n	800a6b8 <SCSI_ReadCapacity16+0x160>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &hmsc->scsi_blk_nbr,
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a588:	68fa      	ldr	r2, [r7, #12]
 800a58a:	33b0      	adds	r3, #176	@ 0xb0
 800a58c:	009b      	lsls	r3, r3, #2
 800a58e:	4413      	add	r3, r2
 800a590:	685b      	ldr	r3, [r3, #4]
 800a592:	685b      	ldr	r3, [r3, #4]
 800a594:	69ba      	ldr	r2, [r7, #24]
 800a596:	f502 711a 	add.w	r1, r2, #616	@ 0x268
 800a59a:	69ba      	ldr	r2, [r7, #24]
 800a59c:	f502 7219 	add.w	r2, r2, #612	@ 0x264
 800a5a0:	7af8      	ldrb	r0, [r7, #11]
 800a5a2:	4798      	blx	r3
 800a5a4:	4603      	mov	r3, r0
 800a5a6:	75fb      	strb	r3, [r7, #23]
                                                                             &hmsc->scsi_blk_size);

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 800a5a8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	d104      	bne.n	800a5ba <SCSI_ReadCapacity16+0x62>
 800a5b0:	69bb      	ldr	r3, [r7, #24]
 800a5b2:	f893 3262 	ldrb.w	r3, [r3, #610]	@ 0x262
 800a5b6:	2b02      	cmp	r3, #2
 800a5b8:	d108      	bne.n	800a5cc <SCSI_ReadCapacity16+0x74>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800a5ba:	7af9      	ldrb	r1, [r7, #11]
 800a5bc:	233a      	movs	r3, #58	@ 0x3a
 800a5be:	2202      	movs	r2, #2
 800a5c0:	68f8      	ldr	r0, [r7, #12]
 800a5c2:	f000 fa08 	bl	800a9d6 <SCSI_SenseCode>
    return -1;
 800a5c6:	f04f 33ff 	mov.w	r3, #4294967295
 800a5ca:	e075      	b.n	800a6b8 <SCSI_ReadCapacity16+0x160>
  }

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	330a      	adds	r3, #10
 800a5d0:	781b      	ldrb	r3, [r3, #0]
 800a5d2:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	330b      	adds	r3, #11
 800a5d8:	781b      	ldrb	r3, [r3, #0]
 800a5da:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800a5dc:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	330c      	adds	r3, #12
 800a5e2:	781b      	ldrb	r3, [r3, #0]
 800a5e4:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 800a5e6:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 800a5e8:	687a      	ldr	r2, [r7, #4]
 800a5ea:	320d      	adds	r2, #13
 800a5ec:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 800a5ee:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800a5f0:	69bb      	ldr	r3, [r7, #24]
 800a5f2:	60da      	str	r2, [r3, #12]

  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 800a5f4:	2300      	movs	r3, #0
 800a5f6:	61fb      	str	r3, [r7, #28]
 800a5f8:	e008      	b.n	800a60c <SCSI_ReadCapacity16+0xb4>
  {
    hmsc->bot_data[idx] = 0U;
 800a5fa:	69ba      	ldr	r2, [r7, #24]
 800a5fc:	69fb      	ldr	r3, [r7, #28]
 800a5fe:	4413      	add	r3, r2
 800a600:	3310      	adds	r3, #16
 800a602:	2200      	movs	r2, #0
 800a604:	701a      	strb	r2, [r3, #0]
  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 800a606:	69fb      	ldr	r3, [r7, #28]
 800a608:	3301      	adds	r3, #1
 800a60a:	61fb      	str	r3, [r7, #28]
 800a60c:	69bb      	ldr	r3, [r7, #24]
 800a60e:	68db      	ldr	r3, [r3, #12]
 800a610:	69fa      	ldr	r2, [r7, #28]
 800a612:	429a      	cmp	r2, r3
 800a614:	d3f1      	bcc.n	800a5fa <SCSI_ReadCapacity16+0xa2>
  }

  hmsc->bot_data[4] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 800a616:	69bb      	ldr	r3, [r7, #24]
 800a618:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 800a61c:	3b01      	subs	r3, #1
 800a61e:	0e1b      	lsrs	r3, r3, #24
 800a620:	b2da      	uxtb	r2, r3
 800a622:	69bb      	ldr	r3, [r7, #24]
 800a624:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 800a626:	69bb      	ldr	r3, [r7, #24]
 800a628:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 800a62c:	3b01      	subs	r3, #1
 800a62e:	0c1b      	lsrs	r3, r3, #16
 800a630:	b2da      	uxtb	r2, r3
 800a632:	69bb      	ldr	r3, [r7, #24]
 800a634:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 800a636:	69bb      	ldr	r3, [r7, #24]
 800a638:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 800a63c:	3b01      	subs	r3, #1
 800a63e:	0a1b      	lsrs	r3, r3, #8
 800a640:	b2da      	uxtb	r2, r3
 800a642:	69bb      	ldr	r3, [r7, #24]
 800a644:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 800a646:	69bb      	ldr	r3, [r7, #24]
 800a648:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 800a64c:	b2db      	uxtb	r3, r3
 800a64e:	3b01      	subs	r3, #1
 800a650:	b2da      	uxtb	r2, r3
 800a652:	69bb      	ldr	r3, [r7, #24]
 800a654:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 800a656:	69bb      	ldr	r3, [r7, #24]
 800a658:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 800a65c:	161b      	asrs	r3, r3, #24
 800a65e:	b2da      	uxtb	r2, r3
 800a660:	69bb      	ldr	r3, [r7, #24]
 800a662:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 800a664:	69bb      	ldr	r3, [r7, #24]
 800a666:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 800a66a:	141b      	asrs	r3, r3, #16
 800a66c:	b2da      	uxtb	r2, r3
 800a66e:	69bb      	ldr	r3, [r7, #24]
 800a670:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 800a672:	69bb      	ldr	r3, [r7, #24]
 800a674:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 800a678:	0a1b      	lsrs	r3, r3, #8
 800a67a:	b29b      	uxth	r3, r3
 800a67c:	b2da      	uxtb	r2, r3
 800a67e:	69bb      	ldr	r3, [r7, #24]
 800a680:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(hmsc->scsi_blk_size);
 800a682:	69bb      	ldr	r3, [r7, #24]
 800a684:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 800a688:	b2da      	uxtb	r2, r3
 800a68a:	69bb      	ldr	r3, [r7, #24]
 800a68c:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	330a      	adds	r3, #10
 800a692:	781b      	ldrb	r3, [r3, #0]
 800a694:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	330b      	adds	r3, #11
 800a69a:	781b      	ldrb	r3, [r3, #0]
 800a69c:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800a69e:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	330c      	adds	r3, #12
 800a6a4:	781b      	ldrb	r3, [r3, #0]
 800a6a6:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 800a6a8:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 800a6aa:	687a      	ldr	r2, [r7, #4]
 800a6ac:	320d      	adds	r2, #13
 800a6ae:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 800a6b0:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800a6b2:	69bb      	ldr	r3, [r7, #24]
 800a6b4:	60da      	str	r2, [r3, #12]

  return 0;
 800a6b6:	2300      	movs	r3, #0
}
 800a6b8:	4618      	mov	r0, r3
 800a6ba:	3720      	adds	r7, #32
 800a6bc:	46bd      	mov	sp, r7
 800a6be:	bd80      	pop	{r7, pc}

0800a6c0 <SCSI_ReadFormatCapacity>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadFormatCapacity(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800a6c0:	b580      	push	{r7, lr}
 800a6c2:	b088      	sub	sp, #32
 800a6c4:	af00      	add	r7, sp, #0
 800a6c6:	60f8      	str	r0, [r7, #12]
 800a6c8:	460b      	mov	r3, r1
 800a6ca:	607a      	str	r2, [r7, #4]
 800a6cc:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint16_t blk_size;
  uint32_t blk_nbr;
  uint16_t i;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	32b0      	adds	r2, #176	@ 0xb0
 800a6d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a6dc:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 800a6de:	69bb      	ldr	r3, [r7, #24]
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d102      	bne.n	800a6ea <SCSI_ReadFormatCapacity+0x2a>
  {
    return -1;
 800a6e4:	f04f 33ff 	mov.w	r3, #4294967295
 800a6e8:	e061      	b.n	800a7ae <SCSI_ReadFormatCapacity+0xee>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &blk_nbr, &blk_size);
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a6f0:	68fa      	ldr	r2, [r7, #12]
 800a6f2:	33b0      	adds	r3, #176	@ 0xb0
 800a6f4:	009b      	lsls	r3, r3, #2
 800a6f6:	4413      	add	r3, r2
 800a6f8:	685b      	ldr	r3, [r3, #4]
 800a6fa:	685b      	ldr	r3, [r3, #4]
 800a6fc:	f107 0214 	add.w	r2, r7, #20
 800a700:	f107 0110 	add.w	r1, r7, #16
 800a704:	7af8      	ldrb	r0, [r7, #11]
 800a706:	4798      	blx	r3
 800a708:	4603      	mov	r3, r0
 800a70a:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 800a70c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a710:	2b00      	cmp	r3, #0
 800a712:	d104      	bne.n	800a71e <SCSI_ReadFormatCapacity+0x5e>
 800a714:	69bb      	ldr	r3, [r7, #24]
 800a716:	f893 3262 	ldrb.w	r3, [r3, #610]	@ 0x262
 800a71a:	2b02      	cmp	r3, #2
 800a71c:	d108      	bne.n	800a730 <SCSI_ReadFormatCapacity+0x70>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800a71e:	7af9      	ldrb	r1, [r7, #11]
 800a720:	233a      	movs	r3, #58	@ 0x3a
 800a722:	2202      	movs	r2, #2
 800a724:	68f8      	ldr	r0, [r7, #12]
 800a726:	f000 f956 	bl	800a9d6 <SCSI_SenseCode>
    return -1;
 800a72a:	f04f 33ff 	mov.w	r3, #4294967295
 800a72e:	e03e      	b.n	800a7ae <SCSI_ReadFormatCapacity+0xee>
  }

  for (i = 0U; i < 12U ; i++)
 800a730:	2300      	movs	r3, #0
 800a732:	83fb      	strh	r3, [r7, #30]
 800a734:	e007      	b.n	800a746 <SCSI_ReadFormatCapacity+0x86>
  {
    hmsc->bot_data[i] = 0U;
 800a736:	8bfb      	ldrh	r3, [r7, #30]
 800a738:	69ba      	ldr	r2, [r7, #24]
 800a73a:	4413      	add	r3, r2
 800a73c:	2200      	movs	r2, #0
 800a73e:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < 12U ; i++)
 800a740:	8bfb      	ldrh	r3, [r7, #30]
 800a742:	3301      	adds	r3, #1
 800a744:	83fb      	strh	r3, [r7, #30]
 800a746:	8bfb      	ldrh	r3, [r7, #30]
 800a748:	2b0b      	cmp	r3, #11
 800a74a:	d9f4      	bls.n	800a736 <SCSI_ReadFormatCapacity+0x76>
  }

  hmsc->bot_data[3] = 0x08U;
 800a74c:	69bb      	ldr	r3, [r7, #24]
 800a74e:	2208      	movs	r2, #8
 800a750:	74da      	strb	r2, [r3, #19]
  hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 800a752:	693b      	ldr	r3, [r7, #16]
 800a754:	3b01      	subs	r3, #1
 800a756:	0e1b      	lsrs	r3, r3, #24
 800a758:	b2da      	uxtb	r2, r3
 800a75a:	69bb      	ldr	r3, [r7, #24]
 800a75c:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1U) >> 16);
 800a75e:	693b      	ldr	r3, [r7, #16]
 800a760:	3b01      	subs	r3, #1
 800a762:	0c1b      	lsrs	r3, r3, #16
 800a764:	b2da      	uxtb	r2, r3
 800a766:	69bb      	ldr	r3, [r7, #24]
 800a768:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 800a76a:	693b      	ldr	r3, [r7, #16]
 800a76c:	3b01      	subs	r3, #1
 800a76e:	0a1b      	lsrs	r3, r3, #8
 800a770:	b2da      	uxtb	r2, r3
 800a772:	69bb      	ldr	r3, [r7, #24]
 800a774:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1U);
 800a776:	693b      	ldr	r3, [r7, #16]
 800a778:	b2db      	uxtb	r3, r3
 800a77a:	3b01      	subs	r3, #1
 800a77c:	b2da      	uxtb	r2, r3
 800a77e:	69bb      	ldr	r3, [r7, #24]
 800a780:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = 0x02U;
 800a782:	69bb      	ldr	r3, [r7, #24]
 800a784:	2202      	movs	r2, #2
 800a786:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 800a788:	8abb      	ldrh	r3, [r7, #20]
 800a78a:	141b      	asrs	r3, r3, #16
 800a78c:	b2da      	uxtb	r2, r3
 800a78e:	69bb      	ldr	r3, [r7, #24]
 800a790:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 800a792:	8abb      	ldrh	r3, [r7, #20]
 800a794:	0a1b      	lsrs	r3, r3, #8
 800a796:	b29b      	uxth	r3, r3
 800a798:	b2da      	uxtb	r2, r3
 800a79a:	69bb      	ldr	r3, [r7, #24]
 800a79c:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(blk_size);
 800a79e:	8abb      	ldrh	r3, [r7, #20]
 800a7a0:	b2da      	uxtb	r2, r3
 800a7a2:	69bb      	ldr	r3, [r7, #24]
 800a7a4:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = 12U;
 800a7a6:	69bb      	ldr	r3, [r7, #24]
 800a7a8:	220c      	movs	r2, #12
 800a7aa:	60da      	str	r2, [r3, #12]

  return 0;
 800a7ac:	2300      	movs	r3, #0
}
 800a7ae:	4618      	mov	r0, r3
 800a7b0:	3720      	adds	r7, #32
 800a7b2:	46bd      	mov	sp, r7
 800a7b4:	bd80      	pop	{r7, pc}
	...

0800a7b8 <SCSI_ModeSense6>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense6(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800a7b8:	b580      	push	{r7, lr}
 800a7ba:	b086      	sub	sp, #24
 800a7bc:	af00      	add	r7, sp, #0
 800a7be:	60f8      	str	r0, [r7, #12]
 800a7c0:	460b      	mov	r3, r1
 800a7c2:	607a      	str	r2, [r7, #4]
 800a7c4:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	32b0      	adds	r2, #176	@ 0xb0
 800a7d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a7d4:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE6_LEN;
 800a7d6:	2304      	movs	r3, #4
 800a7d8:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 800a7da:	693b      	ldr	r3, [r7, #16]
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	d102      	bne.n	800a7e6 <SCSI_ModeSense6+0x2e>
  {
    return -1;
 800a7e0:	f04f 33ff 	mov.w	r3, #4294967295
 800a7e4:	e027      	b.n	800a836 <SCSI_ModeSense6+0x7e>
  }

  /* Check If media is write-protected */
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a7ec:	68fa      	ldr	r2, [r7, #12]
 800a7ee:	33b0      	adds	r3, #176	@ 0xb0
 800a7f0:	009b      	lsls	r3, r3, #2
 800a7f2:	4413      	add	r3, r2
 800a7f4:	685b      	ldr	r3, [r3, #4]
 800a7f6:	68db      	ldr	r3, [r3, #12]
 800a7f8:	7afa      	ldrb	r2, [r7, #11]
 800a7fa:	4610      	mov	r0, r2
 800a7fc:	4798      	blx	r3
 800a7fe:	4603      	mov	r3, r0
 800a800:	2b00      	cmp	r3, #0
 800a802:	d006      	beq.n	800a812 <SCSI_ModeSense6+0x5a>
  {
    MSC_Mode_Sense6_data[2] |= 0x80U;
 800a804:	4b0e      	ldr	r3, [pc, #56]	@ (800a840 <SCSI_ModeSense6+0x88>)
 800a806:	789b      	ldrb	r3, [r3, #2]
 800a808:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800a80c:	b2da      	uxtb	r2, r3
 800a80e:	4b0c      	ldr	r3, [pc, #48]	@ (800a840 <SCSI_ModeSense6+0x88>)
 800a810:	709a      	strb	r2, [r3, #2]
  }

  if (params[4] <= len)
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	3304      	adds	r3, #4
 800a816:	781b      	ldrb	r3, [r3, #0]
 800a818:	461a      	mov	r2, r3
 800a81a:	8afb      	ldrh	r3, [r7, #22]
 800a81c:	4293      	cmp	r3, r2
 800a81e:	d303      	bcc.n	800a828 <SCSI_ModeSense6+0x70>
  {
    len = params[4];
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	3304      	adds	r3, #4
 800a824:	781b      	ldrb	r3, [r3, #0]
 800a826:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense6_data, len);
 800a828:	8afb      	ldrh	r3, [r7, #22]
 800a82a:	461a      	mov	r2, r3
 800a82c:	4904      	ldr	r1, [pc, #16]	@ (800a840 <SCSI_ModeSense6+0x88>)
 800a82e:	6938      	ldr	r0, [r7, #16]
 800a830:	f000 fe3e 	bl	800b4b0 <SCSI_UpdateBotData>

  return 0;
 800a834:	2300      	movs	r3, #0
}
 800a836:	4618      	mov	r0, r3
 800a838:	3718      	adds	r7, #24
 800a83a:	46bd      	mov	sp, r7
 800a83c:	bd80      	pop	{r7, pc}
 800a83e:	bf00      	nop
 800a840:	200000a0 	.word	0x200000a0

0800a844 <SCSI_ModeSense10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800a844:	b580      	push	{r7, lr}
 800a846:	b086      	sub	sp, #24
 800a848:	af00      	add	r7, sp, #0
 800a84a:	60f8      	str	r0, [r7, #12]
 800a84c:	460b      	mov	r3, r1
 800a84e:	607a      	str	r2, [r7, #4]
 800a850:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a852:	68fb      	ldr	r3, [r7, #12]
 800a854:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	32b0      	adds	r2, #176	@ 0xb0
 800a85c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a860:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE10_LEN;
 800a862:	2308      	movs	r3, #8
 800a864:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 800a866:	693b      	ldr	r3, [r7, #16]
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d102      	bne.n	800a872 <SCSI_ModeSense10+0x2e>
  {
    return -1;
 800a86c:	f04f 33ff 	mov.w	r3, #4294967295
 800a870:	e027      	b.n	800a8c2 <SCSI_ModeSense10+0x7e>
  }

  /* Check If media is write-protected */
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 800a872:	68fb      	ldr	r3, [r7, #12]
 800a874:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a878:	68fa      	ldr	r2, [r7, #12]
 800a87a:	33b0      	adds	r3, #176	@ 0xb0
 800a87c:	009b      	lsls	r3, r3, #2
 800a87e:	4413      	add	r3, r2
 800a880:	685b      	ldr	r3, [r3, #4]
 800a882:	68db      	ldr	r3, [r3, #12]
 800a884:	7afa      	ldrb	r2, [r7, #11]
 800a886:	4610      	mov	r0, r2
 800a888:	4798      	blx	r3
 800a88a:	4603      	mov	r3, r0
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d006      	beq.n	800a89e <SCSI_ModeSense10+0x5a>
  {
    MSC_Mode_Sense10_data[3] |= 0x80U;
 800a890:	4b0e      	ldr	r3, [pc, #56]	@ (800a8cc <SCSI_ModeSense10+0x88>)
 800a892:	78db      	ldrb	r3, [r3, #3]
 800a894:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800a898:	b2da      	uxtb	r2, r3
 800a89a:	4b0c      	ldr	r3, [pc, #48]	@ (800a8cc <SCSI_ModeSense10+0x88>)
 800a89c:	70da      	strb	r2, [r3, #3]
  }

  if (params[8] <= len)
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	3308      	adds	r3, #8
 800a8a2:	781b      	ldrb	r3, [r3, #0]
 800a8a4:	461a      	mov	r2, r3
 800a8a6:	8afb      	ldrh	r3, [r7, #22]
 800a8a8:	4293      	cmp	r3, r2
 800a8aa:	d303      	bcc.n	800a8b4 <SCSI_ModeSense10+0x70>
  {
    len = params[8];
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	3308      	adds	r3, #8
 800a8b0:	781b      	ldrb	r3, [r3, #0]
 800a8b2:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense10_data, len);
 800a8b4:	8afb      	ldrh	r3, [r7, #22]
 800a8b6:	461a      	mov	r2, r3
 800a8b8:	4904      	ldr	r1, [pc, #16]	@ (800a8cc <SCSI_ModeSense10+0x88>)
 800a8ba:	6938      	ldr	r0, [r7, #16]
 800a8bc:	f000 fdf8 	bl	800b4b0 <SCSI_UpdateBotData>

  return 0;
 800a8c0:	2300      	movs	r3, #0
}
 800a8c2:	4618      	mov	r0, r3
 800a8c4:	3718      	adds	r7, #24
 800a8c6:	46bd      	mov	sp, r7
 800a8c8:	bd80      	pop	{r7, pc}
 800a8ca:	bf00      	nop
 800a8cc:	200000a4 	.word	0x200000a4

0800a8d0 <SCSI_RequestSense>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_RequestSense(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800a8d0:	b580      	push	{r7, lr}
 800a8d2:	b086      	sub	sp, #24
 800a8d4:	af00      	add	r7, sp, #0
 800a8d6:	60f8      	str	r0, [r7, #12]
 800a8d8:	460b      	mov	r3, r1
 800a8da:	607a      	str	r2, [r7, #4]
 800a8dc:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  uint8_t i;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a8de:	68fb      	ldr	r3, [r7, #12]
 800a8e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a8e4:	68fb      	ldr	r3, [r7, #12]
 800a8e6:	32b0      	adds	r2, #176	@ 0xb0
 800a8e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a8ec:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 800a8ee:	693b      	ldr	r3, [r7, #16]
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d102      	bne.n	800a8fa <SCSI_RequestSense+0x2a>
  {
    return -1;
 800a8f4:	f04f 33ff 	mov.w	r3, #4294967295
 800a8f8:	e069      	b.n	800a9ce <SCSI_RequestSense+0xfe>
  }

  if (hmsc->cbw.dDataLength == 0U)
 800a8fa:	693b      	ldr	r3, [r7, #16]
 800a8fc:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 800a900:	2b00      	cmp	r3, #0
 800a902:	d10a      	bne.n	800a91a <SCSI_RequestSense+0x4a>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800a904:	693b      	ldr	r3, [r7, #16]
 800a906:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 800a90a:	2320      	movs	r3, #32
 800a90c:	2205      	movs	r2, #5
 800a90e:	68f8      	ldr	r0, [r7, #12]
 800a910:	f000 f861 	bl	800a9d6 <SCSI_SenseCode>
    return -1;
 800a914:	f04f 33ff 	mov.w	r3, #4294967295
 800a918:	e059      	b.n	800a9ce <SCSI_RequestSense+0xfe>
  }

  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 800a91a:	2300      	movs	r3, #0
 800a91c:	75fb      	strb	r3, [r7, #23]
 800a91e:	e007      	b.n	800a930 <SCSI_RequestSense+0x60>
  {
    hmsc->bot_data[i] = 0U;
 800a920:	7dfb      	ldrb	r3, [r7, #23]
 800a922:	693a      	ldr	r2, [r7, #16]
 800a924:	4413      	add	r3, r2
 800a926:	2200      	movs	r2, #0
 800a928:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 800a92a:	7dfb      	ldrb	r3, [r7, #23]
 800a92c:	3301      	adds	r3, #1
 800a92e:	75fb      	strb	r3, [r7, #23]
 800a930:	7dfb      	ldrb	r3, [r7, #23]
 800a932:	2b11      	cmp	r3, #17
 800a934:	d9f4      	bls.n	800a920 <SCSI_RequestSense+0x50>
  }

  hmsc->bot_data[0] = 0x70U;
 800a936:	693b      	ldr	r3, [r7, #16]
 800a938:	2270      	movs	r2, #112	@ 0x70
 800a93a:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[7] = REQUEST_SENSE_DATA_LEN - 6U;
 800a93c:	693b      	ldr	r3, [r7, #16]
 800a93e:	220c      	movs	r2, #12
 800a940:	75da      	strb	r2, [r3, #23]

  if ((hmsc->scsi_sense_head != hmsc->scsi_sense_tail))
 800a942:	693b      	ldr	r3, [r7, #16]
 800a944:	f893 2260 	ldrb.w	r2, [r3, #608]	@ 0x260
 800a948:	693b      	ldr	r3, [r7, #16]
 800a94a:	f893 3261 	ldrb.w	r3, [r3, #609]	@ 0x261
 800a94e:	429a      	cmp	r2, r3
 800a950:	d02e      	beq.n	800a9b0 <SCSI_RequestSense+0xe0>
  {
    hmsc->bot_data[2] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 800a952:	693b      	ldr	r3, [r7, #16]
 800a954:	f893 3260 	ldrb.w	r3, [r3, #608]	@ 0x260
 800a958:	461a      	mov	r2, r3
 800a95a:	693b      	ldr	r3, [r7, #16]
 800a95c:	3248      	adds	r2, #72	@ 0x48
 800a95e:	f813 2032 	ldrb.w	r2, [r3, r2, lsl #3]
 800a962:	693b      	ldr	r3, [r7, #16]
 800a964:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[12] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 800a966:	693b      	ldr	r3, [r7, #16]
 800a968:	f893 3260 	ldrb.w	r3, [r3, #608]	@ 0x260
 800a96c:	693a      	ldr	r2, [r7, #16]
 800a96e:	3348      	adds	r3, #72	@ 0x48
 800a970:	00db      	lsls	r3, r3, #3
 800a972:	4413      	add	r3, r2
 800a974:	791a      	ldrb	r2, [r3, #4]
 800a976:	693b      	ldr	r3, [r7, #16]
 800a978:	771a      	strb	r2, [r3, #28]
    hmsc->bot_data[13] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;
 800a97a:	693b      	ldr	r3, [r7, #16]
 800a97c:	f893 3260 	ldrb.w	r3, [r3, #608]	@ 0x260
 800a980:	693a      	ldr	r2, [r7, #16]
 800a982:	3348      	adds	r3, #72	@ 0x48
 800a984:	00db      	lsls	r3, r3, #3
 800a986:	4413      	add	r3, r2
 800a988:	795a      	ldrb	r2, [r3, #5]
 800a98a:	693b      	ldr	r3, [r7, #16]
 800a98c:	775a      	strb	r2, [r3, #29]
    hmsc->scsi_sense_head++;
 800a98e:	693b      	ldr	r3, [r7, #16]
 800a990:	f893 3260 	ldrb.w	r3, [r3, #608]	@ 0x260
 800a994:	3301      	adds	r3, #1
 800a996:	b2da      	uxtb	r2, r3
 800a998:	693b      	ldr	r3, [r7, #16]
 800a99a:	f883 2260 	strb.w	r2, [r3, #608]	@ 0x260

    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 800a99e:	693b      	ldr	r3, [r7, #16]
 800a9a0:	f893 3260 	ldrb.w	r3, [r3, #608]	@ 0x260
 800a9a4:	2b04      	cmp	r3, #4
 800a9a6:	d103      	bne.n	800a9b0 <SCSI_RequestSense+0xe0>
    {
      hmsc->scsi_sense_head = 0U;
 800a9a8:	693b      	ldr	r3, [r7, #16]
 800a9aa:	2200      	movs	r2, #0
 800a9ac:	f883 2260 	strb.w	r2, [r3, #608]	@ 0x260
    }
  }

  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;
 800a9b0:	693b      	ldr	r3, [r7, #16]
 800a9b2:	2212      	movs	r2, #18
 800a9b4:	60da      	str	r2, [r3, #12]

  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	3304      	adds	r3, #4
 800a9ba:	781b      	ldrb	r3, [r3, #0]
 800a9bc:	2b12      	cmp	r3, #18
 800a9be:	d805      	bhi.n	800a9cc <SCSI_RequestSense+0xfc>
  {
    hmsc->bot_data_length = params[4];
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	3304      	adds	r3, #4
 800a9c4:	781b      	ldrb	r3, [r3, #0]
 800a9c6:	461a      	mov	r2, r3
 800a9c8:	693b      	ldr	r3, [r7, #16]
 800a9ca:	60da      	str	r2, [r3, #12]
  }

  return 0;
 800a9cc:	2300      	movs	r3, #0
}
 800a9ce:	4618      	mov	r0, r3
 800a9d0:	3718      	adds	r7, #24
 800a9d2:	46bd      	mov	sp, r7
 800a9d4:	bd80      	pop	{r7, pc}

0800a9d6 <SCSI_SenseCode>:
  * @param  ASC: Additional Sense Code
  * @retval none

  */
void SCSI_SenseCode(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
 800a9d6:	b480      	push	{r7}
 800a9d8:	b085      	sub	sp, #20
 800a9da:	af00      	add	r7, sp, #0
 800a9dc:	6078      	str	r0, [r7, #4]
 800a9de:	4608      	mov	r0, r1
 800a9e0:	4611      	mov	r1, r2
 800a9e2:	461a      	mov	r2, r3
 800a9e4:	4603      	mov	r3, r0
 800a9e6:	70fb      	strb	r3, [r7, #3]
 800a9e8:	460b      	mov	r3, r1
 800a9ea:	70bb      	strb	r3, [r7, #2]
 800a9ec:	4613      	mov	r3, r2
 800a9ee:	707b      	strb	r3, [r7, #1]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	32b0      	adds	r2, #176	@ 0xb0
 800a9fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a9fe:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d02c      	beq.n	800aa60 <SCSI_SenseCode+0x8a>
  {
    return;
  }

  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	f893 3261 	ldrb.w	r3, [r3, #609]	@ 0x261
 800aa0c:	461a      	mov	r2, r3
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	3248      	adds	r2, #72	@ 0x48
 800aa12:	78b9      	ldrb	r1, [r7, #2]
 800aa14:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASC = ASC;
 800aa18:	68fb      	ldr	r3, [r7, #12]
 800aa1a:	f893 3261 	ldrb.w	r3, [r3, #609]	@ 0x261
 800aa1e:	68fa      	ldr	r2, [r7, #12]
 800aa20:	3348      	adds	r3, #72	@ 0x48
 800aa22:	00db      	lsls	r3, r3, #3
 800aa24:	4413      	add	r3, r2
 800aa26:	787a      	ldrb	r2, [r7, #1]
 800aa28:	711a      	strb	r2, [r3, #4]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASCQ = 0U;
 800aa2a:	68fb      	ldr	r3, [r7, #12]
 800aa2c:	f893 3261 	ldrb.w	r3, [r3, #609]	@ 0x261
 800aa30:	68fa      	ldr	r2, [r7, #12]
 800aa32:	3348      	adds	r3, #72	@ 0x48
 800aa34:	00db      	lsls	r3, r3, #3
 800aa36:	4413      	add	r3, r2
 800aa38:	2200      	movs	r2, #0
 800aa3a:	715a      	strb	r2, [r3, #5]
  hmsc->scsi_sense_tail++;
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	f893 3261 	ldrb.w	r3, [r3, #609]	@ 0x261
 800aa42:	3301      	adds	r3, #1
 800aa44:	b2da      	uxtb	r2, r3
 800aa46:	68fb      	ldr	r3, [r7, #12]
 800aa48:	f883 2261 	strb.w	r2, [r3, #609]	@ 0x261

  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	f893 3261 	ldrb.w	r3, [r3, #609]	@ 0x261
 800aa52:	2b04      	cmp	r3, #4
 800aa54:	d105      	bne.n	800aa62 <SCSI_SenseCode+0x8c>
  {
    hmsc->scsi_sense_tail = 0U;
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	2200      	movs	r2, #0
 800aa5a:	f883 2261 	strb.w	r2, [r3, #609]	@ 0x261
 800aa5e:	e000      	b.n	800aa62 <SCSI_SenseCode+0x8c>
    return;
 800aa60:	bf00      	nop
  }
}
 800aa62:	3714      	adds	r7, #20
 800aa64:	46bd      	mov	sp, r7
 800aa66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa6a:	4770      	bx	lr

0800aa6c <SCSI_StartStopUnit>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800aa6c:	b580      	push	{r7, lr}
 800aa6e:	b086      	sub	sp, #24
 800aa70:	af00      	add	r7, sp, #0
 800aa72:	60f8      	str	r0, [r7, #12]
 800aa74:	460b      	mov	r3, r1
 800aa76:	607a      	str	r2, [r7, #4]
 800aa78:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800aa7a:	68fb      	ldr	r3, [r7, #12]
 800aa7c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800aa80:	68fb      	ldr	r3, [r7, #12]
 800aa82:	32b0      	adds	r2, #176	@ 0xb0
 800aa84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa88:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800aa8a:	697b      	ldr	r3, [r7, #20]
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d102      	bne.n	800aa96 <SCSI_StartStopUnit+0x2a>
  {
    return -1;
 800aa90:	f04f 33ff 	mov.w	r3, #4294967295
 800aa94:	e03b      	b.n	800ab0e <SCSI_StartStopUnit+0xa2>
  }

  if ((hmsc->scsi_medium_state == SCSI_MEDIUM_LOCKED) && ((params[4] & 0x3U) == 2U))
 800aa96:	697b      	ldr	r3, [r7, #20]
 800aa98:	f893 3262 	ldrb.w	r3, [r3, #610]	@ 0x262
 800aa9c:	2b01      	cmp	r3, #1
 800aa9e:	d10f      	bne.n	800aac0 <SCSI_StartStopUnit+0x54>
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	3304      	adds	r3, #4
 800aaa4:	781b      	ldrb	r3, [r3, #0]
 800aaa6:	f003 0303 	and.w	r3, r3, #3
 800aaaa:	2b02      	cmp	r3, #2
 800aaac:	d108      	bne.n	800aac0 <SCSI_StartStopUnit+0x54>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 800aaae:	7af9      	ldrb	r1, [r7, #11]
 800aab0:	2324      	movs	r3, #36	@ 0x24
 800aab2:	2205      	movs	r2, #5
 800aab4:	68f8      	ldr	r0, [r7, #12]
 800aab6:	f7ff ff8e 	bl	800a9d6 <SCSI_SenseCode>

    return -1;
 800aaba:	f04f 33ff 	mov.w	r3, #4294967295
 800aabe:	e026      	b.n	800ab0e <SCSI_StartStopUnit+0xa2>
  }

  if ((params[4] & 0x3U) == 0x1U) /* START=1 */
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	3304      	adds	r3, #4
 800aac4:	781b      	ldrb	r3, [r3, #0]
 800aac6:	f003 0303 	and.w	r3, r3, #3
 800aaca:	2b01      	cmp	r3, #1
 800aacc:	d104      	bne.n	800aad8 <SCSI_StartStopUnit+0x6c>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800aace:	697b      	ldr	r3, [r7, #20]
 800aad0:	2200      	movs	r2, #0
 800aad2:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
 800aad6:	e016      	b.n	800ab06 <SCSI_StartStopUnit+0x9a>
  }
  else if ((params[4] & 0x3U) == 0x2U) /* START=0 and LOEJ Load Eject=1 */
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	3304      	adds	r3, #4
 800aadc:	781b      	ldrb	r3, [r3, #0]
 800aade:	f003 0303 	and.w	r3, r3, #3
 800aae2:	2b02      	cmp	r3, #2
 800aae4:	d104      	bne.n	800aaf0 <SCSI_StartStopUnit+0x84>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_EJECTED;
 800aae6:	697b      	ldr	r3, [r7, #20]
 800aae8:	2202      	movs	r2, #2
 800aaea:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
 800aaee:	e00a      	b.n	800ab06 <SCSI_StartStopUnit+0x9a>
  }
  else if ((params[4] & 0x3U) == 0x3U) /* START=1 and LOEJ Load Eject=1 */
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	3304      	adds	r3, #4
 800aaf4:	781b      	ldrb	r3, [r3, #0]
 800aaf6:	f003 0303 	and.w	r3, r3, #3
 800aafa:	2b03      	cmp	r3, #3
 800aafc:	d103      	bne.n	800ab06 <SCSI_StartStopUnit+0x9a>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800aafe:	697b      	ldr	r3, [r7, #20]
 800ab00:	2200      	movs	r2, #0
 800ab02:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
  }
  else
  {
    /* .. */
  }
  hmsc->bot_data_length = 0U;
 800ab06:	697b      	ldr	r3, [r7, #20]
 800ab08:	2200      	movs	r2, #0
 800ab0a:	60da      	str	r2, [r3, #12]

  return 0;
 800ab0c:	2300      	movs	r3, #0
}
 800ab0e:	4618      	mov	r0, r3
 800ab10:	3718      	adds	r7, #24
 800ab12:	46bd      	mov	sp, r7
 800ab14:	bd80      	pop	{r7, pc}

0800ab16 <SCSI_AllowPreventRemovable>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_AllowPreventRemovable(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800ab16:	b480      	push	{r7}
 800ab18:	b087      	sub	sp, #28
 800ab1a:	af00      	add	r7, sp, #0
 800ab1c:	60f8      	str	r0, [r7, #12]
 800ab1e:	460b      	mov	r3, r1
 800ab20:	607a      	str	r2, [r7, #4]
 800ab22:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ab24:	68fb      	ldr	r3, [r7, #12]
 800ab26:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	32b0      	adds	r2, #176	@ 0xb0
 800ab2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab32:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800ab34:	697b      	ldr	r3, [r7, #20]
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	d102      	bne.n	800ab40 <SCSI_AllowPreventRemovable+0x2a>
  {
    return -1;
 800ab3a:	f04f 33ff 	mov.w	r3, #4294967295
 800ab3e:	e011      	b.n	800ab64 <SCSI_AllowPreventRemovable+0x4e>
  }

  if (params[4] == 0U)
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	3304      	adds	r3, #4
 800ab44:	781b      	ldrb	r3, [r3, #0]
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d104      	bne.n	800ab54 <SCSI_AllowPreventRemovable+0x3e>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800ab4a:	697b      	ldr	r3, [r7, #20]
 800ab4c:	2200      	movs	r2, #0
 800ab4e:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
 800ab52:	e003      	b.n	800ab5c <SCSI_AllowPreventRemovable+0x46>
  }
  else
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_LOCKED;
 800ab54:	697b      	ldr	r3, [r7, #20]
 800ab56:	2201      	movs	r2, #1
 800ab58:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
  }

  hmsc->bot_data_length = 0U;
 800ab5c:	697b      	ldr	r3, [r7, #20]
 800ab5e:	2200      	movs	r2, #0
 800ab60:	60da      	str	r2, [r3, #12]

  return 0;
 800ab62:	2300      	movs	r3, #0
}
 800ab64:	4618      	mov	r0, r3
 800ab66:	371c      	adds	r7, #28
 800ab68:	46bd      	mov	sp, r7
 800ab6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab6e:	4770      	bx	lr

0800ab70 <SCSI_Read10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800ab70:	b580      	push	{r7, lr}
 800ab72:	b086      	sub	sp, #24
 800ab74:	af00      	add	r7, sp, #0
 800ab76:	60f8      	str	r0, [r7, #12]
 800ab78:	460b      	mov	r3, r1
 800ab7a:	607a      	str	r2, [r7, #4]
 800ab7c:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ab84:	68fb      	ldr	r3, [r7, #12]
 800ab86:	32b0      	adds	r2, #176	@ 0xb0
 800ab88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab8c:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800ab8e:	697b      	ldr	r3, [r7, #20]
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	d102      	bne.n	800ab9a <SCSI_Read10+0x2a>
  {
    return -1;
 800ab94:	f04f 33ff 	mov.w	r3, #4294967295
 800ab98:	e090      	b.n	800acbc <SCSI_Read10+0x14c>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800ab9a:	697b      	ldr	r3, [r7, #20]
 800ab9c:	7a1b      	ldrb	r3, [r3, #8]
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	f040 8082 	bne.w	800aca8 <SCSI_Read10+0x138>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 800aba4:	697b      	ldr	r3, [r7, #20]
 800aba6:	f893 321c 	ldrb.w	r3, [r3, #540]	@ 0x21c
 800abaa:	b25b      	sxtb	r3, r3
 800abac:	2b00      	cmp	r3, #0
 800abae:	db0a      	blt.n	800abc6 <SCSI_Read10+0x56>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800abb0:	697b      	ldr	r3, [r7, #20]
 800abb2:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 800abb6:	2320      	movs	r3, #32
 800abb8:	2205      	movs	r2, #5
 800abba:	68f8      	ldr	r0, [r7, #12]
 800abbc:	f7ff ff0b 	bl	800a9d6 <SCSI_SenseCode>
      return -1;
 800abc0:	f04f 33ff 	mov.w	r3, #4294967295
 800abc4:	e07a      	b.n	800acbc <SCSI_Read10+0x14c>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 800abc6:	697b      	ldr	r3, [r7, #20]
 800abc8:	f893 3262 	ldrb.w	r3, [r3, #610]	@ 0x262
 800abcc:	2b02      	cmp	r3, #2
 800abce:	d108      	bne.n	800abe2 <SCSI_Read10+0x72>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800abd0:	7af9      	ldrb	r1, [r7, #11]
 800abd2:	233a      	movs	r3, #58	@ 0x3a
 800abd4:	2202      	movs	r2, #2
 800abd6:	68f8      	ldr	r0, [r7, #12]
 800abd8:	f7ff fefd 	bl	800a9d6 <SCSI_SenseCode>

      return -1;
 800abdc:	f04f 33ff 	mov.w	r3, #4294967295
 800abe0:	e06c      	b.n	800acbc <SCSI_Read10+0x14c>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 800abe2:	68fb      	ldr	r3, [r7, #12]
 800abe4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800abe8:	68fa      	ldr	r2, [r7, #12]
 800abea:	33b0      	adds	r3, #176	@ 0xb0
 800abec:	009b      	lsls	r3, r3, #2
 800abee:	4413      	add	r3, r2
 800abf0:	685b      	ldr	r3, [r3, #4]
 800abf2:	689b      	ldr	r3, [r3, #8]
 800abf4:	7afa      	ldrb	r2, [r7, #11]
 800abf6:	4610      	mov	r0, r2
 800abf8:	4798      	blx	r3
 800abfa:	4603      	mov	r3, r0
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d008      	beq.n	800ac12 <SCSI_Read10+0xa2>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800ac00:	7af9      	ldrb	r1, [r7, #11]
 800ac02:	233a      	movs	r3, #58	@ 0x3a
 800ac04:	2202      	movs	r2, #2
 800ac06:	68f8      	ldr	r0, [r7, #12]
 800ac08:	f7ff fee5 	bl	800a9d6 <SCSI_SenseCode>
      return -1;
 800ac0c:	f04f 33ff 	mov.w	r3, #4294967295
 800ac10:	e054      	b.n	800acbc <SCSI_Read10+0x14c>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	3302      	adds	r3, #2
 800ac16:	781b      	ldrb	r3, [r3, #0]
 800ac18:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	3303      	adds	r3, #3
 800ac1e:	781b      	ldrb	r3, [r3, #0]
 800ac20:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800ac22:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	3304      	adds	r3, #4
 800ac28:	781b      	ldrb	r3, [r3, #0]
 800ac2a:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800ac2c:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800ac2e:	687a      	ldr	r2, [r7, #4]
 800ac30:	3205      	adds	r2, #5
 800ac32:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 800ac34:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800ac36:	697b      	ldr	r3, [r7, #20]
 800ac38:	f8c3 226c 	str.w	r2, [r3, #620]	@ 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	3307      	adds	r3, #7
 800ac40:	781b      	ldrb	r3, [r3, #0]
 800ac42:	021b      	lsls	r3, r3, #8
 800ac44:	687a      	ldr	r2, [r7, #4]
 800ac46:	3208      	adds	r2, #8
 800ac48:	7812      	ldrb	r2, [r2, #0]
 800ac4a:	431a      	orrs	r2, r3
 800ac4c:	697b      	ldr	r3, [r7, #20]
 800ac4e:	f8c3 2270 	str.w	r2, [r3, #624]	@ 0x270

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800ac52:	697b      	ldr	r3, [r7, #20]
 800ac54:	f8d3 226c 	ldr.w	r2, [r3, #620]	@ 0x26c
 800ac58:	697b      	ldr	r3, [r7, #20]
 800ac5a:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 800ac5e:	7af9      	ldrb	r1, [r7, #11]
 800ac60:	68f8      	ldr	r0, [r7, #12]
 800ac62:	f000 fadc 	bl	800b21e <SCSI_CheckAddressRange>
 800ac66:	4603      	mov	r3, r0
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	da02      	bge.n	800ac72 <SCSI_Read10+0x102>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800ac6c:	f04f 33ff 	mov.w	r3, #4294967295
 800ac70:	e024      	b.n	800acbc <SCSI_Read10+0x14c>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 800ac72:	697b      	ldr	r3, [r7, #20]
 800ac74:	f8d3 2218 	ldr.w	r2, [r3, #536]	@ 0x218
 800ac78:	697b      	ldr	r3, [r7, #20]
 800ac7a:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 800ac7e:	6979      	ldr	r1, [r7, #20]
 800ac80:	f8b1 1264 	ldrh.w	r1, [r1, #612]	@ 0x264
 800ac84:	fb01 f303 	mul.w	r3, r1, r3
 800ac88:	429a      	cmp	r2, r3
 800ac8a:	d00a      	beq.n	800aca2 <SCSI_Read10+0x132>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800ac8c:	697b      	ldr	r3, [r7, #20]
 800ac8e:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 800ac92:	2320      	movs	r3, #32
 800ac94:	2205      	movs	r2, #5
 800ac96:	68f8      	ldr	r0, [r7, #12]
 800ac98:	f7ff fe9d 	bl	800a9d6 <SCSI_SenseCode>
      return -1;
 800ac9c:	f04f 33ff 	mov.w	r3, #4294967295
 800aca0:	e00c      	b.n	800acbc <SCSI_Read10+0x14c>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 800aca2:	697b      	ldr	r3, [r7, #20]
 800aca4:	2202      	movs	r2, #2
 800aca6:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 800aca8:	697b      	ldr	r3, [r7, #20]
 800acaa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800acae:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 800acb0:	7afb      	ldrb	r3, [r7, #11]
 800acb2:	4619      	mov	r1, r3
 800acb4:	68f8      	ldr	r0, [r7, #12]
 800acb6:	f000 fadf 	bl	800b278 <SCSI_ProcessRead>
 800acba:	4603      	mov	r3, r0
}
 800acbc:	4618      	mov	r0, r3
 800acbe:	3718      	adds	r7, #24
 800acc0:	46bd      	mov	sp, r7
 800acc2:	bd80      	pop	{r7, pc}

0800acc4 <SCSI_Read12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800acc4:	b580      	push	{r7, lr}
 800acc6:	b086      	sub	sp, #24
 800acc8:	af00      	add	r7, sp, #0
 800acca:	60f8      	str	r0, [r7, #12]
 800accc:	460b      	mov	r3, r1
 800acce:	607a      	str	r2, [r7, #4]
 800acd0:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800acd2:	68fb      	ldr	r3, [r7, #12]
 800acd4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800acd8:	68fb      	ldr	r3, [r7, #12]
 800acda:	32b0      	adds	r2, #176	@ 0xb0
 800acdc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ace0:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800ace2:	697b      	ldr	r3, [r7, #20]
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	d102      	bne.n	800acee <SCSI_Read12+0x2a>
  {
    return -1;
 800ace8:	f04f 33ff 	mov.w	r3, #4294967295
 800acec:	e09a      	b.n	800ae24 <SCSI_Read12+0x160>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800acee:	697b      	ldr	r3, [r7, #20]
 800acf0:	7a1b      	ldrb	r3, [r3, #8]
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	f040 808c 	bne.w	800ae10 <SCSI_Read12+0x14c>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 800acf8:	697b      	ldr	r3, [r7, #20]
 800acfa:	f893 321c 	ldrb.w	r3, [r3, #540]	@ 0x21c
 800acfe:	b25b      	sxtb	r3, r3
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	db0a      	blt.n	800ad1a <SCSI_Read12+0x56>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800ad04:	697b      	ldr	r3, [r7, #20]
 800ad06:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 800ad0a:	2320      	movs	r3, #32
 800ad0c:	2205      	movs	r2, #5
 800ad0e:	68f8      	ldr	r0, [r7, #12]
 800ad10:	f7ff fe61 	bl	800a9d6 <SCSI_SenseCode>
      return -1;
 800ad14:	f04f 33ff 	mov.w	r3, #4294967295
 800ad18:	e084      	b.n	800ae24 <SCSI_Read12+0x160>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 800ad1a:	697b      	ldr	r3, [r7, #20]
 800ad1c:	f893 3262 	ldrb.w	r3, [r3, #610]	@ 0x262
 800ad20:	2b02      	cmp	r3, #2
 800ad22:	d108      	bne.n	800ad36 <SCSI_Read12+0x72>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800ad24:	7af9      	ldrb	r1, [r7, #11]
 800ad26:	233a      	movs	r3, #58	@ 0x3a
 800ad28:	2202      	movs	r2, #2
 800ad2a:	68f8      	ldr	r0, [r7, #12]
 800ad2c:	f7ff fe53 	bl	800a9d6 <SCSI_SenseCode>
      return -1;
 800ad30:	f04f 33ff 	mov.w	r3, #4294967295
 800ad34:	e076      	b.n	800ae24 <SCSI_Read12+0x160>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 800ad36:	68fb      	ldr	r3, [r7, #12]
 800ad38:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ad3c:	68fa      	ldr	r2, [r7, #12]
 800ad3e:	33b0      	adds	r3, #176	@ 0xb0
 800ad40:	009b      	lsls	r3, r3, #2
 800ad42:	4413      	add	r3, r2
 800ad44:	685b      	ldr	r3, [r3, #4]
 800ad46:	689b      	ldr	r3, [r3, #8]
 800ad48:	7afa      	ldrb	r2, [r7, #11]
 800ad4a:	4610      	mov	r0, r2
 800ad4c:	4798      	blx	r3
 800ad4e:	4603      	mov	r3, r0
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	d008      	beq.n	800ad66 <SCSI_Read12+0xa2>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800ad54:	7af9      	ldrb	r1, [r7, #11]
 800ad56:	233a      	movs	r3, #58	@ 0x3a
 800ad58:	2202      	movs	r2, #2
 800ad5a:	68f8      	ldr	r0, [r7, #12]
 800ad5c:	f7ff fe3b 	bl	800a9d6 <SCSI_SenseCode>
      return -1;
 800ad60:	f04f 33ff 	mov.w	r3, #4294967295
 800ad64:	e05e      	b.n	800ae24 <SCSI_Read12+0x160>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	3302      	adds	r3, #2
 800ad6a:	781b      	ldrb	r3, [r3, #0]
 800ad6c:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	3303      	adds	r3, #3
 800ad72:	781b      	ldrb	r3, [r3, #0]
 800ad74:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800ad76:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	3304      	adds	r3, #4
 800ad7c:	781b      	ldrb	r3, [r3, #0]
 800ad7e:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800ad80:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800ad82:	687a      	ldr	r2, [r7, #4]
 800ad84:	3205      	adds	r2, #5
 800ad86:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 800ad88:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800ad8a:	697b      	ldr	r3, [r7, #20]
 800ad8c:	f8c3 226c 	str.w	r2, [r3, #620]	@ 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	3306      	adds	r3, #6
 800ad94:	781b      	ldrb	r3, [r3, #0]
 800ad96:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	3307      	adds	r3, #7
 800ad9c:	781b      	ldrb	r3, [r3, #0]
 800ad9e:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800ada0:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	3308      	adds	r3, #8
 800ada6:	781b      	ldrb	r3, [r3, #0]
 800ada8:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 800adaa:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 800adac:	687a      	ldr	r2, [r7, #4]
 800adae:	3209      	adds	r2, #9
 800adb0:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 800adb2:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800adb4:	697b      	ldr	r3, [r7, #20]
 800adb6:	f8c3 2270 	str.w	r2, [r3, #624]	@ 0x270

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800adba:	697b      	ldr	r3, [r7, #20]
 800adbc:	f8d3 226c 	ldr.w	r2, [r3, #620]	@ 0x26c
 800adc0:	697b      	ldr	r3, [r7, #20]
 800adc2:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 800adc6:	7af9      	ldrb	r1, [r7, #11]
 800adc8:	68f8      	ldr	r0, [r7, #12]
 800adca:	f000 fa28 	bl	800b21e <SCSI_CheckAddressRange>
 800adce:	4603      	mov	r3, r0
 800add0:	2b00      	cmp	r3, #0
 800add2:	da02      	bge.n	800adda <SCSI_Read12+0x116>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800add4:	f04f 33ff 	mov.w	r3, #4294967295
 800add8:	e024      	b.n	800ae24 <SCSI_Read12+0x160>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 800adda:	697b      	ldr	r3, [r7, #20]
 800addc:	f8d3 2218 	ldr.w	r2, [r3, #536]	@ 0x218
 800ade0:	697b      	ldr	r3, [r7, #20]
 800ade2:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 800ade6:	6979      	ldr	r1, [r7, #20]
 800ade8:	f8b1 1264 	ldrh.w	r1, [r1, #612]	@ 0x264
 800adec:	fb01 f303 	mul.w	r3, r1, r3
 800adf0:	429a      	cmp	r2, r3
 800adf2:	d00a      	beq.n	800ae0a <SCSI_Read12+0x146>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800adf4:	697b      	ldr	r3, [r7, #20]
 800adf6:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 800adfa:	2320      	movs	r3, #32
 800adfc:	2205      	movs	r2, #5
 800adfe:	68f8      	ldr	r0, [r7, #12]
 800ae00:	f7ff fde9 	bl	800a9d6 <SCSI_SenseCode>
      return -1;
 800ae04:	f04f 33ff 	mov.w	r3, #4294967295
 800ae08:	e00c      	b.n	800ae24 <SCSI_Read12+0x160>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 800ae0a:	697b      	ldr	r3, [r7, #20]
 800ae0c:	2202      	movs	r2, #2
 800ae0e:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 800ae10:	697b      	ldr	r3, [r7, #20]
 800ae12:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ae16:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 800ae18:	7afb      	ldrb	r3, [r7, #11]
 800ae1a:	4619      	mov	r1, r3
 800ae1c:	68f8      	ldr	r0, [r7, #12]
 800ae1e:	f000 fa2b 	bl	800b278 <SCSI_ProcessRead>
 800ae22:	4603      	mov	r3, r0
}
 800ae24:	4618      	mov	r0, r3
 800ae26:	3718      	adds	r7, #24
 800ae28:	46bd      	mov	sp, r7
 800ae2a:	bd80      	pop	{r7, pc}

0800ae2c <SCSI_Write10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800ae2c:	b580      	push	{r7, lr}
 800ae2e:	b086      	sub	sp, #24
 800ae30:	af00      	add	r7, sp, #0
 800ae32:	60f8      	str	r0, [r7, #12]
 800ae34:	460b      	mov	r3, r1
 800ae36:	607a      	str	r2, [r7, #4]
 800ae38:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ae3a:	68fb      	ldr	r3, [r7, #12]
 800ae3c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	32b0      	adds	r2, #176	@ 0xb0
 800ae44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae48:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 800ae4a:	697b      	ldr	r3, [r7, #20]
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d102      	bne.n	800ae56 <SCSI_Write10+0x2a>
  {
    return -1;
 800ae50:	f04f 33ff 	mov.w	r3, #4294967295
 800ae54:	e0ba      	b.n	800afcc <SCSI_Write10+0x1a0>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800ae56:	697b      	ldr	r3, [r7, #20]
 800ae58:	7a1b      	ldrb	r3, [r3, #8]
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	f040 80b0 	bne.w	800afc0 <SCSI_Write10+0x194>
  {
    if (hmsc->cbw.dDataLength == 0U)
 800ae60:	697b      	ldr	r3, [r7, #20]
 800ae62:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	d10a      	bne.n	800ae80 <SCSI_Write10+0x54>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800ae6a:	697b      	ldr	r3, [r7, #20]
 800ae6c:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 800ae70:	2320      	movs	r3, #32
 800ae72:	2205      	movs	r2, #5
 800ae74:	68f8      	ldr	r0, [r7, #12]
 800ae76:	f7ff fdae 	bl	800a9d6 <SCSI_SenseCode>
      return -1;
 800ae7a:	f04f 33ff 	mov.w	r3, #4294967295
 800ae7e:	e0a5      	b.n	800afcc <SCSI_Write10+0x1a0>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 800ae80:	697b      	ldr	r3, [r7, #20]
 800ae82:	f893 321c 	ldrb.w	r3, [r3, #540]	@ 0x21c
 800ae86:	b25b      	sxtb	r3, r3
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	da0a      	bge.n	800aea2 <SCSI_Write10+0x76>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800ae8c:	697b      	ldr	r3, [r7, #20]
 800ae8e:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 800ae92:	2320      	movs	r3, #32
 800ae94:	2205      	movs	r2, #5
 800ae96:	68f8      	ldr	r0, [r7, #12]
 800ae98:	f7ff fd9d 	bl	800a9d6 <SCSI_SenseCode>
      return -1;
 800ae9c:	f04f 33ff 	mov.w	r3, #4294967295
 800aea0:	e094      	b.n	800afcc <SCSI_Write10+0x1a0>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800aea8:	68fa      	ldr	r2, [r7, #12]
 800aeaa:	33b0      	adds	r3, #176	@ 0xb0
 800aeac:	009b      	lsls	r3, r3, #2
 800aeae:	4413      	add	r3, r2
 800aeb0:	685b      	ldr	r3, [r3, #4]
 800aeb2:	689b      	ldr	r3, [r3, #8]
 800aeb4:	7afa      	ldrb	r2, [r7, #11]
 800aeb6:	4610      	mov	r0, r2
 800aeb8:	4798      	blx	r3
 800aeba:	4603      	mov	r3, r0
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	d008      	beq.n	800aed2 <SCSI_Write10+0xa6>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800aec0:	7af9      	ldrb	r1, [r7, #11]
 800aec2:	233a      	movs	r3, #58	@ 0x3a
 800aec4:	2202      	movs	r2, #2
 800aec6:	68f8      	ldr	r0, [r7, #12]
 800aec8:	f7ff fd85 	bl	800a9d6 <SCSI_SenseCode>
      return -1;
 800aecc:	f04f 33ff 	mov.w	r3, #4294967295
 800aed0:	e07c      	b.n	800afcc <SCSI_Write10+0x1a0>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 800aed2:	68fb      	ldr	r3, [r7, #12]
 800aed4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800aed8:	68fa      	ldr	r2, [r7, #12]
 800aeda:	33b0      	adds	r3, #176	@ 0xb0
 800aedc:	009b      	lsls	r3, r3, #2
 800aede:	4413      	add	r3, r2
 800aee0:	685b      	ldr	r3, [r3, #4]
 800aee2:	68db      	ldr	r3, [r3, #12]
 800aee4:	7afa      	ldrb	r2, [r7, #11]
 800aee6:	4610      	mov	r0, r2
 800aee8:	4798      	blx	r3
 800aeea:	4603      	mov	r3, r0
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	d008      	beq.n	800af02 <SCSI_Write10+0xd6>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 800aef0:	7af9      	ldrb	r1, [r7, #11]
 800aef2:	2327      	movs	r3, #39	@ 0x27
 800aef4:	2202      	movs	r2, #2
 800aef6:	68f8      	ldr	r0, [r7, #12]
 800aef8:	f7ff fd6d 	bl	800a9d6 <SCSI_SenseCode>
      return -1;
 800aefc:	f04f 33ff 	mov.w	r3, #4294967295
 800af00:	e064      	b.n	800afcc <SCSI_Write10+0x1a0>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	3302      	adds	r3, #2
 800af06:	781b      	ldrb	r3, [r3, #0]
 800af08:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	3303      	adds	r3, #3
 800af0e:	781b      	ldrb	r3, [r3, #0]
 800af10:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800af12:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	3304      	adds	r3, #4
 800af18:	781b      	ldrb	r3, [r3, #0]
 800af1a:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800af1c:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800af1e:	687a      	ldr	r2, [r7, #4]
 800af20:	3205      	adds	r2, #5
 800af22:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 800af24:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800af26:	697b      	ldr	r3, [r7, #20]
 800af28:	f8c3 226c 	str.w	r2, [r3, #620]	@ 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	3307      	adds	r3, #7
 800af30:	781b      	ldrb	r3, [r3, #0]
 800af32:	021b      	lsls	r3, r3, #8
                         (uint32_t)params[8];
 800af34:	687a      	ldr	r2, [r7, #4]
 800af36:	3208      	adds	r2, #8
 800af38:	7812      	ldrb	r2, [r2, #0]
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 800af3a:	431a      	orrs	r2, r3
 800af3c:	697b      	ldr	r3, [r7, #20]
 800af3e:	f8c3 2270 	str.w	r2, [r3, #624]	@ 0x270

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800af42:	697b      	ldr	r3, [r7, #20]
 800af44:	f8d3 226c 	ldr.w	r2, [r3, #620]	@ 0x26c
 800af48:	697b      	ldr	r3, [r7, #20]
 800af4a:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 800af4e:	7af9      	ldrb	r1, [r7, #11]
 800af50:	68f8      	ldr	r0, [r7, #12]
 800af52:	f000 f964 	bl	800b21e <SCSI_CheckAddressRange>
 800af56:	4603      	mov	r3, r0
 800af58:	2b00      	cmp	r3, #0
 800af5a:	da02      	bge.n	800af62 <SCSI_Write10+0x136>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800af5c:	f04f 33ff 	mov.w	r3, #4294967295
 800af60:	e034      	b.n	800afcc <SCSI_Write10+0x1a0>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800af62:	697b      	ldr	r3, [r7, #20]
 800af64:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 800af68:	697a      	ldr	r2, [r7, #20]
 800af6a:	f8b2 2264 	ldrh.w	r2, [r2, #612]	@ 0x264
 800af6e:	fb02 f303 	mul.w	r3, r2, r3
 800af72:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 800af74:	697b      	ldr	r3, [r7, #20]
 800af76:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 800af7a:	693a      	ldr	r2, [r7, #16]
 800af7c:	429a      	cmp	r2, r3
 800af7e:	d00a      	beq.n	800af96 <SCSI_Write10+0x16a>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800af80:	697b      	ldr	r3, [r7, #20]
 800af82:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 800af86:	2320      	movs	r3, #32
 800af88:	2205      	movs	r2, #5
 800af8a:	68f8      	ldr	r0, [r7, #12]
 800af8c:	f7ff fd23 	bl	800a9d6 <SCSI_SenseCode>
      return -1;
 800af90:	f04f 33ff 	mov.w	r3, #4294967295
 800af94:	e01a      	b.n	800afcc <SCSI_Write10+0x1a0>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 800af96:	693b      	ldr	r3, [r7, #16]
 800af98:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800af9c:	bf28      	it	cs
 800af9e:	f44f 7300 	movcs.w	r3, #512	@ 0x200
 800afa2:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 800afa4:	697b      	ldr	r3, [r7, #20]
 800afa6:	2201      	movs	r2, #1
 800afa8:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 800afaa:	4b0a      	ldr	r3, [pc, #40]	@ (800afd4 <SCSI_Write10+0x1a8>)
 800afac:	7819      	ldrb	r1, [r3, #0]
 800afae:	697b      	ldr	r3, [r7, #20]
 800afb0:	f103 0210 	add.w	r2, r3, #16
 800afb4:	693b      	ldr	r3, [r7, #16]
 800afb6:	68f8      	ldr	r0, [r7, #12]
 800afb8:	f005 fa43 	bl	8010442 <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 800afbc:	2300      	movs	r3, #0
 800afbe:	e005      	b.n	800afcc <SCSI_Write10+0x1a0>
    return SCSI_ProcessWrite(pdev, lun);
 800afc0:	7afb      	ldrb	r3, [r7, #11]
 800afc2:	4619      	mov	r1, r3
 800afc4:	68f8      	ldr	r0, [r7, #12]
 800afc6:	f000 f9dd 	bl	800b384 <SCSI_ProcessWrite>
 800afca:	4603      	mov	r3, r0
}
 800afcc:	4618      	mov	r0, r3
 800afce:	3718      	adds	r7, #24
 800afd0:	46bd      	mov	sp, r7
 800afd2:	bd80      	pop	{r7, pc}
 800afd4:	2000008f 	.word	0x2000008f

0800afd8 <SCSI_Write12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800afd8:	b580      	push	{r7, lr}
 800afda:	b086      	sub	sp, #24
 800afdc:	af00      	add	r7, sp, #0
 800afde:	60f8      	str	r0, [r7, #12]
 800afe0:	460b      	mov	r3, r1
 800afe2:	607a      	str	r2, [r7, #4]
 800afe4:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800afe6:	68fb      	ldr	r3, [r7, #12]
 800afe8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800afec:	68fb      	ldr	r3, [r7, #12]
 800afee:	32b0      	adds	r2, #176	@ 0xb0
 800aff0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aff4:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 800aff6:	697b      	ldr	r3, [r7, #20]
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d102      	bne.n	800b002 <SCSI_Write12+0x2a>
  {
    return -1;
 800affc:	f04f 33ff 	mov.w	r3, #4294967295
 800b000:	e0ca      	b.n	800b198 <SCSI_Write12+0x1c0>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800b002:	697b      	ldr	r3, [r7, #20]
 800b004:	7a1b      	ldrb	r3, [r3, #8]
 800b006:	2b00      	cmp	r3, #0
 800b008:	f040 80c0 	bne.w	800b18c <SCSI_Write12+0x1b4>
  {
    if (hmsc->cbw.dDataLength == 0U)
 800b00c:	697b      	ldr	r3, [r7, #20]
 800b00e:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 800b012:	2b00      	cmp	r3, #0
 800b014:	d10a      	bne.n	800b02c <SCSI_Write12+0x54>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800b016:	697b      	ldr	r3, [r7, #20]
 800b018:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 800b01c:	2320      	movs	r3, #32
 800b01e:	2205      	movs	r2, #5
 800b020:	68f8      	ldr	r0, [r7, #12]
 800b022:	f7ff fcd8 	bl	800a9d6 <SCSI_SenseCode>
      return -1;
 800b026:	f04f 33ff 	mov.w	r3, #4294967295
 800b02a:	e0b5      	b.n	800b198 <SCSI_Write12+0x1c0>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 800b02c:	697b      	ldr	r3, [r7, #20]
 800b02e:	f893 321c 	ldrb.w	r3, [r3, #540]	@ 0x21c
 800b032:	b25b      	sxtb	r3, r3
 800b034:	2b00      	cmp	r3, #0
 800b036:	da0a      	bge.n	800b04e <SCSI_Write12+0x76>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800b038:	697b      	ldr	r3, [r7, #20]
 800b03a:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 800b03e:	2320      	movs	r3, #32
 800b040:	2205      	movs	r2, #5
 800b042:	68f8      	ldr	r0, [r7, #12]
 800b044:	f7ff fcc7 	bl	800a9d6 <SCSI_SenseCode>
      return -1;
 800b048:	f04f 33ff 	mov.w	r3, #4294967295
 800b04c:	e0a4      	b.n	800b198 <SCSI_Write12+0x1c0>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 800b04e:	68fb      	ldr	r3, [r7, #12]
 800b050:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b054:	68fa      	ldr	r2, [r7, #12]
 800b056:	33b0      	adds	r3, #176	@ 0xb0
 800b058:	009b      	lsls	r3, r3, #2
 800b05a:	4413      	add	r3, r2
 800b05c:	685b      	ldr	r3, [r3, #4]
 800b05e:	689b      	ldr	r3, [r3, #8]
 800b060:	7afa      	ldrb	r2, [r7, #11]
 800b062:	4610      	mov	r0, r2
 800b064:	4798      	blx	r3
 800b066:	4603      	mov	r3, r0
 800b068:	2b00      	cmp	r3, #0
 800b06a:	d00b      	beq.n	800b084 <SCSI_Write12+0xac>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800b06c:	7af9      	ldrb	r1, [r7, #11]
 800b06e:	233a      	movs	r3, #58	@ 0x3a
 800b070:	2202      	movs	r2, #2
 800b072:	68f8      	ldr	r0, [r7, #12]
 800b074:	f7ff fcaf 	bl	800a9d6 <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 800b078:	697b      	ldr	r3, [r7, #20]
 800b07a:	2205      	movs	r2, #5
 800b07c:	721a      	strb	r2, [r3, #8]
      return -1;
 800b07e:	f04f 33ff 	mov.w	r3, #4294967295
 800b082:	e089      	b.n	800b198 <SCSI_Write12+0x1c0>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 800b084:	68fb      	ldr	r3, [r7, #12]
 800b086:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b08a:	68fa      	ldr	r2, [r7, #12]
 800b08c:	33b0      	adds	r3, #176	@ 0xb0
 800b08e:	009b      	lsls	r3, r3, #2
 800b090:	4413      	add	r3, r2
 800b092:	685b      	ldr	r3, [r3, #4]
 800b094:	68db      	ldr	r3, [r3, #12]
 800b096:	7afa      	ldrb	r2, [r7, #11]
 800b098:	4610      	mov	r0, r2
 800b09a:	4798      	blx	r3
 800b09c:	4603      	mov	r3, r0
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	d00b      	beq.n	800b0ba <SCSI_Write12+0xe2>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 800b0a2:	7af9      	ldrb	r1, [r7, #11]
 800b0a4:	2327      	movs	r3, #39	@ 0x27
 800b0a6:	2202      	movs	r2, #2
 800b0a8:	68f8      	ldr	r0, [r7, #12]
 800b0aa:	f7ff fc94 	bl	800a9d6 <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 800b0ae:	697b      	ldr	r3, [r7, #20]
 800b0b0:	2205      	movs	r2, #5
 800b0b2:	721a      	strb	r2, [r3, #8]
      return -1;
 800b0b4:	f04f 33ff 	mov.w	r3, #4294967295
 800b0b8:	e06e      	b.n	800b198 <SCSI_Write12+0x1c0>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	3302      	adds	r3, #2
 800b0be:	781b      	ldrb	r3, [r3, #0]
 800b0c0:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	3303      	adds	r3, #3
 800b0c6:	781b      	ldrb	r3, [r3, #0]
 800b0c8:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800b0ca:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	3304      	adds	r3, #4
 800b0d0:	781b      	ldrb	r3, [r3, #0]
 800b0d2:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800b0d4:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800b0d6:	687a      	ldr	r2, [r7, #4]
 800b0d8:	3205      	adds	r2, #5
 800b0da:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 800b0dc:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800b0de:	697b      	ldr	r3, [r7, #20]
 800b0e0:	f8c3 226c 	str.w	r2, [r3, #620]	@ 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	3306      	adds	r3, #6
 800b0e8:	781b      	ldrb	r3, [r3, #0]
 800b0ea:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	3307      	adds	r3, #7
 800b0f0:	781b      	ldrb	r3, [r3, #0]
 800b0f2:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800b0f4:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	3308      	adds	r3, #8
 800b0fa:	781b      	ldrb	r3, [r3, #0]
 800b0fc:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 800b0fe:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 800b100:	687a      	ldr	r2, [r7, #4]
 800b102:	3209      	adds	r2, #9
 800b104:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 800b106:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800b108:	697b      	ldr	r3, [r7, #20]
 800b10a:	f8c3 2270 	str.w	r2, [r3, #624]	@ 0x270

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800b10e:	697b      	ldr	r3, [r7, #20]
 800b110:	f8d3 226c 	ldr.w	r2, [r3, #620]	@ 0x26c
 800b114:	697b      	ldr	r3, [r7, #20]
 800b116:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 800b11a:	7af9      	ldrb	r1, [r7, #11]
 800b11c:	68f8      	ldr	r0, [r7, #12]
 800b11e:	f000 f87e 	bl	800b21e <SCSI_CheckAddressRange>
 800b122:	4603      	mov	r3, r0
 800b124:	2b00      	cmp	r3, #0
 800b126:	da02      	bge.n	800b12e <SCSI_Write12+0x156>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800b128:	f04f 33ff 	mov.w	r3, #4294967295
 800b12c:	e034      	b.n	800b198 <SCSI_Write12+0x1c0>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800b12e:	697b      	ldr	r3, [r7, #20]
 800b130:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 800b134:	697a      	ldr	r2, [r7, #20]
 800b136:	f8b2 2264 	ldrh.w	r2, [r2, #612]	@ 0x264
 800b13a:	fb02 f303 	mul.w	r3, r2, r3
 800b13e:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 800b140:	697b      	ldr	r3, [r7, #20]
 800b142:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 800b146:	693a      	ldr	r2, [r7, #16]
 800b148:	429a      	cmp	r2, r3
 800b14a:	d00a      	beq.n	800b162 <SCSI_Write12+0x18a>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800b14c:	697b      	ldr	r3, [r7, #20]
 800b14e:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 800b152:	2320      	movs	r3, #32
 800b154:	2205      	movs	r2, #5
 800b156:	68f8      	ldr	r0, [r7, #12]
 800b158:	f7ff fc3d 	bl	800a9d6 <SCSI_SenseCode>
      return -1;
 800b15c:	f04f 33ff 	mov.w	r3, #4294967295
 800b160:	e01a      	b.n	800b198 <SCSI_Write12+0x1c0>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 800b162:	693b      	ldr	r3, [r7, #16]
 800b164:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b168:	bf28      	it	cs
 800b16a:	f44f 7300 	movcs.w	r3, #512	@ 0x200
 800b16e:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 800b170:	697b      	ldr	r3, [r7, #20]
 800b172:	2201      	movs	r2, #1
 800b174:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 800b176:	4b0a      	ldr	r3, [pc, #40]	@ (800b1a0 <SCSI_Write12+0x1c8>)
 800b178:	7819      	ldrb	r1, [r3, #0]
 800b17a:	697b      	ldr	r3, [r7, #20]
 800b17c:	f103 0210 	add.w	r2, r3, #16
 800b180:	693b      	ldr	r3, [r7, #16]
 800b182:	68f8      	ldr	r0, [r7, #12]
 800b184:	f005 f95d 	bl	8010442 <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 800b188:	2300      	movs	r3, #0
 800b18a:	e005      	b.n	800b198 <SCSI_Write12+0x1c0>
    return SCSI_ProcessWrite(pdev, lun);
 800b18c:	7afb      	ldrb	r3, [r7, #11]
 800b18e:	4619      	mov	r1, r3
 800b190:	68f8      	ldr	r0, [r7, #12]
 800b192:	f000 f8f7 	bl	800b384 <SCSI_ProcessWrite>
 800b196:	4603      	mov	r3, r0
}
 800b198:	4618      	mov	r0, r3
 800b19a:	3718      	adds	r7, #24
 800b19c:	46bd      	mov	sp, r7
 800b19e:	bd80      	pop	{r7, pc}
 800b1a0:	2000008f 	.word	0x2000008f

0800b1a4 <SCSI_Verify10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Verify10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800b1a4:	b580      	push	{r7, lr}
 800b1a6:	b086      	sub	sp, #24
 800b1a8:	af00      	add	r7, sp, #0
 800b1aa:	60f8      	str	r0, [r7, #12]
 800b1ac:	460b      	mov	r3, r1
 800b1ae:	607a      	str	r2, [r7, #4]
 800b1b0:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b1b2:	68fb      	ldr	r3, [r7, #12]
 800b1b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b1b8:	68fb      	ldr	r3, [r7, #12]
 800b1ba:	32b0      	adds	r2, #176	@ 0xb0
 800b1bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b1c0:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800b1c2:	697b      	ldr	r3, [r7, #20]
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	d102      	bne.n	800b1ce <SCSI_Verify10+0x2a>
  {
    return -1;
 800b1c8:	f04f 33ff 	mov.w	r3, #4294967295
 800b1cc:	e023      	b.n	800b216 <SCSI_Verify10+0x72>
  }

  if ((params[1] & 0x02U) == 0x02U)
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	3301      	adds	r3, #1
 800b1d2:	781b      	ldrb	r3, [r3, #0]
 800b1d4:	f003 0302 	and.w	r3, r3, #2
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	d008      	beq.n	800b1ee <SCSI_Verify10+0x4a>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 800b1dc:	7af9      	ldrb	r1, [r7, #11]
 800b1de:	2324      	movs	r3, #36	@ 0x24
 800b1e0:	2205      	movs	r2, #5
 800b1e2:	68f8      	ldr	r0, [r7, #12]
 800b1e4:	f7ff fbf7 	bl	800a9d6 <SCSI_SenseCode>
    return -1; /* Error, Verify Mode Not supported*/
 800b1e8:	f04f 33ff 	mov.w	r3, #4294967295
 800b1ec:	e013      	b.n	800b216 <SCSI_Verify10+0x72>
  }

  if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr, hmsc->scsi_blk_len) < 0)
 800b1ee:	697b      	ldr	r3, [r7, #20]
 800b1f0:	f8d3 226c 	ldr.w	r2, [r3, #620]	@ 0x26c
 800b1f4:	697b      	ldr	r3, [r7, #20]
 800b1f6:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 800b1fa:	7af9      	ldrb	r1, [r7, #11]
 800b1fc:	68f8      	ldr	r0, [r7, #12]
 800b1fe:	f000 f80e 	bl	800b21e <SCSI_CheckAddressRange>
 800b202:	4603      	mov	r3, r0
 800b204:	2b00      	cmp	r3, #0
 800b206:	da02      	bge.n	800b20e <SCSI_Verify10+0x6a>
  {
    return -1; /* error */
 800b208:	f04f 33ff 	mov.w	r3, #4294967295
 800b20c:	e003      	b.n	800b216 <SCSI_Verify10+0x72>
  }

  hmsc->bot_data_length = 0U;
 800b20e:	697b      	ldr	r3, [r7, #20]
 800b210:	2200      	movs	r2, #0
 800b212:	60da      	str	r2, [r3, #12]

  return 0;
 800b214:	2300      	movs	r3, #0
}
 800b216:	4618      	mov	r0, r3
 800b218:	3718      	adds	r7, #24
 800b21a:	46bd      	mov	sp, r7
 800b21c:	bd80      	pop	{r7, pc}

0800b21e <SCSI_CheckAddressRange>:
  * @param  blk_nbr: number of block to be processed
  * @retval status
  */
static int8_t SCSI_CheckAddressRange(USBD_HandleTypeDef *pdev, uint8_t lun,
                                     uint32_t blk_offset, uint32_t blk_nbr)
{
 800b21e:	b580      	push	{r7, lr}
 800b220:	b086      	sub	sp, #24
 800b222:	af00      	add	r7, sp, #0
 800b224:	60f8      	str	r0, [r7, #12]
 800b226:	607a      	str	r2, [r7, #4]
 800b228:	603b      	str	r3, [r7, #0]
 800b22a:	460b      	mov	r3, r1
 800b22c:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b22e:	68fb      	ldr	r3, [r7, #12]
 800b230:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b234:	68fb      	ldr	r3, [r7, #12]
 800b236:	32b0      	adds	r2, #176	@ 0xb0
 800b238:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b23c:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800b23e:	697b      	ldr	r3, [r7, #20]
 800b240:	2b00      	cmp	r3, #0
 800b242:	d102      	bne.n	800b24a <SCSI_CheckAddressRange+0x2c>
  {
    return -1;
 800b244:	f04f 33ff 	mov.w	r3, #4294967295
 800b248:	e011      	b.n	800b26e <SCSI_CheckAddressRange+0x50>
  }

  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 800b24a:	687a      	ldr	r2, [r7, #4]
 800b24c:	683b      	ldr	r3, [r7, #0]
 800b24e:	441a      	add	r2, r3
 800b250:	697b      	ldr	r3, [r7, #20]
 800b252:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 800b256:	429a      	cmp	r2, r3
 800b258:	d908      	bls.n	800b26c <SCSI_CheckAddressRange+0x4e>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
 800b25a:	7af9      	ldrb	r1, [r7, #11]
 800b25c:	2321      	movs	r3, #33	@ 0x21
 800b25e:	2205      	movs	r2, #5
 800b260:	68f8      	ldr	r0, [r7, #12]
 800b262:	f7ff fbb8 	bl	800a9d6 <SCSI_SenseCode>
    return -1;
 800b266:	f04f 33ff 	mov.w	r3, #4294967295
 800b26a:	e000      	b.n	800b26e <SCSI_CheckAddressRange+0x50>
  }

  return 0;
 800b26c:	2300      	movs	r3, #0
}
 800b26e:	4618      	mov	r0, r3
 800b270:	3718      	adds	r7, #24
 800b272:	46bd      	mov	sp, r7
 800b274:	bd80      	pop	{r7, pc}
	...

0800b278 <SCSI_ProcessRead>:
  *         Handle Read Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessRead(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 800b278:	b590      	push	{r4, r7, lr}
 800b27a:	b085      	sub	sp, #20
 800b27c:	af00      	add	r7, sp, #0
 800b27e:	6078      	str	r0, [r7, #4]
 800b280:	460b      	mov	r3, r1
 800b282:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	32b0      	adds	r2, #176	@ 0xb0
 800b28e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b292:	60fb      	str	r3, [r7, #12]
  uint32_t len;

  if (hmsc == NULL)
 800b294:	68fb      	ldr	r3, [r7, #12]
 800b296:	2b00      	cmp	r3, #0
 800b298:	d102      	bne.n	800b2a0 <SCSI_ProcessRead+0x28>
  {
    return -1;
 800b29a:	f04f 33ff 	mov.w	r3, #4294967295
 800b29e:	e06a      	b.n	800b376 <SCSI_ProcessRead+0xfe>
  }

  len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800b2a0:	68fb      	ldr	r3, [r7, #12]
 800b2a2:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 800b2a6:	68fa      	ldr	r2, [r7, #12]
 800b2a8:	f8b2 2264 	ldrh.w	r2, [r2, #612]	@ 0x264
 800b2ac:	fb02 f303 	mul.w	r3, r2, r3
 800b2b0:	60bb      	str	r3, [r7, #8]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  len = MIN(len, MSC_MEDIA_PACKET);
 800b2b2:	68bb      	ldr	r3, [r7, #8]
 800b2b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b2b8:	bf28      	it	cs
 800b2ba:	f44f 7300 	movcs.w	r3, #512	@ 0x200
 800b2be:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Read(lun, hmsc->bot_data,
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b2c6:	687a      	ldr	r2, [r7, #4]
 800b2c8:	33b0      	adds	r3, #176	@ 0xb0
 800b2ca:	009b      	lsls	r3, r3, #2
 800b2cc:	4413      	add	r3, r2
 800b2ce:	685b      	ldr	r3, [r3, #4]
 800b2d0:	691c      	ldr	r4, [r3, #16]
 800b2d2:	68fb      	ldr	r3, [r7, #12]
 800b2d4:	f103 0110 	add.w	r1, r3, #16
 800b2d8:	68fb      	ldr	r3, [r7, #12]
 800b2da:	f8d3 226c 	ldr.w	r2, [r3, #620]	@ 0x26c
                                                                    hmsc->scsi_blk_addr,
                                                                    (len / hmsc->scsi_blk_size)) < 0)
 800b2de:	68fb      	ldr	r3, [r7, #12]
 800b2e0:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 800b2e4:	4618      	mov	r0, r3
 800b2e6:	68bb      	ldr	r3, [r7, #8]
 800b2e8:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Read(lun, hmsc->bot_data,
 800b2ec:	b29b      	uxth	r3, r3
 800b2ee:	78f8      	ldrb	r0, [r7, #3]
 800b2f0:	47a0      	blx	r4
 800b2f2:	4603      	mov	r3, r0
 800b2f4:	2b00      	cmp	r3, #0
 800b2f6:	da08      	bge.n	800b30a <SCSI_ProcessRead+0x92>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 800b2f8:	78f9      	ldrb	r1, [r7, #3]
 800b2fa:	2311      	movs	r3, #17
 800b2fc:	2204      	movs	r2, #4
 800b2fe:	6878      	ldr	r0, [r7, #4]
 800b300:	f7ff fb69 	bl	800a9d6 <SCSI_SenseCode>
    return -1;
 800b304:	f04f 33ff 	mov.w	r3, #4294967295
 800b308:	e035      	b.n	800b376 <SCSI_ProcessRead+0xfe>
  }

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, hmsc->bot_data, len);
 800b30a:	4b1d      	ldr	r3, [pc, #116]	@ (800b380 <SCSI_ProcessRead+0x108>)
 800b30c:	7819      	ldrb	r1, [r3, #0]
 800b30e:	68fb      	ldr	r3, [r7, #12]
 800b310:	f103 0210 	add.w	r2, r3, #16
 800b314:	68bb      	ldr	r3, [r7, #8]
 800b316:	6878      	ldr	r0, [r7, #4]
 800b318:	f005 f872 	bl	8010400 <USBD_LL_Transmit>

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 800b31c:	68fb      	ldr	r3, [r7, #12]
 800b31e:	f8d3 226c 	ldr.w	r2, [r3, #620]	@ 0x26c
 800b322:	68fb      	ldr	r3, [r7, #12]
 800b324:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 800b328:	4619      	mov	r1, r3
 800b32a:	68bb      	ldr	r3, [r7, #8]
 800b32c:	fbb3 f3f1 	udiv	r3, r3, r1
 800b330:	441a      	add	r2, r3
 800b332:	68fb      	ldr	r3, [r7, #12]
 800b334:	f8c3 226c 	str.w	r2, [r3, #620]	@ 0x26c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 800b338:	68fb      	ldr	r3, [r7, #12]
 800b33a:	f8d3 2270 	ldr.w	r2, [r3, #624]	@ 0x270
 800b33e:	68fb      	ldr	r3, [r7, #12]
 800b340:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 800b344:	4619      	mov	r1, r3
 800b346:	68bb      	ldr	r3, [r7, #8]
 800b348:	fbb3 f3f1 	udiv	r3, r3, r1
 800b34c:	1ad2      	subs	r2, r2, r3
 800b34e:	68fb      	ldr	r3, [r7, #12]
 800b350:	f8c3 2270 	str.w	r2, [r3, #624]	@ 0x270

  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 800b354:	68fb      	ldr	r3, [r7, #12]
 800b356:	f8d3 2238 	ldr.w	r2, [r3, #568]	@ 0x238
 800b35a:	68bb      	ldr	r3, [r7, #8]
 800b35c:	1ad2      	subs	r2, r2, r3
 800b35e:	68fb      	ldr	r3, [r7, #12]
 800b360:	f8c3 2238 	str.w	r2, [r3, #568]	@ 0x238

  if (hmsc->scsi_blk_len == 0U)
 800b364:	68fb      	ldr	r3, [r7, #12]
 800b366:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	d102      	bne.n	800b374 <SCSI_ProcessRead+0xfc>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 800b36e:	68fb      	ldr	r3, [r7, #12]
 800b370:	2203      	movs	r2, #3
 800b372:	721a      	strb	r2, [r3, #8]
  }

  return 0;
 800b374:	2300      	movs	r3, #0
}
 800b376:	4618      	mov	r0, r3
 800b378:	3714      	adds	r7, #20
 800b37a:	46bd      	mov	sp, r7
 800b37c:	bd90      	pop	{r4, r7, pc}
 800b37e:	bf00      	nop
 800b380:	2000008e 	.word	0x2000008e

0800b384 <SCSI_ProcessWrite>:
  *         Handle Write Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessWrite(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 800b384:	b590      	push	{r4, r7, lr}
 800b386:	b085      	sub	sp, #20
 800b388:	af00      	add	r7, sp, #0
 800b38a:	6078      	str	r0, [r7, #4]
 800b38c:	460b      	mov	r3, r1
 800b38e:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	32b0      	adds	r2, #176	@ 0xb0
 800b39a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b39e:	60fb      	str	r3, [r7, #12]
  uint32_t len;

  if (hmsc == NULL)
 800b3a0:	68fb      	ldr	r3, [r7, #12]
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	d102      	bne.n	800b3ac <SCSI_ProcessWrite+0x28>
  {
    return -1;
 800b3a6:	f04f 33ff 	mov.w	r3, #4294967295
 800b3aa:	e07a      	b.n	800b4a2 <SCSI_ProcessWrite+0x11e>
  }

  len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800b3ac:	68fb      	ldr	r3, [r7, #12]
 800b3ae:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 800b3b2:	68fa      	ldr	r2, [r7, #12]
 800b3b4:	f8b2 2264 	ldrh.w	r2, [r2, #612]	@ 0x264
 800b3b8:	fb02 f303 	mul.w	r3, r2, r3
 800b3bc:	60bb      	str	r3, [r7, #8]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  len = MIN(len, MSC_MEDIA_PACKET);
 800b3be:	68bb      	ldr	r3, [r7, #8]
 800b3c0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b3c4:	bf28      	it	cs
 800b3c6:	f44f 7300 	movcs.w	r3, #512	@ 0x200
 800b3ca:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Write(lun, hmsc->bot_data,
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b3d2:	687a      	ldr	r2, [r7, #4]
 800b3d4:	33b0      	adds	r3, #176	@ 0xb0
 800b3d6:	009b      	lsls	r3, r3, #2
 800b3d8:	4413      	add	r3, r2
 800b3da:	685b      	ldr	r3, [r3, #4]
 800b3dc:	695c      	ldr	r4, [r3, #20]
 800b3de:	68fb      	ldr	r3, [r7, #12]
 800b3e0:	f103 0110 	add.w	r1, r3, #16
 800b3e4:	68fb      	ldr	r3, [r7, #12]
 800b3e6:	f8d3 226c 	ldr.w	r2, [r3, #620]	@ 0x26c
                                                                     hmsc->scsi_blk_addr,
                                                                     (len / hmsc->scsi_blk_size)) < 0)
 800b3ea:	68fb      	ldr	r3, [r7, #12]
 800b3ec:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 800b3f0:	4618      	mov	r0, r3
 800b3f2:	68bb      	ldr	r3, [r7, #8]
 800b3f4:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Write(lun, hmsc->bot_data,
 800b3f8:	b29b      	uxth	r3, r3
 800b3fa:	78f8      	ldrb	r0, [r7, #3]
 800b3fc:	47a0      	blx	r4
 800b3fe:	4603      	mov	r3, r0
 800b400:	2b00      	cmp	r3, #0
 800b402:	da08      	bge.n	800b416 <SCSI_ProcessWrite+0x92>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, WRITE_FAULT);
 800b404:	78f9      	ldrb	r1, [r7, #3]
 800b406:	2303      	movs	r3, #3
 800b408:	2204      	movs	r2, #4
 800b40a:	6878      	ldr	r0, [r7, #4]
 800b40c:	f7ff fae3 	bl	800a9d6 <SCSI_SenseCode>
    return -1;
 800b410:	f04f 33ff 	mov.w	r3, #4294967295
 800b414:	e045      	b.n	800b4a2 <SCSI_ProcessWrite+0x11e>
  }

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 800b416:	68fb      	ldr	r3, [r7, #12]
 800b418:	f8d3 226c 	ldr.w	r2, [r3, #620]	@ 0x26c
 800b41c:	68fb      	ldr	r3, [r7, #12]
 800b41e:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 800b422:	4619      	mov	r1, r3
 800b424:	68bb      	ldr	r3, [r7, #8]
 800b426:	fbb3 f3f1 	udiv	r3, r3, r1
 800b42a:	441a      	add	r2, r3
 800b42c:	68fb      	ldr	r3, [r7, #12]
 800b42e:	f8c3 226c 	str.w	r2, [r3, #620]	@ 0x26c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 800b432:	68fb      	ldr	r3, [r7, #12]
 800b434:	f8d3 2270 	ldr.w	r2, [r3, #624]	@ 0x270
 800b438:	68fb      	ldr	r3, [r7, #12]
 800b43a:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 800b43e:	4619      	mov	r1, r3
 800b440:	68bb      	ldr	r3, [r7, #8]
 800b442:	fbb3 f3f1 	udiv	r3, r3, r1
 800b446:	1ad2      	subs	r2, r2, r3
 800b448:	68fb      	ldr	r3, [r7, #12]
 800b44a:	f8c3 2270 	str.w	r2, [r3, #624]	@ 0x270

  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 800b44e:	68fb      	ldr	r3, [r7, #12]
 800b450:	f8d3 2238 	ldr.w	r2, [r3, #568]	@ 0x238
 800b454:	68bb      	ldr	r3, [r7, #8]
 800b456:	1ad2      	subs	r2, r2, r3
 800b458:	68fb      	ldr	r3, [r7, #12]
 800b45a:	f8c3 2238 	str.w	r2, [r3, #568]	@ 0x238

  if (hmsc->scsi_blk_len == 0U)
 800b45e:	68fb      	ldr	r3, [r7, #12]
 800b460:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 800b464:	2b00      	cmp	r3, #0
 800b466:	d104      	bne.n	800b472 <SCSI_ProcessWrite+0xee>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 800b468:	2100      	movs	r1, #0
 800b46a:	6878      	ldr	r0, [r7, #4]
 800b46c:	f7fe fce8 	bl	8009e40 <MSC_BOT_SendCSW>
 800b470:	e016      	b.n	800b4a0 <SCSI_ProcessWrite+0x11c>
  }
  else
  {
    len = MIN((hmsc->scsi_blk_len * hmsc->scsi_blk_size), MSC_MEDIA_PACKET);
 800b472:	68fb      	ldr	r3, [r7, #12]
 800b474:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 800b478:	68fa      	ldr	r2, [r7, #12]
 800b47a:	f8b2 2264 	ldrh.w	r2, [r2, #612]	@ 0x264
 800b47e:	fb02 f303 	mul.w	r3, r2, r3
 800b482:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b486:	bf28      	it	cs
 800b488:	f44f 7300 	movcs.w	r3, #512	@ 0x200
 800b48c:	60bb      	str	r3, [r7, #8]

    /* Prepare EP to Receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 800b48e:	4b07      	ldr	r3, [pc, #28]	@ (800b4ac <SCSI_ProcessWrite+0x128>)
 800b490:	7819      	ldrb	r1, [r3, #0]
 800b492:	68fb      	ldr	r3, [r7, #12]
 800b494:	f103 0210 	add.w	r2, r3, #16
 800b498:	68bb      	ldr	r3, [r7, #8]
 800b49a:	6878      	ldr	r0, [r7, #4]
 800b49c:	f004 ffd1 	bl	8010442 <USBD_LL_PrepareReceive>
  }

  return 0;
 800b4a0:	2300      	movs	r3, #0
}
 800b4a2:	4618      	mov	r0, r3
 800b4a4:	3714      	adds	r7, #20
 800b4a6:	46bd      	mov	sp, r7
 800b4a8:	bd90      	pop	{r4, r7, pc}
 800b4aa:	bf00      	nop
 800b4ac:	2000008f 	.word	0x2000008f

0800b4b0 <SCSI_UpdateBotData>:
  * @param  length: Data length
  * @retval status
  */
static int8_t SCSI_UpdateBotData(USBD_MSC_BOT_HandleTypeDef *hmsc,
                                 uint8_t *pBuff, uint16_t length)
{
 800b4b0:	b480      	push	{r7}
 800b4b2:	b087      	sub	sp, #28
 800b4b4:	af00      	add	r7, sp, #0
 800b4b6:	60f8      	str	r0, [r7, #12]
 800b4b8:	60b9      	str	r1, [r7, #8]
 800b4ba:	4613      	mov	r3, r2
 800b4bc:	80fb      	strh	r3, [r7, #6]
  uint16_t len = length;
 800b4be:	88fb      	ldrh	r3, [r7, #6]
 800b4c0:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 800b4c2:	68fb      	ldr	r3, [r7, #12]
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	d102      	bne.n	800b4ce <SCSI_UpdateBotData+0x1e>
  {
    return -1;
 800b4c8:	f04f 33ff 	mov.w	r3, #4294967295
 800b4cc:	e013      	b.n	800b4f6 <SCSI_UpdateBotData+0x46>
  }

  hmsc->bot_data_length = len;
 800b4ce:	8afa      	ldrh	r2, [r7, #22]
 800b4d0:	68fb      	ldr	r3, [r7, #12]
 800b4d2:	60da      	str	r2, [r3, #12]

  while (len != 0U)
 800b4d4:	e00b      	b.n	800b4ee <SCSI_UpdateBotData+0x3e>
  {
    len--;
 800b4d6:	8afb      	ldrh	r3, [r7, #22]
 800b4d8:	3b01      	subs	r3, #1
 800b4da:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = pBuff[len];
 800b4dc:	8afb      	ldrh	r3, [r7, #22]
 800b4de:	68ba      	ldr	r2, [r7, #8]
 800b4e0:	441a      	add	r2, r3
 800b4e2:	8afb      	ldrh	r3, [r7, #22]
 800b4e4:	7811      	ldrb	r1, [r2, #0]
 800b4e6:	68fa      	ldr	r2, [r7, #12]
 800b4e8:	4413      	add	r3, r2
 800b4ea:	460a      	mov	r2, r1
 800b4ec:	741a      	strb	r2, [r3, #16]
  while (len != 0U)
 800b4ee:	8afb      	ldrh	r3, [r7, #22]
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	d1f0      	bne.n	800b4d6 <SCSI_UpdateBotData+0x26>
  }

  return 0;
 800b4f4:	2300      	movs	r3, #0
}
 800b4f6:	4618      	mov	r0, r3
 800b4f8:	371c      	adds	r7, #28
 800b4fa:	46bd      	mov	sp, r7
 800b4fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b500:	4770      	bx	lr

0800b502 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b502:	b580      	push	{r7, lr}
 800b504:	b086      	sub	sp, #24
 800b506:	af00      	add	r7, sp, #0
 800b508:	60f8      	str	r0, [r7, #12]
 800b50a:	60b9      	str	r1, [r7, #8]
 800b50c:	4613      	mov	r3, r2
 800b50e:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800b510:	68fb      	ldr	r3, [r7, #12]
 800b512:	2b00      	cmp	r3, #0
 800b514:	d101      	bne.n	800b51a <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800b516:	2303      	movs	r3, #3
 800b518:	e01f      	b.n	800b55a <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800b51a:	68fb      	ldr	r3, [r7, #12]
 800b51c:	2200      	movs	r2, #0
 800b51e:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800b522:	68fb      	ldr	r3, [r7, #12]
 800b524:	2200      	movs	r2, #0
 800b526:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800b52a:	68fb      	ldr	r3, [r7, #12]
 800b52c:	2200      	movs	r2, #0
 800b52e:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800b532:	68bb      	ldr	r3, [r7, #8]
 800b534:	2b00      	cmp	r3, #0
 800b536:	d003      	beq.n	800b540 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800b538:	68fb      	ldr	r3, [r7, #12]
 800b53a:	68ba      	ldr	r2, [r7, #8]
 800b53c:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b540:	68fb      	ldr	r3, [r7, #12]
 800b542:	2201      	movs	r2, #1
 800b544:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800b548:	68fb      	ldr	r3, [r7, #12]
 800b54a:	79fa      	ldrb	r2, [r7, #7]
 800b54c:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800b54e:	68f8      	ldr	r0, [r7, #12]
 800b550:	f004 fe02 	bl	8010158 <USBD_LL_Init>
 800b554:	4603      	mov	r3, r0
 800b556:	75fb      	strb	r3, [r7, #23]

  return ret;
 800b558:	7dfb      	ldrb	r3, [r7, #23]
}
 800b55a:	4618      	mov	r0, r3
 800b55c:	3718      	adds	r7, #24
 800b55e:	46bd      	mov	sp, r7
 800b560:	bd80      	pop	{r7, pc}

0800b562 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800b562:	b580      	push	{r7, lr}
 800b564:	b084      	sub	sp, #16
 800b566:	af00      	add	r7, sp, #0
 800b568:	6078      	str	r0, [r7, #4]
 800b56a:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b56c:	2300      	movs	r3, #0
 800b56e:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800b570:	683b      	ldr	r3, [r7, #0]
 800b572:	2b00      	cmp	r3, #0
 800b574:	d101      	bne.n	800b57a <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800b576:	2303      	movs	r3, #3
 800b578:	e025      	b.n	800b5c6 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	683a      	ldr	r2, [r7, #0]
 800b57e:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	32ae      	adds	r2, #174	@ 0xae
 800b58c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b590:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b592:	2b00      	cmp	r3, #0
 800b594:	d00f      	beq.n	800b5b6 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	32ae      	adds	r2, #174	@ 0xae
 800b5a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b5a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b5a6:	f107 020e 	add.w	r2, r7, #14
 800b5aa:	4610      	mov	r0, r2
 800b5ac:	4798      	blx	r3
 800b5ae:	4602      	mov	r2, r0
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800b5bc:	1c5a      	adds	r2, r3, #1
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800b5c4:	2300      	movs	r3, #0
}
 800b5c6:	4618      	mov	r0, r3
 800b5c8:	3710      	adds	r7, #16
 800b5ca:	46bd      	mov	sp, r7
 800b5cc:	bd80      	pop	{r7, pc}

0800b5ce <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800b5ce:	b580      	push	{r7, lr}
 800b5d0:	b082      	sub	sp, #8
 800b5d2:	af00      	add	r7, sp, #0
 800b5d4:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800b5d6:	6878      	ldr	r0, [r7, #4]
 800b5d8:	f004 fe0a 	bl	80101f0 <USBD_LL_Start>
 800b5dc:	4603      	mov	r3, r0
}
 800b5de:	4618      	mov	r0, r3
 800b5e0:	3708      	adds	r7, #8
 800b5e2:	46bd      	mov	sp, r7
 800b5e4:	bd80      	pop	{r7, pc}

0800b5e6 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800b5e6:	b480      	push	{r7}
 800b5e8:	b083      	sub	sp, #12
 800b5ea:	af00      	add	r7, sp, #0
 800b5ec:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b5ee:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800b5f0:	4618      	mov	r0, r3
 800b5f2:	370c      	adds	r7, #12
 800b5f4:	46bd      	mov	sp, r7
 800b5f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5fa:	4770      	bx	lr

0800b5fc <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b5fc:	b580      	push	{r7, lr}
 800b5fe:	b084      	sub	sp, #16
 800b600:	af00      	add	r7, sp, #0
 800b602:	6078      	str	r0, [r7, #4]
 800b604:	460b      	mov	r3, r1
 800b606:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b608:	2300      	movs	r3, #0
 800b60a:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b612:	2b00      	cmp	r3, #0
 800b614:	d009      	beq.n	800b62a <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b61c:	681b      	ldr	r3, [r3, #0]
 800b61e:	78fa      	ldrb	r2, [r7, #3]
 800b620:	4611      	mov	r1, r2
 800b622:	6878      	ldr	r0, [r7, #4]
 800b624:	4798      	blx	r3
 800b626:	4603      	mov	r3, r0
 800b628:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b62a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b62c:	4618      	mov	r0, r3
 800b62e:	3710      	adds	r7, #16
 800b630:	46bd      	mov	sp, r7
 800b632:	bd80      	pop	{r7, pc}

0800b634 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b634:	b580      	push	{r7, lr}
 800b636:	b084      	sub	sp, #16
 800b638:	af00      	add	r7, sp, #0
 800b63a:	6078      	str	r0, [r7, #4]
 800b63c:	460b      	mov	r3, r1
 800b63e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b640:	2300      	movs	r3, #0
 800b642:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b64a:	685b      	ldr	r3, [r3, #4]
 800b64c:	78fa      	ldrb	r2, [r7, #3]
 800b64e:	4611      	mov	r1, r2
 800b650:	6878      	ldr	r0, [r7, #4]
 800b652:	4798      	blx	r3
 800b654:	4603      	mov	r3, r0
 800b656:	2b00      	cmp	r3, #0
 800b658:	d001      	beq.n	800b65e <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800b65a:	2303      	movs	r3, #3
 800b65c:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b65e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b660:	4618      	mov	r0, r3
 800b662:	3710      	adds	r7, #16
 800b664:	46bd      	mov	sp, r7
 800b666:	bd80      	pop	{r7, pc}

0800b668 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b668:	b580      	push	{r7, lr}
 800b66a:	b084      	sub	sp, #16
 800b66c:	af00      	add	r7, sp, #0
 800b66e:	6078      	str	r0, [r7, #4]
 800b670:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b678:	6839      	ldr	r1, [r7, #0]
 800b67a:	4618      	mov	r0, r3
 800b67c:	f001 f90b 	bl	800c896 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	2201      	movs	r2, #1
 800b684:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800b68e:	461a      	mov	r2, r3
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800b69c:	f003 031f 	and.w	r3, r3, #31
 800b6a0:	2b02      	cmp	r3, #2
 800b6a2:	d01a      	beq.n	800b6da <USBD_LL_SetupStage+0x72>
 800b6a4:	2b02      	cmp	r3, #2
 800b6a6:	d822      	bhi.n	800b6ee <USBD_LL_SetupStage+0x86>
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	d002      	beq.n	800b6b2 <USBD_LL_SetupStage+0x4a>
 800b6ac:	2b01      	cmp	r3, #1
 800b6ae:	d00a      	beq.n	800b6c6 <USBD_LL_SetupStage+0x5e>
 800b6b0:	e01d      	b.n	800b6ee <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b6b8:	4619      	mov	r1, r3
 800b6ba:	6878      	ldr	r0, [r7, #4]
 800b6bc:	f000 fb62 	bl	800bd84 <USBD_StdDevReq>
 800b6c0:	4603      	mov	r3, r0
 800b6c2:	73fb      	strb	r3, [r7, #15]
      break;
 800b6c4:	e020      	b.n	800b708 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b6cc:	4619      	mov	r1, r3
 800b6ce:	6878      	ldr	r0, [r7, #4]
 800b6d0:	f000 fbca 	bl	800be68 <USBD_StdItfReq>
 800b6d4:	4603      	mov	r3, r0
 800b6d6:	73fb      	strb	r3, [r7, #15]
      break;
 800b6d8:	e016      	b.n	800b708 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b6e0:	4619      	mov	r1, r3
 800b6e2:	6878      	ldr	r0, [r7, #4]
 800b6e4:	f000 fc2c 	bl	800bf40 <USBD_StdEPReq>
 800b6e8:	4603      	mov	r3, r0
 800b6ea:	73fb      	strb	r3, [r7, #15]
      break;
 800b6ec:	e00c      	b.n	800b708 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800b6f4:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800b6f8:	b2db      	uxtb	r3, r3
 800b6fa:	4619      	mov	r1, r3
 800b6fc:	6878      	ldr	r0, [r7, #4]
 800b6fe:	f004 fdf6 	bl	80102ee <USBD_LL_StallEP>
 800b702:	4603      	mov	r3, r0
 800b704:	73fb      	strb	r3, [r7, #15]
      break;
 800b706:	bf00      	nop
  }

  return ret;
 800b708:	7bfb      	ldrb	r3, [r7, #15]
}
 800b70a:	4618      	mov	r0, r3
 800b70c:	3710      	adds	r7, #16
 800b70e:	46bd      	mov	sp, r7
 800b710:	bd80      	pop	{r7, pc}

0800b712 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800b712:	b580      	push	{r7, lr}
 800b714:	b086      	sub	sp, #24
 800b716:	af00      	add	r7, sp, #0
 800b718:	60f8      	str	r0, [r7, #12]
 800b71a:	460b      	mov	r3, r1
 800b71c:	607a      	str	r2, [r7, #4]
 800b71e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800b720:	2300      	movs	r3, #0
 800b722:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800b724:	7afb      	ldrb	r3, [r7, #11]
 800b726:	2b00      	cmp	r3, #0
 800b728:	d16e      	bne.n	800b808 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800b72a:	68fb      	ldr	r3, [r7, #12]
 800b72c:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800b730:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b732:	68fb      	ldr	r3, [r7, #12]
 800b734:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800b738:	2b03      	cmp	r3, #3
 800b73a:	f040 8098 	bne.w	800b86e <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800b73e:	693b      	ldr	r3, [r7, #16]
 800b740:	689a      	ldr	r2, [r3, #8]
 800b742:	693b      	ldr	r3, [r7, #16]
 800b744:	68db      	ldr	r3, [r3, #12]
 800b746:	429a      	cmp	r2, r3
 800b748:	d913      	bls.n	800b772 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800b74a:	693b      	ldr	r3, [r7, #16]
 800b74c:	689a      	ldr	r2, [r3, #8]
 800b74e:	693b      	ldr	r3, [r7, #16]
 800b750:	68db      	ldr	r3, [r3, #12]
 800b752:	1ad2      	subs	r2, r2, r3
 800b754:	693b      	ldr	r3, [r7, #16]
 800b756:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800b758:	693b      	ldr	r3, [r7, #16]
 800b75a:	68da      	ldr	r2, [r3, #12]
 800b75c:	693b      	ldr	r3, [r7, #16]
 800b75e:	689b      	ldr	r3, [r3, #8]
 800b760:	4293      	cmp	r3, r2
 800b762:	bf28      	it	cs
 800b764:	4613      	movcs	r3, r2
 800b766:	461a      	mov	r2, r3
 800b768:	6879      	ldr	r1, [r7, #4]
 800b76a:	68f8      	ldr	r0, [r7, #12]
 800b76c:	f001 f976 	bl	800ca5c <USBD_CtlContinueRx>
 800b770:	e07d      	b.n	800b86e <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800b772:	68fb      	ldr	r3, [r7, #12]
 800b774:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800b778:	f003 031f 	and.w	r3, r3, #31
 800b77c:	2b02      	cmp	r3, #2
 800b77e:	d014      	beq.n	800b7aa <USBD_LL_DataOutStage+0x98>
 800b780:	2b02      	cmp	r3, #2
 800b782:	d81d      	bhi.n	800b7c0 <USBD_LL_DataOutStage+0xae>
 800b784:	2b00      	cmp	r3, #0
 800b786:	d002      	beq.n	800b78e <USBD_LL_DataOutStage+0x7c>
 800b788:	2b01      	cmp	r3, #1
 800b78a:	d003      	beq.n	800b794 <USBD_LL_DataOutStage+0x82>
 800b78c:	e018      	b.n	800b7c0 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800b78e:	2300      	movs	r3, #0
 800b790:	75bb      	strb	r3, [r7, #22]
            break;
 800b792:	e018      	b.n	800b7c6 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800b794:	68fb      	ldr	r3, [r7, #12]
 800b796:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800b79a:	b2db      	uxtb	r3, r3
 800b79c:	4619      	mov	r1, r3
 800b79e:	68f8      	ldr	r0, [r7, #12]
 800b7a0:	f000 fa64 	bl	800bc6c <USBD_CoreFindIF>
 800b7a4:	4603      	mov	r3, r0
 800b7a6:	75bb      	strb	r3, [r7, #22]
            break;
 800b7a8:	e00d      	b.n	800b7c6 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800b7aa:	68fb      	ldr	r3, [r7, #12]
 800b7ac:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800b7b0:	b2db      	uxtb	r3, r3
 800b7b2:	4619      	mov	r1, r3
 800b7b4:	68f8      	ldr	r0, [r7, #12]
 800b7b6:	f000 fa66 	bl	800bc86 <USBD_CoreFindEP>
 800b7ba:	4603      	mov	r3, r0
 800b7bc:	75bb      	strb	r3, [r7, #22]
            break;
 800b7be:	e002      	b.n	800b7c6 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800b7c0:	2300      	movs	r3, #0
 800b7c2:	75bb      	strb	r3, [r7, #22]
            break;
 800b7c4:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800b7c6:	7dbb      	ldrb	r3, [r7, #22]
 800b7c8:	2b00      	cmp	r3, #0
 800b7ca:	d119      	bne.n	800b800 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b7cc:	68fb      	ldr	r3, [r7, #12]
 800b7ce:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b7d2:	b2db      	uxtb	r3, r3
 800b7d4:	2b03      	cmp	r3, #3
 800b7d6:	d113      	bne.n	800b800 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800b7d8:	7dba      	ldrb	r2, [r7, #22]
 800b7da:	68fb      	ldr	r3, [r7, #12]
 800b7dc:	32ae      	adds	r2, #174	@ 0xae
 800b7de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b7e2:	691b      	ldr	r3, [r3, #16]
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	d00b      	beq.n	800b800 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800b7e8:	7dba      	ldrb	r2, [r7, #22]
 800b7ea:	68fb      	ldr	r3, [r7, #12]
 800b7ec:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800b7f0:	7dba      	ldrb	r2, [r7, #22]
 800b7f2:	68fb      	ldr	r3, [r7, #12]
 800b7f4:	32ae      	adds	r2, #174	@ 0xae
 800b7f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b7fa:	691b      	ldr	r3, [r3, #16]
 800b7fc:	68f8      	ldr	r0, [r7, #12]
 800b7fe:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800b800:	68f8      	ldr	r0, [r7, #12]
 800b802:	f001 f93c 	bl	800ca7e <USBD_CtlSendStatus>
 800b806:	e032      	b.n	800b86e <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800b808:	7afb      	ldrb	r3, [r7, #11]
 800b80a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b80e:	b2db      	uxtb	r3, r3
 800b810:	4619      	mov	r1, r3
 800b812:	68f8      	ldr	r0, [r7, #12]
 800b814:	f000 fa37 	bl	800bc86 <USBD_CoreFindEP>
 800b818:	4603      	mov	r3, r0
 800b81a:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b81c:	7dbb      	ldrb	r3, [r7, #22]
 800b81e:	2bff      	cmp	r3, #255	@ 0xff
 800b820:	d025      	beq.n	800b86e <USBD_LL_DataOutStage+0x15c>
 800b822:	7dbb      	ldrb	r3, [r7, #22]
 800b824:	2b00      	cmp	r3, #0
 800b826:	d122      	bne.n	800b86e <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b828:	68fb      	ldr	r3, [r7, #12]
 800b82a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b82e:	b2db      	uxtb	r3, r3
 800b830:	2b03      	cmp	r3, #3
 800b832:	d117      	bne.n	800b864 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800b834:	7dba      	ldrb	r2, [r7, #22]
 800b836:	68fb      	ldr	r3, [r7, #12]
 800b838:	32ae      	adds	r2, #174	@ 0xae
 800b83a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b83e:	699b      	ldr	r3, [r3, #24]
 800b840:	2b00      	cmp	r3, #0
 800b842:	d00f      	beq.n	800b864 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800b844:	7dba      	ldrb	r2, [r7, #22]
 800b846:	68fb      	ldr	r3, [r7, #12]
 800b848:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800b84c:	7dba      	ldrb	r2, [r7, #22]
 800b84e:	68fb      	ldr	r3, [r7, #12]
 800b850:	32ae      	adds	r2, #174	@ 0xae
 800b852:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b856:	699b      	ldr	r3, [r3, #24]
 800b858:	7afa      	ldrb	r2, [r7, #11]
 800b85a:	4611      	mov	r1, r2
 800b85c:	68f8      	ldr	r0, [r7, #12]
 800b85e:	4798      	blx	r3
 800b860:	4603      	mov	r3, r0
 800b862:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800b864:	7dfb      	ldrb	r3, [r7, #23]
 800b866:	2b00      	cmp	r3, #0
 800b868:	d001      	beq.n	800b86e <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800b86a:	7dfb      	ldrb	r3, [r7, #23]
 800b86c:	e000      	b.n	800b870 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800b86e:	2300      	movs	r3, #0
}
 800b870:	4618      	mov	r0, r3
 800b872:	3718      	adds	r7, #24
 800b874:	46bd      	mov	sp, r7
 800b876:	bd80      	pop	{r7, pc}

0800b878 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800b878:	b580      	push	{r7, lr}
 800b87a:	b086      	sub	sp, #24
 800b87c:	af00      	add	r7, sp, #0
 800b87e:	60f8      	str	r0, [r7, #12]
 800b880:	460b      	mov	r3, r1
 800b882:	607a      	str	r2, [r7, #4]
 800b884:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800b886:	7afb      	ldrb	r3, [r7, #11]
 800b888:	2b00      	cmp	r3, #0
 800b88a:	d16f      	bne.n	800b96c <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800b88c:	68fb      	ldr	r3, [r7, #12]
 800b88e:	3314      	adds	r3, #20
 800b890:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800b892:	68fb      	ldr	r3, [r7, #12]
 800b894:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800b898:	2b02      	cmp	r3, #2
 800b89a:	d15a      	bne.n	800b952 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800b89c:	693b      	ldr	r3, [r7, #16]
 800b89e:	689a      	ldr	r2, [r3, #8]
 800b8a0:	693b      	ldr	r3, [r7, #16]
 800b8a2:	68db      	ldr	r3, [r3, #12]
 800b8a4:	429a      	cmp	r2, r3
 800b8a6:	d914      	bls.n	800b8d2 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800b8a8:	693b      	ldr	r3, [r7, #16]
 800b8aa:	689a      	ldr	r2, [r3, #8]
 800b8ac:	693b      	ldr	r3, [r7, #16]
 800b8ae:	68db      	ldr	r3, [r3, #12]
 800b8b0:	1ad2      	subs	r2, r2, r3
 800b8b2:	693b      	ldr	r3, [r7, #16]
 800b8b4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800b8b6:	693b      	ldr	r3, [r7, #16]
 800b8b8:	689b      	ldr	r3, [r3, #8]
 800b8ba:	461a      	mov	r2, r3
 800b8bc:	6879      	ldr	r1, [r7, #4]
 800b8be:	68f8      	ldr	r0, [r7, #12]
 800b8c0:	f001 f8bb 	bl	800ca3a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b8c4:	2300      	movs	r3, #0
 800b8c6:	2200      	movs	r2, #0
 800b8c8:	2100      	movs	r1, #0
 800b8ca:	68f8      	ldr	r0, [r7, #12]
 800b8cc:	f004 fdb9 	bl	8010442 <USBD_LL_PrepareReceive>
 800b8d0:	e03f      	b.n	800b952 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800b8d2:	693b      	ldr	r3, [r7, #16]
 800b8d4:	68da      	ldr	r2, [r3, #12]
 800b8d6:	693b      	ldr	r3, [r7, #16]
 800b8d8:	689b      	ldr	r3, [r3, #8]
 800b8da:	429a      	cmp	r2, r3
 800b8dc:	d11c      	bne.n	800b918 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800b8de:	693b      	ldr	r3, [r7, #16]
 800b8e0:	685a      	ldr	r2, [r3, #4]
 800b8e2:	693b      	ldr	r3, [r7, #16]
 800b8e4:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800b8e6:	429a      	cmp	r2, r3
 800b8e8:	d316      	bcc.n	800b918 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800b8ea:	693b      	ldr	r3, [r7, #16]
 800b8ec:	685a      	ldr	r2, [r3, #4]
 800b8ee:	68fb      	ldr	r3, [r7, #12]
 800b8f0:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800b8f4:	429a      	cmp	r2, r3
 800b8f6:	d20f      	bcs.n	800b918 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800b8f8:	2200      	movs	r2, #0
 800b8fa:	2100      	movs	r1, #0
 800b8fc:	68f8      	ldr	r0, [r7, #12]
 800b8fe:	f001 f89c 	bl	800ca3a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800b902:	68fb      	ldr	r3, [r7, #12]
 800b904:	2200      	movs	r2, #0
 800b906:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b90a:	2300      	movs	r3, #0
 800b90c:	2200      	movs	r2, #0
 800b90e:	2100      	movs	r1, #0
 800b910:	68f8      	ldr	r0, [r7, #12]
 800b912:	f004 fd96 	bl	8010442 <USBD_LL_PrepareReceive>
 800b916:	e01c      	b.n	800b952 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b918:	68fb      	ldr	r3, [r7, #12]
 800b91a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b91e:	b2db      	uxtb	r3, r3
 800b920:	2b03      	cmp	r3, #3
 800b922:	d10f      	bne.n	800b944 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800b924:	68fb      	ldr	r3, [r7, #12]
 800b926:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b92a:	68db      	ldr	r3, [r3, #12]
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	d009      	beq.n	800b944 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800b930:	68fb      	ldr	r3, [r7, #12]
 800b932:	2200      	movs	r2, #0
 800b934:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800b938:	68fb      	ldr	r3, [r7, #12]
 800b93a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b93e:	68db      	ldr	r3, [r3, #12]
 800b940:	68f8      	ldr	r0, [r7, #12]
 800b942:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800b944:	2180      	movs	r1, #128	@ 0x80
 800b946:	68f8      	ldr	r0, [r7, #12]
 800b948:	f004 fcd1 	bl	80102ee <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800b94c:	68f8      	ldr	r0, [r7, #12]
 800b94e:	f001 f8a9 	bl	800caa4 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800b952:	68fb      	ldr	r3, [r7, #12]
 800b954:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800b958:	2b00      	cmp	r3, #0
 800b95a:	d03a      	beq.n	800b9d2 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800b95c:	68f8      	ldr	r0, [r7, #12]
 800b95e:	f7ff fe42 	bl	800b5e6 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800b962:	68fb      	ldr	r3, [r7, #12]
 800b964:	2200      	movs	r2, #0
 800b966:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800b96a:	e032      	b.n	800b9d2 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800b96c:	7afb      	ldrb	r3, [r7, #11]
 800b96e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800b972:	b2db      	uxtb	r3, r3
 800b974:	4619      	mov	r1, r3
 800b976:	68f8      	ldr	r0, [r7, #12]
 800b978:	f000 f985 	bl	800bc86 <USBD_CoreFindEP>
 800b97c:	4603      	mov	r3, r0
 800b97e:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b980:	7dfb      	ldrb	r3, [r7, #23]
 800b982:	2bff      	cmp	r3, #255	@ 0xff
 800b984:	d025      	beq.n	800b9d2 <USBD_LL_DataInStage+0x15a>
 800b986:	7dfb      	ldrb	r3, [r7, #23]
 800b988:	2b00      	cmp	r3, #0
 800b98a:	d122      	bne.n	800b9d2 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b98c:	68fb      	ldr	r3, [r7, #12]
 800b98e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b992:	b2db      	uxtb	r3, r3
 800b994:	2b03      	cmp	r3, #3
 800b996:	d11c      	bne.n	800b9d2 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800b998:	7dfa      	ldrb	r2, [r7, #23]
 800b99a:	68fb      	ldr	r3, [r7, #12]
 800b99c:	32ae      	adds	r2, #174	@ 0xae
 800b99e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b9a2:	695b      	ldr	r3, [r3, #20]
 800b9a4:	2b00      	cmp	r3, #0
 800b9a6:	d014      	beq.n	800b9d2 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800b9a8:	7dfa      	ldrb	r2, [r7, #23]
 800b9aa:	68fb      	ldr	r3, [r7, #12]
 800b9ac:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800b9b0:	7dfa      	ldrb	r2, [r7, #23]
 800b9b2:	68fb      	ldr	r3, [r7, #12]
 800b9b4:	32ae      	adds	r2, #174	@ 0xae
 800b9b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b9ba:	695b      	ldr	r3, [r3, #20]
 800b9bc:	7afa      	ldrb	r2, [r7, #11]
 800b9be:	4611      	mov	r1, r2
 800b9c0:	68f8      	ldr	r0, [r7, #12]
 800b9c2:	4798      	blx	r3
 800b9c4:	4603      	mov	r3, r0
 800b9c6:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800b9c8:	7dbb      	ldrb	r3, [r7, #22]
 800b9ca:	2b00      	cmp	r3, #0
 800b9cc:	d001      	beq.n	800b9d2 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800b9ce:	7dbb      	ldrb	r3, [r7, #22]
 800b9d0:	e000      	b.n	800b9d4 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800b9d2:	2300      	movs	r3, #0
}
 800b9d4:	4618      	mov	r0, r3
 800b9d6:	3718      	adds	r7, #24
 800b9d8:	46bd      	mov	sp, r7
 800b9da:	bd80      	pop	{r7, pc}

0800b9dc <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800b9dc:	b580      	push	{r7, lr}
 800b9de:	b084      	sub	sp, #16
 800b9e0:	af00      	add	r7, sp, #0
 800b9e2:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800b9e4:	2300      	movs	r3, #0
 800b9e6:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	2201      	movs	r2, #1
 800b9ec:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	2200      	movs	r2, #0
 800b9f4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	2200      	movs	r2, #0
 800b9fc:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	2200      	movs	r2, #0
 800ba02:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	2200      	movs	r2, #0
 800ba0a:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ba14:	2b00      	cmp	r3, #0
 800ba16:	d014      	beq.n	800ba42 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ba1e:	685b      	ldr	r3, [r3, #4]
 800ba20:	2b00      	cmp	r3, #0
 800ba22:	d00e      	beq.n	800ba42 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ba2a:	685b      	ldr	r3, [r3, #4]
 800ba2c:	687a      	ldr	r2, [r7, #4]
 800ba2e:	6852      	ldr	r2, [r2, #4]
 800ba30:	b2d2      	uxtb	r2, r2
 800ba32:	4611      	mov	r1, r2
 800ba34:	6878      	ldr	r0, [r7, #4]
 800ba36:	4798      	blx	r3
 800ba38:	4603      	mov	r3, r0
 800ba3a:	2b00      	cmp	r3, #0
 800ba3c:	d001      	beq.n	800ba42 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800ba3e:	2303      	movs	r3, #3
 800ba40:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ba42:	2340      	movs	r3, #64	@ 0x40
 800ba44:	2200      	movs	r2, #0
 800ba46:	2100      	movs	r1, #0
 800ba48:	6878      	ldr	r0, [r7, #4]
 800ba4a:	f004 fbec 	bl	8010226 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	2201      	movs	r2, #1
 800ba52:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	2240      	movs	r2, #64	@ 0x40
 800ba5a:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ba5e:	2340      	movs	r3, #64	@ 0x40
 800ba60:	2200      	movs	r2, #0
 800ba62:	2180      	movs	r1, #128	@ 0x80
 800ba64:	6878      	ldr	r0, [r7, #4]
 800ba66:	f004 fbde 	bl	8010226 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	2201      	movs	r2, #1
 800ba6e:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	2240      	movs	r2, #64	@ 0x40
 800ba74:	621a      	str	r2, [r3, #32]

  return ret;
 800ba76:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba78:	4618      	mov	r0, r3
 800ba7a:	3710      	adds	r7, #16
 800ba7c:	46bd      	mov	sp, r7
 800ba7e:	bd80      	pop	{r7, pc}

0800ba80 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800ba80:	b480      	push	{r7}
 800ba82:	b083      	sub	sp, #12
 800ba84:	af00      	add	r7, sp, #0
 800ba86:	6078      	str	r0, [r7, #4]
 800ba88:	460b      	mov	r3, r1
 800ba8a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	78fa      	ldrb	r2, [r7, #3]
 800ba90:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800ba92:	2300      	movs	r3, #0
}
 800ba94:	4618      	mov	r0, r3
 800ba96:	370c      	adds	r7, #12
 800ba98:	46bd      	mov	sp, r7
 800ba9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba9e:	4770      	bx	lr

0800baa0 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800baa0:	b480      	push	{r7}
 800baa2:	b083      	sub	sp, #12
 800baa4:	af00      	add	r7, sp, #0
 800baa6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800baae:	b2db      	uxtb	r3, r3
 800bab0:	2b04      	cmp	r3, #4
 800bab2:	d006      	beq.n	800bac2 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800baba:	b2da      	uxtb	r2, r3
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	2204      	movs	r2, #4
 800bac6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800baca:	2300      	movs	r3, #0
}
 800bacc:	4618      	mov	r0, r3
 800bace:	370c      	adds	r7, #12
 800bad0:	46bd      	mov	sp, r7
 800bad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bad6:	4770      	bx	lr

0800bad8 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800bad8:	b480      	push	{r7}
 800bada:	b083      	sub	sp, #12
 800badc:	af00      	add	r7, sp, #0
 800bade:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bae6:	b2db      	uxtb	r3, r3
 800bae8:	2b04      	cmp	r3, #4
 800baea:	d106      	bne.n	800bafa <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800baf2:	b2da      	uxtb	r2, r3
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800bafa:	2300      	movs	r3, #0
}
 800bafc:	4618      	mov	r0, r3
 800bafe:	370c      	adds	r7, #12
 800bb00:	46bd      	mov	sp, r7
 800bb02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb06:	4770      	bx	lr

0800bb08 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800bb08:	b580      	push	{r7, lr}
 800bb0a:	b082      	sub	sp, #8
 800bb0c:	af00      	add	r7, sp, #0
 800bb0e:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bb16:	b2db      	uxtb	r3, r3
 800bb18:	2b03      	cmp	r3, #3
 800bb1a:	d110      	bne.n	800bb3e <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bb22:	2b00      	cmp	r3, #0
 800bb24:	d00b      	beq.n	800bb3e <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bb2c:	69db      	ldr	r3, [r3, #28]
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	d005      	beq.n	800bb3e <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bb38:	69db      	ldr	r3, [r3, #28]
 800bb3a:	6878      	ldr	r0, [r7, #4]
 800bb3c:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800bb3e:	2300      	movs	r3, #0
}
 800bb40:	4618      	mov	r0, r3
 800bb42:	3708      	adds	r7, #8
 800bb44:	46bd      	mov	sp, r7
 800bb46:	bd80      	pop	{r7, pc}

0800bb48 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800bb48:	b580      	push	{r7, lr}
 800bb4a:	b082      	sub	sp, #8
 800bb4c:	af00      	add	r7, sp, #0
 800bb4e:	6078      	str	r0, [r7, #4]
 800bb50:	460b      	mov	r3, r1
 800bb52:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	32ae      	adds	r2, #174	@ 0xae
 800bb5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	d101      	bne.n	800bb6a <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800bb66:	2303      	movs	r3, #3
 800bb68:	e01c      	b.n	800bba4 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bb70:	b2db      	uxtb	r3, r3
 800bb72:	2b03      	cmp	r3, #3
 800bb74:	d115      	bne.n	800bba2 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	32ae      	adds	r2, #174	@ 0xae
 800bb80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bb84:	6a1b      	ldr	r3, [r3, #32]
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	d00b      	beq.n	800bba2 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	32ae      	adds	r2, #174	@ 0xae
 800bb94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bb98:	6a1b      	ldr	r3, [r3, #32]
 800bb9a:	78fa      	ldrb	r2, [r7, #3]
 800bb9c:	4611      	mov	r1, r2
 800bb9e:	6878      	ldr	r0, [r7, #4]
 800bba0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800bba2:	2300      	movs	r3, #0
}
 800bba4:	4618      	mov	r0, r3
 800bba6:	3708      	adds	r7, #8
 800bba8:	46bd      	mov	sp, r7
 800bbaa:	bd80      	pop	{r7, pc}

0800bbac <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800bbac:	b580      	push	{r7, lr}
 800bbae:	b082      	sub	sp, #8
 800bbb0:	af00      	add	r7, sp, #0
 800bbb2:	6078      	str	r0, [r7, #4]
 800bbb4:	460b      	mov	r3, r1
 800bbb6:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	32ae      	adds	r2, #174	@ 0xae
 800bbc2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bbc6:	2b00      	cmp	r3, #0
 800bbc8:	d101      	bne.n	800bbce <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800bbca:	2303      	movs	r3, #3
 800bbcc:	e01c      	b.n	800bc08 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bbd4:	b2db      	uxtb	r3, r3
 800bbd6:	2b03      	cmp	r3, #3
 800bbd8:	d115      	bne.n	800bc06 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	32ae      	adds	r2, #174	@ 0xae
 800bbe4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bbe8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	d00b      	beq.n	800bc06 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	32ae      	adds	r2, #174	@ 0xae
 800bbf8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bbfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bbfe:	78fa      	ldrb	r2, [r7, #3]
 800bc00:	4611      	mov	r1, r2
 800bc02:	6878      	ldr	r0, [r7, #4]
 800bc04:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800bc06:	2300      	movs	r3, #0
}
 800bc08:	4618      	mov	r0, r3
 800bc0a:	3708      	adds	r7, #8
 800bc0c:	46bd      	mov	sp, r7
 800bc0e:	bd80      	pop	{r7, pc}

0800bc10 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800bc10:	b480      	push	{r7}
 800bc12:	b083      	sub	sp, #12
 800bc14:	af00      	add	r7, sp, #0
 800bc16:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800bc18:	2300      	movs	r3, #0
}
 800bc1a:	4618      	mov	r0, r3
 800bc1c:	370c      	adds	r7, #12
 800bc1e:	46bd      	mov	sp, r7
 800bc20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc24:	4770      	bx	lr

0800bc26 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800bc26:	b580      	push	{r7, lr}
 800bc28:	b084      	sub	sp, #16
 800bc2a:	af00      	add	r7, sp, #0
 800bc2c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800bc2e:	2300      	movs	r3, #0
 800bc30:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	2201      	movs	r2, #1
 800bc36:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bc40:	2b00      	cmp	r3, #0
 800bc42:	d00e      	beq.n	800bc62 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bc4a:	685b      	ldr	r3, [r3, #4]
 800bc4c:	687a      	ldr	r2, [r7, #4]
 800bc4e:	6852      	ldr	r2, [r2, #4]
 800bc50:	b2d2      	uxtb	r2, r2
 800bc52:	4611      	mov	r1, r2
 800bc54:	6878      	ldr	r0, [r7, #4]
 800bc56:	4798      	blx	r3
 800bc58:	4603      	mov	r3, r0
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	d001      	beq.n	800bc62 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800bc5e:	2303      	movs	r3, #3
 800bc60:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800bc62:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc64:	4618      	mov	r0, r3
 800bc66:	3710      	adds	r7, #16
 800bc68:	46bd      	mov	sp, r7
 800bc6a:	bd80      	pop	{r7, pc}

0800bc6c <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800bc6c:	b480      	push	{r7}
 800bc6e:	b083      	sub	sp, #12
 800bc70:	af00      	add	r7, sp, #0
 800bc72:	6078      	str	r0, [r7, #4]
 800bc74:	460b      	mov	r3, r1
 800bc76:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800bc78:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800bc7a:	4618      	mov	r0, r3
 800bc7c:	370c      	adds	r7, #12
 800bc7e:	46bd      	mov	sp, r7
 800bc80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc84:	4770      	bx	lr

0800bc86 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800bc86:	b480      	push	{r7}
 800bc88:	b083      	sub	sp, #12
 800bc8a:	af00      	add	r7, sp, #0
 800bc8c:	6078      	str	r0, [r7, #4]
 800bc8e:	460b      	mov	r3, r1
 800bc90:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800bc92:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800bc94:	4618      	mov	r0, r3
 800bc96:	370c      	adds	r7, #12
 800bc98:	46bd      	mov	sp, r7
 800bc9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc9e:	4770      	bx	lr

0800bca0 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800bca0:	b580      	push	{r7, lr}
 800bca2:	b086      	sub	sp, #24
 800bca4:	af00      	add	r7, sp, #0
 800bca6:	6078      	str	r0, [r7, #4]
 800bca8:	460b      	mov	r3, r1
 800bcaa:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800bcb4:	2300      	movs	r3, #0
 800bcb6:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800bcb8:	68fb      	ldr	r3, [r7, #12]
 800bcba:	885b      	ldrh	r3, [r3, #2]
 800bcbc:	b29b      	uxth	r3, r3
 800bcbe:	68fa      	ldr	r2, [r7, #12]
 800bcc0:	7812      	ldrb	r2, [r2, #0]
 800bcc2:	4293      	cmp	r3, r2
 800bcc4:	d91f      	bls.n	800bd06 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800bcc6:	68fb      	ldr	r3, [r7, #12]
 800bcc8:	781b      	ldrb	r3, [r3, #0]
 800bcca:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800bccc:	e013      	b.n	800bcf6 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800bcce:	f107 030a 	add.w	r3, r7, #10
 800bcd2:	4619      	mov	r1, r3
 800bcd4:	6978      	ldr	r0, [r7, #20]
 800bcd6:	f000 f81b 	bl	800bd10 <USBD_GetNextDesc>
 800bcda:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800bcdc:	697b      	ldr	r3, [r7, #20]
 800bcde:	785b      	ldrb	r3, [r3, #1]
 800bce0:	2b05      	cmp	r3, #5
 800bce2:	d108      	bne.n	800bcf6 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800bce4:	697b      	ldr	r3, [r7, #20]
 800bce6:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800bce8:	693b      	ldr	r3, [r7, #16]
 800bcea:	789b      	ldrb	r3, [r3, #2]
 800bcec:	78fa      	ldrb	r2, [r7, #3]
 800bcee:	429a      	cmp	r2, r3
 800bcf0:	d008      	beq.n	800bd04 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800bcf2:	2300      	movs	r3, #0
 800bcf4:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800bcf6:	68fb      	ldr	r3, [r7, #12]
 800bcf8:	885b      	ldrh	r3, [r3, #2]
 800bcfa:	b29a      	uxth	r2, r3
 800bcfc:	897b      	ldrh	r3, [r7, #10]
 800bcfe:	429a      	cmp	r2, r3
 800bd00:	d8e5      	bhi.n	800bcce <USBD_GetEpDesc+0x2e>
 800bd02:	e000      	b.n	800bd06 <USBD_GetEpDesc+0x66>
          break;
 800bd04:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800bd06:	693b      	ldr	r3, [r7, #16]
}
 800bd08:	4618      	mov	r0, r3
 800bd0a:	3718      	adds	r7, #24
 800bd0c:	46bd      	mov	sp, r7
 800bd0e:	bd80      	pop	{r7, pc}

0800bd10 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800bd10:	b480      	push	{r7}
 800bd12:	b085      	sub	sp, #20
 800bd14:	af00      	add	r7, sp, #0
 800bd16:	6078      	str	r0, [r7, #4]
 800bd18:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800bd1e:	683b      	ldr	r3, [r7, #0]
 800bd20:	881b      	ldrh	r3, [r3, #0]
 800bd22:	68fa      	ldr	r2, [r7, #12]
 800bd24:	7812      	ldrb	r2, [r2, #0]
 800bd26:	4413      	add	r3, r2
 800bd28:	b29a      	uxth	r2, r3
 800bd2a:	683b      	ldr	r3, [r7, #0]
 800bd2c:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800bd2e:	68fb      	ldr	r3, [r7, #12]
 800bd30:	781b      	ldrb	r3, [r3, #0]
 800bd32:	461a      	mov	r2, r3
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	4413      	add	r3, r2
 800bd38:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800bd3a:	68fb      	ldr	r3, [r7, #12]
}
 800bd3c:	4618      	mov	r0, r3
 800bd3e:	3714      	adds	r7, #20
 800bd40:	46bd      	mov	sp, r7
 800bd42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd46:	4770      	bx	lr

0800bd48 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800bd48:	b480      	push	{r7}
 800bd4a:	b087      	sub	sp, #28
 800bd4c:	af00      	add	r7, sp, #0
 800bd4e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800bd54:	697b      	ldr	r3, [r7, #20]
 800bd56:	781b      	ldrb	r3, [r3, #0]
 800bd58:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800bd5a:	697b      	ldr	r3, [r7, #20]
 800bd5c:	3301      	adds	r3, #1
 800bd5e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800bd60:	697b      	ldr	r3, [r7, #20]
 800bd62:	781b      	ldrb	r3, [r3, #0]
 800bd64:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800bd66:	8a3b      	ldrh	r3, [r7, #16]
 800bd68:	021b      	lsls	r3, r3, #8
 800bd6a:	b21a      	sxth	r2, r3
 800bd6c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800bd70:	4313      	orrs	r3, r2
 800bd72:	b21b      	sxth	r3, r3
 800bd74:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800bd76:	89fb      	ldrh	r3, [r7, #14]
}
 800bd78:	4618      	mov	r0, r3
 800bd7a:	371c      	adds	r7, #28
 800bd7c:	46bd      	mov	sp, r7
 800bd7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd82:	4770      	bx	lr

0800bd84 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bd84:	b580      	push	{r7, lr}
 800bd86:	b084      	sub	sp, #16
 800bd88:	af00      	add	r7, sp, #0
 800bd8a:	6078      	str	r0, [r7, #4]
 800bd8c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bd8e:	2300      	movs	r3, #0
 800bd90:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bd92:	683b      	ldr	r3, [r7, #0]
 800bd94:	781b      	ldrb	r3, [r3, #0]
 800bd96:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800bd9a:	2b40      	cmp	r3, #64	@ 0x40
 800bd9c:	d005      	beq.n	800bdaa <USBD_StdDevReq+0x26>
 800bd9e:	2b40      	cmp	r3, #64	@ 0x40
 800bda0:	d857      	bhi.n	800be52 <USBD_StdDevReq+0xce>
 800bda2:	2b00      	cmp	r3, #0
 800bda4:	d00f      	beq.n	800bdc6 <USBD_StdDevReq+0x42>
 800bda6:	2b20      	cmp	r3, #32
 800bda8:	d153      	bne.n	800be52 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	32ae      	adds	r2, #174	@ 0xae
 800bdb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bdb8:	689b      	ldr	r3, [r3, #8]
 800bdba:	6839      	ldr	r1, [r7, #0]
 800bdbc:	6878      	ldr	r0, [r7, #4]
 800bdbe:	4798      	blx	r3
 800bdc0:	4603      	mov	r3, r0
 800bdc2:	73fb      	strb	r3, [r7, #15]
      break;
 800bdc4:	e04a      	b.n	800be5c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800bdc6:	683b      	ldr	r3, [r7, #0]
 800bdc8:	785b      	ldrb	r3, [r3, #1]
 800bdca:	2b09      	cmp	r3, #9
 800bdcc:	d83b      	bhi.n	800be46 <USBD_StdDevReq+0xc2>
 800bdce:	a201      	add	r2, pc, #4	@ (adr r2, 800bdd4 <USBD_StdDevReq+0x50>)
 800bdd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bdd4:	0800be29 	.word	0x0800be29
 800bdd8:	0800be3d 	.word	0x0800be3d
 800bddc:	0800be47 	.word	0x0800be47
 800bde0:	0800be33 	.word	0x0800be33
 800bde4:	0800be47 	.word	0x0800be47
 800bde8:	0800be07 	.word	0x0800be07
 800bdec:	0800bdfd 	.word	0x0800bdfd
 800bdf0:	0800be47 	.word	0x0800be47
 800bdf4:	0800be1f 	.word	0x0800be1f
 800bdf8:	0800be11 	.word	0x0800be11
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800bdfc:	6839      	ldr	r1, [r7, #0]
 800bdfe:	6878      	ldr	r0, [r7, #4]
 800be00:	f000 fa3c 	bl	800c27c <USBD_GetDescriptor>
          break;
 800be04:	e024      	b.n	800be50 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800be06:	6839      	ldr	r1, [r7, #0]
 800be08:	6878      	ldr	r0, [r7, #4]
 800be0a:	f000 fba1 	bl	800c550 <USBD_SetAddress>
          break;
 800be0e:	e01f      	b.n	800be50 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800be10:	6839      	ldr	r1, [r7, #0]
 800be12:	6878      	ldr	r0, [r7, #4]
 800be14:	f000 fbe0 	bl	800c5d8 <USBD_SetConfig>
 800be18:	4603      	mov	r3, r0
 800be1a:	73fb      	strb	r3, [r7, #15]
          break;
 800be1c:	e018      	b.n	800be50 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800be1e:	6839      	ldr	r1, [r7, #0]
 800be20:	6878      	ldr	r0, [r7, #4]
 800be22:	f000 fc83 	bl	800c72c <USBD_GetConfig>
          break;
 800be26:	e013      	b.n	800be50 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800be28:	6839      	ldr	r1, [r7, #0]
 800be2a:	6878      	ldr	r0, [r7, #4]
 800be2c:	f000 fcb4 	bl	800c798 <USBD_GetStatus>
          break;
 800be30:	e00e      	b.n	800be50 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800be32:	6839      	ldr	r1, [r7, #0]
 800be34:	6878      	ldr	r0, [r7, #4]
 800be36:	f000 fce3 	bl	800c800 <USBD_SetFeature>
          break;
 800be3a:	e009      	b.n	800be50 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800be3c:	6839      	ldr	r1, [r7, #0]
 800be3e:	6878      	ldr	r0, [r7, #4]
 800be40:	f000 fd07 	bl	800c852 <USBD_ClrFeature>
          break;
 800be44:	e004      	b.n	800be50 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800be46:	6839      	ldr	r1, [r7, #0]
 800be48:	6878      	ldr	r0, [r7, #4]
 800be4a:	f000 fd5e 	bl	800c90a <USBD_CtlError>
          break;
 800be4e:	bf00      	nop
      }
      break;
 800be50:	e004      	b.n	800be5c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800be52:	6839      	ldr	r1, [r7, #0]
 800be54:	6878      	ldr	r0, [r7, #4]
 800be56:	f000 fd58 	bl	800c90a <USBD_CtlError>
      break;
 800be5a:	bf00      	nop
  }

  return ret;
 800be5c:	7bfb      	ldrb	r3, [r7, #15]
}
 800be5e:	4618      	mov	r0, r3
 800be60:	3710      	adds	r7, #16
 800be62:	46bd      	mov	sp, r7
 800be64:	bd80      	pop	{r7, pc}
 800be66:	bf00      	nop

0800be68 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800be68:	b580      	push	{r7, lr}
 800be6a:	b084      	sub	sp, #16
 800be6c:	af00      	add	r7, sp, #0
 800be6e:	6078      	str	r0, [r7, #4]
 800be70:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800be72:	2300      	movs	r3, #0
 800be74:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800be76:	683b      	ldr	r3, [r7, #0]
 800be78:	781b      	ldrb	r3, [r3, #0]
 800be7a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800be7e:	2b40      	cmp	r3, #64	@ 0x40
 800be80:	d005      	beq.n	800be8e <USBD_StdItfReq+0x26>
 800be82:	2b40      	cmp	r3, #64	@ 0x40
 800be84:	d852      	bhi.n	800bf2c <USBD_StdItfReq+0xc4>
 800be86:	2b00      	cmp	r3, #0
 800be88:	d001      	beq.n	800be8e <USBD_StdItfReq+0x26>
 800be8a:	2b20      	cmp	r3, #32
 800be8c:	d14e      	bne.n	800bf2c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800be94:	b2db      	uxtb	r3, r3
 800be96:	3b01      	subs	r3, #1
 800be98:	2b02      	cmp	r3, #2
 800be9a:	d840      	bhi.n	800bf1e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800be9c:	683b      	ldr	r3, [r7, #0]
 800be9e:	889b      	ldrh	r3, [r3, #4]
 800bea0:	b2db      	uxtb	r3, r3
 800bea2:	2b01      	cmp	r3, #1
 800bea4:	d836      	bhi.n	800bf14 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800bea6:	683b      	ldr	r3, [r7, #0]
 800bea8:	889b      	ldrh	r3, [r3, #4]
 800beaa:	b2db      	uxtb	r3, r3
 800beac:	4619      	mov	r1, r3
 800beae:	6878      	ldr	r0, [r7, #4]
 800beb0:	f7ff fedc 	bl	800bc6c <USBD_CoreFindIF>
 800beb4:	4603      	mov	r3, r0
 800beb6:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800beb8:	7bbb      	ldrb	r3, [r7, #14]
 800beba:	2bff      	cmp	r3, #255	@ 0xff
 800bebc:	d01d      	beq.n	800befa <USBD_StdItfReq+0x92>
 800bebe:	7bbb      	ldrb	r3, [r7, #14]
 800bec0:	2b00      	cmp	r3, #0
 800bec2:	d11a      	bne.n	800befa <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800bec4:	7bba      	ldrb	r2, [r7, #14]
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	32ae      	adds	r2, #174	@ 0xae
 800beca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bece:	689b      	ldr	r3, [r3, #8]
 800bed0:	2b00      	cmp	r3, #0
 800bed2:	d00f      	beq.n	800bef4 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800bed4:	7bba      	ldrb	r2, [r7, #14]
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800bedc:	7bba      	ldrb	r2, [r7, #14]
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	32ae      	adds	r2, #174	@ 0xae
 800bee2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bee6:	689b      	ldr	r3, [r3, #8]
 800bee8:	6839      	ldr	r1, [r7, #0]
 800beea:	6878      	ldr	r0, [r7, #4]
 800beec:	4798      	blx	r3
 800beee:	4603      	mov	r3, r0
 800bef0:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800bef2:	e004      	b.n	800befe <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800bef4:	2303      	movs	r3, #3
 800bef6:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800bef8:	e001      	b.n	800befe <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800befa:	2303      	movs	r3, #3
 800befc:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800befe:	683b      	ldr	r3, [r7, #0]
 800bf00:	88db      	ldrh	r3, [r3, #6]
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	d110      	bne.n	800bf28 <USBD_StdItfReq+0xc0>
 800bf06:	7bfb      	ldrb	r3, [r7, #15]
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	d10d      	bne.n	800bf28 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800bf0c:	6878      	ldr	r0, [r7, #4]
 800bf0e:	f000 fdb6 	bl	800ca7e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800bf12:	e009      	b.n	800bf28 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800bf14:	6839      	ldr	r1, [r7, #0]
 800bf16:	6878      	ldr	r0, [r7, #4]
 800bf18:	f000 fcf7 	bl	800c90a <USBD_CtlError>
          break;
 800bf1c:	e004      	b.n	800bf28 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800bf1e:	6839      	ldr	r1, [r7, #0]
 800bf20:	6878      	ldr	r0, [r7, #4]
 800bf22:	f000 fcf2 	bl	800c90a <USBD_CtlError>
          break;
 800bf26:	e000      	b.n	800bf2a <USBD_StdItfReq+0xc2>
          break;
 800bf28:	bf00      	nop
      }
      break;
 800bf2a:	e004      	b.n	800bf36 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800bf2c:	6839      	ldr	r1, [r7, #0]
 800bf2e:	6878      	ldr	r0, [r7, #4]
 800bf30:	f000 fceb 	bl	800c90a <USBD_CtlError>
      break;
 800bf34:	bf00      	nop
  }

  return ret;
 800bf36:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf38:	4618      	mov	r0, r3
 800bf3a:	3710      	adds	r7, #16
 800bf3c:	46bd      	mov	sp, r7
 800bf3e:	bd80      	pop	{r7, pc}

0800bf40 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bf40:	b580      	push	{r7, lr}
 800bf42:	b084      	sub	sp, #16
 800bf44:	af00      	add	r7, sp, #0
 800bf46:	6078      	str	r0, [r7, #4]
 800bf48:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800bf4a:	2300      	movs	r3, #0
 800bf4c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800bf4e:	683b      	ldr	r3, [r7, #0]
 800bf50:	889b      	ldrh	r3, [r3, #4]
 800bf52:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bf54:	683b      	ldr	r3, [r7, #0]
 800bf56:	781b      	ldrb	r3, [r3, #0]
 800bf58:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800bf5c:	2b40      	cmp	r3, #64	@ 0x40
 800bf5e:	d007      	beq.n	800bf70 <USBD_StdEPReq+0x30>
 800bf60:	2b40      	cmp	r3, #64	@ 0x40
 800bf62:	f200 817f 	bhi.w	800c264 <USBD_StdEPReq+0x324>
 800bf66:	2b00      	cmp	r3, #0
 800bf68:	d02a      	beq.n	800bfc0 <USBD_StdEPReq+0x80>
 800bf6a:	2b20      	cmp	r3, #32
 800bf6c:	f040 817a 	bne.w	800c264 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800bf70:	7bbb      	ldrb	r3, [r7, #14]
 800bf72:	4619      	mov	r1, r3
 800bf74:	6878      	ldr	r0, [r7, #4]
 800bf76:	f7ff fe86 	bl	800bc86 <USBD_CoreFindEP>
 800bf7a:	4603      	mov	r3, r0
 800bf7c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bf7e:	7b7b      	ldrb	r3, [r7, #13]
 800bf80:	2bff      	cmp	r3, #255	@ 0xff
 800bf82:	f000 8174 	beq.w	800c26e <USBD_StdEPReq+0x32e>
 800bf86:	7b7b      	ldrb	r3, [r7, #13]
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	f040 8170 	bne.w	800c26e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800bf8e:	7b7a      	ldrb	r2, [r7, #13]
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800bf96:	7b7a      	ldrb	r2, [r7, #13]
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	32ae      	adds	r2, #174	@ 0xae
 800bf9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bfa0:	689b      	ldr	r3, [r3, #8]
 800bfa2:	2b00      	cmp	r3, #0
 800bfa4:	f000 8163 	beq.w	800c26e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800bfa8:	7b7a      	ldrb	r2, [r7, #13]
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	32ae      	adds	r2, #174	@ 0xae
 800bfae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bfb2:	689b      	ldr	r3, [r3, #8]
 800bfb4:	6839      	ldr	r1, [r7, #0]
 800bfb6:	6878      	ldr	r0, [r7, #4]
 800bfb8:	4798      	blx	r3
 800bfba:	4603      	mov	r3, r0
 800bfbc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800bfbe:	e156      	b.n	800c26e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800bfc0:	683b      	ldr	r3, [r7, #0]
 800bfc2:	785b      	ldrb	r3, [r3, #1]
 800bfc4:	2b03      	cmp	r3, #3
 800bfc6:	d008      	beq.n	800bfda <USBD_StdEPReq+0x9a>
 800bfc8:	2b03      	cmp	r3, #3
 800bfca:	f300 8145 	bgt.w	800c258 <USBD_StdEPReq+0x318>
 800bfce:	2b00      	cmp	r3, #0
 800bfd0:	f000 809b 	beq.w	800c10a <USBD_StdEPReq+0x1ca>
 800bfd4:	2b01      	cmp	r3, #1
 800bfd6:	d03c      	beq.n	800c052 <USBD_StdEPReq+0x112>
 800bfd8:	e13e      	b.n	800c258 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bfe0:	b2db      	uxtb	r3, r3
 800bfe2:	2b02      	cmp	r3, #2
 800bfe4:	d002      	beq.n	800bfec <USBD_StdEPReq+0xac>
 800bfe6:	2b03      	cmp	r3, #3
 800bfe8:	d016      	beq.n	800c018 <USBD_StdEPReq+0xd8>
 800bfea:	e02c      	b.n	800c046 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bfec:	7bbb      	ldrb	r3, [r7, #14]
 800bfee:	2b00      	cmp	r3, #0
 800bff0:	d00d      	beq.n	800c00e <USBD_StdEPReq+0xce>
 800bff2:	7bbb      	ldrb	r3, [r7, #14]
 800bff4:	2b80      	cmp	r3, #128	@ 0x80
 800bff6:	d00a      	beq.n	800c00e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800bff8:	7bbb      	ldrb	r3, [r7, #14]
 800bffa:	4619      	mov	r1, r3
 800bffc:	6878      	ldr	r0, [r7, #4]
 800bffe:	f004 f976 	bl	80102ee <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c002:	2180      	movs	r1, #128	@ 0x80
 800c004:	6878      	ldr	r0, [r7, #4]
 800c006:	f004 f972 	bl	80102ee <USBD_LL_StallEP>
 800c00a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c00c:	e020      	b.n	800c050 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800c00e:	6839      	ldr	r1, [r7, #0]
 800c010:	6878      	ldr	r0, [r7, #4]
 800c012:	f000 fc7a 	bl	800c90a <USBD_CtlError>
              break;
 800c016:	e01b      	b.n	800c050 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c018:	683b      	ldr	r3, [r7, #0]
 800c01a:	885b      	ldrh	r3, [r3, #2]
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	d10e      	bne.n	800c03e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800c020:	7bbb      	ldrb	r3, [r7, #14]
 800c022:	2b00      	cmp	r3, #0
 800c024:	d00b      	beq.n	800c03e <USBD_StdEPReq+0xfe>
 800c026:	7bbb      	ldrb	r3, [r7, #14]
 800c028:	2b80      	cmp	r3, #128	@ 0x80
 800c02a:	d008      	beq.n	800c03e <USBD_StdEPReq+0xfe>
 800c02c:	683b      	ldr	r3, [r7, #0]
 800c02e:	88db      	ldrh	r3, [r3, #6]
 800c030:	2b00      	cmp	r3, #0
 800c032:	d104      	bne.n	800c03e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800c034:	7bbb      	ldrb	r3, [r7, #14]
 800c036:	4619      	mov	r1, r3
 800c038:	6878      	ldr	r0, [r7, #4]
 800c03a:	f004 f958 	bl	80102ee <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800c03e:	6878      	ldr	r0, [r7, #4]
 800c040:	f000 fd1d 	bl	800ca7e <USBD_CtlSendStatus>

              break;
 800c044:	e004      	b.n	800c050 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800c046:	6839      	ldr	r1, [r7, #0]
 800c048:	6878      	ldr	r0, [r7, #4]
 800c04a:	f000 fc5e 	bl	800c90a <USBD_CtlError>
              break;
 800c04e:	bf00      	nop
          }
          break;
 800c050:	e107      	b.n	800c262 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c058:	b2db      	uxtb	r3, r3
 800c05a:	2b02      	cmp	r3, #2
 800c05c:	d002      	beq.n	800c064 <USBD_StdEPReq+0x124>
 800c05e:	2b03      	cmp	r3, #3
 800c060:	d016      	beq.n	800c090 <USBD_StdEPReq+0x150>
 800c062:	e04b      	b.n	800c0fc <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c064:	7bbb      	ldrb	r3, [r7, #14]
 800c066:	2b00      	cmp	r3, #0
 800c068:	d00d      	beq.n	800c086 <USBD_StdEPReq+0x146>
 800c06a:	7bbb      	ldrb	r3, [r7, #14]
 800c06c:	2b80      	cmp	r3, #128	@ 0x80
 800c06e:	d00a      	beq.n	800c086 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c070:	7bbb      	ldrb	r3, [r7, #14]
 800c072:	4619      	mov	r1, r3
 800c074:	6878      	ldr	r0, [r7, #4]
 800c076:	f004 f93a 	bl	80102ee <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c07a:	2180      	movs	r1, #128	@ 0x80
 800c07c:	6878      	ldr	r0, [r7, #4]
 800c07e:	f004 f936 	bl	80102ee <USBD_LL_StallEP>
 800c082:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c084:	e040      	b.n	800c108 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800c086:	6839      	ldr	r1, [r7, #0]
 800c088:	6878      	ldr	r0, [r7, #4]
 800c08a:	f000 fc3e 	bl	800c90a <USBD_CtlError>
              break;
 800c08e:	e03b      	b.n	800c108 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c090:	683b      	ldr	r3, [r7, #0]
 800c092:	885b      	ldrh	r3, [r3, #2]
 800c094:	2b00      	cmp	r3, #0
 800c096:	d136      	bne.n	800c106 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800c098:	7bbb      	ldrb	r3, [r7, #14]
 800c09a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c09e:	2b00      	cmp	r3, #0
 800c0a0:	d004      	beq.n	800c0ac <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800c0a2:	7bbb      	ldrb	r3, [r7, #14]
 800c0a4:	4619      	mov	r1, r3
 800c0a6:	6878      	ldr	r0, [r7, #4]
 800c0a8:	f004 f940 	bl	801032c <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800c0ac:	6878      	ldr	r0, [r7, #4]
 800c0ae:	f000 fce6 	bl	800ca7e <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800c0b2:	7bbb      	ldrb	r3, [r7, #14]
 800c0b4:	4619      	mov	r1, r3
 800c0b6:	6878      	ldr	r0, [r7, #4]
 800c0b8:	f7ff fde5 	bl	800bc86 <USBD_CoreFindEP>
 800c0bc:	4603      	mov	r3, r0
 800c0be:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c0c0:	7b7b      	ldrb	r3, [r7, #13]
 800c0c2:	2bff      	cmp	r3, #255	@ 0xff
 800c0c4:	d01f      	beq.n	800c106 <USBD_StdEPReq+0x1c6>
 800c0c6:	7b7b      	ldrb	r3, [r7, #13]
 800c0c8:	2b00      	cmp	r3, #0
 800c0ca:	d11c      	bne.n	800c106 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800c0cc:	7b7a      	ldrb	r2, [r7, #13]
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800c0d4:	7b7a      	ldrb	r2, [r7, #13]
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	32ae      	adds	r2, #174	@ 0xae
 800c0da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c0de:	689b      	ldr	r3, [r3, #8]
 800c0e0:	2b00      	cmp	r3, #0
 800c0e2:	d010      	beq.n	800c106 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800c0e4:	7b7a      	ldrb	r2, [r7, #13]
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	32ae      	adds	r2, #174	@ 0xae
 800c0ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c0ee:	689b      	ldr	r3, [r3, #8]
 800c0f0:	6839      	ldr	r1, [r7, #0]
 800c0f2:	6878      	ldr	r0, [r7, #4]
 800c0f4:	4798      	blx	r3
 800c0f6:	4603      	mov	r3, r0
 800c0f8:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800c0fa:	e004      	b.n	800c106 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800c0fc:	6839      	ldr	r1, [r7, #0]
 800c0fe:	6878      	ldr	r0, [r7, #4]
 800c100:	f000 fc03 	bl	800c90a <USBD_CtlError>
              break;
 800c104:	e000      	b.n	800c108 <USBD_StdEPReq+0x1c8>
              break;
 800c106:	bf00      	nop
          }
          break;
 800c108:	e0ab      	b.n	800c262 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c110:	b2db      	uxtb	r3, r3
 800c112:	2b02      	cmp	r3, #2
 800c114:	d002      	beq.n	800c11c <USBD_StdEPReq+0x1dc>
 800c116:	2b03      	cmp	r3, #3
 800c118:	d032      	beq.n	800c180 <USBD_StdEPReq+0x240>
 800c11a:	e097      	b.n	800c24c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c11c:	7bbb      	ldrb	r3, [r7, #14]
 800c11e:	2b00      	cmp	r3, #0
 800c120:	d007      	beq.n	800c132 <USBD_StdEPReq+0x1f2>
 800c122:	7bbb      	ldrb	r3, [r7, #14]
 800c124:	2b80      	cmp	r3, #128	@ 0x80
 800c126:	d004      	beq.n	800c132 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800c128:	6839      	ldr	r1, [r7, #0]
 800c12a:	6878      	ldr	r0, [r7, #4]
 800c12c:	f000 fbed 	bl	800c90a <USBD_CtlError>
                break;
 800c130:	e091      	b.n	800c256 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c132:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c136:	2b00      	cmp	r3, #0
 800c138:	da0b      	bge.n	800c152 <USBD_StdEPReq+0x212>
 800c13a:	7bbb      	ldrb	r3, [r7, #14]
 800c13c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c140:	4613      	mov	r3, r2
 800c142:	009b      	lsls	r3, r3, #2
 800c144:	4413      	add	r3, r2
 800c146:	009b      	lsls	r3, r3, #2
 800c148:	3310      	adds	r3, #16
 800c14a:	687a      	ldr	r2, [r7, #4]
 800c14c:	4413      	add	r3, r2
 800c14e:	3304      	adds	r3, #4
 800c150:	e00b      	b.n	800c16a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c152:	7bbb      	ldrb	r3, [r7, #14]
 800c154:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c158:	4613      	mov	r3, r2
 800c15a:	009b      	lsls	r3, r3, #2
 800c15c:	4413      	add	r3, r2
 800c15e:	009b      	lsls	r3, r3, #2
 800c160:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800c164:	687a      	ldr	r2, [r7, #4]
 800c166:	4413      	add	r3, r2
 800c168:	3304      	adds	r3, #4
 800c16a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800c16c:	68bb      	ldr	r3, [r7, #8]
 800c16e:	2200      	movs	r2, #0
 800c170:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c172:	68bb      	ldr	r3, [r7, #8]
 800c174:	2202      	movs	r2, #2
 800c176:	4619      	mov	r1, r3
 800c178:	6878      	ldr	r0, [r7, #4]
 800c17a:	f000 fc43 	bl	800ca04 <USBD_CtlSendData>
              break;
 800c17e:	e06a      	b.n	800c256 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800c180:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c184:	2b00      	cmp	r3, #0
 800c186:	da11      	bge.n	800c1ac <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800c188:	7bbb      	ldrb	r3, [r7, #14]
 800c18a:	f003 020f 	and.w	r2, r3, #15
 800c18e:	6879      	ldr	r1, [r7, #4]
 800c190:	4613      	mov	r3, r2
 800c192:	009b      	lsls	r3, r3, #2
 800c194:	4413      	add	r3, r2
 800c196:	009b      	lsls	r3, r3, #2
 800c198:	440b      	add	r3, r1
 800c19a:	3324      	adds	r3, #36	@ 0x24
 800c19c:	881b      	ldrh	r3, [r3, #0]
 800c19e:	2b00      	cmp	r3, #0
 800c1a0:	d117      	bne.n	800c1d2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800c1a2:	6839      	ldr	r1, [r7, #0]
 800c1a4:	6878      	ldr	r0, [r7, #4]
 800c1a6:	f000 fbb0 	bl	800c90a <USBD_CtlError>
                  break;
 800c1aa:	e054      	b.n	800c256 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800c1ac:	7bbb      	ldrb	r3, [r7, #14]
 800c1ae:	f003 020f 	and.w	r2, r3, #15
 800c1b2:	6879      	ldr	r1, [r7, #4]
 800c1b4:	4613      	mov	r3, r2
 800c1b6:	009b      	lsls	r3, r3, #2
 800c1b8:	4413      	add	r3, r2
 800c1ba:	009b      	lsls	r3, r3, #2
 800c1bc:	440b      	add	r3, r1
 800c1be:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800c1c2:	881b      	ldrh	r3, [r3, #0]
 800c1c4:	2b00      	cmp	r3, #0
 800c1c6:	d104      	bne.n	800c1d2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800c1c8:	6839      	ldr	r1, [r7, #0]
 800c1ca:	6878      	ldr	r0, [r7, #4]
 800c1cc:	f000 fb9d 	bl	800c90a <USBD_CtlError>
                  break;
 800c1d0:	e041      	b.n	800c256 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c1d2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	da0b      	bge.n	800c1f2 <USBD_StdEPReq+0x2b2>
 800c1da:	7bbb      	ldrb	r3, [r7, #14]
 800c1dc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c1e0:	4613      	mov	r3, r2
 800c1e2:	009b      	lsls	r3, r3, #2
 800c1e4:	4413      	add	r3, r2
 800c1e6:	009b      	lsls	r3, r3, #2
 800c1e8:	3310      	adds	r3, #16
 800c1ea:	687a      	ldr	r2, [r7, #4]
 800c1ec:	4413      	add	r3, r2
 800c1ee:	3304      	adds	r3, #4
 800c1f0:	e00b      	b.n	800c20a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c1f2:	7bbb      	ldrb	r3, [r7, #14]
 800c1f4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c1f8:	4613      	mov	r3, r2
 800c1fa:	009b      	lsls	r3, r3, #2
 800c1fc:	4413      	add	r3, r2
 800c1fe:	009b      	lsls	r3, r3, #2
 800c200:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800c204:	687a      	ldr	r2, [r7, #4]
 800c206:	4413      	add	r3, r2
 800c208:	3304      	adds	r3, #4
 800c20a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800c20c:	7bbb      	ldrb	r3, [r7, #14]
 800c20e:	2b00      	cmp	r3, #0
 800c210:	d002      	beq.n	800c218 <USBD_StdEPReq+0x2d8>
 800c212:	7bbb      	ldrb	r3, [r7, #14]
 800c214:	2b80      	cmp	r3, #128	@ 0x80
 800c216:	d103      	bne.n	800c220 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800c218:	68bb      	ldr	r3, [r7, #8]
 800c21a:	2200      	movs	r2, #0
 800c21c:	601a      	str	r2, [r3, #0]
 800c21e:	e00e      	b.n	800c23e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800c220:	7bbb      	ldrb	r3, [r7, #14]
 800c222:	4619      	mov	r1, r3
 800c224:	6878      	ldr	r0, [r7, #4]
 800c226:	f004 f8a0 	bl	801036a <USBD_LL_IsStallEP>
 800c22a:	4603      	mov	r3, r0
 800c22c:	2b00      	cmp	r3, #0
 800c22e:	d003      	beq.n	800c238 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800c230:	68bb      	ldr	r3, [r7, #8]
 800c232:	2201      	movs	r2, #1
 800c234:	601a      	str	r2, [r3, #0]
 800c236:	e002      	b.n	800c23e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800c238:	68bb      	ldr	r3, [r7, #8]
 800c23a:	2200      	movs	r2, #0
 800c23c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c23e:	68bb      	ldr	r3, [r7, #8]
 800c240:	2202      	movs	r2, #2
 800c242:	4619      	mov	r1, r3
 800c244:	6878      	ldr	r0, [r7, #4]
 800c246:	f000 fbdd 	bl	800ca04 <USBD_CtlSendData>
              break;
 800c24a:	e004      	b.n	800c256 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800c24c:	6839      	ldr	r1, [r7, #0]
 800c24e:	6878      	ldr	r0, [r7, #4]
 800c250:	f000 fb5b 	bl	800c90a <USBD_CtlError>
              break;
 800c254:	bf00      	nop
          }
          break;
 800c256:	e004      	b.n	800c262 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800c258:	6839      	ldr	r1, [r7, #0]
 800c25a:	6878      	ldr	r0, [r7, #4]
 800c25c:	f000 fb55 	bl	800c90a <USBD_CtlError>
          break;
 800c260:	bf00      	nop
      }
      break;
 800c262:	e005      	b.n	800c270 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800c264:	6839      	ldr	r1, [r7, #0]
 800c266:	6878      	ldr	r0, [r7, #4]
 800c268:	f000 fb4f 	bl	800c90a <USBD_CtlError>
      break;
 800c26c:	e000      	b.n	800c270 <USBD_StdEPReq+0x330>
      break;
 800c26e:	bf00      	nop
  }

  return ret;
 800c270:	7bfb      	ldrb	r3, [r7, #15]
}
 800c272:	4618      	mov	r0, r3
 800c274:	3710      	adds	r7, #16
 800c276:	46bd      	mov	sp, r7
 800c278:	bd80      	pop	{r7, pc}
	...

0800c27c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c27c:	b580      	push	{r7, lr}
 800c27e:	b084      	sub	sp, #16
 800c280:	af00      	add	r7, sp, #0
 800c282:	6078      	str	r0, [r7, #4]
 800c284:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c286:	2300      	movs	r3, #0
 800c288:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800c28a:	2300      	movs	r3, #0
 800c28c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800c28e:	2300      	movs	r3, #0
 800c290:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800c292:	683b      	ldr	r3, [r7, #0]
 800c294:	885b      	ldrh	r3, [r3, #2]
 800c296:	0a1b      	lsrs	r3, r3, #8
 800c298:	b29b      	uxth	r3, r3
 800c29a:	3b01      	subs	r3, #1
 800c29c:	2b06      	cmp	r3, #6
 800c29e:	f200 8128 	bhi.w	800c4f2 <USBD_GetDescriptor+0x276>
 800c2a2:	a201      	add	r2, pc, #4	@ (adr r2, 800c2a8 <USBD_GetDescriptor+0x2c>)
 800c2a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c2a8:	0800c2c5 	.word	0x0800c2c5
 800c2ac:	0800c2dd 	.word	0x0800c2dd
 800c2b0:	0800c31d 	.word	0x0800c31d
 800c2b4:	0800c4f3 	.word	0x0800c4f3
 800c2b8:	0800c4f3 	.word	0x0800c4f3
 800c2bc:	0800c493 	.word	0x0800c493
 800c2c0:	0800c4bf 	.word	0x0800c4bf
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c2ca:	681b      	ldr	r3, [r3, #0]
 800c2cc:	687a      	ldr	r2, [r7, #4]
 800c2ce:	7c12      	ldrb	r2, [r2, #16]
 800c2d0:	f107 0108 	add.w	r1, r7, #8
 800c2d4:	4610      	mov	r0, r2
 800c2d6:	4798      	blx	r3
 800c2d8:	60f8      	str	r0, [r7, #12]
      break;
 800c2da:	e112      	b.n	800c502 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	7c1b      	ldrb	r3, [r3, #16]
 800c2e0:	2b00      	cmp	r3, #0
 800c2e2:	d10d      	bne.n	800c300 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c2ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c2ec:	f107 0208 	add.w	r2, r7, #8
 800c2f0:	4610      	mov	r0, r2
 800c2f2:	4798      	blx	r3
 800c2f4:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c2f6:	68fb      	ldr	r3, [r7, #12]
 800c2f8:	3301      	adds	r3, #1
 800c2fa:	2202      	movs	r2, #2
 800c2fc:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800c2fe:	e100      	b.n	800c502 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c306:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c308:	f107 0208 	add.w	r2, r7, #8
 800c30c:	4610      	mov	r0, r2
 800c30e:	4798      	blx	r3
 800c310:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c312:	68fb      	ldr	r3, [r7, #12]
 800c314:	3301      	adds	r3, #1
 800c316:	2202      	movs	r2, #2
 800c318:	701a      	strb	r2, [r3, #0]
      break;
 800c31a:	e0f2      	b.n	800c502 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800c31c:	683b      	ldr	r3, [r7, #0]
 800c31e:	885b      	ldrh	r3, [r3, #2]
 800c320:	b2db      	uxtb	r3, r3
 800c322:	2b05      	cmp	r3, #5
 800c324:	f200 80ac 	bhi.w	800c480 <USBD_GetDescriptor+0x204>
 800c328:	a201      	add	r2, pc, #4	@ (adr r2, 800c330 <USBD_GetDescriptor+0xb4>)
 800c32a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c32e:	bf00      	nop
 800c330:	0800c349 	.word	0x0800c349
 800c334:	0800c37d 	.word	0x0800c37d
 800c338:	0800c3b1 	.word	0x0800c3b1
 800c33c:	0800c3e5 	.word	0x0800c3e5
 800c340:	0800c419 	.word	0x0800c419
 800c344:	0800c44d 	.word	0x0800c44d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c34e:	685b      	ldr	r3, [r3, #4]
 800c350:	2b00      	cmp	r3, #0
 800c352:	d00b      	beq.n	800c36c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c35a:	685b      	ldr	r3, [r3, #4]
 800c35c:	687a      	ldr	r2, [r7, #4]
 800c35e:	7c12      	ldrb	r2, [r2, #16]
 800c360:	f107 0108 	add.w	r1, r7, #8
 800c364:	4610      	mov	r0, r2
 800c366:	4798      	blx	r3
 800c368:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c36a:	e091      	b.n	800c490 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c36c:	6839      	ldr	r1, [r7, #0]
 800c36e:	6878      	ldr	r0, [r7, #4]
 800c370:	f000 facb 	bl	800c90a <USBD_CtlError>
            err++;
 800c374:	7afb      	ldrb	r3, [r7, #11]
 800c376:	3301      	adds	r3, #1
 800c378:	72fb      	strb	r3, [r7, #11]
          break;
 800c37a:	e089      	b.n	800c490 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c382:	689b      	ldr	r3, [r3, #8]
 800c384:	2b00      	cmp	r3, #0
 800c386:	d00b      	beq.n	800c3a0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c38e:	689b      	ldr	r3, [r3, #8]
 800c390:	687a      	ldr	r2, [r7, #4]
 800c392:	7c12      	ldrb	r2, [r2, #16]
 800c394:	f107 0108 	add.w	r1, r7, #8
 800c398:	4610      	mov	r0, r2
 800c39a:	4798      	blx	r3
 800c39c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c39e:	e077      	b.n	800c490 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c3a0:	6839      	ldr	r1, [r7, #0]
 800c3a2:	6878      	ldr	r0, [r7, #4]
 800c3a4:	f000 fab1 	bl	800c90a <USBD_CtlError>
            err++;
 800c3a8:	7afb      	ldrb	r3, [r7, #11]
 800c3aa:	3301      	adds	r3, #1
 800c3ac:	72fb      	strb	r3, [r7, #11]
          break;
 800c3ae:	e06f      	b.n	800c490 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c3b6:	68db      	ldr	r3, [r3, #12]
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	d00b      	beq.n	800c3d4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c3c2:	68db      	ldr	r3, [r3, #12]
 800c3c4:	687a      	ldr	r2, [r7, #4]
 800c3c6:	7c12      	ldrb	r2, [r2, #16]
 800c3c8:	f107 0108 	add.w	r1, r7, #8
 800c3cc:	4610      	mov	r0, r2
 800c3ce:	4798      	blx	r3
 800c3d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c3d2:	e05d      	b.n	800c490 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c3d4:	6839      	ldr	r1, [r7, #0]
 800c3d6:	6878      	ldr	r0, [r7, #4]
 800c3d8:	f000 fa97 	bl	800c90a <USBD_CtlError>
            err++;
 800c3dc:	7afb      	ldrb	r3, [r7, #11]
 800c3de:	3301      	adds	r3, #1
 800c3e0:	72fb      	strb	r3, [r7, #11]
          break;
 800c3e2:	e055      	b.n	800c490 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c3ea:	691b      	ldr	r3, [r3, #16]
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	d00b      	beq.n	800c408 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c3f6:	691b      	ldr	r3, [r3, #16]
 800c3f8:	687a      	ldr	r2, [r7, #4]
 800c3fa:	7c12      	ldrb	r2, [r2, #16]
 800c3fc:	f107 0108 	add.w	r1, r7, #8
 800c400:	4610      	mov	r0, r2
 800c402:	4798      	blx	r3
 800c404:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c406:	e043      	b.n	800c490 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c408:	6839      	ldr	r1, [r7, #0]
 800c40a:	6878      	ldr	r0, [r7, #4]
 800c40c:	f000 fa7d 	bl	800c90a <USBD_CtlError>
            err++;
 800c410:	7afb      	ldrb	r3, [r7, #11]
 800c412:	3301      	adds	r3, #1
 800c414:	72fb      	strb	r3, [r7, #11]
          break;
 800c416:	e03b      	b.n	800c490 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c41e:	695b      	ldr	r3, [r3, #20]
 800c420:	2b00      	cmp	r3, #0
 800c422:	d00b      	beq.n	800c43c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c42a:	695b      	ldr	r3, [r3, #20]
 800c42c:	687a      	ldr	r2, [r7, #4]
 800c42e:	7c12      	ldrb	r2, [r2, #16]
 800c430:	f107 0108 	add.w	r1, r7, #8
 800c434:	4610      	mov	r0, r2
 800c436:	4798      	blx	r3
 800c438:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c43a:	e029      	b.n	800c490 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c43c:	6839      	ldr	r1, [r7, #0]
 800c43e:	6878      	ldr	r0, [r7, #4]
 800c440:	f000 fa63 	bl	800c90a <USBD_CtlError>
            err++;
 800c444:	7afb      	ldrb	r3, [r7, #11]
 800c446:	3301      	adds	r3, #1
 800c448:	72fb      	strb	r3, [r7, #11]
          break;
 800c44a:	e021      	b.n	800c490 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c452:	699b      	ldr	r3, [r3, #24]
 800c454:	2b00      	cmp	r3, #0
 800c456:	d00b      	beq.n	800c470 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c45e:	699b      	ldr	r3, [r3, #24]
 800c460:	687a      	ldr	r2, [r7, #4]
 800c462:	7c12      	ldrb	r2, [r2, #16]
 800c464:	f107 0108 	add.w	r1, r7, #8
 800c468:	4610      	mov	r0, r2
 800c46a:	4798      	blx	r3
 800c46c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c46e:	e00f      	b.n	800c490 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c470:	6839      	ldr	r1, [r7, #0]
 800c472:	6878      	ldr	r0, [r7, #4]
 800c474:	f000 fa49 	bl	800c90a <USBD_CtlError>
            err++;
 800c478:	7afb      	ldrb	r3, [r7, #11]
 800c47a:	3301      	adds	r3, #1
 800c47c:	72fb      	strb	r3, [r7, #11]
          break;
 800c47e:	e007      	b.n	800c490 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800c480:	6839      	ldr	r1, [r7, #0]
 800c482:	6878      	ldr	r0, [r7, #4]
 800c484:	f000 fa41 	bl	800c90a <USBD_CtlError>
          err++;
 800c488:	7afb      	ldrb	r3, [r7, #11]
 800c48a:	3301      	adds	r3, #1
 800c48c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800c48e:	bf00      	nop
      }
      break;
 800c490:	e037      	b.n	800c502 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	7c1b      	ldrb	r3, [r3, #16]
 800c496:	2b00      	cmp	r3, #0
 800c498:	d109      	bne.n	800c4ae <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c4a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c4a2:	f107 0208 	add.w	r2, r7, #8
 800c4a6:	4610      	mov	r0, r2
 800c4a8:	4798      	blx	r3
 800c4aa:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c4ac:	e029      	b.n	800c502 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800c4ae:	6839      	ldr	r1, [r7, #0]
 800c4b0:	6878      	ldr	r0, [r7, #4]
 800c4b2:	f000 fa2a 	bl	800c90a <USBD_CtlError>
        err++;
 800c4b6:	7afb      	ldrb	r3, [r7, #11]
 800c4b8:	3301      	adds	r3, #1
 800c4ba:	72fb      	strb	r3, [r7, #11]
      break;
 800c4bc:	e021      	b.n	800c502 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	7c1b      	ldrb	r3, [r3, #16]
 800c4c2:	2b00      	cmp	r3, #0
 800c4c4:	d10d      	bne.n	800c4e2 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c4cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c4ce:	f107 0208 	add.w	r2, r7, #8
 800c4d2:	4610      	mov	r0, r2
 800c4d4:	4798      	blx	r3
 800c4d6:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800c4d8:	68fb      	ldr	r3, [r7, #12]
 800c4da:	3301      	adds	r3, #1
 800c4dc:	2207      	movs	r2, #7
 800c4de:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c4e0:	e00f      	b.n	800c502 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800c4e2:	6839      	ldr	r1, [r7, #0]
 800c4e4:	6878      	ldr	r0, [r7, #4]
 800c4e6:	f000 fa10 	bl	800c90a <USBD_CtlError>
        err++;
 800c4ea:	7afb      	ldrb	r3, [r7, #11]
 800c4ec:	3301      	adds	r3, #1
 800c4ee:	72fb      	strb	r3, [r7, #11]
      break;
 800c4f0:	e007      	b.n	800c502 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800c4f2:	6839      	ldr	r1, [r7, #0]
 800c4f4:	6878      	ldr	r0, [r7, #4]
 800c4f6:	f000 fa08 	bl	800c90a <USBD_CtlError>
      err++;
 800c4fa:	7afb      	ldrb	r3, [r7, #11]
 800c4fc:	3301      	adds	r3, #1
 800c4fe:	72fb      	strb	r3, [r7, #11]
      break;
 800c500:	bf00      	nop
  }

  if (err != 0U)
 800c502:	7afb      	ldrb	r3, [r7, #11]
 800c504:	2b00      	cmp	r3, #0
 800c506:	d11e      	bne.n	800c546 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800c508:	683b      	ldr	r3, [r7, #0]
 800c50a:	88db      	ldrh	r3, [r3, #6]
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	d016      	beq.n	800c53e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800c510:	893b      	ldrh	r3, [r7, #8]
 800c512:	2b00      	cmp	r3, #0
 800c514:	d00e      	beq.n	800c534 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800c516:	683b      	ldr	r3, [r7, #0]
 800c518:	88da      	ldrh	r2, [r3, #6]
 800c51a:	893b      	ldrh	r3, [r7, #8]
 800c51c:	4293      	cmp	r3, r2
 800c51e:	bf28      	it	cs
 800c520:	4613      	movcs	r3, r2
 800c522:	b29b      	uxth	r3, r3
 800c524:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800c526:	893b      	ldrh	r3, [r7, #8]
 800c528:	461a      	mov	r2, r3
 800c52a:	68f9      	ldr	r1, [r7, #12]
 800c52c:	6878      	ldr	r0, [r7, #4]
 800c52e:	f000 fa69 	bl	800ca04 <USBD_CtlSendData>
 800c532:	e009      	b.n	800c548 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800c534:	6839      	ldr	r1, [r7, #0]
 800c536:	6878      	ldr	r0, [r7, #4]
 800c538:	f000 f9e7 	bl	800c90a <USBD_CtlError>
 800c53c:	e004      	b.n	800c548 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800c53e:	6878      	ldr	r0, [r7, #4]
 800c540:	f000 fa9d 	bl	800ca7e <USBD_CtlSendStatus>
 800c544:	e000      	b.n	800c548 <USBD_GetDescriptor+0x2cc>
    return;
 800c546:	bf00      	nop
  }
}
 800c548:	3710      	adds	r7, #16
 800c54a:	46bd      	mov	sp, r7
 800c54c:	bd80      	pop	{r7, pc}
 800c54e:	bf00      	nop

0800c550 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c550:	b580      	push	{r7, lr}
 800c552:	b084      	sub	sp, #16
 800c554:	af00      	add	r7, sp, #0
 800c556:	6078      	str	r0, [r7, #4]
 800c558:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800c55a:	683b      	ldr	r3, [r7, #0]
 800c55c:	889b      	ldrh	r3, [r3, #4]
 800c55e:	2b00      	cmp	r3, #0
 800c560:	d131      	bne.n	800c5c6 <USBD_SetAddress+0x76>
 800c562:	683b      	ldr	r3, [r7, #0]
 800c564:	88db      	ldrh	r3, [r3, #6]
 800c566:	2b00      	cmp	r3, #0
 800c568:	d12d      	bne.n	800c5c6 <USBD_SetAddress+0x76>
 800c56a:	683b      	ldr	r3, [r7, #0]
 800c56c:	885b      	ldrh	r3, [r3, #2]
 800c56e:	2b7f      	cmp	r3, #127	@ 0x7f
 800c570:	d829      	bhi.n	800c5c6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800c572:	683b      	ldr	r3, [r7, #0]
 800c574:	885b      	ldrh	r3, [r3, #2]
 800c576:	b2db      	uxtb	r3, r3
 800c578:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c57c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c584:	b2db      	uxtb	r3, r3
 800c586:	2b03      	cmp	r3, #3
 800c588:	d104      	bne.n	800c594 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800c58a:	6839      	ldr	r1, [r7, #0]
 800c58c:	6878      	ldr	r0, [r7, #4]
 800c58e:	f000 f9bc 	bl	800c90a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c592:	e01d      	b.n	800c5d0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	7bfa      	ldrb	r2, [r7, #15]
 800c598:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800c59c:	7bfb      	ldrb	r3, [r7, #15]
 800c59e:	4619      	mov	r1, r3
 800c5a0:	6878      	ldr	r0, [r7, #4]
 800c5a2:	f003 ff0e 	bl	80103c2 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800c5a6:	6878      	ldr	r0, [r7, #4]
 800c5a8:	f000 fa69 	bl	800ca7e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800c5ac:	7bfb      	ldrb	r3, [r7, #15]
 800c5ae:	2b00      	cmp	r3, #0
 800c5b0:	d004      	beq.n	800c5bc <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	2202      	movs	r2, #2
 800c5b6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c5ba:	e009      	b.n	800c5d0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	2201      	movs	r2, #1
 800c5c0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c5c4:	e004      	b.n	800c5d0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800c5c6:	6839      	ldr	r1, [r7, #0]
 800c5c8:	6878      	ldr	r0, [r7, #4]
 800c5ca:	f000 f99e 	bl	800c90a <USBD_CtlError>
  }
}
 800c5ce:	bf00      	nop
 800c5d0:	bf00      	nop
 800c5d2:	3710      	adds	r7, #16
 800c5d4:	46bd      	mov	sp, r7
 800c5d6:	bd80      	pop	{r7, pc}

0800c5d8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c5d8:	b580      	push	{r7, lr}
 800c5da:	b084      	sub	sp, #16
 800c5dc:	af00      	add	r7, sp, #0
 800c5de:	6078      	str	r0, [r7, #4]
 800c5e0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c5e2:	2300      	movs	r3, #0
 800c5e4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800c5e6:	683b      	ldr	r3, [r7, #0]
 800c5e8:	885b      	ldrh	r3, [r3, #2]
 800c5ea:	b2da      	uxtb	r2, r3
 800c5ec:	4b4e      	ldr	r3, [pc, #312]	@ (800c728 <USBD_SetConfig+0x150>)
 800c5ee:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800c5f0:	4b4d      	ldr	r3, [pc, #308]	@ (800c728 <USBD_SetConfig+0x150>)
 800c5f2:	781b      	ldrb	r3, [r3, #0]
 800c5f4:	2b01      	cmp	r3, #1
 800c5f6:	d905      	bls.n	800c604 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800c5f8:	6839      	ldr	r1, [r7, #0]
 800c5fa:	6878      	ldr	r0, [r7, #4]
 800c5fc:	f000 f985 	bl	800c90a <USBD_CtlError>
    return USBD_FAIL;
 800c600:	2303      	movs	r3, #3
 800c602:	e08c      	b.n	800c71e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c60a:	b2db      	uxtb	r3, r3
 800c60c:	2b02      	cmp	r3, #2
 800c60e:	d002      	beq.n	800c616 <USBD_SetConfig+0x3e>
 800c610:	2b03      	cmp	r3, #3
 800c612:	d029      	beq.n	800c668 <USBD_SetConfig+0x90>
 800c614:	e075      	b.n	800c702 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800c616:	4b44      	ldr	r3, [pc, #272]	@ (800c728 <USBD_SetConfig+0x150>)
 800c618:	781b      	ldrb	r3, [r3, #0]
 800c61a:	2b00      	cmp	r3, #0
 800c61c:	d020      	beq.n	800c660 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800c61e:	4b42      	ldr	r3, [pc, #264]	@ (800c728 <USBD_SetConfig+0x150>)
 800c620:	781b      	ldrb	r3, [r3, #0]
 800c622:	461a      	mov	r2, r3
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c628:	4b3f      	ldr	r3, [pc, #252]	@ (800c728 <USBD_SetConfig+0x150>)
 800c62a:	781b      	ldrb	r3, [r3, #0]
 800c62c:	4619      	mov	r1, r3
 800c62e:	6878      	ldr	r0, [r7, #4]
 800c630:	f7fe ffe4 	bl	800b5fc <USBD_SetClassConfig>
 800c634:	4603      	mov	r3, r0
 800c636:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800c638:	7bfb      	ldrb	r3, [r7, #15]
 800c63a:	2b00      	cmp	r3, #0
 800c63c:	d008      	beq.n	800c650 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800c63e:	6839      	ldr	r1, [r7, #0]
 800c640:	6878      	ldr	r0, [r7, #4]
 800c642:	f000 f962 	bl	800c90a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	2202      	movs	r2, #2
 800c64a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c64e:	e065      	b.n	800c71c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800c650:	6878      	ldr	r0, [r7, #4]
 800c652:	f000 fa14 	bl	800ca7e <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	2203      	movs	r2, #3
 800c65a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800c65e:	e05d      	b.n	800c71c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800c660:	6878      	ldr	r0, [r7, #4]
 800c662:	f000 fa0c 	bl	800ca7e <USBD_CtlSendStatus>
      break;
 800c666:	e059      	b.n	800c71c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800c668:	4b2f      	ldr	r3, [pc, #188]	@ (800c728 <USBD_SetConfig+0x150>)
 800c66a:	781b      	ldrb	r3, [r3, #0]
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	d112      	bne.n	800c696 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	2202      	movs	r2, #2
 800c674:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800c678:	4b2b      	ldr	r3, [pc, #172]	@ (800c728 <USBD_SetConfig+0x150>)
 800c67a:	781b      	ldrb	r3, [r3, #0]
 800c67c:	461a      	mov	r2, r3
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c682:	4b29      	ldr	r3, [pc, #164]	@ (800c728 <USBD_SetConfig+0x150>)
 800c684:	781b      	ldrb	r3, [r3, #0]
 800c686:	4619      	mov	r1, r3
 800c688:	6878      	ldr	r0, [r7, #4]
 800c68a:	f7fe ffd3 	bl	800b634 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800c68e:	6878      	ldr	r0, [r7, #4]
 800c690:	f000 f9f5 	bl	800ca7e <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c694:	e042      	b.n	800c71c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800c696:	4b24      	ldr	r3, [pc, #144]	@ (800c728 <USBD_SetConfig+0x150>)
 800c698:	781b      	ldrb	r3, [r3, #0]
 800c69a:	461a      	mov	r2, r3
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	685b      	ldr	r3, [r3, #4]
 800c6a0:	429a      	cmp	r2, r3
 800c6a2:	d02a      	beq.n	800c6fa <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	685b      	ldr	r3, [r3, #4]
 800c6a8:	b2db      	uxtb	r3, r3
 800c6aa:	4619      	mov	r1, r3
 800c6ac:	6878      	ldr	r0, [r7, #4]
 800c6ae:	f7fe ffc1 	bl	800b634 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800c6b2:	4b1d      	ldr	r3, [pc, #116]	@ (800c728 <USBD_SetConfig+0x150>)
 800c6b4:	781b      	ldrb	r3, [r3, #0]
 800c6b6:	461a      	mov	r2, r3
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c6bc:	4b1a      	ldr	r3, [pc, #104]	@ (800c728 <USBD_SetConfig+0x150>)
 800c6be:	781b      	ldrb	r3, [r3, #0]
 800c6c0:	4619      	mov	r1, r3
 800c6c2:	6878      	ldr	r0, [r7, #4]
 800c6c4:	f7fe ff9a 	bl	800b5fc <USBD_SetClassConfig>
 800c6c8:	4603      	mov	r3, r0
 800c6ca:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800c6cc:	7bfb      	ldrb	r3, [r7, #15]
 800c6ce:	2b00      	cmp	r3, #0
 800c6d0:	d00f      	beq.n	800c6f2 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800c6d2:	6839      	ldr	r1, [r7, #0]
 800c6d4:	6878      	ldr	r0, [r7, #4]
 800c6d6:	f000 f918 	bl	800c90a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	685b      	ldr	r3, [r3, #4]
 800c6de:	b2db      	uxtb	r3, r3
 800c6e0:	4619      	mov	r1, r3
 800c6e2:	6878      	ldr	r0, [r7, #4]
 800c6e4:	f7fe ffa6 	bl	800b634 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	2202      	movs	r2, #2
 800c6ec:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800c6f0:	e014      	b.n	800c71c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800c6f2:	6878      	ldr	r0, [r7, #4]
 800c6f4:	f000 f9c3 	bl	800ca7e <USBD_CtlSendStatus>
      break;
 800c6f8:	e010      	b.n	800c71c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800c6fa:	6878      	ldr	r0, [r7, #4]
 800c6fc:	f000 f9bf 	bl	800ca7e <USBD_CtlSendStatus>
      break;
 800c700:	e00c      	b.n	800c71c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800c702:	6839      	ldr	r1, [r7, #0]
 800c704:	6878      	ldr	r0, [r7, #4]
 800c706:	f000 f900 	bl	800c90a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c70a:	4b07      	ldr	r3, [pc, #28]	@ (800c728 <USBD_SetConfig+0x150>)
 800c70c:	781b      	ldrb	r3, [r3, #0]
 800c70e:	4619      	mov	r1, r3
 800c710:	6878      	ldr	r0, [r7, #4]
 800c712:	f7fe ff8f 	bl	800b634 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800c716:	2303      	movs	r3, #3
 800c718:	73fb      	strb	r3, [r7, #15]
      break;
 800c71a:	bf00      	nop
  }

  return ret;
 800c71c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c71e:	4618      	mov	r0, r3
 800c720:	3710      	adds	r7, #16
 800c722:	46bd      	mov	sp, r7
 800c724:	bd80      	pop	{r7, pc}
 800c726:	bf00      	nop
 800c728:	20000a11 	.word	0x20000a11

0800c72c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c72c:	b580      	push	{r7, lr}
 800c72e:	b082      	sub	sp, #8
 800c730:	af00      	add	r7, sp, #0
 800c732:	6078      	str	r0, [r7, #4]
 800c734:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800c736:	683b      	ldr	r3, [r7, #0]
 800c738:	88db      	ldrh	r3, [r3, #6]
 800c73a:	2b01      	cmp	r3, #1
 800c73c:	d004      	beq.n	800c748 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800c73e:	6839      	ldr	r1, [r7, #0]
 800c740:	6878      	ldr	r0, [r7, #4]
 800c742:	f000 f8e2 	bl	800c90a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800c746:	e023      	b.n	800c790 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c74e:	b2db      	uxtb	r3, r3
 800c750:	2b02      	cmp	r3, #2
 800c752:	dc02      	bgt.n	800c75a <USBD_GetConfig+0x2e>
 800c754:	2b00      	cmp	r3, #0
 800c756:	dc03      	bgt.n	800c760 <USBD_GetConfig+0x34>
 800c758:	e015      	b.n	800c786 <USBD_GetConfig+0x5a>
 800c75a:	2b03      	cmp	r3, #3
 800c75c:	d00b      	beq.n	800c776 <USBD_GetConfig+0x4a>
 800c75e:	e012      	b.n	800c786 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	2200      	movs	r2, #0
 800c764:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	3308      	adds	r3, #8
 800c76a:	2201      	movs	r2, #1
 800c76c:	4619      	mov	r1, r3
 800c76e:	6878      	ldr	r0, [r7, #4]
 800c770:	f000 f948 	bl	800ca04 <USBD_CtlSendData>
        break;
 800c774:	e00c      	b.n	800c790 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	3304      	adds	r3, #4
 800c77a:	2201      	movs	r2, #1
 800c77c:	4619      	mov	r1, r3
 800c77e:	6878      	ldr	r0, [r7, #4]
 800c780:	f000 f940 	bl	800ca04 <USBD_CtlSendData>
        break;
 800c784:	e004      	b.n	800c790 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800c786:	6839      	ldr	r1, [r7, #0]
 800c788:	6878      	ldr	r0, [r7, #4]
 800c78a:	f000 f8be 	bl	800c90a <USBD_CtlError>
        break;
 800c78e:	bf00      	nop
}
 800c790:	bf00      	nop
 800c792:	3708      	adds	r7, #8
 800c794:	46bd      	mov	sp, r7
 800c796:	bd80      	pop	{r7, pc}

0800c798 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c798:	b580      	push	{r7, lr}
 800c79a:	b082      	sub	sp, #8
 800c79c:	af00      	add	r7, sp, #0
 800c79e:	6078      	str	r0, [r7, #4]
 800c7a0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c7a8:	b2db      	uxtb	r3, r3
 800c7aa:	3b01      	subs	r3, #1
 800c7ac:	2b02      	cmp	r3, #2
 800c7ae:	d81e      	bhi.n	800c7ee <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800c7b0:	683b      	ldr	r3, [r7, #0]
 800c7b2:	88db      	ldrh	r3, [r3, #6]
 800c7b4:	2b02      	cmp	r3, #2
 800c7b6:	d004      	beq.n	800c7c2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800c7b8:	6839      	ldr	r1, [r7, #0]
 800c7ba:	6878      	ldr	r0, [r7, #4]
 800c7bc:	f000 f8a5 	bl	800c90a <USBD_CtlError>
        break;
 800c7c0:	e01a      	b.n	800c7f8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	2201      	movs	r2, #1
 800c7c6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800c7ce:	2b00      	cmp	r3, #0
 800c7d0:	d005      	beq.n	800c7de <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	68db      	ldr	r3, [r3, #12]
 800c7d6:	f043 0202 	orr.w	r2, r3, #2
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	330c      	adds	r3, #12
 800c7e2:	2202      	movs	r2, #2
 800c7e4:	4619      	mov	r1, r3
 800c7e6:	6878      	ldr	r0, [r7, #4]
 800c7e8:	f000 f90c 	bl	800ca04 <USBD_CtlSendData>
      break;
 800c7ec:	e004      	b.n	800c7f8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800c7ee:	6839      	ldr	r1, [r7, #0]
 800c7f0:	6878      	ldr	r0, [r7, #4]
 800c7f2:	f000 f88a 	bl	800c90a <USBD_CtlError>
      break;
 800c7f6:	bf00      	nop
  }
}
 800c7f8:	bf00      	nop
 800c7fa:	3708      	adds	r7, #8
 800c7fc:	46bd      	mov	sp, r7
 800c7fe:	bd80      	pop	{r7, pc}

0800c800 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c800:	b580      	push	{r7, lr}
 800c802:	b082      	sub	sp, #8
 800c804:	af00      	add	r7, sp, #0
 800c806:	6078      	str	r0, [r7, #4]
 800c808:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c80a:	683b      	ldr	r3, [r7, #0]
 800c80c:	885b      	ldrh	r3, [r3, #2]
 800c80e:	2b01      	cmp	r3, #1
 800c810:	d107      	bne.n	800c822 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	2201      	movs	r2, #1
 800c816:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800c81a:	6878      	ldr	r0, [r7, #4]
 800c81c:	f000 f92f 	bl	800ca7e <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800c820:	e013      	b.n	800c84a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800c822:	683b      	ldr	r3, [r7, #0]
 800c824:	885b      	ldrh	r3, [r3, #2]
 800c826:	2b02      	cmp	r3, #2
 800c828:	d10b      	bne.n	800c842 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800c82a:	683b      	ldr	r3, [r7, #0]
 800c82c:	889b      	ldrh	r3, [r3, #4]
 800c82e:	0a1b      	lsrs	r3, r3, #8
 800c830:	b29b      	uxth	r3, r3
 800c832:	b2da      	uxtb	r2, r3
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800c83a:	6878      	ldr	r0, [r7, #4]
 800c83c:	f000 f91f 	bl	800ca7e <USBD_CtlSendStatus>
}
 800c840:	e003      	b.n	800c84a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800c842:	6839      	ldr	r1, [r7, #0]
 800c844:	6878      	ldr	r0, [r7, #4]
 800c846:	f000 f860 	bl	800c90a <USBD_CtlError>
}
 800c84a:	bf00      	nop
 800c84c:	3708      	adds	r7, #8
 800c84e:	46bd      	mov	sp, r7
 800c850:	bd80      	pop	{r7, pc}

0800c852 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c852:	b580      	push	{r7, lr}
 800c854:	b082      	sub	sp, #8
 800c856:	af00      	add	r7, sp, #0
 800c858:	6078      	str	r0, [r7, #4]
 800c85a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c862:	b2db      	uxtb	r3, r3
 800c864:	3b01      	subs	r3, #1
 800c866:	2b02      	cmp	r3, #2
 800c868:	d80b      	bhi.n	800c882 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c86a:	683b      	ldr	r3, [r7, #0]
 800c86c:	885b      	ldrh	r3, [r3, #2]
 800c86e:	2b01      	cmp	r3, #1
 800c870:	d10c      	bne.n	800c88c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	2200      	movs	r2, #0
 800c876:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800c87a:	6878      	ldr	r0, [r7, #4]
 800c87c:	f000 f8ff 	bl	800ca7e <USBD_CtlSendStatus>
      }
      break;
 800c880:	e004      	b.n	800c88c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800c882:	6839      	ldr	r1, [r7, #0]
 800c884:	6878      	ldr	r0, [r7, #4]
 800c886:	f000 f840 	bl	800c90a <USBD_CtlError>
      break;
 800c88a:	e000      	b.n	800c88e <USBD_ClrFeature+0x3c>
      break;
 800c88c:	bf00      	nop
  }
}
 800c88e:	bf00      	nop
 800c890:	3708      	adds	r7, #8
 800c892:	46bd      	mov	sp, r7
 800c894:	bd80      	pop	{r7, pc}

0800c896 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800c896:	b580      	push	{r7, lr}
 800c898:	b084      	sub	sp, #16
 800c89a:	af00      	add	r7, sp, #0
 800c89c:	6078      	str	r0, [r7, #4]
 800c89e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800c8a0:	683b      	ldr	r3, [r7, #0]
 800c8a2:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800c8a4:	68fb      	ldr	r3, [r7, #12]
 800c8a6:	781a      	ldrb	r2, [r3, #0]
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800c8ac:	68fb      	ldr	r3, [r7, #12]
 800c8ae:	3301      	adds	r3, #1
 800c8b0:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800c8b2:	68fb      	ldr	r3, [r7, #12]
 800c8b4:	781a      	ldrb	r2, [r3, #0]
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800c8ba:	68fb      	ldr	r3, [r7, #12]
 800c8bc:	3301      	adds	r3, #1
 800c8be:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800c8c0:	68f8      	ldr	r0, [r7, #12]
 800c8c2:	f7ff fa41 	bl	800bd48 <SWAPBYTE>
 800c8c6:	4603      	mov	r3, r0
 800c8c8:	461a      	mov	r2, r3
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800c8ce:	68fb      	ldr	r3, [r7, #12]
 800c8d0:	3301      	adds	r3, #1
 800c8d2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c8d4:	68fb      	ldr	r3, [r7, #12]
 800c8d6:	3301      	adds	r3, #1
 800c8d8:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800c8da:	68f8      	ldr	r0, [r7, #12]
 800c8dc:	f7ff fa34 	bl	800bd48 <SWAPBYTE>
 800c8e0:	4603      	mov	r3, r0
 800c8e2:	461a      	mov	r2, r3
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800c8e8:	68fb      	ldr	r3, [r7, #12]
 800c8ea:	3301      	adds	r3, #1
 800c8ec:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c8ee:	68fb      	ldr	r3, [r7, #12]
 800c8f0:	3301      	adds	r3, #1
 800c8f2:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800c8f4:	68f8      	ldr	r0, [r7, #12]
 800c8f6:	f7ff fa27 	bl	800bd48 <SWAPBYTE>
 800c8fa:	4603      	mov	r3, r0
 800c8fc:	461a      	mov	r2, r3
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	80da      	strh	r2, [r3, #6]
}
 800c902:	bf00      	nop
 800c904:	3710      	adds	r7, #16
 800c906:	46bd      	mov	sp, r7
 800c908:	bd80      	pop	{r7, pc}

0800c90a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c90a:	b580      	push	{r7, lr}
 800c90c:	b082      	sub	sp, #8
 800c90e:	af00      	add	r7, sp, #0
 800c910:	6078      	str	r0, [r7, #4]
 800c912:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800c914:	2180      	movs	r1, #128	@ 0x80
 800c916:	6878      	ldr	r0, [r7, #4]
 800c918:	f003 fce9 	bl	80102ee <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800c91c:	2100      	movs	r1, #0
 800c91e:	6878      	ldr	r0, [r7, #4]
 800c920:	f003 fce5 	bl	80102ee <USBD_LL_StallEP>
}
 800c924:	bf00      	nop
 800c926:	3708      	adds	r7, #8
 800c928:	46bd      	mov	sp, r7
 800c92a:	bd80      	pop	{r7, pc}

0800c92c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800c92c:	b580      	push	{r7, lr}
 800c92e:	b086      	sub	sp, #24
 800c930:	af00      	add	r7, sp, #0
 800c932:	60f8      	str	r0, [r7, #12]
 800c934:	60b9      	str	r1, [r7, #8]
 800c936:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800c938:	2300      	movs	r3, #0
 800c93a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800c93c:	68fb      	ldr	r3, [r7, #12]
 800c93e:	2b00      	cmp	r3, #0
 800c940:	d042      	beq.n	800c9c8 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800c942:	68fb      	ldr	r3, [r7, #12]
 800c944:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800c946:	6938      	ldr	r0, [r7, #16]
 800c948:	f000 f842 	bl	800c9d0 <USBD_GetLen>
 800c94c:	4603      	mov	r3, r0
 800c94e:	3301      	adds	r3, #1
 800c950:	005b      	lsls	r3, r3, #1
 800c952:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c956:	d808      	bhi.n	800c96a <USBD_GetString+0x3e>
 800c958:	6938      	ldr	r0, [r7, #16]
 800c95a:	f000 f839 	bl	800c9d0 <USBD_GetLen>
 800c95e:	4603      	mov	r3, r0
 800c960:	3301      	adds	r3, #1
 800c962:	b29b      	uxth	r3, r3
 800c964:	005b      	lsls	r3, r3, #1
 800c966:	b29a      	uxth	r2, r3
 800c968:	e001      	b.n	800c96e <USBD_GetString+0x42>
 800c96a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800c972:	7dfb      	ldrb	r3, [r7, #23]
 800c974:	68ba      	ldr	r2, [r7, #8]
 800c976:	4413      	add	r3, r2
 800c978:	687a      	ldr	r2, [r7, #4]
 800c97a:	7812      	ldrb	r2, [r2, #0]
 800c97c:	701a      	strb	r2, [r3, #0]
  idx++;
 800c97e:	7dfb      	ldrb	r3, [r7, #23]
 800c980:	3301      	adds	r3, #1
 800c982:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800c984:	7dfb      	ldrb	r3, [r7, #23]
 800c986:	68ba      	ldr	r2, [r7, #8]
 800c988:	4413      	add	r3, r2
 800c98a:	2203      	movs	r2, #3
 800c98c:	701a      	strb	r2, [r3, #0]
  idx++;
 800c98e:	7dfb      	ldrb	r3, [r7, #23]
 800c990:	3301      	adds	r3, #1
 800c992:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800c994:	e013      	b.n	800c9be <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800c996:	7dfb      	ldrb	r3, [r7, #23]
 800c998:	68ba      	ldr	r2, [r7, #8]
 800c99a:	4413      	add	r3, r2
 800c99c:	693a      	ldr	r2, [r7, #16]
 800c99e:	7812      	ldrb	r2, [r2, #0]
 800c9a0:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800c9a2:	693b      	ldr	r3, [r7, #16]
 800c9a4:	3301      	adds	r3, #1
 800c9a6:	613b      	str	r3, [r7, #16]
    idx++;
 800c9a8:	7dfb      	ldrb	r3, [r7, #23]
 800c9aa:	3301      	adds	r3, #1
 800c9ac:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800c9ae:	7dfb      	ldrb	r3, [r7, #23]
 800c9b0:	68ba      	ldr	r2, [r7, #8]
 800c9b2:	4413      	add	r3, r2
 800c9b4:	2200      	movs	r2, #0
 800c9b6:	701a      	strb	r2, [r3, #0]
    idx++;
 800c9b8:	7dfb      	ldrb	r3, [r7, #23]
 800c9ba:	3301      	adds	r3, #1
 800c9bc:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800c9be:	693b      	ldr	r3, [r7, #16]
 800c9c0:	781b      	ldrb	r3, [r3, #0]
 800c9c2:	2b00      	cmp	r3, #0
 800c9c4:	d1e7      	bne.n	800c996 <USBD_GetString+0x6a>
 800c9c6:	e000      	b.n	800c9ca <USBD_GetString+0x9e>
    return;
 800c9c8:	bf00      	nop
  }
}
 800c9ca:	3718      	adds	r7, #24
 800c9cc:	46bd      	mov	sp, r7
 800c9ce:	bd80      	pop	{r7, pc}

0800c9d0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800c9d0:	b480      	push	{r7}
 800c9d2:	b085      	sub	sp, #20
 800c9d4:	af00      	add	r7, sp, #0
 800c9d6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800c9d8:	2300      	movs	r3, #0
 800c9da:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800c9e0:	e005      	b.n	800c9ee <USBD_GetLen+0x1e>
  {
    len++;
 800c9e2:	7bfb      	ldrb	r3, [r7, #15]
 800c9e4:	3301      	adds	r3, #1
 800c9e6:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800c9e8:	68bb      	ldr	r3, [r7, #8]
 800c9ea:	3301      	adds	r3, #1
 800c9ec:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800c9ee:	68bb      	ldr	r3, [r7, #8]
 800c9f0:	781b      	ldrb	r3, [r3, #0]
 800c9f2:	2b00      	cmp	r3, #0
 800c9f4:	d1f5      	bne.n	800c9e2 <USBD_GetLen+0x12>
  }

  return len;
 800c9f6:	7bfb      	ldrb	r3, [r7, #15]
}
 800c9f8:	4618      	mov	r0, r3
 800c9fa:	3714      	adds	r7, #20
 800c9fc:	46bd      	mov	sp, r7
 800c9fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca02:	4770      	bx	lr

0800ca04 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800ca04:	b580      	push	{r7, lr}
 800ca06:	b084      	sub	sp, #16
 800ca08:	af00      	add	r7, sp, #0
 800ca0a:	60f8      	str	r0, [r7, #12]
 800ca0c:	60b9      	str	r1, [r7, #8]
 800ca0e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800ca10:	68fb      	ldr	r3, [r7, #12]
 800ca12:	2202      	movs	r2, #2
 800ca14:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800ca18:	68fb      	ldr	r3, [r7, #12]
 800ca1a:	687a      	ldr	r2, [r7, #4]
 800ca1c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800ca1e:	68fb      	ldr	r3, [r7, #12]
 800ca20:	687a      	ldr	r2, [r7, #4]
 800ca22:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	68ba      	ldr	r2, [r7, #8]
 800ca28:	2100      	movs	r1, #0
 800ca2a:	68f8      	ldr	r0, [r7, #12]
 800ca2c:	f003 fce8 	bl	8010400 <USBD_LL_Transmit>

  return USBD_OK;
 800ca30:	2300      	movs	r3, #0
}
 800ca32:	4618      	mov	r0, r3
 800ca34:	3710      	adds	r7, #16
 800ca36:	46bd      	mov	sp, r7
 800ca38:	bd80      	pop	{r7, pc}

0800ca3a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800ca3a:	b580      	push	{r7, lr}
 800ca3c:	b084      	sub	sp, #16
 800ca3e:	af00      	add	r7, sp, #0
 800ca40:	60f8      	str	r0, [r7, #12]
 800ca42:	60b9      	str	r1, [r7, #8]
 800ca44:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	68ba      	ldr	r2, [r7, #8]
 800ca4a:	2100      	movs	r1, #0
 800ca4c:	68f8      	ldr	r0, [r7, #12]
 800ca4e:	f003 fcd7 	bl	8010400 <USBD_LL_Transmit>

  return USBD_OK;
 800ca52:	2300      	movs	r3, #0
}
 800ca54:	4618      	mov	r0, r3
 800ca56:	3710      	adds	r7, #16
 800ca58:	46bd      	mov	sp, r7
 800ca5a:	bd80      	pop	{r7, pc}

0800ca5c <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800ca5c:	b580      	push	{r7, lr}
 800ca5e:	b084      	sub	sp, #16
 800ca60:	af00      	add	r7, sp, #0
 800ca62:	60f8      	str	r0, [r7, #12]
 800ca64:	60b9      	str	r1, [r7, #8]
 800ca66:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	68ba      	ldr	r2, [r7, #8]
 800ca6c:	2100      	movs	r1, #0
 800ca6e:	68f8      	ldr	r0, [r7, #12]
 800ca70:	f003 fce7 	bl	8010442 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ca74:	2300      	movs	r3, #0
}
 800ca76:	4618      	mov	r0, r3
 800ca78:	3710      	adds	r7, #16
 800ca7a:	46bd      	mov	sp, r7
 800ca7c:	bd80      	pop	{r7, pc}

0800ca7e <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800ca7e:	b580      	push	{r7, lr}
 800ca80:	b082      	sub	sp, #8
 800ca82:	af00      	add	r7, sp, #0
 800ca84:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	2204      	movs	r2, #4
 800ca8a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800ca8e:	2300      	movs	r3, #0
 800ca90:	2200      	movs	r2, #0
 800ca92:	2100      	movs	r1, #0
 800ca94:	6878      	ldr	r0, [r7, #4]
 800ca96:	f003 fcb3 	bl	8010400 <USBD_LL_Transmit>

  return USBD_OK;
 800ca9a:	2300      	movs	r3, #0
}
 800ca9c:	4618      	mov	r0, r3
 800ca9e:	3708      	adds	r7, #8
 800caa0:	46bd      	mov	sp, r7
 800caa2:	bd80      	pop	{r7, pc}

0800caa4 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800caa4:	b580      	push	{r7, lr}
 800caa6:	b082      	sub	sp, #8
 800caa8:	af00      	add	r7, sp, #0
 800caaa:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	2205      	movs	r2, #5
 800cab0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800cab4:	2300      	movs	r3, #0
 800cab6:	2200      	movs	r2, #0
 800cab8:	2100      	movs	r1, #0
 800caba:	6878      	ldr	r0, [r7, #4]
 800cabc:	f003 fcc1 	bl	8010442 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cac0:	2300      	movs	r3, #0
}
 800cac2:	4618      	mov	r0, r3
 800cac4:	3708      	adds	r7, #8
 800cac6:	46bd      	mov	sp, r7
 800cac8:	bd80      	pop	{r7, pc}
	...

0800cacc <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800cacc:	b580      	push	{r7, lr}
 800cace:	b084      	sub	sp, #16
 800cad0:	af00      	add	r7, sp, #0
 800cad2:	4603      	mov	r3, r0
 800cad4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800cad6:	79fb      	ldrb	r3, [r7, #7]
 800cad8:	4a08      	ldr	r2, [pc, #32]	@ (800cafc <disk_status+0x30>)
 800cada:	009b      	lsls	r3, r3, #2
 800cadc:	4413      	add	r3, r2
 800cade:	685b      	ldr	r3, [r3, #4]
 800cae0:	685b      	ldr	r3, [r3, #4]
 800cae2:	79fa      	ldrb	r2, [r7, #7]
 800cae4:	4905      	ldr	r1, [pc, #20]	@ (800cafc <disk_status+0x30>)
 800cae6:	440a      	add	r2, r1
 800cae8:	7a12      	ldrb	r2, [r2, #8]
 800caea:	4610      	mov	r0, r2
 800caec:	4798      	blx	r3
 800caee:	4603      	mov	r3, r0
 800caf0:	73fb      	strb	r3, [r7, #15]
  return stat;
 800caf2:	7bfb      	ldrb	r3, [r7, #15]
}
 800caf4:	4618      	mov	r0, r3
 800caf6:	3710      	adds	r7, #16
 800caf8:	46bd      	mov	sp, r7
 800cafa:	bd80      	pop	{r7, pc}
 800cafc:	20000c6c 	.word	0x20000c6c

0800cb00 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800cb00:	b580      	push	{r7, lr}
 800cb02:	b084      	sub	sp, #16
 800cb04:	af00      	add	r7, sp, #0
 800cb06:	4603      	mov	r3, r0
 800cb08:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800cb0a:	2300      	movs	r3, #0
 800cb0c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800cb0e:	79fb      	ldrb	r3, [r7, #7]
 800cb10:	4a0e      	ldr	r2, [pc, #56]	@ (800cb4c <disk_initialize+0x4c>)
 800cb12:	5cd3      	ldrb	r3, [r2, r3]
 800cb14:	2b00      	cmp	r3, #0
 800cb16:	d114      	bne.n	800cb42 <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800cb18:	79fb      	ldrb	r3, [r7, #7]
 800cb1a:	4a0c      	ldr	r2, [pc, #48]	@ (800cb4c <disk_initialize+0x4c>)
 800cb1c:	009b      	lsls	r3, r3, #2
 800cb1e:	4413      	add	r3, r2
 800cb20:	685b      	ldr	r3, [r3, #4]
 800cb22:	681b      	ldr	r3, [r3, #0]
 800cb24:	79fa      	ldrb	r2, [r7, #7]
 800cb26:	4909      	ldr	r1, [pc, #36]	@ (800cb4c <disk_initialize+0x4c>)
 800cb28:	440a      	add	r2, r1
 800cb2a:	7a12      	ldrb	r2, [r2, #8]
 800cb2c:	4610      	mov	r0, r2
 800cb2e:	4798      	blx	r3
 800cb30:	4603      	mov	r3, r0
 800cb32:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 800cb34:	7bfb      	ldrb	r3, [r7, #15]
 800cb36:	2b00      	cmp	r3, #0
 800cb38:	d103      	bne.n	800cb42 <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 800cb3a:	79fb      	ldrb	r3, [r7, #7]
 800cb3c:	4a03      	ldr	r2, [pc, #12]	@ (800cb4c <disk_initialize+0x4c>)
 800cb3e:	2101      	movs	r1, #1
 800cb40:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 800cb42:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb44:	4618      	mov	r0, r3
 800cb46:	3710      	adds	r7, #16
 800cb48:	46bd      	mov	sp, r7
 800cb4a:	bd80      	pop	{r7, pc}
 800cb4c:	20000c6c 	.word	0x20000c6c

0800cb50 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800cb50:	b590      	push	{r4, r7, lr}
 800cb52:	b087      	sub	sp, #28
 800cb54:	af00      	add	r7, sp, #0
 800cb56:	60b9      	str	r1, [r7, #8]
 800cb58:	607a      	str	r2, [r7, #4]
 800cb5a:	603b      	str	r3, [r7, #0]
 800cb5c:	4603      	mov	r3, r0
 800cb5e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800cb60:	7bfb      	ldrb	r3, [r7, #15]
 800cb62:	4a0a      	ldr	r2, [pc, #40]	@ (800cb8c <disk_read+0x3c>)
 800cb64:	009b      	lsls	r3, r3, #2
 800cb66:	4413      	add	r3, r2
 800cb68:	685b      	ldr	r3, [r3, #4]
 800cb6a:	689c      	ldr	r4, [r3, #8]
 800cb6c:	7bfb      	ldrb	r3, [r7, #15]
 800cb6e:	4a07      	ldr	r2, [pc, #28]	@ (800cb8c <disk_read+0x3c>)
 800cb70:	4413      	add	r3, r2
 800cb72:	7a18      	ldrb	r0, [r3, #8]
 800cb74:	683b      	ldr	r3, [r7, #0]
 800cb76:	687a      	ldr	r2, [r7, #4]
 800cb78:	68b9      	ldr	r1, [r7, #8]
 800cb7a:	47a0      	blx	r4
 800cb7c:	4603      	mov	r3, r0
 800cb7e:	75fb      	strb	r3, [r7, #23]
  return res;
 800cb80:	7dfb      	ldrb	r3, [r7, #23]
}
 800cb82:	4618      	mov	r0, r3
 800cb84:	371c      	adds	r7, #28
 800cb86:	46bd      	mov	sp, r7
 800cb88:	bd90      	pop	{r4, r7, pc}
 800cb8a:	bf00      	nop
 800cb8c:	20000c6c 	.word	0x20000c6c

0800cb90 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800cb90:	b590      	push	{r4, r7, lr}
 800cb92:	b087      	sub	sp, #28
 800cb94:	af00      	add	r7, sp, #0
 800cb96:	60b9      	str	r1, [r7, #8]
 800cb98:	607a      	str	r2, [r7, #4]
 800cb9a:	603b      	str	r3, [r7, #0]
 800cb9c:	4603      	mov	r3, r0
 800cb9e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800cba0:	7bfb      	ldrb	r3, [r7, #15]
 800cba2:	4a0a      	ldr	r2, [pc, #40]	@ (800cbcc <disk_write+0x3c>)
 800cba4:	009b      	lsls	r3, r3, #2
 800cba6:	4413      	add	r3, r2
 800cba8:	685b      	ldr	r3, [r3, #4]
 800cbaa:	68dc      	ldr	r4, [r3, #12]
 800cbac:	7bfb      	ldrb	r3, [r7, #15]
 800cbae:	4a07      	ldr	r2, [pc, #28]	@ (800cbcc <disk_write+0x3c>)
 800cbb0:	4413      	add	r3, r2
 800cbb2:	7a18      	ldrb	r0, [r3, #8]
 800cbb4:	683b      	ldr	r3, [r7, #0]
 800cbb6:	687a      	ldr	r2, [r7, #4]
 800cbb8:	68b9      	ldr	r1, [r7, #8]
 800cbba:	47a0      	blx	r4
 800cbbc:	4603      	mov	r3, r0
 800cbbe:	75fb      	strb	r3, [r7, #23]
  return res;
 800cbc0:	7dfb      	ldrb	r3, [r7, #23]
}
 800cbc2:	4618      	mov	r0, r3
 800cbc4:	371c      	adds	r7, #28
 800cbc6:	46bd      	mov	sp, r7
 800cbc8:	bd90      	pop	{r4, r7, pc}
 800cbca:	bf00      	nop
 800cbcc:	20000c6c 	.word	0x20000c6c

0800cbd0 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800cbd0:	b580      	push	{r7, lr}
 800cbd2:	b084      	sub	sp, #16
 800cbd4:	af00      	add	r7, sp, #0
 800cbd6:	4603      	mov	r3, r0
 800cbd8:	603a      	str	r2, [r7, #0]
 800cbda:	71fb      	strb	r3, [r7, #7]
 800cbdc:	460b      	mov	r3, r1
 800cbde:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800cbe0:	79fb      	ldrb	r3, [r7, #7]
 800cbe2:	4a09      	ldr	r2, [pc, #36]	@ (800cc08 <disk_ioctl+0x38>)
 800cbe4:	009b      	lsls	r3, r3, #2
 800cbe6:	4413      	add	r3, r2
 800cbe8:	685b      	ldr	r3, [r3, #4]
 800cbea:	691b      	ldr	r3, [r3, #16]
 800cbec:	79fa      	ldrb	r2, [r7, #7]
 800cbee:	4906      	ldr	r1, [pc, #24]	@ (800cc08 <disk_ioctl+0x38>)
 800cbf0:	440a      	add	r2, r1
 800cbf2:	7a10      	ldrb	r0, [r2, #8]
 800cbf4:	79b9      	ldrb	r1, [r7, #6]
 800cbf6:	683a      	ldr	r2, [r7, #0]
 800cbf8:	4798      	blx	r3
 800cbfa:	4603      	mov	r3, r0
 800cbfc:	73fb      	strb	r3, [r7, #15]
  return res;
 800cbfe:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc00:	4618      	mov	r0, r3
 800cc02:	3710      	adds	r7, #16
 800cc04:	46bd      	mov	sp, r7
 800cc06:	bd80      	pop	{r7, pc}
 800cc08:	20000c6c 	.word	0x20000c6c

0800cc0c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800cc0c:	b480      	push	{r7}
 800cc0e:	b085      	sub	sp, #20
 800cc10:	af00      	add	r7, sp, #0
 800cc12:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	3301      	adds	r3, #1
 800cc18:	781b      	ldrb	r3, [r3, #0]
 800cc1a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800cc1c:	89fb      	ldrh	r3, [r7, #14]
 800cc1e:	021b      	lsls	r3, r3, #8
 800cc20:	b21a      	sxth	r2, r3
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	781b      	ldrb	r3, [r3, #0]
 800cc26:	b21b      	sxth	r3, r3
 800cc28:	4313      	orrs	r3, r2
 800cc2a:	b21b      	sxth	r3, r3
 800cc2c:	81fb      	strh	r3, [r7, #14]
	return rv;
 800cc2e:	89fb      	ldrh	r3, [r7, #14]
}
 800cc30:	4618      	mov	r0, r3
 800cc32:	3714      	adds	r7, #20
 800cc34:	46bd      	mov	sp, r7
 800cc36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc3a:	4770      	bx	lr

0800cc3c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800cc3c:	b480      	push	{r7}
 800cc3e:	b085      	sub	sp, #20
 800cc40:	af00      	add	r7, sp, #0
 800cc42:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	3303      	adds	r3, #3
 800cc48:	781b      	ldrb	r3, [r3, #0]
 800cc4a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800cc4c:	68fb      	ldr	r3, [r7, #12]
 800cc4e:	021b      	lsls	r3, r3, #8
 800cc50:	687a      	ldr	r2, [r7, #4]
 800cc52:	3202      	adds	r2, #2
 800cc54:	7812      	ldrb	r2, [r2, #0]
 800cc56:	4313      	orrs	r3, r2
 800cc58:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800cc5a:	68fb      	ldr	r3, [r7, #12]
 800cc5c:	021b      	lsls	r3, r3, #8
 800cc5e:	687a      	ldr	r2, [r7, #4]
 800cc60:	3201      	adds	r2, #1
 800cc62:	7812      	ldrb	r2, [r2, #0]
 800cc64:	4313      	orrs	r3, r2
 800cc66:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800cc68:	68fb      	ldr	r3, [r7, #12]
 800cc6a:	021b      	lsls	r3, r3, #8
 800cc6c:	687a      	ldr	r2, [r7, #4]
 800cc6e:	7812      	ldrb	r2, [r2, #0]
 800cc70:	4313      	orrs	r3, r2
 800cc72:	60fb      	str	r3, [r7, #12]
	return rv;
 800cc74:	68fb      	ldr	r3, [r7, #12]
}
 800cc76:	4618      	mov	r0, r3
 800cc78:	3714      	adds	r7, #20
 800cc7a:	46bd      	mov	sp, r7
 800cc7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc80:	4770      	bx	lr

0800cc82 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800cc82:	b480      	push	{r7}
 800cc84:	b083      	sub	sp, #12
 800cc86:	af00      	add	r7, sp, #0
 800cc88:	6078      	str	r0, [r7, #4]
 800cc8a:	460b      	mov	r3, r1
 800cc8c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	1c5a      	adds	r2, r3, #1
 800cc92:	607a      	str	r2, [r7, #4]
 800cc94:	887a      	ldrh	r2, [r7, #2]
 800cc96:	b2d2      	uxtb	r2, r2
 800cc98:	701a      	strb	r2, [r3, #0]
 800cc9a:	887b      	ldrh	r3, [r7, #2]
 800cc9c:	0a1b      	lsrs	r3, r3, #8
 800cc9e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	1c5a      	adds	r2, r3, #1
 800cca4:	607a      	str	r2, [r7, #4]
 800cca6:	887a      	ldrh	r2, [r7, #2]
 800cca8:	b2d2      	uxtb	r2, r2
 800ccaa:	701a      	strb	r2, [r3, #0]
}
 800ccac:	bf00      	nop
 800ccae:	370c      	adds	r7, #12
 800ccb0:	46bd      	mov	sp, r7
 800ccb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccb6:	4770      	bx	lr

0800ccb8 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800ccb8:	b480      	push	{r7}
 800ccba:	b083      	sub	sp, #12
 800ccbc:	af00      	add	r7, sp, #0
 800ccbe:	6078      	str	r0, [r7, #4]
 800ccc0:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	1c5a      	adds	r2, r3, #1
 800ccc6:	607a      	str	r2, [r7, #4]
 800ccc8:	683a      	ldr	r2, [r7, #0]
 800ccca:	b2d2      	uxtb	r2, r2
 800cccc:	701a      	strb	r2, [r3, #0]
 800ccce:	683b      	ldr	r3, [r7, #0]
 800ccd0:	0a1b      	lsrs	r3, r3, #8
 800ccd2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	1c5a      	adds	r2, r3, #1
 800ccd8:	607a      	str	r2, [r7, #4]
 800ccda:	683a      	ldr	r2, [r7, #0]
 800ccdc:	b2d2      	uxtb	r2, r2
 800ccde:	701a      	strb	r2, [r3, #0]
 800cce0:	683b      	ldr	r3, [r7, #0]
 800cce2:	0a1b      	lsrs	r3, r3, #8
 800cce4:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	1c5a      	adds	r2, r3, #1
 800ccea:	607a      	str	r2, [r7, #4]
 800ccec:	683a      	ldr	r2, [r7, #0]
 800ccee:	b2d2      	uxtb	r2, r2
 800ccf0:	701a      	strb	r2, [r3, #0]
 800ccf2:	683b      	ldr	r3, [r7, #0]
 800ccf4:	0a1b      	lsrs	r3, r3, #8
 800ccf6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	1c5a      	adds	r2, r3, #1
 800ccfc:	607a      	str	r2, [r7, #4]
 800ccfe:	683a      	ldr	r2, [r7, #0]
 800cd00:	b2d2      	uxtb	r2, r2
 800cd02:	701a      	strb	r2, [r3, #0]
}
 800cd04:	bf00      	nop
 800cd06:	370c      	adds	r7, #12
 800cd08:	46bd      	mov	sp, r7
 800cd0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd0e:	4770      	bx	lr

0800cd10 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800cd10:	b480      	push	{r7}
 800cd12:	b087      	sub	sp, #28
 800cd14:	af00      	add	r7, sp, #0
 800cd16:	60f8      	str	r0, [r7, #12]
 800cd18:	60b9      	str	r1, [r7, #8]
 800cd1a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800cd1c:	68fb      	ldr	r3, [r7, #12]
 800cd1e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800cd20:	68bb      	ldr	r3, [r7, #8]
 800cd22:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	2b00      	cmp	r3, #0
 800cd28:	d00d      	beq.n	800cd46 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800cd2a:	693a      	ldr	r2, [r7, #16]
 800cd2c:	1c53      	adds	r3, r2, #1
 800cd2e:	613b      	str	r3, [r7, #16]
 800cd30:	697b      	ldr	r3, [r7, #20]
 800cd32:	1c59      	adds	r1, r3, #1
 800cd34:	6179      	str	r1, [r7, #20]
 800cd36:	7812      	ldrb	r2, [r2, #0]
 800cd38:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	3b01      	subs	r3, #1
 800cd3e:	607b      	str	r3, [r7, #4]
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	2b00      	cmp	r3, #0
 800cd44:	d1f1      	bne.n	800cd2a <mem_cpy+0x1a>
	}
}
 800cd46:	bf00      	nop
 800cd48:	371c      	adds	r7, #28
 800cd4a:	46bd      	mov	sp, r7
 800cd4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd50:	4770      	bx	lr

0800cd52 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800cd52:	b480      	push	{r7}
 800cd54:	b087      	sub	sp, #28
 800cd56:	af00      	add	r7, sp, #0
 800cd58:	60f8      	str	r0, [r7, #12]
 800cd5a:	60b9      	str	r1, [r7, #8]
 800cd5c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800cd5e:	68fb      	ldr	r3, [r7, #12]
 800cd60:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800cd62:	697b      	ldr	r3, [r7, #20]
 800cd64:	1c5a      	adds	r2, r3, #1
 800cd66:	617a      	str	r2, [r7, #20]
 800cd68:	68ba      	ldr	r2, [r7, #8]
 800cd6a:	b2d2      	uxtb	r2, r2
 800cd6c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	3b01      	subs	r3, #1
 800cd72:	607b      	str	r3, [r7, #4]
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	2b00      	cmp	r3, #0
 800cd78:	d1f3      	bne.n	800cd62 <mem_set+0x10>
}
 800cd7a:	bf00      	nop
 800cd7c:	bf00      	nop
 800cd7e:	371c      	adds	r7, #28
 800cd80:	46bd      	mov	sp, r7
 800cd82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd86:	4770      	bx	lr

0800cd88 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800cd88:	b480      	push	{r7}
 800cd8a:	b089      	sub	sp, #36	@ 0x24
 800cd8c:	af00      	add	r7, sp, #0
 800cd8e:	60f8      	str	r0, [r7, #12]
 800cd90:	60b9      	str	r1, [r7, #8]
 800cd92:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800cd94:	68fb      	ldr	r3, [r7, #12]
 800cd96:	61fb      	str	r3, [r7, #28]
 800cd98:	68bb      	ldr	r3, [r7, #8]
 800cd9a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800cd9c:	2300      	movs	r3, #0
 800cd9e:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800cda0:	69fb      	ldr	r3, [r7, #28]
 800cda2:	1c5a      	adds	r2, r3, #1
 800cda4:	61fa      	str	r2, [r7, #28]
 800cda6:	781b      	ldrb	r3, [r3, #0]
 800cda8:	4619      	mov	r1, r3
 800cdaa:	69bb      	ldr	r3, [r7, #24]
 800cdac:	1c5a      	adds	r2, r3, #1
 800cdae:	61ba      	str	r2, [r7, #24]
 800cdb0:	781b      	ldrb	r3, [r3, #0]
 800cdb2:	1acb      	subs	r3, r1, r3
 800cdb4:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	3b01      	subs	r3, #1
 800cdba:	607b      	str	r3, [r7, #4]
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	2b00      	cmp	r3, #0
 800cdc0:	d002      	beq.n	800cdc8 <mem_cmp+0x40>
 800cdc2:	697b      	ldr	r3, [r7, #20]
 800cdc4:	2b00      	cmp	r3, #0
 800cdc6:	d0eb      	beq.n	800cda0 <mem_cmp+0x18>

	return r;
 800cdc8:	697b      	ldr	r3, [r7, #20]
}
 800cdca:	4618      	mov	r0, r3
 800cdcc:	3724      	adds	r7, #36	@ 0x24
 800cdce:	46bd      	mov	sp, r7
 800cdd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdd4:	4770      	bx	lr

0800cdd6 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800cdd6:	b480      	push	{r7}
 800cdd8:	b083      	sub	sp, #12
 800cdda:	af00      	add	r7, sp, #0
 800cddc:	6078      	str	r0, [r7, #4]
 800cdde:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800cde0:	e002      	b.n	800cde8 <chk_chr+0x12>
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	3301      	adds	r3, #1
 800cde6:	607b      	str	r3, [r7, #4]
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	781b      	ldrb	r3, [r3, #0]
 800cdec:	2b00      	cmp	r3, #0
 800cdee:	d005      	beq.n	800cdfc <chk_chr+0x26>
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	781b      	ldrb	r3, [r3, #0]
 800cdf4:	461a      	mov	r2, r3
 800cdf6:	683b      	ldr	r3, [r7, #0]
 800cdf8:	4293      	cmp	r3, r2
 800cdfa:	d1f2      	bne.n	800cde2 <chk_chr+0xc>
	return *str;
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	781b      	ldrb	r3, [r3, #0]
}
 800ce00:	4618      	mov	r0, r3
 800ce02:	370c      	adds	r7, #12
 800ce04:	46bd      	mov	sp, r7
 800ce06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce0a:	4770      	bx	lr

0800ce0c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800ce0c:	b480      	push	{r7}
 800ce0e:	b085      	sub	sp, #20
 800ce10:	af00      	add	r7, sp, #0
 800ce12:	6078      	str	r0, [r7, #4]
 800ce14:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800ce16:	2300      	movs	r3, #0
 800ce18:	60bb      	str	r3, [r7, #8]
 800ce1a:	68bb      	ldr	r3, [r7, #8]
 800ce1c:	60fb      	str	r3, [r7, #12]
 800ce1e:	e029      	b.n	800ce74 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800ce20:	4a27      	ldr	r2, [pc, #156]	@ (800cec0 <chk_lock+0xb4>)
 800ce22:	68fb      	ldr	r3, [r7, #12]
 800ce24:	011b      	lsls	r3, r3, #4
 800ce26:	4413      	add	r3, r2
 800ce28:	681b      	ldr	r3, [r3, #0]
 800ce2a:	2b00      	cmp	r3, #0
 800ce2c:	d01d      	beq.n	800ce6a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800ce2e:	4a24      	ldr	r2, [pc, #144]	@ (800cec0 <chk_lock+0xb4>)
 800ce30:	68fb      	ldr	r3, [r7, #12]
 800ce32:	011b      	lsls	r3, r3, #4
 800ce34:	4413      	add	r3, r2
 800ce36:	681a      	ldr	r2, [r3, #0]
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	681b      	ldr	r3, [r3, #0]
 800ce3c:	429a      	cmp	r2, r3
 800ce3e:	d116      	bne.n	800ce6e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800ce40:	4a1f      	ldr	r2, [pc, #124]	@ (800cec0 <chk_lock+0xb4>)
 800ce42:	68fb      	ldr	r3, [r7, #12]
 800ce44:	011b      	lsls	r3, r3, #4
 800ce46:	4413      	add	r3, r2
 800ce48:	3304      	adds	r3, #4
 800ce4a:	681a      	ldr	r2, [r3, #0]
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800ce50:	429a      	cmp	r2, r3
 800ce52:	d10c      	bne.n	800ce6e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800ce54:	4a1a      	ldr	r2, [pc, #104]	@ (800cec0 <chk_lock+0xb4>)
 800ce56:	68fb      	ldr	r3, [r7, #12]
 800ce58:	011b      	lsls	r3, r3, #4
 800ce5a:	4413      	add	r3, r2
 800ce5c:	3308      	adds	r3, #8
 800ce5e:	681a      	ldr	r2, [r3, #0]
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800ce64:	429a      	cmp	r2, r3
 800ce66:	d102      	bne.n	800ce6e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800ce68:	e007      	b.n	800ce7a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800ce6a:	2301      	movs	r3, #1
 800ce6c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800ce6e:	68fb      	ldr	r3, [r7, #12]
 800ce70:	3301      	adds	r3, #1
 800ce72:	60fb      	str	r3, [r7, #12]
 800ce74:	68fb      	ldr	r3, [r7, #12]
 800ce76:	2b04      	cmp	r3, #4
 800ce78:	d9d2      	bls.n	800ce20 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800ce7a:	68fb      	ldr	r3, [r7, #12]
 800ce7c:	2b05      	cmp	r3, #5
 800ce7e:	d109      	bne.n	800ce94 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800ce80:	68bb      	ldr	r3, [r7, #8]
 800ce82:	2b00      	cmp	r3, #0
 800ce84:	d102      	bne.n	800ce8c <chk_lock+0x80>
 800ce86:	683b      	ldr	r3, [r7, #0]
 800ce88:	2b02      	cmp	r3, #2
 800ce8a:	d101      	bne.n	800ce90 <chk_lock+0x84>
 800ce8c:	2300      	movs	r3, #0
 800ce8e:	e010      	b.n	800ceb2 <chk_lock+0xa6>
 800ce90:	2312      	movs	r3, #18
 800ce92:	e00e      	b.n	800ceb2 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800ce94:	683b      	ldr	r3, [r7, #0]
 800ce96:	2b00      	cmp	r3, #0
 800ce98:	d108      	bne.n	800ceac <chk_lock+0xa0>
 800ce9a:	4a09      	ldr	r2, [pc, #36]	@ (800cec0 <chk_lock+0xb4>)
 800ce9c:	68fb      	ldr	r3, [r7, #12]
 800ce9e:	011b      	lsls	r3, r3, #4
 800cea0:	4413      	add	r3, r2
 800cea2:	330c      	adds	r3, #12
 800cea4:	881b      	ldrh	r3, [r3, #0]
 800cea6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ceaa:	d101      	bne.n	800ceb0 <chk_lock+0xa4>
 800ceac:	2310      	movs	r3, #16
 800ceae:	e000      	b.n	800ceb2 <chk_lock+0xa6>
 800ceb0:	2300      	movs	r3, #0
}
 800ceb2:	4618      	mov	r0, r3
 800ceb4:	3714      	adds	r7, #20
 800ceb6:	46bd      	mov	sp, r7
 800ceb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cebc:	4770      	bx	lr
 800cebe:	bf00      	nop
 800cec0:	20000a1c 	.word	0x20000a1c

0800cec4 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800cec4:	b480      	push	{r7}
 800cec6:	b083      	sub	sp, #12
 800cec8:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800ceca:	2300      	movs	r3, #0
 800cecc:	607b      	str	r3, [r7, #4]
 800cece:	e002      	b.n	800ced6 <enq_lock+0x12>
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	3301      	adds	r3, #1
 800ced4:	607b      	str	r3, [r7, #4]
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	2b04      	cmp	r3, #4
 800ceda:	d806      	bhi.n	800ceea <enq_lock+0x26>
 800cedc:	4a09      	ldr	r2, [pc, #36]	@ (800cf04 <enq_lock+0x40>)
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	011b      	lsls	r3, r3, #4
 800cee2:	4413      	add	r3, r2
 800cee4:	681b      	ldr	r3, [r3, #0]
 800cee6:	2b00      	cmp	r3, #0
 800cee8:	d1f2      	bne.n	800ced0 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	2b05      	cmp	r3, #5
 800ceee:	bf14      	ite	ne
 800cef0:	2301      	movne	r3, #1
 800cef2:	2300      	moveq	r3, #0
 800cef4:	b2db      	uxtb	r3, r3
}
 800cef6:	4618      	mov	r0, r3
 800cef8:	370c      	adds	r7, #12
 800cefa:	46bd      	mov	sp, r7
 800cefc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf00:	4770      	bx	lr
 800cf02:	bf00      	nop
 800cf04:	20000a1c 	.word	0x20000a1c

0800cf08 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800cf08:	b480      	push	{r7}
 800cf0a:	b085      	sub	sp, #20
 800cf0c:	af00      	add	r7, sp, #0
 800cf0e:	6078      	str	r0, [r7, #4]
 800cf10:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800cf12:	2300      	movs	r3, #0
 800cf14:	60fb      	str	r3, [r7, #12]
 800cf16:	e01f      	b.n	800cf58 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800cf18:	4a41      	ldr	r2, [pc, #260]	@ (800d020 <inc_lock+0x118>)
 800cf1a:	68fb      	ldr	r3, [r7, #12]
 800cf1c:	011b      	lsls	r3, r3, #4
 800cf1e:	4413      	add	r3, r2
 800cf20:	681a      	ldr	r2, [r3, #0]
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	681b      	ldr	r3, [r3, #0]
 800cf26:	429a      	cmp	r2, r3
 800cf28:	d113      	bne.n	800cf52 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800cf2a:	4a3d      	ldr	r2, [pc, #244]	@ (800d020 <inc_lock+0x118>)
 800cf2c:	68fb      	ldr	r3, [r7, #12]
 800cf2e:	011b      	lsls	r3, r3, #4
 800cf30:	4413      	add	r3, r2
 800cf32:	3304      	adds	r3, #4
 800cf34:	681a      	ldr	r2, [r3, #0]
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800cf3a:	429a      	cmp	r2, r3
 800cf3c:	d109      	bne.n	800cf52 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800cf3e:	4a38      	ldr	r2, [pc, #224]	@ (800d020 <inc_lock+0x118>)
 800cf40:	68fb      	ldr	r3, [r7, #12]
 800cf42:	011b      	lsls	r3, r3, #4
 800cf44:	4413      	add	r3, r2
 800cf46:	3308      	adds	r3, #8
 800cf48:	681a      	ldr	r2, [r3, #0]
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800cf4e:	429a      	cmp	r2, r3
 800cf50:	d006      	beq.n	800cf60 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800cf52:	68fb      	ldr	r3, [r7, #12]
 800cf54:	3301      	adds	r3, #1
 800cf56:	60fb      	str	r3, [r7, #12]
 800cf58:	68fb      	ldr	r3, [r7, #12]
 800cf5a:	2b04      	cmp	r3, #4
 800cf5c:	d9dc      	bls.n	800cf18 <inc_lock+0x10>
 800cf5e:	e000      	b.n	800cf62 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800cf60:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800cf62:	68fb      	ldr	r3, [r7, #12]
 800cf64:	2b05      	cmp	r3, #5
 800cf66:	d132      	bne.n	800cfce <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800cf68:	2300      	movs	r3, #0
 800cf6a:	60fb      	str	r3, [r7, #12]
 800cf6c:	e002      	b.n	800cf74 <inc_lock+0x6c>
 800cf6e:	68fb      	ldr	r3, [r7, #12]
 800cf70:	3301      	adds	r3, #1
 800cf72:	60fb      	str	r3, [r7, #12]
 800cf74:	68fb      	ldr	r3, [r7, #12]
 800cf76:	2b04      	cmp	r3, #4
 800cf78:	d806      	bhi.n	800cf88 <inc_lock+0x80>
 800cf7a:	4a29      	ldr	r2, [pc, #164]	@ (800d020 <inc_lock+0x118>)
 800cf7c:	68fb      	ldr	r3, [r7, #12]
 800cf7e:	011b      	lsls	r3, r3, #4
 800cf80:	4413      	add	r3, r2
 800cf82:	681b      	ldr	r3, [r3, #0]
 800cf84:	2b00      	cmp	r3, #0
 800cf86:	d1f2      	bne.n	800cf6e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800cf88:	68fb      	ldr	r3, [r7, #12]
 800cf8a:	2b05      	cmp	r3, #5
 800cf8c:	d101      	bne.n	800cf92 <inc_lock+0x8a>
 800cf8e:	2300      	movs	r3, #0
 800cf90:	e040      	b.n	800d014 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	681a      	ldr	r2, [r3, #0]
 800cf96:	4922      	ldr	r1, [pc, #136]	@ (800d020 <inc_lock+0x118>)
 800cf98:	68fb      	ldr	r3, [r7, #12]
 800cf9a:	011b      	lsls	r3, r3, #4
 800cf9c:	440b      	add	r3, r1
 800cf9e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	689a      	ldr	r2, [r3, #8]
 800cfa4:	491e      	ldr	r1, [pc, #120]	@ (800d020 <inc_lock+0x118>)
 800cfa6:	68fb      	ldr	r3, [r7, #12]
 800cfa8:	011b      	lsls	r3, r3, #4
 800cfaa:	440b      	add	r3, r1
 800cfac:	3304      	adds	r3, #4
 800cfae:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	695a      	ldr	r2, [r3, #20]
 800cfb4:	491a      	ldr	r1, [pc, #104]	@ (800d020 <inc_lock+0x118>)
 800cfb6:	68fb      	ldr	r3, [r7, #12]
 800cfb8:	011b      	lsls	r3, r3, #4
 800cfba:	440b      	add	r3, r1
 800cfbc:	3308      	adds	r3, #8
 800cfbe:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800cfc0:	4a17      	ldr	r2, [pc, #92]	@ (800d020 <inc_lock+0x118>)
 800cfc2:	68fb      	ldr	r3, [r7, #12]
 800cfc4:	011b      	lsls	r3, r3, #4
 800cfc6:	4413      	add	r3, r2
 800cfc8:	330c      	adds	r3, #12
 800cfca:	2200      	movs	r2, #0
 800cfcc:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800cfce:	683b      	ldr	r3, [r7, #0]
 800cfd0:	2b00      	cmp	r3, #0
 800cfd2:	d009      	beq.n	800cfe8 <inc_lock+0xe0>
 800cfd4:	4a12      	ldr	r2, [pc, #72]	@ (800d020 <inc_lock+0x118>)
 800cfd6:	68fb      	ldr	r3, [r7, #12]
 800cfd8:	011b      	lsls	r3, r3, #4
 800cfda:	4413      	add	r3, r2
 800cfdc:	330c      	adds	r3, #12
 800cfde:	881b      	ldrh	r3, [r3, #0]
 800cfe0:	2b00      	cmp	r3, #0
 800cfe2:	d001      	beq.n	800cfe8 <inc_lock+0xe0>
 800cfe4:	2300      	movs	r3, #0
 800cfe6:	e015      	b.n	800d014 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800cfe8:	683b      	ldr	r3, [r7, #0]
 800cfea:	2b00      	cmp	r3, #0
 800cfec:	d108      	bne.n	800d000 <inc_lock+0xf8>
 800cfee:	4a0c      	ldr	r2, [pc, #48]	@ (800d020 <inc_lock+0x118>)
 800cff0:	68fb      	ldr	r3, [r7, #12]
 800cff2:	011b      	lsls	r3, r3, #4
 800cff4:	4413      	add	r3, r2
 800cff6:	330c      	adds	r3, #12
 800cff8:	881b      	ldrh	r3, [r3, #0]
 800cffa:	3301      	adds	r3, #1
 800cffc:	b29a      	uxth	r2, r3
 800cffe:	e001      	b.n	800d004 <inc_lock+0xfc>
 800d000:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800d004:	4906      	ldr	r1, [pc, #24]	@ (800d020 <inc_lock+0x118>)
 800d006:	68fb      	ldr	r3, [r7, #12]
 800d008:	011b      	lsls	r3, r3, #4
 800d00a:	440b      	add	r3, r1
 800d00c:	330c      	adds	r3, #12
 800d00e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800d010:	68fb      	ldr	r3, [r7, #12]
 800d012:	3301      	adds	r3, #1
}
 800d014:	4618      	mov	r0, r3
 800d016:	3714      	adds	r7, #20
 800d018:	46bd      	mov	sp, r7
 800d01a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d01e:	4770      	bx	lr
 800d020:	20000a1c 	.word	0x20000a1c

0800d024 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800d024:	b480      	push	{r7}
 800d026:	b085      	sub	sp, #20
 800d028:	af00      	add	r7, sp, #0
 800d02a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	3b01      	subs	r3, #1
 800d030:	607b      	str	r3, [r7, #4]
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	2b04      	cmp	r3, #4
 800d036:	d825      	bhi.n	800d084 <dec_lock+0x60>
		n = Files[i].ctr;
 800d038:	4a17      	ldr	r2, [pc, #92]	@ (800d098 <dec_lock+0x74>)
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	011b      	lsls	r3, r3, #4
 800d03e:	4413      	add	r3, r2
 800d040:	330c      	adds	r3, #12
 800d042:	881b      	ldrh	r3, [r3, #0]
 800d044:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800d046:	89fb      	ldrh	r3, [r7, #14]
 800d048:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d04c:	d101      	bne.n	800d052 <dec_lock+0x2e>
 800d04e:	2300      	movs	r3, #0
 800d050:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800d052:	89fb      	ldrh	r3, [r7, #14]
 800d054:	2b00      	cmp	r3, #0
 800d056:	d002      	beq.n	800d05e <dec_lock+0x3a>
 800d058:	89fb      	ldrh	r3, [r7, #14]
 800d05a:	3b01      	subs	r3, #1
 800d05c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800d05e:	4a0e      	ldr	r2, [pc, #56]	@ (800d098 <dec_lock+0x74>)
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	011b      	lsls	r3, r3, #4
 800d064:	4413      	add	r3, r2
 800d066:	330c      	adds	r3, #12
 800d068:	89fa      	ldrh	r2, [r7, #14]
 800d06a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800d06c:	89fb      	ldrh	r3, [r7, #14]
 800d06e:	2b00      	cmp	r3, #0
 800d070:	d105      	bne.n	800d07e <dec_lock+0x5a>
 800d072:	4a09      	ldr	r2, [pc, #36]	@ (800d098 <dec_lock+0x74>)
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	011b      	lsls	r3, r3, #4
 800d078:	4413      	add	r3, r2
 800d07a:	2200      	movs	r2, #0
 800d07c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800d07e:	2300      	movs	r3, #0
 800d080:	737b      	strb	r3, [r7, #13]
 800d082:	e001      	b.n	800d088 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800d084:	2302      	movs	r3, #2
 800d086:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800d088:	7b7b      	ldrb	r3, [r7, #13]
}
 800d08a:	4618      	mov	r0, r3
 800d08c:	3714      	adds	r7, #20
 800d08e:	46bd      	mov	sp, r7
 800d090:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d094:	4770      	bx	lr
 800d096:	bf00      	nop
 800d098:	20000a1c 	.word	0x20000a1c

0800d09c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800d09c:	b480      	push	{r7}
 800d09e:	b085      	sub	sp, #20
 800d0a0:	af00      	add	r7, sp, #0
 800d0a2:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800d0a4:	2300      	movs	r3, #0
 800d0a6:	60fb      	str	r3, [r7, #12]
 800d0a8:	e010      	b.n	800d0cc <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800d0aa:	4a0d      	ldr	r2, [pc, #52]	@ (800d0e0 <clear_lock+0x44>)
 800d0ac:	68fb      	ldr	r3, [r7, #12]
 800d0ae:	011b      	lsls	r3, r3, #4
 800d0b0:	4413      	add	r3, r2
 800d0b2:	681b      	ldr	r3, [r3, #0]
 800d0b4:	687a      	ldr	r2, [r7, #4]
 800d0b6:	429a      	cmp	r2, r3
 800d0b8:	d105      	bne.n	800d0c6 <clear_lock+0x2a>
 800d0ba:	4a09      	ldr	r2, [pc, #36]	@ (800d0e0 <clear_lock+0x44>)
 800d0bc:	68fb      	ldr	r3, [r7, #12]
 800d0be:	011b      	lsls	r3, r3, #4
 800d0c0:	4413      	add	r3, r2
 800d0c2:	2200      	movs	r2, #0
 800d0c4:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800d0c6:	68fb      	ldr	r3, [r7, #12]
 800d0c8:	3301      	adds	r3, #1
 800d0ca:	60fb      	str	r3, [r7, #12]
 800d0cc:	68fb      	ldr	r3, [r7, #12]
 800d0ce:	2b04      	cmp	r3, #4
 800d0d0:	d9eb      	bls.n	800d0aa <clear_lock+0xe>
	}
}
 800d0d2:	bf00      	nop
 800d0d4:	bf00      	nop
 800d0d6:	3714      	adds	r7, #20
 800d0d8:	46bd      	mov	sp, r7
 800d0da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0de:	4770      	bx	lr
 800d0e0:	20000a1c 	.word	0x20000a1c

0800d0e4 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800d0e4:	b580      	push	{r7, lr}
 800d0e6:	b086      	sub	sp, #24
 800d0e8:	af00      	add	r7, sp, #0
 800d0ea:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800d0ec:	2300      	movs	r3, #0
 800d0ee:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	78db      	ldrb	r3, [r3, #3]
 800d0f4:	2b00      	cmp	r3, #0
 800d0f6:	d034      	beq.n	800d162 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d0fc:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	7858      	ldrb	r0, [r3, #1]
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800d108:	2301      	movs	r3, #1
 800d10a:	697a      	ldr	r2, [r7, #20]
 800d10c:	f7ff fd40 	bl	800cb90 <disk_write>
 800d110:	4603      	mov	r3, r0
 800d112:	2b00      	cmp	r3, #0
 800d114:	d002      	beq.n	800d11c <sync_window+0x38>
			res = FR_DISK_ERR;
 800d116:	2301      	movs	r3, #1
 800d118:	73fb      	strb	r3, [r7, #15]
 800d11a:	e022      	b.n	800d162 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	2200      	movs	r2, #0
 800d120:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d126:	697a      	ldr	r2, [r7, #20]
 800d128:	1ad2      	subs	r2, r2, r3
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	69db      	ldr	r3, [r3, #28]
 800d12e:	429a      	cmp	r2, r3
 800d130:	d217      	bcs.n	800d162 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	789b      	ldrb	r3, [r3, #2]
 800d136:	613b      	str	r3, [r7, #16]
 800d138:	e010      	b.n	800d15c <sync_window+0x78>
					wsect += fs->fsize;
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	69db      	ldr	r3, [r3, #28]
 800d13e:	697a      	ldr	r2, [r7, #20]
 800d140:	4413      	add	r3, r2
 800d142:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	7858      	ldrb	r0, [r3, #1]
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800d14e:	2301      	movs	r3, #1
 800d150:	697a      	ldr	r2, [r7, #20]
 800d152:	f7ff fd1d 	bl	800cb90 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800d156:	693b      	ldr	r3, [r7, #16]
 800d158:	3b01      	subs	r3, #1
 800d15a:	613b      	str	r3, [r7, #16]
 800d15c:	693b      	ldr	r3, [r7, #16]
 800d15e:	2b01      	cmp	r3, #1
 800d160:	d8eb      	bhi.n	800d13a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800d162:	7bfb      	ldrb	r3, [r7, #15]
}
 800d164:	4618      	mov	r0, r3
 800d166:	3718      	adds	r7, #24
 800d168:	46bd      	mov	sp, r7
 800d16a:	bd80      	pop	{r7, pc}

0800d16c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800d16c:	b580      	push	{r7, lr}
 800d16e:	b084      	sub	sp, #16
 800d170:	af00      	add	r7, sp, #0
 800d172:	6078      	str	r0, [r7, #4]
 800d174:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800d176:	2300      	movs	r3, #0
 800d178:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d17e:	683a      	ldr	r2, [r7, #0]
 800d180:	429a      	cmp	r2, r3
 800d182:	d01b      	beq.n	800d1bc <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800d184:	6878      	ldr	r0, [r7, #4]
 800d186:	f7ff ffad 	bl	800d0e4 <sync_window>
 800d18a:	4603      	mov	r3, r0
 800d18c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800d18e:	7bfb      	ldrb	r3, [r7, #15]
 800d190:	2b00      	cmp	r3, #0
 800d192:	d113      	bne.n	800d1bc <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	7858      	ldrb	r0, [r3, #1]
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800d19e:	2301      	movs	r3, #1
 800d1a0:	683a      	ldr	r2, [r7, #0]
 800d1a2:	f7ff fcd5 	bl	800cb50 <disk_read>
 800d1a6:	4603      	mov	r3, r0
 800d1a8:	2b00      	cmp	r3, #0
 800d1aa:	d004      	beq.n	800d1b6 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800d1ac:	f04f 33ff 	mov.w	r3, #4294967295
 800d1b0:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800d1b2:	2301      	movs	r3, #1
 800d1b4:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	683a      	ldr	r2, [r7, #0]
 800d1ba:	631a      	str	r2, [r3, #48]	@ 0x30
		}
	}
	return res;
 800d1bc:	7bfb      	ldrb	r3, [r7, #15]
}
 800d1be:	4618      	mov	r0, r3
 800d1c0:	3710      	adds	r7, #16
 800d1c2:	46bd      	mov	sp, r7
 800d1c4:	bd80      	pop	{r7, pc}
	...

0800d1c8 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800d1c8:	b580      	push	{r7, lr}
 800d1ca:	b084      	sub	sp, #16
 800d1cc:	af00      	add	r7, sp, #0
 800d1ce:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800d1d0:	6878      	ldr	r0, [r7, #4]
 800d1d2:	f7ff ff87 	bl	800d0e4 <sync_window>
 800d1d6:	4603      	mov	r3, r0
 800d1d8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800d1da:	7bfb      	ldrb	r3, [r7, #15]
 800d1dc:	2b00      	cmp	r3, #0
 800d1de:	d158      	bne.n	800d292 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	781b      	ldrb	r3, [r3, #0]
 800d1e4:	2b03      	cmp	r3, #3
 800d1e6:	d148      	bne.n	800d27a <sync_fs+0xb2>
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	791b      	ldrb	r3, [r3, #4]
 800d1ec:	2b01      	cmp	r3, #1
 800d1ee:	d144      	bne.n	800d27a <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	3334      	adds	r3, #52	@ 0x34
 800d1f4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d1f8:	2100      	movs	r1, #0
 800d1fa:	4618      	mov	r0, r3
 800d1fc:	f7ff fda9 	bl	800cd52 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	3334      	adds	r3, #52	@ 0x34
 800d204:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800d208:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800d20c:	4618      	mov	r0, r3
 800d20e:	f7ff fd38 	bl	800cc82 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	3334      	adds	r3, #52	@ 0x34
 800d216:	4921      	ldr	r1, [pc, #132]	@ (800d29c <sync_fs+0xd4>)
 800d218:	4618      	mov	r0, r3
 800d21a:	f7ff fd4d 	bl	800ccb8 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	3334      	adds	r3, #52	@ 0x34
 800d222:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800d226:	491e      	ldr	r1, [pc, #120]	@ (800d2a0 <sync_fs+0xd8>)
 800d228:	4618      	mov	r0, r3
 800d22a:	f7ff fd45 	bl	800ccb8 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	3334      	adds	r3, #52	@ 0x34
 800d232:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	695b      	ldr	r3, [r3, #20]
 800d23a:	4619      	mov	r1, r3
 800d23c:	4610      	mov	r0, r2
 800d23e:	f7ff fd3b 	bl	800ccb8 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	3334      	adds	r3, #52	@ 0x34
 800d246:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	691b      	ldr	r3, [r3, #16]
 800d24e:	4619      	mov	r1, r3
 800d250:	4610      	mov	r0, r2
 800d252:	f7ff fd31 	bl	800ccb8 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	6a1b      	ldr	r3, [r3, #32]
 800d25a:	1c5a      	adds	r2, r3, #1
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	631a      	str	r2, [r3, #48]	@ 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	7858      	ldrb	r0, [r3, #1]
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d26e:	2301      	movs	r3, #1
 800d270:	f7ff fc8e 	bl	800cb90 <disk_write>
			fs->fsi_flag = 0;
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	2200      	movs	r2, #0
 800d278:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	785b      	ldrb	r3, [r3, #1]
 800d27e:	2200      	movs	r2, #0
 800d280:	2100      	movs	r1, #0
 800d282:	4618      	mov	r0, r3
 800d284:	f7ff fca4 	bl	800cbd0 <disk_ioctl>
 800d288:	4603      	mov	r3, r0
 800d28a:	2b00      	cmp	r3, #0
 800d28c:	d001      	beq.n	800d292 <sync_fs+0xca>
 800d28e:	2301      	movs	r3, #1
 800d290:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800d292:	7bfb      	ldrb	r3, [r7, #15]
}
 800d294:	4618      	mov	r0, r3
 800d296:	3710      	adds	r7, #16
 800d298:	46bd      	mov	sp, r7
 800d29a:	bd80      	pop	{r7, pc}
 800d29c:	41615252 	.word	0x41615252
 800d2a0:	61417272 	.word	0x61417272

0800d2a4 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800d2a4:	b480      	push	{r7}
 800d2a6:	b083      	sub	sp, #12
 800d2a8:	af00      	add	r7, sp, #0
 800d2aa:	6078      	str	r0, [r7, #4]
 800d2ac:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800d2ae:	683b      	ldr	r3, [r7, #0]
 800d2b0:	3b02      	subs	r3, #2
 800d2b2:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	699b      	ldr	r3, [r3, #24]
 800d2b8:	3b02      	subs	r3, #2
 800d2ba:	683a      	ldr	r2, [r7, #0]
 800d2bc:	429a      	cmp	r2, r3
 800d2be:	d301      	bcc.n	800d2c4 <clust2sect+0x20>
 800d2c0:	2300      	movs	r3, #0
 800d2c2:	e008      	b.n	800d2d6 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	895b      	ldrh	r3, [r3, #10]
 800d2c8:	461a      	mov	r2, r3
 800d2ca:	683b      	ldr	r3, [r7, #0]
 800d2cc:	fb03 f202 	mul.w	r2, r3, r2
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d2d4:	4413      	add	r3, r2
}
 800d2d6:	4618      	mov	r0, r3
 800d2d8:	370c      	adds	r7, #12
 800d2da:	46bd      	mov	sp, r7
 800d2dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2e0:	4770      	bx	lr

0800d2e2 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800d2e2:	b580      	push	{r7, lr}
 800d2e4:	b086      	sub	sp, #24
 800d2e6:	af00      	add	r7, sp, #0
 800d2e8:	6078      	str	r0, [r7, #4]
 800d2ea:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	681b      	ldr	r3, [r3, #0]
 800d2f0:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800d2f2:	683b      	ldr	r3, [r7, #0]
 800d2f4:	2b01      	cmp	r3, #1
 800d2f6:	d904      	bls.n	800d302 <get_fat+0x20>
 800d2f8:	693b      	ldr	r3, [r7, #16]
 800d2fa:	699b      	ldr	r3, [r3, #24]
 800d2fc:	683a      	ldr	r2, [r7, #0]
 800d2fe:	429a      	cmp	r2, r3
 800d300:	d302      	bcc.n	800d308 <get_fat+0x26>
		val = 1;	/* Internal error */
 800d302:	2301      	movs	r3, #1
 800d304:	617b      	str	r3, [r7, #20]
 800d306:	e08e      	b.n	800d426 <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800d308:	f04f 33ff 	mov.w	r3, #4294967295
 800d30c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800d30e:	693b      	ldr	r3, [r7, #16]
 800d310:	781b      	ldrb	r3, [r3, #0]
 800d312:	2b03      	cmp	r3, #3
 800d314:	d061      	beq.n	800d3da <get_fat+0xf8>
 800d316:	2b03      	cmp	r3, #3
 800d318:	dc7b      	bgt.n	800d412 <get_fat+0x130>
 800d31a:	2b01      	cmp	r3, #1
 800d31c:	d002      	beq.n	800d324 <get_fat+0x42>
 800d31e:	2b02      	cmp	r3, #2
 800d320:	d041      	beq.n	800d3a6 <get_fat+0xc4>
 800d322:	e076      	b.n	800d412 <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800d324:	683b      	ldr	r3, [r7, #0]
 800d326:	60fb      	str	r3, [r7, #12]
 800d328:	68fb      	ldr	r3, [r7, #12]
 800d32a:	085b      	lsrs	r3, r3, #1
 800d32c:	68fa      	ldr	r2, [r7, #12]
 800d32e:	4413      	add	r3, r2
 800d330:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d332:	693b      	ldr	r3, [r7, #16]
 800d334:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d336:	68fb      	ldr	r3, [r7, #12]
 800d338:	0a5b      	lsrs	r3, r3, #9
 800d33a:	4413      	add	r3, r2
 800d33c:	4619      	mov	r1, r3
 800d33e:	6938      	ldr	r0, [r7, #16]
 800d340:	f7ff ff14 	bl	800d16c <move_window>
 800d344:	4603      	mov	r3, r0
 800d346:	2b00      	cmp	r3, #0
 800d348:	d166      	bne.n	800d418 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 800d34a:	68fb      	ldr	r3, [r7, #12]
 800d34c:	1c5a      	adds	r2, r3, #1
 800d34e:	60fa      	str	r2, [r7, #12]
 800d350:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d354:	693a      	ldr	r2, [r7, #16]
 800d356:	4413      	add	r3, r2
 800d358:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800d35c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d35e:	693b      	ldr	r3, [r7, #16]
 800d360:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d362:	68fb      	ldr	r3, [r7, #12]
 800d364:	0a5b      	lsrs	r3, r3, #9
 800d366:	4413      	add	r3, r2
 800d368:	4619      	mov	r1, r3
 800d36a:	6938      	ldr	r0, [r7, #16]
 800d36c:	f7ff fefe 	bl	800d16c <move_window>
 800d370:	4603      	mov	r3, r0
 800d372:	2b00      	cmp	r3, #0
 800d374:	d152      	bne.n	800d41c <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 800d376:	68fb      	ldr	r3, [r7, #12]
 800d378:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d37c:	693a      	ldr	r2, [r7, #16]
 800d37e:	4413      	add	r3, r2
 800d380:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800d384:	021b      	lsls	r3, r3, #8
 800d386:	68ba      	ldr	r2, [r7, #8]
 800d388:	4313      	orrs	r3, r2
 800d38a:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800d38c:	683b      	ldr	r3, [r7, #0]
 800d38e:	f003 0301 	and.w	r3, r3, #1
 800d392:	2b00      	cmp	r3, #0
 800d394:	d002      	beq.n	800d39c <get_fat+0xba>
 800d396:	68bb      	ldr	r3, [r7, #8]
 800d398:	091b      	lsrs	r3, r3, #4
 800d39a:	e002      	b.n	800d3a2 <get_fat+0xc0>
 800d39c:	68bb      	ldr	r3, [r7, #8]
 800d39e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d3a2:	617b      	str	r3, [r7, #20]
			break;
 800d3a4:	e03f      	b.n	800d426 <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800d3a6:	693b      	ldr	r3, [r7, #16]
 800d3a8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d3aa:	683b      	ldr	r3, [r7, #0]
 800d3ac:	0a1b      	lsrs	r3, r3, #8
 800d3ae:	4413      	add	r3, r2
 800d3b0:	4619      	mov	r1, r3
 800d3b2:	6938      	ldr	r0, [r7, #16]
 800d3b4:	f7ff feda 	bl	800d16c <move_window>
 800d3b8:	4603      	mov	r3, r0
 800d3ba:	2b00      	cmp	r3, #0
 800d3bc:	d130      	bne.n	800d420 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800d3be:	693b      	ldr	r3, [r7, #16]
 800d3c0:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800d3c4:	683b      	ldr	r3, [r7, #0]
 800d3c6:	005b      	lsls	r3, r3, #1
 800d3c8:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800d3cc:	4413      	add	r3, r2
 800d3ce:	4618      	mov	r0, r3
 800d3d0:	f7ff fc1c 	bl	800cc0c <ld_word>
 800d3d4:	4603      	mov	r3, r0
 800d3d6:	617b      	str	r3, [r7, #20]
			break;
 800d3d8:	e025      	b.n	800d426 <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800d3da:	693b      	ldr	r3, [r7, #16]
 800d3dc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d3de:	683b      	ldr	r3, [r7, #0]
 800d3e0:	09db      	lsrs	r3, r3, #7
 800d3e2:	4413      	add	r3, r2
 800d3e4:	4619      	mov	r1, r3
 800d3e6:	6938      	ldr	r0, [r7, #16]
 800d3e8:	f7ff fec0 	bl	800d16c <move_window>
 800d3ec:	4603      	mov	r3, r0
 800d3ee:	2b00      	cmp	r3, #0
 800d3f0:	d118      	bne.n	800d424 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800d3f2:	693b      	ldr	r3, [r7, #16]
 800d3f4:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800d3f8:	683b      	ldr	r3, [r7, #0]
 800d3fa:	009b      	lsls	r3, r3, #2
 800d3fc:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800d400:	4413      	add	r3, r2
 800d402:	4618      	mov	r0, r3
 800d404:	f7ff fc1a 	bl	800cc3c <ld_dword>
 800d408:	4603      	mov	r3, r0
 800d40a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800d40e:	617b      	str	r3, [r7, #20]
			break;
 800d410:	e009      	b.n	800d426 <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800d412:	2301      	movs	r3, #1
 800d414:	617b      	str	r3, [r7, #20]
 800d416:	e006      	b.n	800d426 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d418:	bf00      	nop
 800d41a:	e004      	b.n	800d426 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d41c:	bf00      	nop
 800d41e:	e002      	b.n	800d426 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800d420:	bf00      	nop
 800d422:	e000      	b.n	800d426 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800d424:	bf00      	nop
		}
	}

	return val;
 800d426:	697b      	ldr	r3, [r7, #20]
}
 800d428:	4618      	mov	r0, r3
 800d42a:	3718      	adds	r7, #24
 800d42c:	46bd      	mov	sp, r7
 800d42e:	bd80      	pop	{r7, pc}

0800d430 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800d430:	b590      	push	{r4, r7, lr}
 800d432:	b089      	sub	sp, #36	@ 0x24
 800d434:	af00      	add	r7, sp, #0
 800d436:	60f8      	str	r0, [r7, #12]
 800d438:	60b9      	str	r1, [r7, #8]
 800d43a:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800d43c:	2302      	movs	r3, #2
 800d43e:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800d440:	68bb      	ldr	r3, [r7, #8]
 800d442:	2b01      	cmp	r3, #1
 800d444:	f240 80d9 	bls.w	800d5fa <put_fat+0x1ca>
 800d448:	68fb      	ldr	r3, [r7, #12]
 800d44a:	699b      	ldr	r3, [r3, #24]
 800d44c:	68ba      	ldr	r2, [r7, #8]
 800d44e:	429a      	cmp	r2, r3
 800d450:	f080 80d3 	bcs.w	800d5fa <put_fat+0x1ca>
		switch (fs->fs_type) {
 800d454:	68fb      	ldr	r3, [r7, #12]
 800d456:	781b      	ldrb	r3, [r3, #0]
 800d458:	2b03      	cmp	r3, #3
 800d45a:	f000 8096 	beq.w	800d58a <put_fat+0x15a>
 800d45e:	2b03      	cmp	r3, #3
 800d460:	f300 80cb 	bgt.w	800d5fa <put_fat+0x1ca>
 800d464:	2b01      	cmp	r3, #1
 800d466:	d002      	beq.n	800d46e <put_fat+0x3e>
 800d468:	2b02      	cmp	r3, #2
 800d46a:	d06e      	beq.n	800d54a <put_fat+0x11a>
 800d46c:	e0c5      	b.n	800d5fa <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800d46e:	68bb      	ldr	r3, [r7, #8]
 800d470:	61bb      	str	r3, [r7, #24]
 800d472:	69bb      	ldr	r3, [r7, #24]
 800d474:	085b      	lsrs	r3, r3, #1
 800d476:	69ba      	ldr	r2, [r7, #24]
 800d478:	4413      	add	r3, r2
 800d47a:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800d47c:	68fb      	ldr	r3, [r7, #12]
 800d47e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d480:	69bb      	ldr	r3, [r7, #24]
 800d482:	0a5b      	lsrs	r3, r3, #9
 800d484:	4413      	add	r3, r2
 800d486:	4619      	mov	r1, r3
 800d488:	68f8      	ldr	r0, [r7, #12]
 800d48a:	f7ff fe6f 	bl	800d16c <move_window>
 800d48e:	4603      	mov	r3, r0
 800d490:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d492:	7ffb      	ldrb	r3, [r7, #31]
 800d494:	2b00      	cmp	r3, #0
 800d496:	f040 80a9 	bne.w	800d5ec <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 800d49a:	68fb      	ldr	r3, [r7, #12]
 800d49c:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800d4a0:	69bb      	ldr	r3, [r7, #24]
 800d4a2:	1c59      	adds	r1, r3, #1
 800d4a4:	61b9      	str	r1, [r7, #24]
 800d4a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d4aa:	4413      	add	r3, r2
 800d4ac:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800d4ae:	68bb      	ldr	r3, [r7, #8]
 800d4b0:	f003 0301 	and.w	r3, r3, #1
 800d4b4:	2b00      	cmp	r3, #0
 800d4b6:	d00d      	beq.n	800d4d4 <put_fat+0xa4>
 800d4b8:	697b      	ldr	r3, [r7, #20]
 800d4ba:	781b      	ldrb	r3, [r3, #0]
 800d4bc:	b25b      	sxtb	r3, r3
 800d4be:	f003 030f 	and.w	r3, r3, #15
 800d4c2:	b25a      	sxtb	r2, r3
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	b2db      	uxtb	r3, r3
 800d4c8:	011b      	lsls	r3, r3, #4
 800d4ca:	b25b      	sxtb	r3, r3
 800d4cc:	4313      	orrs	r3, r2
 800d4ce:	b25b      	sxtb	r3, r3
 800d4d0:	b2db      	uxtb	r3, r3
 800d4d2:	e001      	b.n	800d4d8 <put_fat+0xa8>
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	b2db      	uxtb	r3, r3
 800d4d8:	697a      	ldr	r2, [r7, #20]
 800d4da:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800d4dc:	68fb      	ldr	r3, [r7, #12]
 800d4de:	2201      	movs	r2, #1
 800d4e0:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800d4e2:	68fb      	ldr	r3, [r7, #12]
 800d4e4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d4e6:	69bb      	ldr	r3, [r7, #24]
 800d4e8:	0a5b      	lsrs	r3, r3, #9
 800d4ea:	4413      	add	r3, r2
 800d4ec:	4619      	mov	r1, r3
 800d4ee:	68f8      	ldr	r0, [r7, #12]
 800d4f0:	f7ff fe3c 	bl	800d16c <move_window>
 800d4f4:	4603      	mov	r3, r0
 800d4f6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d4f8:	7ffb      	ldrb	r3, [r7, #31]
 800d4fa:	2b00      	cmp	r3, #0
 800d4fc:	d178      	bne.n	800d5f0 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 800d4fe:	68fb      	ldr	r3, [r7, #12]
 800d500:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800d504:	69bb      	ldr	r3, [r7, #24]
 800d506:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d50a:	4413      	add	r3, r2
 800d50c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800d50e:	68bb      	ldr	r3, [r7, #8]
 800d510:	f003 0301 	and.w	r3, r3, #1
 800d514:	2b00      	cmp	r3, #0
 800d516:	d003      	beq.n	800d520 <put_fat+0xf0>
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	091b      	lsrs	r3, r3, #4
 800d51c:	b2db      	uxtb	r3, r3
 800d51e:	e00e      	b.n	800d53e <put_fat+0x10e>
 800d520:	697b      	ldr	r3, [r7, #20]
 800d522:	781b      	ldrb	r3, [r3, #0]
 800d524:	b25b      	sxtb	r3, r3
 800d526:	f023 030f 	bic.w	r3, r3, #15
 800d52a:	b25a      	sxtb	r2, r3
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	0a1b      	lsrs	r3, r3, #8
 800d530:	b25b      	sxtb	r3, r3
 800d532:	f003 030f 	and.w	r3, r3, #15
 800d536:	b25b      	sxtb	r3, r3
 800d538:	4313      	orrs	r3, r2
 800d53a:	b25b      	sxtb	r3, r3
 800d53c:	b2db      	uxtb	r3, r3
 800d53e:	697a      	ldr	r2, [r7, #20]
 800d540:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800d542:	68fb      	ldr	r3, [r7, #12]
 800d544:	2201      	movs	r2, #1
 800d546:	70da      	strb	r2, [r3, #3]
			break;
 800d548:	e057      	b.n	800d5fa <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800d54a:	68fb      	ldr	r3, [r7, #12]
 800d54c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d54e:	68bb      	ldr	r3, [r7, #8]
 800d550:	0a1b      	lsrs	r3, r3, #8
 800d552:	4413      	add	r3, r2
 800d554:	4619      	mov	r1, r3
 800d556:	68f8      	ldr	r0, [r7, #12]
 800d558:	f7ff fe08 	bl	800d16c <move_window>
 800d55c:	4603      	mov	r3, r0
 800d55e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d560:	7ffb      	ldrb	r3, [r7, #31]
 800d562:	2b00      	cmp	r3, #0
 800d564:	d146      	bne.n	800d5f4 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800d566:	68fb      	ldr	r3, [r7, #12]
 800d568:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800d56c:	68bb      	ldr	r3, [r7, #8]
 800d56e:	005b      	lsls	r3, r3, #1
 800d570:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800d574:	4413      	add	r3, r2
 800d576:	687a      	ldr	r2, [r7, #4]
 800d578:	b292      	uxth	r2, r2
 800d57a:	4611      	mov	r1, r2
 800d57c:	4618      	mov	r0, r3
 800d57e:	f7ff fb80 	bl	800cc82 <st_word>
			fs->wflag = 1;
 800d582:	68fb      	ldr	r3, [r7, #12]
 800d584:	2201      	movs	r2, #1
 800d586:	70da      	strb	r2, [r3, #3]
			break;
 800d588:	e037      	b.n	800d5fa <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800d58a:	68fb      	ldr	r3, [r7, #12]
 800d58c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d58e:	68bb      	ldr	r3, [r7, #8]
 800d590:	09db      	lsrs	r3, r3, #7
 800d592:	4413      	add	r3, r2
 800d594:	4619      	mov	r1, r3
 800d596:	68f8      	ldr	r0, [r7, #12]
 800d598:	f7ff fde8 	bl	800d16c <move_window>
 800d59c:	4603      	mov	r3, r0
 800d59e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d5a0:	7ffb      	ldrb	r3, [r7, #31]
 800d5a2:	2b00      	cmp	r3, #0
 800d5a4:	d128      	bne.n	800d5f8 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 800d5ac:	68fb      	ldr	r3, [r7, #12]
 800d5ae:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800d5b2:	68bb      	ldr	r3, [r7, #8]
 800d5b4:	009b      	lsls	r3, r3, #2
 800d5b6:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800d5ba:	4413      	add	r3, r2
 800d5bc:	4618      	mov	r0, r3
 800d5be:	f7ff fb3d 	bl	800cc3c <ld_dword>
 800d5c2:	4603      	mov	r3, r0
 800d5c4:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800d5c8:	4323      	orrs	r3, r4
 800d5ca:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800d5cc:	68fb      	ldr	r3, [r7, #12]
 800d5ce:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800d5d2:	68bb      	ldr	r3, [r7, #8]
 800d5d4:	009b      	lsls	r3, r3, #2
 800d5d6:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800d5da:	4413      	add	r3, r2
 800d5dc:	6879      	ldr	r1, [r7, #4]
 800d5de:	4618      	mov	r0, r3
 800d5e0:	f7ff fb6a 	bl	800ccb8 <st_dword>
			fs->wflag = 1;
 800d5e4:	68fb      	ldr	r3, [r7, #12]
 800d5e6:	2201      	movs	r2, #1
 800d5e8:	70da      	strb	r2, [r3, #3]
			break;
 800d5ea:	e006      	b.n	800d5fa <put_fat+0x1ca>
			if (res != FR_OK) break;
 800d5ec:	bf00      	nop
 800d5ee:	e004      	b.n	800d5fa <put_fat+0x1ca>
			if (res != FR_OK) break;
 800d5f0:	bf00      	nop
 800d5f2:	e002      	b.n	800d5fa <put_fat+0x1ca>
			if (res != FR_OK) break;
 800d5f4:	bf00      	nop
 800d5f6:	e000      	b.n	800d5fa <put_fat+0x1ca>
			if (res != FR_OK) break;
 800d5f8:	bf00      	nop
		}
	}
	return res;
 800d5fa:	7ffb      	ldrb	r3, [r7, #31]
}
 800d5fc:	4618      	mov	r0, r3
 800d5fe:	3724      	adds	r7, #36	@ 0x24
 800d600:	46bd      	mov	sp, r7
 800d602:	bd90      	pop	{r4, r7, pc}

0800d604 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800d604:	b580      	push	{r7, lr}
 800d606:	b088      	sub	sp, #32
 800d608:	af00      	add	r7, sp, #0
 800d60a:	60f8      	str	r0, [r7, #12]
 800d60c:	60b9      	str	r1, [r7, #8]
 800d60e:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800d610:	2300      	movs	r3, #0
 800d612:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800d614:	68fb      	ldr	r3, [r7, #12]
 800d616:	681b      	ldr	r3, [r3, #0]
 800d618:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800d61a:	68bb      	ldr	r3, [r7, #8]
 800d61c:	2b01      	cmp	r3, #1
 800d61e:	d904      	bls.n	800d62a <remove_chain+0x26>
 800d620:	69bb      	ldr	r3, [r7, #24]
 800d622:	699b      	ldr	r3, [r3, #24]
 800d624:	68ba      	ldr	r2, [r7, #8]
 800d626:	429a      	cmp	r2, r3
 800d628:	d301      	bcc.n	800d62e <remove_chain+0x2a>
 800d62a:	2302      	movs	r3, #2
 800d62c:	e04b      	b.n	800d6c6 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	2b00      	cmp	r3, #0
 800d632:	d00c      	beq.n	800d64e <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800d634:	f04f 32ff 	mov.w	r2, #4294967295
 800d638:	6879      	ldr	r1, [r7, #4]
 800d63a:	69b8      	ldr	r0, [r7, #24]
 800d63c:	f7ff fef8 	bl	800d430 <put_fat>
 800d640:	4603      	mov	r3, r0
 800d642:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800d644:	7ffb      	ldrb	r3, [r7, #31]
 800d646:	2b00      	cmp	r3, #0
 800d648:	d001      	beq.n	800d64e <remove_chain+0x4a>
 800d64a:	7ffb      	ldrb	r3, [r7, #31]
 800d64c:	e03b      	b.n	800d6c6 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800d64e:	68b9      	ldr	r1, [r7, #8]
 800d650:	68f8      	ldr	r0, [r7, #12]
 800d652:	f7ff fe46 	bl	800d2e2 <get_fat>
 800d656:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800d658:	697b      	ldr	r3, [r7, #20]
 800d65a:	2b00      	cmp	r3, #0
 800d65c:	d031      	beq.n	800d6c2 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800d65e:	697b      	ldr	r3, [r7, #20]
 800d660:	2b01      	cmp	r3, #1
 800d662:	d101      	bne.n	800d668 <remove_chain+0x64>
 800d664:	2302      	movs	r3, #2
 800d666:	e02e      	b.n	800d6c6 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800d668:	697b      	ldr	r3, [r7, #20]
 800d66a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d66e:	d101      	bne.n	800d674 <remove_chain+0x70>
 800d670:	2301      	movs	r3, #1
 800d672:	e028      	b.n	800d6c6 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800d674:	2200      	movs	r2, #0
 800d676:	68b9      	ldr	r1, [r7, #8]
 800d678:	69b8      	ldr	r0, [r7, #24]
 800d67a:	f7ff fed9 	bl	800d430 <put_fat>
 800d67e:	4603      	mov	r3, r0
 800d680:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800d682:	7ffb      	ldrb	r3, [r7, #31]
 800d684:	2b00      	cmp	r3, #0
 800d686:	d001      	beq.n	800d68c <remove_chain+0x88>
 800d688:	7ffb      	ldrb	r3, [r7, #31]
 800d68a:	e01c      	b.n	800d6c6 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800d68c:	69bb      	ldr	r3, [r7, #24]
 800d68e:	695a      	ldr	r2, [r3, #20]
 800d690:	69bb      	ldr	r3, [r7, #24]
 800d692:	699b      	ldr	r3, [r3, #24]
 800d694:	3b02      	subs	r3, #2
 800d696:	429a      	cmp	r2, r3
 800d698:	d20b      	bcs.n	800d6b2 <remove_chain+0xae>
			fs->free_clst++;
 800d69a:	69bb      	ldr	r3, [r7, #24]
 800d69c:	695b      	ldr	r3, [r3, #20]
 800d69e:	1c5a      	adds	r2, r3, #1
 800d6a0:	69bb      	ldr	r3, [r7, #24]
 800d6a2:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800d6a4:	69bb      	ldr	r3, [r7, #24]
 800d6a6:	791b      	ldrb	r3, [r3, #4]
 800d6a8:	f043 0301 	orr.w	r3, r3, #1
 800d6ac:	b2da      	uxtb	r2, r3
 800d6ae:	69bb      	ldr	r3, [r7, #24]
 800d6b0:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800d6b2:	697b      	ldr	r3, [r7, #20]
 800d6b4:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800d6b6:	69bb      	ldr	r3, [r7, #24]
 800d6b8:	699b      	ldr	r3, [r3, #24]
 800d6ba:	68ba      	ldr	r2, [r7, #8]
 800d6bc:	429a      	cmp	r2, r3
 800d6be:	d3c6      	bcc.n	800d64e <remove_chain+0x4a>
 800d6c0:	e000      	b.n	800d6c4 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800d6c2:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800d6c4:	2300      	movs	r3, #0
}
 800d6c6:	4618      	mov	r0, r3
 800d6c8:	3720      	adds	r7, #32
 800d6ca:	46bd      	mov	sp, r7
 800d6cc:	bd80      	pop	{r7, pc}

0800d6ce <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800d6ce:	b580      	push	{r7, lr}
 800d6d0:	b088      	sub	sp, #32
 800d6d2:	af00      	add	r7, sp, #0
 800d6d4:	6078      	str	r0, [r7, #4]
 800d6d6:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	681b      	ldr	r3, [r3, #0]
 800d6dc:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800d6de:	683b      	ldr	r3, [r7, #0]
 800d6e0:	2b00      	cmp	r3, #0
 800d6e2:	d10d      	bne.n	800d700 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800d6e4:	693b      	ldr	r3, [r7, #16]
 800d6e6:	691b      	ldr	r3, [r3, #16]
 800d6e8:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800d6ea:	69bb      	ldr	r3, [r7, #24]
 800d6ec:	2b00      	cmp	r3, #0
 800d6ee:	d004      	beq.n	800d6fa <create_chain+0x2c>
 800d6f0:	693b      	ldr	r3, [r7, #16]
 800d6f2:	699b      	ldr	r3, [r3, #24]
 800d6f4:	69ba      	ldr	r2, [r7, #24]
 800d6f6:	429a      	cmp	r2, r3
 800d6f8:	d31b      	bcc.n	800d732 <create_chain+0x64>
 800d6fa:	2301      	movs	r3, #1
 800d6fc:	61bb      	str	r3, [r7, #24]
 800d6fe:	e018      	b.n	800d732 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800d700:	6839      	ldr	r1, [r7, #0]
 800d702:	6878      	ldr	r0, [r7, #4]
 800d704:	f7ff fded 	bl	800d2e2 <get_fat>
 800d708:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800d70a:	68fb      	ldr	r3, [r7, #12]
 800d70c:	2b01      	cmp	r3, #1
 800d70e:	d801      	bhi.n	800d714 <create_chain+0x46>
 800d710:	2301      	movs	r3, #1
 800d712:	e070      	b.n	800d7f6 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800d714:	68fb      	ldr	r3, [r7, #12]
 800d716:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d71a:	d101      	bne.n	800d720 <create_chain+0x52>
 800d71c:	68fb      	ldr	r3, [r7, #12]
 800d71e:	e06a      	b.n	800d7f6 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800d720:	693b      	ldr	r3, [r7, #16]
 800d722:	699b      	ldr	r3, [r3, #24]
 800d724:	68fa      	ldr	r2, [r7, #12]
 800d726:	429a      	cmp	r2, r3
 800d728:	d201      	bcs.n	800d72e <create_chain+0x60>
 800d72a:	68fb      	ldr	r3, [r7, #12]
 800d72c:	e063      	b.n	800d7f6 <create_chain+0x128>
		scl = clst;
 800d72e:	683b      	ldr	r3, [r7, #0]
 800d730:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800d732:	69bb      	ldr	r3, [r7, #24]
 800d734:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800d736:	69fb      	ldr	r3, [r7, #28]
 800d738:	3301      	adds	r3, #1
 800d73a:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800d73c:	693b      	ldr	r3, [r7, #16]
 800d73e:	699b      	ldr	r3, [r3, #24]
 800d740:	69fa      	ldr	r2, [r7, #28]
 800d742:	429a      	cmp	r2, r3
 800d744:	d307      	bcc.n	800d756 <create_chain+0x88>
				ncl = 2;
 800d746:	2302      	movs	r3, #2
 800d748:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800d74a:	69fa      	ldr	r2, [r7, #28]
 800d74c:	69bb      	ldr	r3, [r7, #24]
 800d74e:	429a      	cmp	r2, r3
 800d750:	d901      	bls.n	800d756 <create_chain+0x88>
 800d752:	2300      	movs	r3, #0
 800d754:	e04f      	b.n	800d7f6 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800d756:	69f9      	ldr	r1, [r7, #28]
 800d758:	6878      	ldr	r0, [r7, #4]
 800d75a:	f7ff fdc2 	bl	800d2e2 <get_fat>
 800d75e:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800d760:	68fb      	ldr	r3, [r7, #12]
 800d762:	2b00      	cmp	r3, #0
 800d764:	d00e      	beq.n	800d784 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800d766:	68fb      	ldr	r3, [r7, #12]
 800d768:	2b01      	cmp	r3, #1
 800d76a:	d003      	beq.n	800d774 <create_chain+0xa6>
 800d76c:	68fb      	ldr	r3, [r7, #12]
 800d76e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d772:	d101      	bne.n	800d778 <create_chain+0xaa>
 800d774:	68fb      	ldr	r3, [r7, #12]
 800d776:	e03e      	b.n	800d7f6 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800d778:	69fa      	ldr	r2, [r7, #28]
 800d77a:	69bb      	ldr	r3, [r7, #24]
 800d77c:	429a      	cmp	r2, r3
 800d77e:	d1da      	bne.n	800d736 <create_chain+0x68>
 800d780:	2300      	movs	r3, #0
 800d782:	e038      	b.n	800d7f6 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800d784:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800d786:	f04f 32ff 	mov.w	r2, #4294967295
 800d78a:	69f9      	ldr	r1, [r7, #28]
 800d78c:	6938      	ldr	r0, [r7, #16]
 800d78e:	f7ff fe4f 	bl	800d430 <put_fat>
 800d792:	4603      	mov	r3, r0
 800d794:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800d796:	7dfb      	ldrb	r3, [r7, #23]
 800d798:	2b00      	cmp	r3, #0
 800d79a:	d109      	bne.n	800d7b0 <create_chain+0xe2>
 800d79c:	683b      	ldr	r3, [r7, #0]
 800d79e:	2b00      	cmp	r3, #0
 800d7a0:	d006      	beq.n	800d7b0 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800d7a2:	69fa      	ldr	r2, [r7, #28]
 800d7a4:	6839      	ldr	r1, [r7, #0]
 800d7a6:	6938      	ldr	r0, [r7, #16]
 800d7a8:	f7ff fe42 	bl	800d430 <put_fat>
 800d7ac:	4603      	mov	r3, r0
 800d7ae:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800d7b0:	7dfb      	ldrb	r3, [r7, #23]
 800d7b2:	2b00      	cmp	r3, #0
 800d7b4:	d116      	bne.n	800d7e4 <create_chain+0x116>
		fs->last_clst = ncl;
 800d7b6:	693b      	ldr	r3, [r7, #16]
 800d7b8:	69fa      	ldr	r2, [r7, #28]
 800d7ba:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800d7bc:	693b      	ldr	r3, [r7, #16]
 800d7be:	695a      	ldr	r2, [r3, #20]
 800d7c0:	693b      	ldr	r3, [r7, #16]
 800d7c2:	699b      	ldr	r3, [r3, #24]
 800d7c4:	3b02      	subs	r3, #2
 800d7c6:	429a      	cmp	r2, r3
 800d7c8:	d804      	bhi.n	800d7d4 <create_chain+0x106>
 800d7ca:	693b      	ldr	r3, [r7, #16]
 800d7cc:	695b      	ldr	r3, [r3, #20]
 800d7ce:	1e5a      	subs	r2, r3, #1
 800d7d0:	693b      	ldr	r3, [r7, #16]
 800d7d2:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800d7d4:	693b      	ldr	r3, [r7, #16]
 800d7d6:	791b      	ldrb	r3, [r3, #4]
 800d7d8:	f043 0301 	orr.w	r3, r3, #1
 800d7dc:	b2da      	uxtb	r2, r3
 800d7de:	693b      	ldr	r3, [r7, #16]
 800d7e0:	711a      	strb	r2, [r3, #4]
 800d7e2:	e007      	b.n	800d7f4 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800d7e4:	7dfb      	ldrb	r3, [r7, #23]
 800d7e6:	2b01      	cmp	r3, #1
 800d7e8:	d102      	bne.n	800d7f0 <create_chain+0x122>
 800d7ea:	f04f 33ff 	mov.w	r3, #4294967295
 800d7ee:	e000      	b.n	800d7f2 <create_chain+0x124>
 800d7f0:	2301      	movs	r3, #1
 800d7f2:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800d7f4:	69fb      	ldr	r3, [r7, #28]
}
 800d7f6:	4618      	mov	r0, r3
 800d7f8:	3720      	adds	r7, #32
 800d7fa:	46bd      	mov	sp, r7
 800d7fc:	bd80      	pop	{r7, pc}

0800d7fe <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800d7fe:	b480      	push	{r7}
 800d800:	b087      	sub	sp, #28
 800d802:	af00      	add	r7, sp, #0
 800d804:	6078      	str	r0, [r7, #4]
 800d806:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	681b      	ldr	r3, [r3, #0]
 800d80c:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d812:	3304      	adds	r3, #4
 800d814:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800d816:	683b      	ldr	r3, [r7, #0]
 800d818:	0a5b      	lsrs	r3, r3, #9
 800d81a:	68fa      	ldr	r2, [r7, #12]
 800d81c:	8952      	ldrh	r2, [r2, #10]
 800d81e:	fbb3 f3f2 	udiv	r3, r3, r2
 800d822:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800d824:	693b      	ldr	r3, [r7, #16]
 800d826:	1d1a      	adds	r2, r3, #4
 800d828:	613a      	str	r2, [r7, #16]
 800d82a:	681b      	ldr	r3, [r3, #0]
 800d82c:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800d82e:	68bb      	ldr	r3, [r7, #8]
 800d830:	2b00      	cmp	r3, #0
 800d832:	d101      	bne.n	800d838 <clmt_clust+0x3a>
 800d834:	2300      	movs	r3, #0
 800d836:	e010      	b.n	800d85a <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800d838:	697a      	ldr	r2, [r7, #20]
 800d83a:	68bb      	ldr	r3, [r7, #8]
 800d83c:	429a      	cmp	r2, r3
 800d83e:	d307      	bcc.n	800d850 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800d840:	697a      	ldr	r2, [r7, #20]
 800d842:	68bb      	ldr	r3, [r7, #8]
 800d844:	1ad3      	subs	r3, r2, r3
 800d846:	617b      	str	r3, [r7, #20]
 800d848:	693b      	ldr	r3, [r7, #16]
 800d84a:	3304      	adds	r3, #4
 800d84c:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800d84e:	e7e9      	b.n	800d824 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800d850:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800d852:	693b      	ldr	r3, [r7, #16]
 800d854:	681a      	ldr	r2, [r3, #0]
 800d856:	697b      	ldr	r3, [r7, #20]
 800d858:	4413      	add	r3, r2
}
 800d85a:	4618      	mov	r0, r3
 800d85c:	371c      	adds	r7, #28
 800d85e:	46bd      	mov	sp, r7
 800d860:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d864:	4770      	bx	lr

0800d866 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800d866:	b580      	push	{r7, lr}
 800d868:	b086      	sub	sp, #24
 800d86a:	af00      	add	r7, sp, #0
 800d86c:	6078      	str	r0, [r7, #4]
 800d86e:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	681b      	ldr	r3, [r3, #0]
 800d874:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800d876:	683b      	ldr	r3, [r7, #0]
 800d878:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800d87c:	d204      	bcs.n	800d888 <dir_sdi+0x22>
 800d87e:	683b      	ldr	r3, [r7, #0]
 800d880:	f003 031f 	and.w	r3, r3, #31
 800d884:	2b00      	cmp	r3, #0
 800d886:	d001      	beq.n	800d88c <dir_sdi+0x26>
		return FR_INT_ERR;
 800d888:	2302      	movs	r3, #2
 800d88a:	e063      	b.n	800d954 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	683a      	ldr	r2, [r7, #0]
 800d890:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	689b      	ldr	r3, [r3, #8]
 800d896:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800d898:	697b      	ldr	r3, [r7, #20]
 800d89a:	2b00      	cmp	r3, #0
 800d89c:	d106      	bne.n	800d8ac <dir_sdi+0x46>
 800d89e:	693b      	ldr	r3, [r7, #16]
 800d8a0:	781b      	ldrb	r3, [r3, #0]
 800d8a2:	2b02      	cmp	r3, #2
 800d8a4:	d902      	bls.n	800d8ac <dir_sdi+0x46>
		clst = fs->dirbase;
 800d8a6:	693b      	ldr	r3, [r7, #16]
 800d8a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d8aa:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800d8ac:	697b      	ldr	r3, [r7, #20]
 800d8ae:	2b00      	cmp	r3, #0
 800d8b0:	d10c      	bne.n	800d8cc <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800d8b2:	683b      	ldr	r3, [r7, #0]
 800d8b4:	095b      	lsrs	r3, r3, #5
 800d8b6:	693a      	ldr	r2, [r7, #16]
 800d8b8:	8912      	ldrh	r2, [r2, #8]
 800d8ba:	4293      	cmp	r3, r2
 800d8bc:	d301      	bcc.n	800d8c2 <dir_sdi+0x5c>
 800d8be:	2302      	movs	r3, #2
 800d8c0:	e048      	b.n	800d954 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800d8c2:	693b      	ldr	r3, [r7, #16]
 800d8c4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	61da      	str	r2, [r3, #28]
 800d8ca:	e029      	b.n	800d920 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800d8cc:	693b      	ldr	r3, [r7, #16]
 800d8ce:	895b      	ldrh	r3, [r3, #10]
 800d8d0:	025b      	lsls	r3, r3, #9
 800d8d2:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800d8d4:	e019      	b.n	800d90a <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	6979      	ldr	r1, [r7, #20]
 800d8da:	4618      	mov	r0, r3
 800d8dc:	f7ff fd01 	bl	800d2e2 <get_fat>
 800d8e0:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800d8e2:	697b      	ldr	r3, [r7, #20]
 800d8e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d8e8:	d101      	bne.n	800d8ee <dir_sdi+0x88>
 800d8ea:	2301      	movs	r3, #1
 800d8ec:	e032      	b.n	800d954 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800d8ee:	697b      	ldr	r3, [r7, #20]
 800d8f0:	2b01      	cmp	r3, #1
 800d8f2:	d904      	bls.n	800d8fe <dir_sdi+0x98>
 800d8f4:	693b      	ldr	r3, [r7, #16]
 800d8f6:	699b      	ldr	r3, [r3, #24]
 800d8f8:	697a      	ldr	r2, [r7, #20]
 800d8fa:	429a      	cmp	r2, r3
 800d8fc:	d301      	bcc.n	800d902 <dir_sdi+0x9c>
 800d8fe:	2302      	movs	r3, #2
 800d900:	e028      	b.n	800d954 <dir_sdi+0xee>
			ofs -= csz;
 800d902:	683a      	ldr	r2, [r7, #0]
 800d904:	68fb      	ldr	r3, [r7, #12]
 800d906:	1ad3      	subs	r3, r2, r3
 800d908:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800d90a:	683a      	ldr	r2, [r7, #0]
 800d90c:	68fb      	ldr	r3, [r7, #12]
 800d90e:	429a      	cmp	r2, r3
 800d910:	d2e1      	bcs.n	800d8d6 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800d912:	6979      	ldr	r1, [r7, #20]
 800d914:	6938      	ldr	r0, [r7, #16]
 800d916:	f7ff fcc5 	bl	800d2a4 <clust2sect>
 800d91a:	4602      	mov	r2, r0
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	697a      	ldr	r2, [r7, #20]
 800d924:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	69db      	ldr	r3, [r3, #28]
 800d92a:	2b00      	cmp	r3, #0
 800d92c:	d101      	bne.n	800d932 <dir_sdi+0xcc>
 800d92e:	2302      	movs	r3, #2
 800d930:	e010      	b.n	800d954 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800d932:	687b      	ldr	r3, [r7, #4]
 800d934:	69da      	ldr	r2, [r3, #28]
 800d936:	683b      	ldr	r3, [r7, #0]
 800d938:	0a5b      	lsrs	r3, r3, #9
 800d93a:	441a      	add	r2, r3
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800d940:	693b      	ldr	r3, [r7, #16]
 800d942:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800d946:	683b      	ldr	r3, [r7, #0]
 800d948:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d94c:	441a      	add	r2, r3
 800d94e:	687b      	ldr	r3, [r7, #4]
 800d950:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800d952:	2300      	movs	r3, #0
}
 800d954:	4618      	mov	r0, r3
 800d956:	3718      	adds	r7, #24
 800d958:	46bd      	mov	sp, r7
 800d95a:	bd80      	pop	{r7, pc}

0800d95c <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800d95c:	b580      	push	{r7, lr}
 800d95e:	b086      	sub	sp, #24
 800d960:	af00      	add	r7, sp, #0
 800d962:	6078      	str	r0, [r7, #4]
 800d964:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	681b      	ldr	r3, [r3, #0]
 800d96a:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	695b      	ldr	r3, [r3, #20]
 800d970:	3320      	adds	r3, #32
 800d972:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	69db      	ldr	r3, [r3, #28]
 800d978:	2b00      	cmp	r3, #0
 800d97a:	d003      	beq.n	800d984 <dir_next+0x28>
 800d97c:	68bb      	ldr	r3, [r7, #8]
 800d97e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800d982:	d301      	bcc.n	800d988 <dir_next+0x2c>
 800d984:	2304      	movs	r3, #4
 800d986:	e0aa      	b.n	800dade <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800d988:	68bb      	ldr	r3, [r7, #8]
 800d98a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d98e:	2b00      	cmp	r3, #0
 800d990:	f040 8098 	bne.w	800dac4 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	69db      	ldr	r3, [r3, #28]
 800d998:	1c5a      	adds	r2, r3, #1
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	699b      	ldr	r3, [r3, #24]
 800d9a2:	2b00      	cmp	r3, #0
 800d9a4:	d10b      	bne.n	800d9be <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800d9a6:	68bb      	ldr	r3, [r7, #8]
 800d9a8:	095b      	lsrs	r3, r3, #5
 800d9aa:	68fa      	ldr	r2, [r7, #12]
 800d9ac:	8912      	ldrh	r2, [r2, #8]
 800d9ae:	4293      	cmp	r3, r2
 800d9b0:	f0c0 8088 	bcc.w	800dac4 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	2200      	movs	r2, #0
 800d9b8:	61da      	str	r2, [r3, #28]
 800d9ba:	2304      	movs	r3, #4
 800d9bc:	e08f      	b.n	800dade <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800d9be:	68bb      	ldr	r3, [r7, #8]
 800d9c0:	0a5b      	lsrs	r3, r3, #9
 800d9c2:	68fa      	ldr	r2, [r7, #12]
 800d9c4:	8952      	ldrh	r2, [r2, #10]
 800d9c6:	3a01      	subs	r2, #1
 800d9c8:	4013      	ands	r3, r2
 800d9ca:	2b00      	cmp	r3, #0
 800d9cc:	d17a      	bne.n	800dac4 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800d9ce:	687a      	ldr	r2, [r7, #4]
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	699b      	ldr	r3, [r3, #24]
 800d9d4:	4619      	mov	r1, r3
 800d9d6:	4610      	mov	r0, r2
 800d9d8:	f7ff fc83 	bl	800d2e2 <get_fat>
 800d9dc:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800d9de:	697b      	ldr	r3, [r7, #20]
 800d9e0:	2b01      	cmp	r3, #1
 800d9e2:	d801      	bhi.n	800d9e8 <dir_next+0x8c>
 800d9e4:	2302      	movs	r3, #2
 800d9e6:	e07a      	b.n	800dade <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800d9e8:	697b      	ldr	r3, [r7, #20]
 800d9ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d9ee:	d101      	bne.n	800d9f4 <dir_next+0x98>
 800d9f0:	2301      	movs	r3, #1
 800d9f2:	e074      	b.n	800dade <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800d9f4:	68fb      	ldr	r3, [r7, #12]
 800d9f6:	699b      	ldr	r3, [r3, #24]
 800d9f8:	697a      	ldr	r2, [r7, #20]
 800d9fa:	429a      	cmp	r2, r3
 800d9fc:	d358      	bcc.n	800dab0 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800d9fe:	683b      	ldr	r3, [r7, #0]
 800da00:	2b00      	cmp	r3, #0
 800da02:	d104      	bne.n	800da0e <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	2200      	movs	r2, #0
 800da08:	61da      	str	r2, [r3, #28]
 800da0a:	2304      	movs	r3, #4
 800da0c:	e067      	b.n	800dade <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800da0e:	687a      	ldr	r2, [r7, #4]
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	699b      	ldr	r3, [r3, #24]
 800da14:	4619      	mov	r1, r3
 800da16:	4610      	mov	r0, r2
 800da18:	f7ff fe59 	bl	800d6ce <create_chain>
 800da1c:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800da1e:	697b      	ldr	r3, [r7, #20]
 800da20:	2b00      	cmp	r3, #0
 800da22:	d101      	bne.n	800da28 <dir_next+0xcc>
 800da24:	2307      	movs	r3, #7
 800da26:	e05a      	b.n	800dade <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800da28:	697b      	ldr	r3, [r7, #20]
 800da2a:	2b01      	cmp	r3, #1
 800da2c:	d101      	bne.n	800da32 <dir_next+0xd6>
 800da2e:	2302      	movs	r3, #2
 800da30:	e055      	b.n	800dade <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800da32:	697b      	ldr	r3, [r7, #20]
 800da34:	f1b3 3fff 	cmp.w	r3, #4294967295
 800da38:	d101      	bne.n	800da3e <dir_next+0xe2>
 800da3a:	2301      	movs	r3, #1
 800da3c:	e04f      	b.n	800dade <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800da3e:	68f8      	ldr	r0, [r7, #12]
 800da40:	f7ff fb50 	bl	800d0e4 <sync_window>
 800da44:	4603      	mov	r3, r0
 800da46:	2b00      	cmp	r3, #0
 800da48:	d001      	beq.n	800da4e <dir_next+0xf2>
 800da4a:	2301      	movs	r3, #1
 800da4c:	e047      	b.n	800dade <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800da4e:	68fb      	ldr	r3, [r7, #12]
 800da50:	3334      	adds	r3, #52	@ 0x34
 800da52:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800da56:	2100      	movs	r1, #0
 800da58:	4618      	mov	r0, r3
 800da5a:	f7ff f97a 	bl	800cd52 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800da5e:	2300      	movs	r3, #0
 800da60:	613b      	str	r3, [r7, #16]
 800da62:	6979      	ldr	r1, [r7, #20]
 800da64:	68f8      	ldr	r0, [r7, #12]
 800da66:	f7ff fc1d 	bl	800d2a4 <clust2sect>
 800da6a:	4602      	mov	r2, r0
 800da6c:	68fb      	ldr	r3, [r7, #12]
 800da6e:	631a      	str	r2, [r3, #48]	@ 0x30
 800da70:	e012      	b.n	800da98 <dir_next+0x13c>
						fs->wflag = 1;
 800da72:	68fb      	ldr	r3, [r7, #12]
 800da74:	2201      	movs	r2, #1
 800da76:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800da78:	68f8      	ldr	r0, [r7, #12]
 800da7a:	f7ff fb33 	bl	800d0e4 <sync_window>
 800da7e:	4603      	mov	r3, r0
 800da80:	2b00      	cmp	r3, #0
 800da82:	d001      	beq.n	800da88 <dir_next+0x12c>
 800da84:	2301      	movs	r3, #1
 800da86:	e02a      	b.n	800dade <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800da88:	693b      	ldr	r3, [r7, #16]
 800da8a:	3301      	adds	r3, #1
 800da8c:	613b      	str	r3, [r7, #16]
 800da8e:	68fb      	ldr	r3, [r7, #12]
 800da90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800da92:	1c5a      	adds	r2, r3, #1
 800da94:	68fb      	ldr	r3, [r7, #12]
 800da96:	631a      	str	r2, [r3, #48]	@ 0x30
 800da98:	68fb      	ldr	r3, [r7, #12]
 800da9a:	895b      	ldrh	r3, [r3, #10]
 800da9c:	461a      	mov	r2, r3
 800da9e:	693b      	ldr	r3, [r7, #16]
 800daa0:	4293      	cmp	r3, r2
 800daa2:	d3e6      	bcc.n	800da72 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800daa4:	68fb      	ldr	r3, [r7, #12]
 800daa6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800daa8:	693b      	ldr	r3, [r7, #16]
 800daaa:	1ad2      	subs	r2, r2, r3
 800daac:	68fb      	ldr	r3, [r7, #12]
 800daae:	631a      	str	r2, [r3, #48]	@ 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	697a      	ldr	r2, [r7, #20]
 800dab4:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800dab6:	6979      	ldr	r1, [r7, #20]
 800dab8:	68f8      	ldr	r0, [r7, #12]
 800daba:	f7ff fbf3 	bl	800d2a4 <clust2sect>
 800dabe:	4602      	mov	r2, r0
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	68ba      	ldr	r2, [r7, #8]
 800dac8:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800daca:	68fb      	ldr	r3, [r7, #12]
 800dacc:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800dad0:	68bb      	ldr	r3, [r7, #8]
 800dad2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dad6:	441a      	add	r2, r3
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800dadc:	2300      	movs	r3, #0
}
 800dade:	4618      	mov	r0, r3
 800dae0:	3718      	adds	r7, #24
 800dae2:	46bd      	mov	sp, r7
 800dae4:	bd80      	pop	{r7, pc}

0800dae6 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800dae6:	b580      	push	{r7, lr}
 800dae8:	b086      	sub	sp, #24
 800daea:	af00      	add	r7, sp, #0
 800daec:	6078      	str	r0, [r7, #4]
 800daee:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	681b      	ldr	r3, [r3, #0]
 800daf4:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800daf6:	2100      	movs	r1, #0
 800daf8:	6878      	ldr	r0, [r7, #4]
 800dafa:	f7ff feb4 	bl	800d866 <dir_sdi>
 800dafe:	4603      	mov	r3, r0
 800db00:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800db02:	7dfb      	ldrb	r3, [r7, #23]
 800db04:	2b00      	cmp	r3, #0
 800db06:	d12b      	bne.n	800db60 <dir_alloc+0x7a>
		n = 0;
 800db08:	2300      	movs	r3, #0
 800db0a:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	69db      	ldr	r3, [r3, #28]
 800db10:	4619      	mov	r1, r3
 800db12:	68f8      	ldr	r0, [r7, #12]
 800db14:	f7ff fb2a 	bl	800d16c <move_window>
 800db18:	4603      	mov	r3, r0
 800db1a:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800db1c:	7dfb      	ldrb	r3, [r7, #23]
 800db1e:	2b00      	cmp	r3, #0
 800db20:	d11d      	bne.n	800db5e <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	6a1b      	ldr	r3, [r3, #32]
 800db26:	781b      	ldrb	r3, [r3, #0]
 800db28:	2be5      	cmp	r3, #229	@ 0xe5
 800db2a:	d004      	beq.n	800db36 <dir_alloc+0x50>
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	6a1b      	ldr	r3, [r3, #32]
 800db30:	781b      	ldrb	r3, [r3, #0]
 800db32:	2b00      	cmp	r3, #0
 800db34:	d107      	bne.n	800db46 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800db36:	693b      	ldr	r3, [r7, #16]
 800db38:	3301      	adds	r3, #1
 800db3a:	613b      	str	r3, [r7, #16]
 800db3c:	693a      	ldr	r2, [r7, #16]
 800db3e:	683b      	ldr	r3, [r7, #0]
 800db40:	429a      	cmp	r2, r3
 800db42:	d102      	bne.n	800db4a <dir_alloc+0x64>
 800db44:	e00c      	b.n	800db60 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800db46:	2300      	movs	r3, #0
 800db48:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800db4a:	2101      	movs	r1, #1
 800db4c:	6878      	ldr	r0, [r7, #4]
 800db4e:	f7ff ff05 	bl	800d95c <dir_next>
 800db52:	4603      	mov	r3, r0
 800db54:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800db56:	7dfb      	ldrb	r3, [r7, #23]
 800db58:	2b00      	cmp	r3, #0
 800db5a:	d0d7      	beq.n	800db0c <dir_alloc+0x26>
 800db5c:	e000      	b.n	800db60 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800db5e:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800db60:	7dfb      	ldrb	r3, [r7, #23]
 800db62:	2b04      	cmp	r3, #4
 800db64:	d101      	bne.n	800db6a <dir_alloc+0x84>
 800db66:	2307      	movs	r3, #7
 800db68:	75fb      	strb	r3, [r7, #23]
	return res;
 800db6a:	7dfb      	ldrb	r3, [r7, #23]
}
 800db6c:	4618      	mov	r0, r3
 800db6e:	3718      	adds	r7, #24
 800db70:	46bd      	mov	sp, r7
 800db72:	bd80      	pop	{r7, pc}

0800db74 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800db74:	b580      	push	{r7, lr}
 800db76:	b084      	sub	sp, #16
 800db78:	af00      	add	r7, sp, #0
 800db7a:	6078      	str	r0, [r7, #4]
 800db7c:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800db7e:	683b      	ldr	r3, [r7, #0]
 800db80:	331a      	adds	r3, #26
 800db82:	4618      	mov	r0, r3
 800db84:	f7ff f842 	bl	800cc0c <ld_word>
 800db88:	4603      	mov	r3, r0
 800db8a:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	781b      	ldrb	r3, [r3, #0]
 800db90:	2b03      	cmp	r3, #3
 800db92:	d109      	bne.n	800dba8 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800db94:	683b      	ldr	r3, [r7, #0]
 800db96:	3314      	adds	r3, #20
 800db98:	4618      	mov	r0, r3
 800db9a:	f7ff f837 	bl	800cc0c <ld_word>
 800db9e:	4603      	mov	r3, r0
 800dba0:	041b      	lsls	r3, r3, #16
 800dba2:	68fa      	ldr	r2, [r7, #12]
 800dba4:	4313      	orrs	r3, r2
 800dba6:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800dba8:	68fb      	ldr	r3, [r7, #12]
}
 800dbaa:	4618      	mov	r0, r3
 800dbac:	3710      	adds	r7, #16
 800dbae:	46bd      	mov	sp, r7
 800dbb0:	bd80      	pop	{r7, pc}

0800dbb2 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800dbb2:	b580      	push	{r7, lr}
 800dbb4:	b084      	sub	sp, #16
 800dbb6:	af00      	add	r7, sp, #0
 800dbb8:	60f8      	str	r0, [r7, #12]
 800dbba:	60b9      	str	r1, [r7, #8]
 800dbbc:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800dbbe:	68bb      	ldr	r3, [r7, #8]
 800dbc0:	331a      	adds	r3, #26
 800dbc2:	687a      	ldr	r2, [r7, #4]
 800dbc4:	b292      	uxth	r2, r2
 800dbc6:	4611      	mov	r1, r2
 800dbc8:	4618      	mov	r0, r3
 800dbca:	f7ff f85a 	bl	800cc82 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800dbce:	68fb      	ldr	r3, [r7, #12]
 800dbd0:	781b      	ldrb	r3, [r3, #0]
 800dbd2:	2b03      	cmp	r3, #3
 800dbd4:	d109      	bne.n	800dbea <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800dbd6:	68bb      	ldr	r3, [r7, #8]
 800dbd8:	f103 0214 	add.w	r2, r3, #20
 800dbdc:	687b      	ldr	r3, [r7, #4]
 800dbde:	0c1b      	lsrs	r3, r3, #16
 800dbe0:	b29b      	uxth	r3, r3
 800dbe2:	4619      	mov	r1, r3
 800dbe4:	4610      	mov	r0, r2
 800dbe6:	f7ff f84c 	bl	800cc82 <st_word>
	}
}
 800dbea:	bf00      	nop
 800dbec:	3710      	adds	r7, #16
 800dbee:	46bd      	mov	sp, r7
 800dbf0:	bd80      	pop	{r7, pc}
	...

0800dbf4 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800dbf4:	b590      	push	{r4, r7, lr}
 800dbf6:	b087      	sub	sp, #28
 800dbf8:	af00      	add	r7, sp, #0
 800dbfa:	6078      	str	r0, [r7, #4]
 800dbfc:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800dbfe:	683b      	ldr	r3, [r7, #0]
 800dc00:	331a      	adds	r3, #26
 800dc02:	4618      	mov	r0, r3
 800dc04:	f7ff f802 	bl	800cc0c <ld_word>
 800dc08:	4603      	mov	r3, r0
 800dc0a:	2b00      	cmp	r3, #0
 800dc0c:	d001      	beq.n	800dc12 <cmp_lfn+0x1e>
 800dc0e:	2300      	movs	r3, #0
 800dc10:	e059      	b.n	800dcc6 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800dc12:	683b      	ldr	r3, [r7, #0]
 800dc14:	781b      	ldrb	r3, [r3, #0]
 800dc16:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800dc1a:	1e5a      	subs	r2, r3, #1
 800dc1c:	4613      	mov	r3, r2
 800dc1e:	005b      	lsls	r3, r3, #1
 800dc20:	4413      	add	r3, r2
 800dc22:	009b      	lsls	r3, r3, #2
 800dc24:	4413      	add	r3, r2
 800dc26:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800dc28:	2301      	movs	r3, #1
 800dc2a:	81fb      	strh	r3, [r7, #14]
 800dc2c:	2300      	movs	r3, #0
 800dc2e:	613b      	str	r3, [r7, #16]
 800dc30:	e033      	b.n	800dc9a <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800dc32:	4a27      	ldr	r2, [pc, #156]	@ (800dcd0 <cmp_lfn+0xdc>)
 800dc34:	693b      	ldr	r3, [r7, #16]
 800dc36:	4413      	add	r3, r2
 800dc38:	781b      	ldrb	r3, [r3, #0]
 800dc3a:	461a      	mov	r2, r3
 800dc3c:	683b      	ldr	r3, [r7, #0]
 800dc3e:	4413      	add	r3, r2
 800dc40:	4618      	mov	r0, r3
 800dc42:	f7fe ffe3 	bl	800cc0c <ld_word>
 800dc46:	4603      	mov	r3, r0
 800dc48:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800dc4a:	89fb      	ldrh	r3, [r7, #14]
 800dc4c:	2b00      	cmp	r3, #0
 800dc4e:	d01a      	beq.n	800dc86 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800dc50:	697b      	ldr	r3, [r7, #20]
 800dc52:	2bfe      	cmp	r3, #254	@ 0xfe
 800dc54:	d812      	bhi.n	800dc7c <cmp_lfn+0x88>
 800dc56:	89bb      	ldrh	r3, [r7, #12]
 800dc58:	4618      	mov	r0, r3
 800dc5a:	f001 ff13 	bl	800fa84 <ff_wtoupper>
 800dc5e:	4603      	mov	r3, r0
 800dc60:	461c      	mov	r4, r3
 800dc62:	697b      	ldr	r3, [r7, #20]
 800dc64:	1c5a      	adds	r2, r3, #1
 800dc66:	617a      	str	r2, [r7, #20]
 800dc68:	005b      	lsls	r3, r3, #1
 800dc6a:	687a      	ldr	r2, [r7, #4]
 800dc6c:	4413      	add	r3, r2
 800dc6e:	881b      	ldrh	r3, [r3, #0]
 800dc70:	4618      	mov	r0, r3
 800dc72:	f001 ff07 	bl	800fa84 <ff_wtoupper>
 800dc76:	4603      	mov	r3, r0
 800dc78:	429c      	cmp	r4, r3
 800dc7a:	d001      	beq.n	800dc80 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800dc7c:	2300      	movs	r3, #0
 800dc7e:	e022      	b.n	800dcc6 <cmp_lfn+0xd2>
			}
			wc = uc;
 800dc80:	89bb      	ldrh	r3, [r7, #12]
 800dc82:	81fb      	strh	r3, [r7, #14]
 800dc84:	e006      	b.n	800dc94 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800dc86:	89bb      	ldrh	r3, [r7, #12]
 800dc88:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800dc8c:	4293      	cmp	r3, r2
 800dc8e:	d001      	beq.n	800dc94 <cmp_lfn+0xa0>
 800dc90:	2300      	movs	r3, #0
 800dc92:	e018      	b.n	800dcc6 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800dc94:	693b      	ldr	r3, [r7, #16]
 800dc96:	3301      	adds	r3, #1
 800dc98:	613b      	str	r3, [r7, #16]
 800dc9a:	693b      	ldr	r3, [r7, #16]
 800dc9c:	2b0c      	cmp	r3, #12
 800dc9e:	d9c8      	bls.n	800dc32 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800dca0:	683b      	ldr	r3, [r7, #0]
 800dca2:	781b      	ldrb	r3, [r3, #0]
 800dca4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800dca8:	2b00      	cmp	r3, #0
 800dcaa:	d00b      	beq.n	800dcc4 <cmp_lfn+0xd0>
 800dcac:	89fb      	ldrh	r3, [r7, #14]
 800dcae:	2b00      	cmp	r3, #0
 800dcb0:	d008      	beq.n	800dcc4 <cmp_lfn+0xd0>
 800dcb2:	697b      	ldr	r3, [r7, #20]
 800dcb4:	005b      	lsls	r3, r3, #1
 800dcb6:	687a      	ldr	r2, [r7, #4]
 800dcb8:	4413      	add	r3, r2
 800dcba:	881b      	ldrh	r3, [r3, #0]
 800dcbc:	2b00      	cmp	r3, #0
 800dcbe:	d001      	beq.n	800dcc4 <cmp_lfn+0xd0>
 800dcc0:	2300      	movs	r3, #0
 800dcc2:	e000      	b.n	800dcc6 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800dcc4:	2301      	movs	r3, #1
}
 800dcc6:	4618      	mov	r0, r3
 800dcc8:	371c      	adds	r7, #28
 800dcca:	46bd      	mov	sp, r7
 800dccc:	bd90      	pop	{r4, r7, pc}
 800dcce:	bf00      	nop
 800dcd0:	08011d5c 	.word	0x08011d5c

0800dcd4 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800dcd4:	b580      	push	{r7, lr}
 800dcd6:	b088      	sub	sp, #32
 800dcd8:	af00      	add	r7, sp, #0
 800dcda:	60f8      	str	r0, [r7, #12]
 800dcdc:	60b9      	str	r1, [r7, #8]
 800dcde:	4611      	mov	r1, r2
 800dce0:	461a      	mov	r2, r3
 800dce2:	460b      	mov	r3, r1
 800dce4:	71fb      	strb	r3, [r7, #7]
 800dce6:	4613      	mov	r3, r2
 800dce8:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800dcea:	68bb      	ldr	r3, [r7, #8]
 800dcec:	330d      	adds	r3, #13
 800dcee:	79ba      	ldrb	r2, [r7, #6]
 800dcf0:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800dcf2:	68bb      	ldr	r3, [r7, #8]
 800dcf4:	330b      	adds	r3, #11
 800dcf6:	220f      	movs	r2, #15
 800dcf8:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800dcfa:	68bb      	ldr	r3, [r7, #8]
 800dcfc:	330c      	adds	r3, #12
 800dcfe:	2200      	movs	r2, #0
 800dd00:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800dd02:	68bb      	ldr	r3, [r7, #8]
 800dd04:	331a      	adds	r3, #26
 800dd06:	2100      	movs	r1, #0
 800dd08:	4618      	mov	r0, r3
 800dd0a:	f7fe ffba 	bl	800cc82 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800dd0e:	79fb      	ldrb	r3, [r7, #7]
 800dd10:	1e5a      	subs	r2, r3, #1
 800dd12:	4613      	mov	r3, r2
 800dd14:	005b      	lsls	r3, r3, #1
 800dd16:	4413      	add	r3, r2
 800dd18:	009b      	lsls	r3, r3, #2
 800dd1a:	4413      	add	r3, r2
 800dd1c:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800dd1e:	2300      	movs	r3, #0
 800dd20:	82fb      	strh	r3, [r7, #22]
 800dd22:	2300      	movs	r3, #0
 800dd24:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800dd26:	8afb      	ldrh	r3, [r7, #22]
 800dd28:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800dd2c:	4293      	cmp	r3, r2
 800dd2e:	d007      	beq.n	800dd40 <put_lfn+0x6c>
 800dd30:	69fb      	ldr	r3, [r7, #28]
 800dd32:	1c5a      	adds	r2, r3, #1
 800dd34:	61fa      	str	r2, [r7, #28]
 800dd36:	005b      	lsls	r3, r3, #1
 800dd38:	68fa      	ldr	r2, [r7, #12]
 800dd3a:	4413      	add	r3, r2
 800dd3c:	881b      	ldrh	r3, [r3, #0]
 800dd3e:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800dd40:	4a17      	ldr	r2, [pc, #92]	@ (800dda0 <put_lfn+0xcc>)
 800dd42:	69bb      	ldr	r3, [r7, #24]
 800dd44:	4413      	add	r3, r2
 800dd46:	781b      	ldrb	r3, [r3, #0]
 800dd48:	461a      	mov	r2, r3
 800dd4a:	68bb      	ldr	r3, [r7, #8]
 800dd4c:	4413      	add	r3, r2
 800dd4e:	8afa      	ldrh	r2, [r7, #22]
 800dd50:	4611      	mov	r1, r2
 800dd52:	4618      	mov	r0, r3
 800dd54:	f7fe ff95 	bl	800cc82 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800dd58:	8afb      	ldrh	r3, [r7, #22]
 800dd5a:	2b00      	cmp	r3, #0
 800dd5c:	d102      	bne.n	800dd64 <put_lfn+0x90>
 800dd5e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800dd62:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800dd64:	69bb      	ldr	r3, [r7, #24]
 800dd66:	3301      	adds	r3, #1
 800dd68:	61bb      	str	r3, [r7, #24]
 800dd6a:	69bb      	ldr	r3, [r7, #24]
 800dd6c:	2b0c      	cmp	r3, #12
 800dd6e:	d9da      	bls.n	800dd26 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800dd70:	8afb      	ldrh	r3, [r7, #22]
 800dd72:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800dd76:	4293      	cmp	r3, r2
 800dd78:	d006      	beq.n	800dd88 <put_lfn+0xb4>
 800dd7a:	69fb      	ldr	r3, [r7, #28]
 800dd7c:	005b      	lsls	r3, r3, #1
 800dd7e:	68fa      	ldr	r2, [r7, #12]
 800dd80:	4413      	add	r3, r2
 800dd82:	881b      	ldrh	r3, [r3, #0]
 800dd84:	2b00      	cmp	r3, #0
 800dd86:	d103      	bne.n	800dd90 <put_lfn+0xbc>
 800dd88:	79fb      	ldrb	r3, [r7, #7]
 800dd8a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800dd8e:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800dd90:	68bb      	ldr	r3, [r7, #8]
 800dd92:	79fa      	ldrb	r2, [r7, #7]
 800dd94:	701a      	strb	r2, [r3, #0]
}
 800dd96:	bf00      	nop
 800dd98:	3720      	adds	r7, #32
 800dd9a:	46bd      	mov	sp, r7
 800dd9c:	bd80      	pop	{r7, pc}
 800dd9e:	bf00      	nop
 800dda0:	08011d5c 	.word	0x08011d5c

0800dda4 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800dda4:	b580      	push	{r7, lr}
 800dda6:	b08c      	sub	sp, #48	@ 0x30
 800dda8:	af00      	add	r7, sp, #0
 800ddaa:	60f8      	str	r0, [r7, #12]
 800ddac:	60b9      	str	r1, [r7, #8]
 800ddae:	607a      	str	r2, [r7, #4]
 800ddb0:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800ddb2:	220b      	movs	r2, #11
 800ddb4:	68b9      	ldr	r1, [r7, #8]
 800ddb6:	68f8      	ldr	r0, [r7, #12]
 800ddb8:	f7fe ffaa 	bl	800cd10 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800ddbc:	683b      	ldr	r3, [r7, #0]
 800ddbe:	2b05      	cmp	r3, #5
 800ddc0:	d92b      	bls.n	800de1a <gen_numname+0x76>
		sr = seq;
 800ddc2:	683b      	ldr	r3, [r7, #0]
 800ddc4:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800ddc6:	e022      	b.n	800de0e <gen_numname+0x6a>
			wc = *lfn++;
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	1c9a      	adds	r2, r3, #2
 800ddcc:	607a      	str	r2, [r7, #4]
 800ddce:	881b      	ldrh	r3, [r3, #0]
 800ddd0:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 800ddd2:	2300      	movs	r3, #0
 800ddd4:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ddd6:	e017      	b.n	800de08 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800ddd8:	69fb      	ldr	r3, [r7, #28]
 800ddda:	005a      	lsls	r2, r3, #1
 800dddc:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800ddde:	f003 0301 	and.w	r3, r3, #1
 800dde2:	4413      	add	r3, r2
 800dde4:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800dde6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800dde8:	085b      	lsrs	r3, r3, #1
 800ddea:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800ddec:	69fb      	ldr	r3, [r7, #28]
 800ddee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800ddf2:	2b00      	cmp	r3, #0
 800ddf4:	d005      	beq.n	800de02 <gen_numname+0x5e>
 800ddf6:	69fb      	ldr	r3, [r7, #28]
 800ddf8:	f483 3388 	eor.w	r3, r3, #69632	@ 0x11000
 800ddfc:	f083 0321 	eor.w	r3, r3, #33	@ 0x21
 800de00:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800de02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800de04:	3301      	adds	r3, #1
 800de06:	62bb      	str	r3, [r7, #40]	@ 0x28
 800de08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800de0a:	2b0f      	cmp	r3, #15
 800de0c:	d9e4      	bls.n	800ddd8 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800de0e:	687b      	ldr	r3, [r7, #4]
 800de10:	881b      	ldrh	r3, [r3, #0]
 800de12:	2b00      	cmp	r3, #0
 800de14:	d1d8      	bne.n	800ddc8 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800de16:	69fb      	ldr	r3, [r7, #28]
 800de18:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800de1a:	2307      	movs	r3, #7
 800de1c:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800de1e:	683b      	ldr	r3, [r7, #0]
 800de20:	b2db      	uxtb	r3, r3
 800de22:	f003 030f 	and.w	r3, r3, #15
 800de26:	b2db      	uxtb	r3, r3
 800de28:	3330      	adds	r3, #48	@ 0x30
 800de2a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 800de2e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800de32:	2b39      	cmp	r3, #57	@ 0x39
 800de34:	d904      	bls.n	800de40 <gen_numname+0x9c>
 800de36:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800de3a:	3307      	adds	r3, #7
 800de3c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 800de40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800de42:	1e5a      	subs	r2, r3, #1
 800de44:	62ba      	str	r2, [r7, #40]	@ 0x28
 800de46:	3330      	adds	r3, #48	@ 0x30
 800de48:	443b      	add	r3, r7
 800de4a:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800de4e:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800de52:	683b      	ldr	r3, [r7, #0]
 800de54:	091b      	lsrs	r3, r3, #4
 800de56:	603b      	str	r3, [r7, #0]
	} while (seq);
 800de58:	683b      	ldr	r3, [r7, #0]
 800de5a:	2b00      	cmp	r3, #0
 800de5c:	d1df      	bne.n	800de1e <gen_numname+0x7a>
	ns[i] = '~';
 800de5e:	f107 0214 	add.w	r2, r7, #20
 800de62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800de64:	4413      	add	r3, r2
 800de66:	227e      	movs	r2, #126	@ 0x7e
 800de68:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800de6a:	2300      	movs	r3, #0
 800de6c:	627b      	str	r3, [r7, #36]	@ 0x24
 800de6e:	e002      	b.n	800de76 <gen_numname+0xd2>
 800de70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de72:	3301      	adds	r3, #1
 800de74:	627b      	str	r3, [r7, #36]	@ 0x24
 800de76:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800de78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800de7a:	429a      	cmp	r2, r3
 800de7c:	d205      	bcs.n	800de8a <gen_numname+0xe6>
 800de7e:	68fa      	ldr	r2, [r7, #12]
 800de80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de82:	4413      	add	r3, r2
 800de84:	781b      	ldrb	r3, [r3, #0]
 800de86:	2b20      	cmp	r3, #32
 800de88:	d1f2      	bne.n	800de70 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800de8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800de8c:	2b07      	cmp	r3, #7
 800de8e:	d807      	bhi.n	800dea0 <gen_numname+0xfc>
 800de90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800de92:	1c5a      	adds	r2, r3, #1
 800de94:	62ba      	str	r2, [r7, #40]	@ 0x28
 800de96:	3330      	adds	r3, #48	@ 0x30
 800de98:	443b      	add	r3, r7
 800de9a:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800de9e:	e000      	b.n	800dea2 <gen_numname+0xfe>
 800dea0:	2120      	movs	r1, #32
 800dea2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dea4:	1c5a      	adds	r2, r3, #1
 800dea6:	627a      	str	r2, [r7, #36]	@ 0x24
 800dea8:	68fa      	ldr	r2, [r7, #12]
 800deaa:	4413      	add	r3, r2
 800deac:	460a      	mov	r2, r1
 800deae:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800deb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800deb2:	2b07      	cmp	r3, #7
 800deb4:	d9e9      	bls.n	800de8a <gen_numname+0xe6>
}
 800deb6:	bf00      	nop
 800deb8:	bf00      	nop
 800deba:	3730      	adds	r7, #48	@ 0x30
 800debc:	46bd      	mov	sp, r7
 800debe:	bd80      	pop	{r7, pc}

0800dec0 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800dec0:	b480      	push	{r7}
 800dec2:	b085      	sub	sp, #20
 800dec4:	af00      	add	r7, sp, #0
 800dec6:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800dec8:	2300      	movs	r3, #0
 800deca:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800decc:	230b      	movs	r3, #11
 800dece:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800ded0:	7bfb      	ldrb	r3, [r7, #15]
 800ded2:	b2da      	uxtb	r2, r3
 800ded4:	0852      	lsrs	r2, r2, #1
 800ded6:	01db      	lsls	r3, r3, #7
 800ded8:	4313      	orrs	r3, r2
 800deda:	b2da      	uxtb	r2, r3
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	1c59      	adds	r1, r3, #1
 800dee0:	6079      	str	r1, [r7, #4]
 800dee2:	781b      	ldrb	r3, [r3, #0]
 800dee4:	4413      	add	r3, r2
 800dee6:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800dee8:	68bb      	ldr	r3, [r7, #8]
 800deea:	3b01      	subs	r3, #1
 800deec:	60bb      	str	r3, [r7, #8]
 800deee:	68bb      	ldr	r3, [r7, #8]
 800def0:	2b00      	cmp	r3, #0
 800def2:	d1ed      	bne.n	800ded0 <sum_sfn+0x10>
	return sum;
 800def4:	7bfb      	ldrb	r3, [r7, #15]
}
 800def6:	4618      	mov	r0, r3
 800def8:	3714      	adds	r7, #20
 800defa:	46bd      	mov	sp, r7
 800defc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df00:	4770      	bx	lr

0800df02 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800df02:	b580      	push	{r7, lr}
 800df04:	b086      	sub	sp, #24
 800df06:	af00      	add	r7, sp, #0
 800df08:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800df0a:	687b      	ldr	r3, [r7, #4]
 800df0c:	681b      	ldr	r3, [r3, #0]
 800df0e:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800df10:	2100      	movs	r1, #0
 800df12:	6878      	ldr	r0, [r7, #4]
 800df14:	f7ff fca7 	bl	800d866 <dir_sdi>
 800df18:	4603      	mov	r3, r0
 800df1a:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800df1c:	7dfb      	ldrb	r3, [r7, #23]
 800df1e:	2b00      	cmp	r3, #0
 800df20:	d001      	beq.n	800df26 <dir_find+0x24>
 800df22:	7dfb      	ldrb	r3, [r7, #23]
 800df24:	e0a9      	b.n	800e07a <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800df26:	23ff      	movs	r3, #255	@ 0xff
 800df28:	753b      	strb	r3, [r7, #20]
 800df2a:	7d3b      	ldrb	r3, [r7, #20]
 800df2c:	757b      	strb	r3, [r7, #21]
 800df2e:	687b      	ldr	r3, [r7, #4]
 800df30:	f04f 32ff 	mov.w	r2, #4294967295
 800df34:	631a      	str	r2, [r3, #48]	@ 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800df36:	687b      	ldr	r3, [r7, #4]
 800df38:	69db      	ldr	r3, [r3, #28]
 800df3a:	4619      	mov	r1, r3
 800df3c:	6938      	ldr	r0, [r7, #16]
 800df3e:	f7ff f915 	bl	800d16c <move_window>
 800df42:	4603      	mov	r3, r0
 800df44:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800df46:	7dfb      	ldrb	r3, [r7, #23]
 800df48:	2b00      	cmp	r3, #0
 800df4a:	f040 8090 	bne.w	800e06e <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800df4e:	687b      	ldr	r3, [r7, #4]
 800df50:	6a1b      	ldr	r3, [r3, #32]
 800df52:	781b      	ldrb	r3, [r3, #0]
 800df54:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800df56:	7dbb      	ldrb	r3, [r7, #22]
 800df58:	2b00      	cmp	r3, #0
 800df5a:	d102      	bne.n	800df62 <dir_find+0x60>
 800df5c:	2304      	movs	r3, #4
 800df5e:	75fb      	strb	r3, [r7, #23]
 800df60:	e08a      	b.n	800e078 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	6a1b      	ldr	r3, [r3, #32]
 800df66:	330b      	adds	r3, #11
 800df68:	781b      	ldrb	r3, [r3, #0]
 800df6a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800df6e:	73fb      	strb	r3, [r7, #15]
 800df70:	687b      	ldr	r3, [r7, #4]
 800df72:	7bfa      	ldrb	r2, [r7, #15]
 800df74:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800df76:	7dbb      	ldrb	r3, [r7, #22]
 800df78:	2be5      	cmp	r3, #229	@ 0xe5
 800df7a:	d007      	beq.n	800df8c <dir_find+0x8a>
 800df7c:	7bfb      	ldrb	r3, [r7, #15]
 800df7e:	f003 0308 	and.w	r3, r3, #8
 800df82:	2b00      	cmp	r3, #0
 800df84:	d009      	beq.n	800df9a <dir_find+0x98>
 800df86:	7bfb      	ldrb	r3, [r7, #15]
 800df88:	2b0f      	cmp	r3, #15
 800df8a:	d006      	beq.n	800df9a <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800df8c:	23ff      	movs	r3, #255	@ 0xff
 800df8e:	757b      	strb	r3, [r7, #21]
 800df90:	687b      	ldr	r3, [r7, #4]
 800df92:	f04f 32ff 	mov.w	r2, #4294967295
 800df96:	631a      	str	r2, [r3, #48]	@ 0x30
 800df98:	e05e      	b.n	800e058 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800df9a:	7bfb      	ldrb	r3, [r7, #15]
 800df9c:	2b0f      	cmp	r3, #15
 800df9e:	d136      	bne.n	800e00e <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800dfa6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800dfaa:	2b00      	cmp	r3, #0
 800dfac:	d154      	bne.n	800e058 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800dfae:	7dbb      	ldrb	r3, [r7, #22]
 800dfb0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800dfb4:	2b00      	cmp	r3, #0
 800dfb6:	d00d      	beq.n	800dfd4 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	6a1b      	ldr	r3, [r3, #32]
 800dfbc:	7b5b      	ldrb	r3, [r3, #13]
 800dfbe:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800dfc0:	7dbb      	ldrb	r3, [r7, #22]
 800dfc2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800dfc6:	75bb      	strb	r3, [r7, #22]
 800dfc8:	7dbb      	ldrb	r3, [r7, #22]
 800dfca:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	695a      	ldr	r2, [r3, #20]
 800dfd0:	687b      	ldr	r3, [r7, #4]
 800dfd2:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800dfd4:	7dba      	ldrb	r2, [r7, #22]
 800dfd6:	7d7b      	ldrb	r3, [r7, #21]
 800dfd8:	429a      	cmp	r2, r3
 800dfda:	d115      	bne.n	800e008 <dir_find+0x106>
 800dfdc:	687b      	ldr	r3, [r7, #4]
 800dfde:	6a1b      	ldr	r3, [r3, #32]
 800dfe0:	330d      	adds	r3, #13
 800dfe2:	781b      	ldrb	r3, [r3, #0]
 800dfe4:	7d3a      	ldrb	r2, [r7, #20]
 800dfe6:	429a      	cmp	r2, r3
 800dfe8:	d10e      	bne.n	800e008 <dir_find+0x106>
 800dfea:	693b      	ldr	r3, [r7, #16]
 800dfec:	68da      	ldr	r2, [r3, #12]
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	6a1b      	ldr	r3, [r3, #32]
 800dff2:	4619      	mov	r1, r3
 800dff4:	4610      	mov	r0, r2
 800dff6:	f7ff fdfd 	bl	800dbf4 <cmp_lfn>
 800dffa:	4603      	mov	r3, r0
 800dffc:	2b00      	cmp	r3, #0
 800dffe:	d003      	beq.n	800e008 <dir_find+0x106>
 800e000:	7d7b      	ldrb	r3, [r7, #21]
 800e002:	3b01      	subs	r3, #1
 800e004:	b2db      	uxtb	r3, r3
 800e006:	e000      	b.n	800e00a <dir_find+0x108>
 800e008:	23ff      	movs	r3, #255	@ 0xff
 800e00a:	757b      	strb	r3, [r7, #21]
 800e00c:	e024      	b.n	800e058 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800e00e:	7d7b      	ldrb	r3, [r7, #21]
 800e010:	2b00      	cmp	r3, #0
 800e012:	d109      	bne.n	800e028 <dir_find+0x126>
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	6a1b      	ldr	r3, [r3, #32]
 800e018:	4618      	mov	r0, r3
 800e01a:	f7ff ff51 	bl	800dec0 <sum_sfn>
 800e01e:	4603      	mov	r3, r0
 800e020:	461a      	mov	r2, r3
 800e022:	7d3b      	ldrb	r3, [r7, #20]
 800e024:	4293      	cmp	r3, r2
 800e026:	d024      	beq.n	800e072 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800e028:	687b      	ldr	r3, [r7, #4]
 800e02a:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800e02e:	f003 0301 	and.w	r3, r3, #1
 800e032:	2b00      	cmp	r3, #0
 800e034:	d10a      	bne.n	800e04c <dir_find+0x14a>
 800e036:	687b      	ldr	r3, [r7, #4]
 800e038:	6a18      	ldr	r0, [r3, #32]
 800e03a:	687b      	ldr	r3, [r7, #4]
 800e03c:	3324      	adds	r3, #36	@ 0x24
 800e03e:	220b      	movs	r2, #11
 800e040:	4619      	mov	r1, r3
 800e042:	f7fe fea1 	bl	800cd88 <mem_cmp>
 800e046:	4603      	mov	r3, r0
 800e048:	2b00      	cmp	r3, #0
 800e04a:	d014      	beq.n	800e076 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800e04c:	23ff      	movs	r3, #255	@ 0xff
 800e04e:	757b      	strb	r3, [r7, #21]
 800e050:	687b      	ldr	r3, [r7, #4]
 800e052:	f04f 32ff 	mov.w	r2, #4294967295
 800e056:	631a      	str	r2, [r3, #48]	@ 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800e058:	2100      	movs	r1, #0
 800e05a:	6878      	ldr	r0, [r7, #4]
 800e05c:	f7ff fc7e 	bl	800d95c <dir_next>
 800e060:	4603      	mov	r3, r0
 800e062:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800e064:	7dfb      	ldrb	r3, [r7, #23]
 800e066:	2b00      	cmp	r3, #0
 800e068:	f43f af65 	beq.w	800df36 <dir_find+0x34>
 800e06c:	e004      	b.n	800e078 <dir_find+0x176>
		if (res != FR_OK) break;
 800e06e:	bf00      	nop
 800e070:	e002      	b.n	800e078 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800e072:	bf00      	nop
 800e074:	e000      	b.n	800e078 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800e076:	bf00      	nop

	return res;
 800e078:	7dfb      	ldrb	r3, [r7, #23]
}
 800e07a:	4618      	mov	r0, r3
 800e07c:	3718      	adds	r7, #24
 800e07e:	46bd      	mov	sp, r7
 800e080:	bd80      	pop	{r7, pc}
	...

0800e084 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800e084:	b580      	push	{r7, lr}
 800e086:	b08c      	sub	sp, #48	@ 0x30
 800e088:	af00      	add	r7, sp, #0
 800e08a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	681b      	ldr	r3, [r3, #0]
 800e090:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800e098:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800e09c:	2b00      	cmp	r3, #0
 800e09e:	d001      	beq.n	800e0a4 <dir_register+0x20>
 800e0a0:	2306      	movs	r3, #6
 800e0a2:	e0e0      	b.n	800e266 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800e0a4:	2300      	movs	r3, #0
 800e0a6:	627b      	str	r3, [r7, #36]	@ 0x24
 800e0a8:	e002      	b.n	800e0b0 <dir_register+0x2c>
 800e0aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e0ac:	3301      	adds	r3, #1
 800e0ae:	627b      	str	r3, [r7, #36]	@ 0x24
 800e0b0:	69fb      	ldr	r3, [r7, #28]
 800e0b2:	68da      	ldr	r2, [r3, #12]
 800e0b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e0b6:	005b      	lsls	r3, r3, #1
 800e0b8:	4413      	add	r3, r2
 800e0ba:	881b      	ldrh	r3, [r3, #0]
 800e0bc:	2b00      	cmp	r3, #0
 800e0be:	d1f4      	bne.n	800e0aa <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 800e0c6:	f107 030c 	add.w	r3, r7, #12
 800e0ca:	220c      	movs	r2, #12
 800e0cc:	4618      	mov	r0, r3
 800e0ce:	f7fe fe1f 	bl	800cd10 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800e0d2:	7dfb      	ldrb	r3, [r7, #23]
 800e0d4:	f003 0301 	and.w	r3, r3, #1
 800e0d8:	2b00      	cmp	r3, #0
 800e0da:	d032      	beq.n	800e142 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800e0dc:	687b      	ldr	r3, [r7, #4]
 800e0de:	2240      	movs	r2, #64	@ 0x40
 800e0e0:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		for (n = 1; n < 100; n++) {
 800e0e4:	2301      	movs	r3, #1
 800e0e6:	62bb      	str	r3, [r7, #40]	@ 0x28
 800e0e8:	e016      	b.n	800e118 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800e0ea:	687b      	ldr	r3, [r7, #4]
 800e0ec:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 800e0f0:	69fb      	ldr	r3, [r7, #28]
 800e0f2:	68da      	ldr	r2, [r3, #12]
 800e0f4:	f107 010c 	add.w	r1, r7, #12
 800e0f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e0fa:	f7ff fe53 	bl	800dda4 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800e0fe:	6878      	ldr	r0, [r7, #4]
 800e100:	f7ff feff 	bl	800df02 <dir_find>
 800e104:	4603      	mov	r3, r0
 800e106:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			if (res != FR_OK) break;
 800e10a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800e10e:	2b00      	cmp	r3, #0
 800e110:	d106      	bne.n	800e120 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800e112:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e114:	3301      	adds	r3, #1
 800e116:	62bb      	str	r3, [r7, #40]	@ 0x28
 800e118:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e11a:	2b63      	cmp	r3, #99	@ 0x63
 800e11c:	d9e5      	bls.n	800e0ea <dir_register+0x66>
 800e11e:	e000      	b.n	800e122 <dir_register+0x9e>
			if (res != FR_OK) break;
 800e120:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800e122:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e124:	2b64      	cmp	r3, #100	@ 0x64
 800e126:	d101      	bne.n	800e12c <dir_register+0xa8>
 800e128:	2307      	movs	r3, #7
 800e12a:	e09c      	b.n	800e266 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800e12c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800e130:	2b04      	cmp	r3, #4
 800e132:	d002      	beq.n	800e13a <dir_register+0xb6>
 800e134:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800e138:	e095      	b.n	800e266 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800e13a:	7dfa      	ldrb	r2, [r7, #23]
 800e13c:	687b      	ldr	r3, [r7, #4]
 800e13e:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800e142:	7dfb      	ldrb	r3, [r7, #23]
 800e144:	f003 0302 	and.w	r3, r3, #2
 800e148:	2b00      	cmp	r3, #0
 800e14a:	d007      	beq.n	800e15c <dir_register+0xd8>
 800e14c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e14e:	330c      	adds	r3, #12
 800e150:	4a47      	ldr	r2, [pc, #284]	@ (800e270 <dir_register+0x1ec>)
 800e152:	fba2 2303 	umull	r2, r3, r2, r3
 800e156:	089b      	lsrs	r3, r3, #2
 800e158:	3301      	adds	r3, #1
 800e15a:	e000      	b.n	800e15e <dir_register+0xda>
 800e15c:	2301      	movs	r3, #1
 800e15e:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800e160:	6a39      	ldr	r1, [r7, #32]
 800e162:	6878      	ldr	r0, [r7, #4]
 800e164:	f7ff fcbf 	bl	800dae6 <dir_alloc>
 800e168:	4603      	mov	r3, r0
 800e16a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800e16e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800e172:	2b00      	cmp	r3, #0
 800e174:	d148      	bne.n	800e208 <dir_register+0x184>
 800e176:	6a3b      	ldr	r3, [r7, #32]
 800e178:	3b01      	subs	r3, #1
 800e17a:	623b      	str	r3, [r7, #32]
 800e17c:	6a3b      	ldr	r3, [r7, #32]
 800e17e:	2b00      	cmp	r3, #0
 800e180:	d042      	beq.n	800e208 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800e182:	687b      	ldr	r3, [r7, #4]
 800e184:	695a      	ldr	r2, [r3, #20]
 800e186:	6a3b      	ldr	r3, [r7, #32]
 800e188:	015b      	lsls	r3, r3, #5
 800e18a:	1ad3      	subs	r3, r2, r3
 800e18c:	4619      	mov	r1, r3
 800e18e:	6878      	ldr	r0, [r7, #4]
 800e190:	f7ff fb69 	bl	800d866 <dir_sdi>
 800e194:	4603      	mov	r3, r0
 800e196:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 800e19a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800e19e:	2b00      	cmp	r3, #0
 800e1a0:	d132      	bne.n	800e208 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800e1a2:	687b      	ldr	r3, [r7, #4]
 800e1a4:	3324      	adds	r3, #36	@ 0x24
 800e1a6:	4618      	mov	r0, r3
 800e1a8:	f7ff fe8a 	bl	800dec0 <sum_sfn>
 800e1ac:	4603      	mov	r3, r0
 800e1ae:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	69db      	ldr	r3, [r3, #28]
 800e1b4:	4619      	mov	r1, r3
 800e1b6:	69f8      	ldr	r0, [r7, #28]
 800e1b8:	f7fe ffd8 	bl	800d16c <move_window>
 800e1bc:	4603      	mov	r3, r0
 800e1be:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				if (res != FR_OK) break;
 800e1c2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800e1c6:	2b00      	cmp	r3, #0
 800e1c8:	d11d      	bne.n	800e206 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800e1ca:	69fb      	ldr	r3, [r7, #28]
 800e1cc:	68d8      	ldr	r0, [r3, #12]
 800e1ce:	687b      	ldr	r3, [r7, #4]
 800e1d0:	6a19      	ldr	r1, [r3, #32]
 800e1d2:	6a3b      	ldr	r3, [r7, #32]
 800e1d4:	b2da      	uxtb	r2, r3
 800e1d6:	7efb      	ldrb	r3, [r7, #27]
 800e1d8:	f7ff fd7c 	bl	800dcd4 <put_lfn>
				fs->wflag = 1;
 800e1dc:	69fb      	ldr	r3, [r7, #28]
 800e1de:	2201      	movs	r2, #1
 800e1e0:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800e1e2:	2100      	movs	r1, #0
 800e1e4:	6878      	ldr	r0, [r7, #4]
 800e1e6:	f7ff fbb9 	bl	800d95c <dir_next>
 800e1ea:	4603      	mov	r3, r0
 800e1ec:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			} while (res == FR_OK && --nent);
 800e1f0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800e1f4:	2b00      	cmp	r3, #0
 800e1f6:	d107      	bne.n	800e208 <dir_register+0x184>
 800e1f8:	6a3b      	ldr	r3, [r7, #32]
 800e1fa:	3b01      	subs	r3, #1
 800e1fc:	623b      	str	r3, [r7, #32]
 800e1fe:	6a3b      	ldr	r3, [r7, #32]
 800e200:	2b00      	cmp	r3, #0
 800e202:	d1d5      	bne.n	800e1b0 <dir_register+0x12c>
 800e204:	e000      	b.n	800e208 <dir_register+0x184>
				if (res != FR_OK) break;
 800e206:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800e208:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800e20c:	2b00      	cmp	r3, #0
 800e20e:	d128      	bne.n	800e262 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800e210:	687b      	ldr	r3, [r7, #4]
 800e212:	69db      	ldr	r3, [r3, #28]
 800e214:	4619      	mov	r1, r3
 800e216:	69f8      	ldr	r0, [r7, #28]
 800e218:	f7fe ffa8 	bl	800d16c <move_window>
 800e21c:	4603      	mov	r3, r0
 800e21e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 800e222:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800e226:	2b00      	cmp	r3, #0
 800e228:	d11b      	bne.n	800e262 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800e22a:	687b      	ldr	r3, [r7, #4]
 800e22c:	6a1b      	ldr	r3, [r3, #32]
 800e22e:	2220      	movs	r2, #32
 800e230:	2100      	movs	r1, #0
 800e232:	4618      	mov	r0, r3
 800e234:	f7fe fd8d 	bl	800cd52 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800e238:	687b      	ldr	r3, [r7, #4]
 800e23a:	6a18      	ldr	r0, [r3, #32]
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	3324      	adds	r3, #36	@ 0x24
 800e240:	220b      	movs	r2, #11
 800e242:	4619      	mov	r1, r3
 800e244:	f7fe fd64 	bl	800cd10 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800e248:	687b      	ldr	r3, [r7, #4]
 800e24a:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 800e24e:	687b      	ldr	r3, [r7, #4]
 800e250:	6a1b      	ldr	r3, [r3, #32]
 800e252:	330c      	adds	r3, #12
 800e254:	f002 0218 	and.w	r2, r2, #24
 800e258:	b2d2      	uxtb	r2, r2
 800e25a:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800e25c:	69fb      	ldr	r3, [r7, #28]
 800e25e:	2201      	movs	r2, #1
 800e260:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800e262:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800e266:	4618      	mov	r0, r3
 800e268:	3730      	adds	r7, #48	@ 0x30
 800e26a:	46bd      	mov	sp, r7
 800e26c:	bd80      	pop	{r7, pc}
 800e26e:	bf00      	nop
 800e270:	4ec4ec4f 	.word	0x4ec4ec4f

0800e274 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800e274:	b580      	push	{r7, lr}
 800e276:	b08a      	sub	sp, #40	@ 0x28
 800e278:	af00      	add	r7, sp, #0
 800e27a:	6078      	str	r0, [r7, #4]
 800e27c:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800e27e:	683b      	ldr	r3, [r7, #0]
 800e280:	681b      	ldr	r3, [r3, #0]
 800e282:	613b      	str	r3, [r7, #16]
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	681b      	ldr	r3, [r3, #0]
 800e288:	68db      	ldr	r3, [r3, #12]
 800e28a:	60fb      	str	r3, [r7, #12]
 800e28c:	2300      	movs	r3, #0
 800e28e:	617b      	str	r3, [r7, #20]
 800e290:	697b      	ldr	r3, [r7, #20]
 800e292:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800e294:	69bb      	ldr	r3, [r7, #24]
 800e296:	1c5a      	adds	r2, r3, #1
 800e298:	61ba      	str	r2, [r7, #24]
 800e29a:	693a      	ldr	r2, [r7, #16]
 800e29c:	4413      	add	r3, r2
 800e29e:	781b      	ldrb	r3, [r3, #0]
 800e2a0:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800e2a2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e2a4:	2b1f      	cmp	r3, #31
 800e2a6:	d940      	bls.n	800e32a <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800e2a8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e2aa:	2b2f      	cmp	r3, #47	@ 0x2f
 800e2ac:	d006      	beq.n	800e2bc <create_name+0x48>
 800e2ae:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e2b0:	2b5c      	cmp	r3, #92	@ 0x5c
 800e2b2:	d110      	bne.n	800e2d6 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800e2b4:	e002      	b.n	800e2bc <create_name+0x48>
 800e2b6:	69bb      	ldr	r3, [r7, #24]
 800e2b8:	3301      	adds	r3, #1
 800e2ba:	61bb      	str	r3, [r7, #24]
 800e2bc:	693a      	ldr	r2, [r7, #16]
 800e2be:	69bb      	ldr	r3, [r7, #24]
 800e2c0:	4413      	add	r3, r2
 800e2c2:	781b      	ldrb	r3, [r3, #0]
 800e2c4:	2b2f      	cmp	r3, #47	@ 0x2f
 800e2c6:	d0f6      	beq.n	800e2b6 <create_name+0x42>
 800e2c8:	693a      	ldr	r2, [r7, #16]
 800e2ca:	69bb      	ldr	r3, [r7, #24]
 800e2cc:	4413      	add	r3, r2
 800e2ce:	781b      	ldrb	r3, [r3, #0]
 800e2d0:	2b5c      	cmp	r3, #92	@ 0x5c
 800e2d2:	d0f0      	beq.n	800e2b6 <create_name+0x42>
			break;
 800e2d4:	e02a      	b.n	800e32c <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800e2d6:	697b      	ldr	r3, [r7, #20]
 800e2d8:	2bfe      	cmp	r3, #254	@ 0xfe
 800e2da:	d901      	bls.n	800e2e0 <create_name+0x6c>
 800e2dc:	2306      	movs	r3, #6
 800e2de:	e17d      	b.n	800e5dc <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 800e2e0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e2e2:	b2db      	uxtb	r3, r3
 800e2e4:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800e2e6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e2e8:	2101      	movs	r1, #1
 800e2ea:	4618      	mov	r0, r3
 800e2ec:	f001 fb8e 	bl	800fa0c <ff_convert>
 800e2f0:	4603      	mov	r3, r0
 800e2f2:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800e2f4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e2f6:	2b00      	cmp	r3, #0
 800e2f8:	d101      	bne.n	800e2fe <create_name+0x8a>
 800e2fa:	2306      	movs	r3, #6
 800e2fc:	e16e      	b.n	800e5dc <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800e2fe:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e300:	2b7f      	cmp	r3, #127	@ 0x7f
 800e302:	d809      	bhi.n	800e318 <create_name+0xa4>
 800e304:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e306:	4619      	mov	r1, r3
 800e308:	488d      	ldr	r0, [pc, #564]	@ (800e540 <create_name+0x2cc>)
 800e30a:	f7fe fd64 	bl	800cdd6 <chk_chr>
 800e30e:	4603      	mov	r3, r0
 800e310:	2b00      	cmp	r3, #0
 800e312:	d001      	beq.n	800e318 <create_name+0xa4>
 800e314:	2306      	movs	r3, #6
 800e316:	e161      	b.n	800e5dc <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 800e318:	697b      	ldr	r3, [r7, #20]
 800e31a:	1c5a      	adds	r2, r3, #1
 800e31c:	617a      	str	r2, [r7, #20]
 800e31e:	005b      	lsls	r3, r3, #1
 800e320:	68fa      	ldr	r2, [r7, #12]
 800e322:	4413      	add	r3, r2
 800e324:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800e326:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800e328:	e7b4      	b.n	800e294 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800e32a:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800e32c:	693a      	ldr	r2, [r7, #16]
 800e32e:	69bb      	ldr	r3, [r7, #24]
 800e330:	441a      	add	r2, r3
 800e332:	683b      	ldr	r3, [r7, #0]
 800e334:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800e336:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e338:	2b1f      	cmp	r3, #31
 800e33a:	d801      	bhi.n	800e340 <create_name+0xcc>
 800e33c:	2304      	movs	r3, #4
 800e33e:	e000      	b.n	800e342 <create_name+0xce>
 800e340:	2300      	movs	r3, #0
 800e342:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800e346:	e011      	b.n	800e36c <create_name+0xf8>
		w = lfn[di - 1];
 800e348:	697b      	ldr	r3, [r7, #20]
 800e34a:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800e34e:	3b01      	subs	r3, #1
 800e350:	005b      	lsls	r3, r3, #1
 800e352:	68fa      	ldr	r2, [r7, #12]
 800e354:	4413      	add	r3, r2
 800e356:	881b      	ldrh	r3, [r3, #0]
 800e358:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 800e35a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e35c:	2b20      	cmp	r3, #32
 800e35e:	d002      	beq.n	800e366 <create_name+0xf2>
 800e360:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e362:	2b2e      	cmp	r3, #46	@ 0x2e
 800e364:	d106      	bne.n	800e374 <create_name+0x100>
		di--;
 800e366:	697b      	ldr	r3, [r7, #20]
 800e368:	3b01      	subs	r3, #1
 800e36a:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800e36c:	697b      	ldr	r3, [r7, #20]
 800e36e:	2b00      	cmp	r3, #0
 800e370:	d1ea      	bne.n	800e348 <create_name+0xd4>
 800e372:	e000      	b.n	800e376 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800e374:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800e376:	697b      	ldr	r3, [r7, #20]
 800e378:	005b      	lsls	r3, r3, #1
 800e37a:	68fa      	ldr	r2, [r7, #12]
 800e37c:	4413      	add	r3, r2
 800e37e:	2200      	movs	r2, #0
 800e380:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800e382:	697b      	ldr	r3, [r7, #20]
 800e384:	2b00      	cmp	r3, #0
 800e386:	d101      	bne.n	800e38c <create_name+0x118>
 800e388:	2306      	movs	r3, #6
 800e38a:	e127      	b.n	800e5dc <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	3324      	adds	r3, #36	@ 0x24
 800e390:	220b      	movs	r2, #11
 800e392:	2120      	movs	r1, #32
 800e394:	4618      	mov	r0, r3
 800e396:	f7fe fcdc 	bl	800cd52 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800e39a:	2300      	movs	r3, #0
 800e39c:	61bb      	str	r3, [r7, #24]
 800e39e:	e002      	b.n	800e3a6 <create_name+0x132>
 800e3a0:	69bb      	ldr	r3, [r7, #24]
 800e3a2:	3301      	adds	r3, #1
 800e3a4:	61bb      	str	r3, [r7, #24]
 800e3a6:	69bb      	ldr	r3, [r7, #24]
 800e3a8:	005b      	lsls	r3, r3, #1
 800e3aa:	68fa      	ldr	r2, [r7, #12]
 800e3ac:	4413      	add	r3, r2
 800e3ae:	881b      	ldrh	r3, [r3, #0]
 800e3b0:	2b20      	cmp	r3, #32
 800e3b2:	d0f5      	beq.n	800e3a0 <create_name+0x12c>
 800e3b4:	69bb      	ldr	r3, [r7, #24]
 800e3b6:	005b      	lsls	r3, r3, #1
 800e3b8:	68fa      	ldr	r2, [r7, #12]
 800e3ba:	4413      	add	r3, r2
 800e3bc:	881b      	ldrh	r3, [r3, #0]
 800e3be:	2b2e      	cmp	r3, #46	@ 0x2e
 800e3c0:	d0ee      	beq.n	800e3a0 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800e3c2:	69bb      	ldr	r3, [r7, #24]
 800e3c4:	2b00      	cmp	r3, #0
 800e3c6:	d009      	beq.n	800e3dc <create_name+0x168>
 800e3c8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e3cc:	f043 0303 	orr.w	r3, r3, #3
 800e3d0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800e3d4:	e002      	b.n	800e3dc <create_name+0x168>
 800e3d6:	697b      	ldr	r3, [r7, #20]
 800e3d8:	3b01      	subs	r3, #1
 800e3da:	617b      	str	r3, [r7, #20]
 800e3dc:	697b      	ldr	r3, [r7, #20]
 800e3de:	2b00      	cmp	r3, #0
 800e3e0:	d009      	beq.n	800e3f6 <create_name+0x182>
 800e3e2:	697b      	ldr	r3, [r7, #20]
 800e3e4:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800e3e8:	3b01      	subs	r3, #1
 800e3ea:	005b      	lsls	r3, r3, #1
 800e3ec:	68fa      	ldr	r2, [r7, #12]
 800e3ee:	4413      	add	r3, r2
 800e3f0:	881b      	ldrh	r3, [r3, #0]
 800e3f2:	2b2e      	cmp	r3, #46	@ 0x2e
 800e3f4:	d1ef      	bne.n	800e3d6 <create_name+0x162>

	i = b = 0; ni = 8;
 800e3f6:	2300      	movs	r3, #0
 800e3f8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800e3fc:	2300      	movs	r3, #0
 800e3fe:	623b      	str	r3, [r7, #32]
 800e400:	2308      	movs	r3, #8
 800e402:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800e404:	69bb      	ldr	r3, [r7, #24]
 800e406:	1c5a      	adds	r2, r3, #1
 800e408:	61ba      	str	r2, [r7, #24]
 800e40a:	005b      	lsls	r3, r3, #1
 800e40c:	68fa      	ldr	r2, [r7, #12]
 800e40e:	4413      	add	r3, r2
 800e410:	881b      	ldrh	r3, [r3, #0]
 800e412:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 800e414:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e416:	2b00      	cmp	r3, #0
 800e418:	f000 8090 	beq.w	800e53c <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800e41c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e41e:	2b20      	cmp	r3, #32
 800e420:	d006      	beq.n	800e430 <create_name+0x1bc>
 800e422:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e424:	2b2e      	cmp	r3, #46	@ 0x2e
 800e426:	d10a      	bne.n	800e43e <create_name+0x1ca>
 800e428:	69ba      	ldr	r2, [r7, #24]
 800e42a:	697b      	ldr	r3, [r7, #20]
 800e42c:	429a      	cmp	r2, r3
 800e42e:	d006      	beq.n	800e43e <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800e430:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e434:	f043 0303 	orr.w	r3, r3, #3
 800e438:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800e43c:	e07d      	b.n	800e53a <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800e43e:	6a3a      	ldr	r2, [r7, #32]
 800e440:	69fb      	ldr	r3, [r7, #28]
 800e442:	429a      	cmp	r2, r3
 800e444:	d203      	bcs.n	800e44e <create_name+0x1da>
 800e446:	69ba      	ldr	r2, [r7, #24]
 800e448:	697b      	ldr	r3, [r7, #20]
 800e44a:	429a      	cmp	r2, r3
 800e44c:	d123      	bne.n	800e496 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800e44e:	69fb      	ldr	r3, [r7, #28]
 800e450:	2b0b      	cmp	r3, #11
 800e452:	d106      	bne.n	800e462 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800e454:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e458:	f043 0303 	orr.w	r3, r3, #3
 800e45c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800e460:	e075      	b.n	800e54e <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800e462:	69ba      	ldr	r2, [r7, #24]
 800e464:	697b      	ldr	r3, [r7, #20]
 800e466:	429a      	cmp	r2, r3
 800e468:	d005      	beq.n	800e476 <create_name+0x202>
 800e46a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e46e:	f043 0303 	orr.w	r3, r3, #3
 800e472:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 800e476:	69ba      	ldr	r2, [r7, #24]
 800e478:	697b      	ldr	r3, [r7, #20]
 800e47a:	429a      	cmp	r2, r3
 800e47c:	d866      	bhi.n	800e54c <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800e47e:	697b      	ldr	r3, [r7, #20]
 800e480:	61bb      	str	r3, [r7, #24]
 800e482:	2308      	movs	r3, #8
 800e484:	623b      	str	r3, [r7, #32]
 800e486:	230b      	movs	r3, #11
 800e488:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800e48a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800e48e:	009b      	lsls	r3, r3, #2
 800e490:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800e494:	e051      	b.n	800e53a <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800e496:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e498:	2b7f      	cmp	r3, #127	@ 0x7f
 800e49a:	d914      	bls.n	800e4c6 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800e49c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e49e:	2100      	movs	r1, #0
 800e4a0:	4618      	mov	r0, r3
 800e4a2:	f001 fab3 	bl	800fa0c <ff_convert>
 800e4a6:	4603      	mov	r3, r0
 800e4a8:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800e4aa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e4ac:	2b00      	cmp	r3, #0
 800e4ae:	d004      	beq.n	800e4ba <create_name+0x246>
 800e4b0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e4b2:	3b80      	subs	r3, #128	@ 0x80
 800e4b4:	4a23      	ldr	r2, [pc, #140]	@ (800e544 <create_name+0x2d0>)
 800e4b6:	5cd3      	ldrb	r3, [r2, r3]
 800e4b8:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800e4ba:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e4be:	f043 0302 	orr.w	r3, r3, #2
 800e4c2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800e4c6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e4c8:	2b00      	cmp	r3, #0
 800e4ca:	d007      	beq.n	800e4dc <create_name+0x268>
 800e4cc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e4ce:	4619      	mov	r1, r3
 800e4d0:	481d      	ldr	r0, [pc, #116]	@ (800e548 <create_name+0x2d4>)
 800e4d2:	f7fe fc80 	bl	800cdd6 <chk_chr>
 800e4d6:	4603      	mov	r3, r0
 800e4d8:	2b00      	cmp	r3, #0
 800e4da:	d008      	beq.n	800e4ee <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800e4dc:	235f      	movs	r3, #95	@ 0x5f
 800e4de:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800e4e0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e4e4:	f043 0303 	orr.w	r3, r3, #3
 800e4e8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800e4ec:	e01b      	b.n	800e526 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800e4ee:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e4f0:	2b40      	cmp	r3, #64	@ 0x40
 800e4f2:	d909      	bls.n	800e508 <create_name+0x294>
 800e4f4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e4f6:	2b5a      	cmp	r3, #90	@ 0x5a
 800e4f8:	d806      	bhi.n	800e508 <create_name+0x294>
					b |= 2;
 800e4fa:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800e4fe:	f043 0302 	orr.w	r3, r3, #2
 800e502:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800e506:	e00e      	b.n	800e526 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800e508:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e50a:	2b60      	cmp	r3, #96	@ 0x60
 800e50c:	d90b      	bls.n	800e526 <create_name+0x2b2>
 800e50e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e510:	2b7a      	cmp	r3, #122	@ 0x7a
 800e512:	d808      	bhi.n	800e526 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800e514:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800e518:	f043 0301 	orr.w	r3, r3, #1
 800e51c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800e520:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e522:	3b20      	subs	r3, #32
 800e524:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800e526:	6a3b      	ldr	r3, [r7, #32]
 800e528:	1c5a      	adds	r2, r3, #1
 800e52a:	623a      	str	r2, [r7, #32]
 800e52c:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800e52e:	b2d1      	uxtb	r1, r2
 800e530:	687a      	ldr	r2, [r7, #4]
 800e532:	4413      	add	r3, r2
 800e534:	460a      	mov	r2, r1
 800e536:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		w = lfn[si++];					/* Get an LFN character */
 800e53a:	e763      	b.n	800e404 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800e53c:	bf00      	nop
 800e53e:	e006      	b.n	800e54e <create_name+0x2da>
 800e540:	08010ed4 	.word	0x08010ed4
 800e544:	08011cdc 	.word	0x08011cdc
 800e548:	08010ee0 	.word	0x08010ee0
			if (si > di) break;			/* No extension */
 800e54c:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800e54e:	687b      	ldr	r3, [r7, #4]
 800e550:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800e554:	2be5      	cmp	r3, #229	@ 0xe5
 800e556:	d103      	bne.n	800e560 <create_name+0x2ec>
 800e558:	687b      	ldr	r3, [r7, #4]
 800e55a:	2205      	movs	r2, #5
 800e55c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	if (ni == 8) b <<= 2;
 800e560:	69fb      	ldr	r3, [r7, #28]
 800e562:	2b08      	cmp	r3, #8
 800e564:	d104      	bne.n	800e570 <create_name+0x2fc>
 800e566:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800e56a:	009b      	lsls	r3, r3, #2
 800e56c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800e570:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800e574:	f003 030c 	and.w	r3, r3, #12
 800e578:	2b0c      	cmp	r3, #12
 800e57a:	d005      	beq.n	800e588 <create_name+0x314>
 800e57c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800e580:	f003 0303 	and.w	r3, r3, #3
 800e584:	2b03      	cmp	r3, #3
 800e586:	d105      	bne.n	800e594 <create_name+0x320>
 800e588:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e58c:	f043 0302 	orr.w	r3, r3, #2
 800e590:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800e594:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e598:	f003 0302 	and.w	r3, r3, #2
 800e59c:	2b00      	cmp	r3, #0
 800e59e:	d117      	bne.n	800e5d0 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800e5a0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800e5a4:	f003 0303 	and.w	r3, r3, #3
 800e5a8:	2b01      	cmp	r3, #1
 800e5aa:	d105      	bne.n	800e5b8 <create_name+0x344>
 800e5ac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e5b0:	f043 0310 	orr.w	r3, r3, #16
 800e5b4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800e5b8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800e5bc:	f003 030c 	and.w	r3, r3, #12
 800e5c0:	2b04      	cmp	r3, #4
 800e5c2:	d105      	bne.n	800e5d0 <create_name+0x35c>
 800e5c4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e5c8:	f043 0308 	orr.w	r3, r3, #8
 800e5cc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800e5d0:	687b      	ldr	r3, [r7, #4]
 800e5d2:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800e5d6:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

	return FR_OK;
 800e5da:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800e5dc:	4618      	mov	r0, r3
 800e5de:	3728      	adds	r7, #40	@ 0x28
 800e5e0:	46bd      	mov	sp, r7
 800e5e2:	bd80      	pop	{r7, pc}

0800e5e4 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800e5e4:	b580      	push	{r7, lr}
 800e5e6:	b086      	sub	sp, #24
 800e5e8:	af00      	add	r7, sp, #0
 800e5ea:	6078      	str	r0, [r7, #4]
 800e5ec:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800e5ee:	687b      	ldr	r3, [r7, #4]
 800e5f0:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800e5f2:	693b      	ldr	r3, [r7, #16]
 800e5f4:	681b      	ldr	r3, [r3, #0]
 800e5f6:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800e5f8:	e002      	b.n	800e600 <follow_path+0x1c>
 800e5fa:	683b      	ldr	r3, [r7, #0]
 800e5fc:	3301      	adds	r3, #1
 800e5fe:	603b      	str	r3, [r7, #0]
 800e600:	683b      	ldr	r3, [r7, #0]
 800e602:	781b      	ldrb	r3, [r3, #0]
 800e604:	2b2f      	cmp	r3, #47	@ 0x2f
 800e606:	d0f8      	beq.n	800e5fa <follow_path+0x16>
 800e608:	683b      	ldr	r3, [r7, #0]
 800e60a:	781b      	ldrb	r3, [r3, #0]
 800e60c:	2b5c      	cmp	r3, #92	@ 0x5c
 800e60e:	d0f4      	beq.n	800e5fa <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800e610:	693b      	ldr	r3, [r7, #16]
 800e612:	2200      	movs	r2, #0
 800e614:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800e616:	683b      	ldr	r3, [r7, #0]
 800e618:	781b      	ldrb	r3, [r3, #0]
 800e61a:	2b1f      	cmp	r3, #31
 800e61c:	d80a      	bhi.n	800e634 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800e61e:	687b      	ldr	r3, [r7, #4]
 800e620:	2280      	movs	r2, #128	@ 0x80
 800e622:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 800e626:	2100      	movs	r1, #0
 800e628:	6878      	ldr	r0, [r7, #4]
 800e62a:	f7ff f91c 	bl	800d866 <dir_sdi>
 800e62e:	4603      	mov	r3, r0
 800e630:	75fb      	strb	r3, [r7, #23]
 800e632:	e043      	b.n	800e6bc <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800e634:	463b      	mov	r3, r7
 800e636:	4619      	mov	r1, r3
 800e638:	6878      	ldr	r0, [r7, #4]
 800e63a:	f7ff fe1b 	bl	800e274 <create_name>
 800e63e:	4603      	mov	r3, r0
 800e640:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800e642:	7dfb      	ldrb	r3, [r7, #23]
 800e644:	2b00      	cmp	r3, #0
 800e646:	d134      	bne.n	800e6b2 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800e648:	6878      	ldr	r0, [r7, #4]
 800e64a:	f7ff fc5a 	bl	800df02 <dir_find>
 800e64e:	4603      	mov	r3, r0
 800e650:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800e652:	687b      	ldr	r3, [r7, #4]
 800e654:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800e658:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800e65a:	7dfb      	ldrb	r3, [r7, #23]
 800e65c:	2b00      	cmp	r3, #0
 800e65e:	d00a      	beq.n	800e676 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800e660:	7dfb      	ldrb	r3, [r7, #23]
 800e662:	2b04      	cmp	r3, #4
 800e664:	d127      	bne.n	800e6b6 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800e666:	7afb      	ldrb	r3, [r7, #11]
 800e668:	f003 0304 	and.w	r3, r3, #4
 800e66c:	2b00      	cmp	r3, #0
 800e66e:	d122      	bne.n	800e6b6 <follow_path+0xd2>
 800e670:	2305      	movs	r3, #5
 800e672:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800e674:	e01f      	b.n	800e6b6 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800e676:	7afb      	ldrb	r3, [r7, #11]
 800e678:	f003 0304 	and.w	r3, r3, #4
 800e67c:	2b00      	cmp	r3, #0
 800e67e:	d11c      	bne.n	800e6ba <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800e680:	693b      	ldr	r3, [r7, #16]
 800e682:	799b      	ldrb	r3, [r3, #6]
 800e684:	f003 0310 	and.w	r3, r3, #16
 800e688:	2b00      	cmp	r3, #0
 800e68a:	d102      	bne.n	800e692 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800e68c:	2305      	movs	r3, #5
 800e68e:	75fb      	strb	r3, [r7, #23]
 800e690:	e014      	b.n	800e6bc <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800e692:	68fb      	ldr	r3, [r7, #12]
 800e694:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800e698:	687b      	ldr	r3, [r7, #4]
 800e69a:	695b      	ldr	r3, [r3, #20]
 800e69c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e6a0:	4413      	add	r3, r2
 800e6a2:	4619      	mov	r1, r3
 800e6a4:	68f8      	ldr	r0, [r7, #12]
 800e6a6:	f7ff fa65 	bl	800db74 <ld_clust>
 800e6aa:	4602      	mov	r2, r0
 800e6ac:	693b      	ldr	r3, [r7, #16]
 800e6ae:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800e6b0:	e7c0      	b.n	800e634 <follow_path+0x50>
			if (res != FR_OK) break;
 800e6b2:	bf00      	nop
 800e6b4:	e002      	b.n	800e6bc <follow_path+0xd8>
				break;
 800e6b6:	bf00      	nop
 800e6b8:	e000      	b.n	800e6bc <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800e6ba:	bf00      	nop
			}
		}
	}

	return res;
 800e6bc:	7dfb      	ldrb	r3, [r7, #23]
}
 800e6be:	4618      	mov	r0, r3
 800e6c0:	3718      	adds	r7, #24
 800e6c2:	46bd      	mov	sp, r7
 800e6c4:	bd80      	pop	{r7, pc}

0800e6c6 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800e6c6:	b480      	push	{r7}
 800e6c8:	b087      	sub	sp, #28
 800e6ca:	af00      	add	r7, sp, #0
 800e6cc:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800e6ce:	f04f 33ff 	mov.w	r3, #4294967295
 800e6d2:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800e6d4:	687b      	ldr	r3, [r7, #4]
 800e6d6:	681b      	ldr	r3, [r3, #0]
 800e6d8:	2b00      	cmp	r3, #0
 800e6da:	d031      	beq.n	800e740 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800e6dc:	687b      	ldr	r3, [r7, #4]
 800e6de:	681b      	ldr	r3, [r3, #0]
 800e6e0:	617b      	str	r3, [r7, #20]
 800e6e2:	e002      	b.n	800e6ea <get_ldnumber+0x24>
 800e6e4:	697b      	ldr	r3, [r7, #20]
 800e6e6:	3301      	adds	r3, #1
 800e6e8:	617b      	str	r3, [r7, #20]
 800e6ea:	697b      	ldr	r3, [r7, #20]
 800e6ec:	781b      	ldrb	r3, [r3, #0]
 800e6ee:	2b1f      	cmp	r3, #31
 800e6f0:	d903      	bls.n	800e6fa <get_ldnumber+0x34>
 800e6f2:	697b      	ldr	r3, [r7, #20]
 800e6f4:	781b      	ldrb	r3, [r3, #0]
 800e6f6:	2b3a      	cmp	r3, #58	@ 0x3a
 800e6f8:	d1f4      	bne.n	800e6e4 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800e6fa:	697b      	ldr	r3, [r7, #20]
 800e6fc:	781b      	ldrb	r3, [r3, #0]
 800e6fe:	2b3a      	cmp	r3, #58	@ 0x3a
 800e700:	d11c      	bne.n	800e73c <get_ldnumber+0x76>
			tp = *path;
 800e702:	687b      	ldr	r3, [r7, #4]
 800e704:	681b      	ldr	r3, [r3, #0]
 800e706:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800e708:	68fb      	ldr	r3, [r7, #12]
 800e70a:	1c5a      	adds	r2, r3, #1
 800e70c:	60fa      	str	r2, [r7, #12]
 800e70e:	781b      	ldrb	r3, [r3, #0]
 800e710:	3b30      	subs	r3, #48	@ 0x30
 800e712:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800e714:	68bb      	ldr	r3, [r7, #8]
 800e716:	2b09      	cmp	r3, #9
 800e718:	d80e      	bhi.n	800e738 <get_ldnumber+0x72>
 800e71a:	68fa      	ldr	r2, [r7, #12]
 800e71c:	697b      	ldr	r3, [r7, #20]
 800e71e:	429a      	cmp	r2, r3
 800e720:	d10a      	bne.n	800e738 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800e722:	68bb      	ldr	r3, [r7, #8]
 800e724:	2b00      	cmp	r3, #0
 800e726:	d107      	bne.n	800e738 <get_ldnumber+0x72>
					vol = (int)i;
 800e728:	68bb      	ldr	r3, [r7, #8]
 800e72a:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800e72c:	697b      	ldr	r3, [r7, #20]
 800e72e:	3301      	adds	r3, #1
 800e730:	617b      	str	r3, [r7, #20]
 800e732:	687b      	ldr	r3, [r7, #4]
 800e734:	697a      	ldr	r2, [r7, #20]
 800e736:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800e738:	693b      	ldr	r3, [r7, #16]
 800e73a:	e002      	b.n	800e742 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800e73c:	2300      	movs	r3, #0
 800e73e:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800e740:	693b      	ldr	r3, [r7, #16]
}
 800e742:	4618      	mov	r0, r3
 800e744:	371c      	adds	r7, #28
 800e746:	46bd      	mov	sp, r7
 800e748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e74c:	4770      	bx	lr
	...

0800e750 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800e750:	b580      	push	{r7, lr}
 800e752:	b082      	sub	sp, #8
 800e754:	af00      	add	r7, sp, #0
 800e756:	6078      	str	r0, [r7, #4]
 800e758:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800e75a:	687b      	ldr	r3, [r7, #4]
 800e75c:	2200      	movs	r2, #0
 800e75e:	70da      	strb	r2, [r3, #3]
 800e760:	687b      	ldr	r3, [r7, #4]
 800e762:	f04f 32ff 	mov.w	r2, #4294967295
 800e766:	631a      	str	r2, [r3, #48]	@ 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800e768:	6839      	ldr	r1, [r7, #0]
 800e76a:	6878      	ldr	r0, [r7, #4]
 800e76c:	f7fe fcfe 	bl	800d16c <move_window>
 800e770:	4603      	mov	r3, r0
 800e772:	2b00      	cmp	r3, #0
 800e774:	d001      	beq.n	800e77a <check_fs+0x2a>
 800e776:	2304      	movs	r3, #4
 800e778:	e038      	b.n	800e7ec <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800e77a:	687b      	ldr	r3, [r7, #4]
 800e77c:	3334      	adds	r3, #52	@ 0x34
 800e77e:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800e782:	4618      	mov	r0, r3
 800e784:	f7fe fa42 	bl	800cc0c <ld_word>
 800e788:	4603      	mov	r3, r0
 800e78a:	461a      	mov	r2, r3
 800e78c:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800e790:	429a      	cmp	r2, r3
 800e792:	d001      	beq.n	800e798 <check_fs+0x48>
 800e794:	2303      	movs	r3, #3
 800e796:	e029      	b.n	800e7ec <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800e798:	687b      	ldr	r3, [r7, #4]
 800e79a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800e79e:	2be9      	cmp	r3, #233	@ 0xe9
 800e7a0:	d009      	beq.n	800e7b6 <check_fs+0x66>
 800e7a2:	687b      	ldr	r3, [r7, #4]
 800e7a4:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800e7a8:	2beb      	cmp	r3, #235	@ 0xeb
 800e7aa:	d11e      	bne.n	800e7ea <check_fs+0x9a>
 800e7ac:	687b      	ldr	r3, [r7, #4]
 800e7ae:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 800e7b2:	2b90      	cmp	r3, #144	@ 0x90
 800e7b4:	d119      	bne.n	800e7ea <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800e7b6:	687b      	ldr	r3, [r7, #4]
 800e7b8:	3334      	adds	r3, #52	@ 0x34
 800e7ba:	3336      	adds	r3, #54	@ 0x36
 800e7bc:	4618      	mov	r0, r3
 800e7be:	f7fe fa3d 	bl	800cc3c <ld_dword>
 800e7c2:	4603      	mov	r3, r0
 800e7c4:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800e7c8:	4a0a      	ldr	r2, [pc, #40]	@ (800e7f4 <check_fs+0xa4>)
 800e7ca:	4293      	cmp	r3, r2
 800e7cc:	d101      	bne.n	800e7d2 <check_fs+0x82>
 800e7ce:	2300      	movs	r3, #0
 800e7d0:	e00c      	b.n	800e7ec <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800e7d2:	687b      	ldr	r3, [r7, #4]
 800e7d4:	3334      	adds	r3, #52	@ 0x34
 800e7d6:	3352      	adds	r3, #82	@ 0x52
 800e7d8:	4618      	mov	r0, r3
 800e7da:	f7fe fa2f 	bl	800cc3c <ld_dword>
 800e7de:	4603      	mov	r3, r0
 800e7e0:	4a05      	ldr	r2, [pc, #20]	@ (800e7f8 <check_fs+0xa8>)
 800e7e2:	4293      	cmp	r3, r2
 800e7e4:	d101      	bne.n	800e7ea <check_fs+0x9a>
 800e7e6:	2300      	movs	r3, #0
 800e7e8:	e000      	b.n	800e7ec <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800e7ea:	2302      	movs	r3, #2
}
 800e7ec:	4618      	mov	r0, r3
 800e7ee:	3708      	adds	r7, #8
 800e7f0:	46bd      	mov	sp, r7
 800e7f2:	bd80      	pop	{r7, pc}
 800e7f4:	00544146 	.word	0x00544146
 800e7f8:	33544146 	.word	0x33544146

0800e7fc <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800e7fc:	b580      	push	{r7, lr}
 800e7fe:	b096      	sub	sp, #88	@ 0x58
 800e800:	af00      	add	r7, sp, #0
 800e802:	60f8      	str	r0, [r7, #12]
 800e804:	60b9      	str	r1, [r7, #8]
 800e806:	4613      	mov	r3, r2
 800e808:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800e80a:	68bb      	ldr	r3, [r7, #8]
 800e80c:	2200      	movs	r2, #0
 800e80e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800e810:	68f8      	ldr	r0, [r7, #12]
 800e812:	f7ff ff58 	bl	800e6c6 <get_ldnumber>
 800e816:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800e818:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e81a:	2b00      	cmp	r3, #0
 800e81c:	da01      	bge.n	800e822 <find_volume+0x26>
 800e81e:	230b      	movs	r3, #11
 800e820:	e230      	b.n	800ec84 <find_volume+0x488>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800e822:	4aa1      	ldr	r2, [pc, #644]	@ (800eaa8 <find_volume+0x2ac>)
 800e824:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e826:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e82a:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800e82c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e82e:	2b00      	cmp	r3, #0
 800e830:	d101      	bne.n	800e836 <find_volume+0x3a>
 800e832:	230c      	movs	r3, #12
 800e834:	e226      	b.n	800ec84 <find_volume+0x488>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800e836:	68bb      	ldr	r3, [r7, #8]
 800e838:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e83a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800e83c:	79fb      	ldrb	r3, [r7, #7]
 800e83e:	f023 0301 	bic.w	r3, r3, #1
 800e842:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800e844:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e846:	781b      	ldrb	r3, [r3, #0]
 800e848:	2b00      	cmp	r3, #0
 800e84a:	d01a      	beq.n	800e882 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800e84c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e84e:	785b      	ldrb	r3, [r3, #1]
 800e850:	4618      	mov	r0, r3
 800e852:	f7fe f93b 	bl	800cacc <disk_status>
 800e856:	4603      	mov	r3, r0
 800e858:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800e85c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800e860:	f003 0301 	and.w	r3, r3, #1
 800e864:	2b00      	cmp	r3, #0
 800e866:	d10c      	bne.n	800e882 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800e868:	79fb      	ldrb	r3, [r7, #7]
 800e86a:	2b00      	cmp	r3, #0
 800e86c:	d007      	beq.n	800e87e <find_volume+0x82>
 800e86e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800e872:	f003 0304 	and.w	r3, r3, #4
 800e876:	2b00      	cmp	r3, #0
 800e878:	d001      	beq.n	800e87e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800e87a:	230a      	movs	r3, #10
 800e87c:	e202      	b.n	800ec84 <find_volume+0x488>
			}
			return FR_OK;				/* The file system object is valid */
 800e87e:	2300      	movs	r3, #0
 800e880:	e200      	b.n	800ec84 <find_volume+0x488>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800e882:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e884:	2200      	movs	r2, #0
 800e886:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800e888:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e88a:	b2da      	uxtb	r2, r3
 800e88c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e88e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800e890:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e892:	785b      	ldrb	r3, [r3, #1]
 800e894:	4618      	mov	r0, r3
 800e896:	f7fe f933 	bl	800cb00 <disk_initialize>
 800e89a:	4603      	mov	r3, r0
 800e89c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800e8a0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800e8a4:	f003 0301 	and.w	r3, r3, #1
 800e8a8:	2b00      	cmp	r3, #0
 800e8aa:	d001      	beq.n	800e8b0 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800e8ac:	2303      	movs	r3, #3
 800e8ae:	e1e9      	b.n	800ec84 <find_volume+0x488>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800e8b0:	79fb      	ldrb	r3, [r7, #7]
 800e8b2:	2b00      	cmp	r3, #0
 800e8b4:	d007      	beq.n	800e8c6 <find_volume+0xca>
 800e8b6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800e8ba:	f003 0304 	and.w	r3, r3, #4
 800e8be:	2b00      	cmp	r3, #0
 800e8c0:	d001      	beq.n	800e8c6 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800e8c2:	230a      	movs	r3, #10
 800e8c4:	e1de      	b.n	800ec84 <find_volume+0x488>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800e8c6:	2300      	movs	r3, #0
 800e8c8:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800e8ca:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800e8cc:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800e8ce:	f7ff ff3f 	bl	800e750 <check_fs>
 800e8d2:	4603      	mov	r3, r0
 800e8d4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800e8d8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800e8dc:	2b02      	cmp	r3, #2
 800e8de:	d149      	bne.n	800e974 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800e8e0:	2300      	movs	r3, #0
 800e8e2:	643b      	str	r3, [r7, #64]	@ 0x40
 800e8e4:	e01e      	b.n	800e924 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800e8e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e8e8:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800e8ec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e8ee:	011b      	lsls	r3, r3, #4
 800e8f0:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800e8f4:	4413      	add	r3, r2
 800e8f6:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800e8f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e8fa:	3304      	adds	r3, #4
 800e8fc:	781b      	ldrb	r3, [r3, #0]
 800e8fe:	2b00      	cmp	r3, #0
 800e900:	d006      	beq.n	800e910 <find_volume+0x114>
 800e902:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e904:	3308      	adds	r3, #8
 800e906:	4618      	mov	r0, r3
 800e908:	f7fe f998 	bl	800cc3c <ld_dword>
 800e90c:	4602      	mov	r2, r0
 800e90e:	e000      	b.n	800e912 <find_volume+0x116>
 800e910:	2200      	movs	r2, #0
 800e912:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e914:	009b      	lsls	r3, r3, #2
 800e916:	3358      	adds	r3, #88	@ 0x58
 800e918:	443b      	add	r3, r7
 800e91a:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800e91e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e920:	3301      	adds	r3, #1
 800e922:	643b      	str	r3, [r7, #64]	@ 0x40
 800e924:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e926:	2b03      	cmp	r3, #3
 800e928:	d9dd      	bls.n	800e8e6 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800e92a:	2300      	movs	r3, #0
 800e92c:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 800e92e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e930:	2b00      	cmp	r3, #0
 800e932:	d002      	beq.n	800e93a <find_volume+0x13e>
 800e934:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e936:	3b01      	subs	r3, #1
 800e938:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800e93a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e93c:	009b      	lsls	r3, r3, #2
 800e93e:	3358      	adds	r3, #88	@ 0x58
 800e940:	443b      	add	r3, r7
 800e942:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800e946:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800e948:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e94a:	2b00      	cmp	r3, #0
 800e94c:	d005      	beq.n	800e95a <find_volume+0x15e>
 800e94e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800e950:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800e952:	f7ff fefd 	bl	800e750 <check_fs>
 800e956:	4603      	mov	r3, r0
 800e958:	e000      	b.n	800e95c <find_volume+0x160>
 800e95a:	2303      	movs	r3, #3
 800e95c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800e960:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800e964:	2b01      	cmp	r3, #1
 800e966:	d905      	bls.n	800e974 <find_volume+0x178>
 800e968:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e96a:	3301      	adds	r3, #1
 800e96c:	643b      	str	r3, [r7, #64]	@ 0x40
 800e96e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e970:	2b03      	cmp	r3, #3
 800e972:	d9e2      	bls.n	800e93a <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800e974:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800e978:	2b04      	cmp	r3, #4
 800e97a:	d101      	bne.n	800e980 <find_volume+0x184>
 800e97c:	2301      	movs	r3, #1
 800e97e:	e181      	b.n	800ec84 <find_volume+0x488>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800e980:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800e984:	2b01      	cmp	r3, #1
 800e986:	d901      	bls.n	800e98c <find_volume+0x190>
 800e988:	230d      	movs	r3, #13
 800e98a:	e17b      	b.n	800ec84 <find_volume+0x488>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800e98c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e98e:	3334      	adds	r3, #52	@ 0x34
 800e990:	330b      	adds	r3, #11
 800e992:	4618      	mov	r0, r3
 800e994:	f7fe f93a 	bl	800cc0c <ld_word>
 800e998:	4603      	mov	r3, r0
 800e99a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e99e:	d001      	beq.n	800e9a4 <find_volume+0x1a8>
 800e9a0:	230d      	movs	r3, #13
 800e9a2:	e16f      	b.n	800ec84 <find_volume+0x488>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800e9a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e9a6:	3334      	adds	r3, #52	@ 0x34
 800e9a8:	3316      	adds	r3, #22
 800e9aa:	4618      	mov	r0, r3
 800e9ac:	f7fe f92e 	bl	800cc0c <ld_word>
 800e9b0:	4603      	mov	r3, r0
 800e9b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800e9b4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e9b6:	2b00      	cmp	r3, #0
 800e9b8:	d106      	bne.n	800e9c8 <find_volume+0x1cc>
 800e9ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e9bc:	3334      	adds	r3, #52	@ 0x34
 800e9be:	3324      	adds	r3, #36	@ 0x24
 800e9c0:	4618      	mov	r0, r3
 800e9c2:	f7fe f93b 	bl	800cc3c <ld_dword>
 800e9c6:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 800e9c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e9ca:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800e9cc:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800e9ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e9d0:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 800e9d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e9d6:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800e9d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e9da:	789b      	ldrb	r3, [r3, #2]
 800e9dc:	2b01      	cmp	r3, #1
 800e9de:	d005      	beq.n	800e9ec <find_volume+0x1f0>
 800e9e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e9e2:	789b      	ldrb	r3, [r3, #2]
 800e9e4:	2b02      	cmp	r3, #2
 800e9e6:	d001      	beq.n	800e9ec <find_volume+0x1f0>
 800e9e8:	230d      	movs	r3, #13
 800e9ea:	e14b      	b.n	800ec84 <find_volume+0x488>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800e9ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e9ee:	789b      	ldrb	r3, [r3, #2]
 800e9f0:	461a      	mov	r2, r3
 800e9f2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e9f4:	fb02 f303 	mul.w	r3, r2, r3
 800e9f8:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800e9fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e9fc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ea00:	461a      	mov	r2, r3
 800ea02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ea04:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800ea06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ea08:	895b      	ldrh	r3, [r3, #10]
 800ea0a:	2b00      	cmp	r3, #0
 800ea0c:	d008      	beq.n	800ea20 <find_volume+0x224>
 800ea0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ea10:	895b      	ldrh	r3, [r3, #10]
 800ea12:	461a      	mov	r2, r3
 800ea14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ea16:	895b      	ldrh	r3, [r3, #10]
 800ea18:	3b01      	subs	r3, #1
 800ea1a:	4013      	ands	r3, r2
 800ea1c:	2b00      	cmp	r3, #0
 800ea1e:	d001      	beq.n	800ea24 <find_volume+0x228>
 800ea20:	230d      	movs	r3, #13
 800ea22:	e12f      	b.n	800ec84 <find_volume+0x488>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800ea24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ea26:	3334      	adds	r3, #52	@ 0x34
 800ea28:	3311      	adds	r3, #17
 800ea2a:	4618      	mov	r0, r3
 800ea2c:	f7fe f8ee 	bl	800cc0c <ld_word>
 800ea30:	4603      	mov	r3, r0
 800ea32:	461a      	mov	r2, r3
 800ea34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ea36:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800ea38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ea3a:	891b      	ldrh	r3, [r3, #8]
 800ea3c:	f003 030f 	and.w	r3, r3, #15
 800ea40:	b29b      	uxth	r3, r3
 800ea42:	2b00      	cmp	r3, #0
 800ea44:	d001      	beq.n	800ea4a <find_volume+0x24e>
 800ea46:	230d      	movs	r3, #13
 800ea48:	e11c      	b.n	800ec84 <find_volume+0x488>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800ea4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ea4c:	3334      	adds	r3, #52	@ 0x34
 800ea4e:	3313      	adds	r3, #19
 800ea50:	4618      	mov	r0, r3
 800ea52:	f7fe f8db 	bl	800cc0c <ld_word>
 800ea56:	4603      	mov	r3, r0
 800ea58:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800ea5a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ea5c:	2b00      	cmp	r3, #0
 800ea5e:	d106      	bne.n	800ea6e <find_volume+0x272>
 800ea60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ea62:	3334      	adds	r3, #52	@ 0x34
 800ea64:	3320      	adds	r3, #32
 800ea66:	4618      	mov	r0, r3
 800ea68:	f7fe f8e8 	bl	800cc3c <ld_dword>
 800ea6c:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800ea6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ea70:	3334      	adds	r3, #52	@ 0x34
 800ea72:	330e      	adds	r3, #14
 800ea74:	4618      	mov	r0, r3
 800ea76:	f7fe f8c9 	bl	800cc0c <ld_word>
 800ea7a:	4603      	mov	r3, r0
 800ea7c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800ea7e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800ea80:	2b00      	cmp	r3, #0
 800ea82:	d101      	bne.n	800ea88 <find_volume+0x28c>
 800ea84:	230d      	movs	r3, #13
 800ea86:	e0fd      	b.n	800ec84 <find_volume+0x488>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800ea88:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800ea8a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ea8c:	4413      	add	r3, r2
 800ea8e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ea90:	8912      	ldrh	r2, [r2, #8]
 800ea92:	0912      	lsrs	r2, r2, #4
 800ea94:	b292      	uxth	r2, r2
 800ea96:	4413      	add	r3, r2
 800ea98:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800ea9a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ea9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ea9e:	429a      	cmp	r2, r3
 800eaa0:	d204      	bcs.n	800eaac <find_volume+0x2b0>
 800eaa2:	230d      	movs	r3, #13
 800eaa4:	e0ee      	b.n	800ec84 <find_volume+0x488>
 800eaa6:	bf00      	nop
 800eaa8:	20000a14 	.word	0x20000a14
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800eaac:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800eaae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eab0:	1ad3      	subs	r3, r2, r3
 800eab2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800eab4:	8952      	ldrh	r2, [r2, #10]
 800eab6:	fbb3 f3f2 	udiv	r3, r3, r2
 800eaba:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800eabc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eabe:	2b00      	cmp	r3, #0
 800eac0:	d101      	bne.n	800eac6 <find_volume+0x2ca>
 800eac2:	230d      	movs	r3, #13
 800eac4:	e0de      	b.n	800ec84 <find_volume+0x488>
		fmt = FS_FAT32;
 800eac6:	2303      	movs	r3, #3
 800eac8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800eacc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eace:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800ead2:	4293      	cmp	r3, r2
 800ead4:	d802      	bhi.n	800eadc <find_volume+0x2e0>
 800ead6:	2302      	movs	r3, #2
 800ead8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800eadc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eade:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800eae2:	4293      	cmp	r3, r2
 800eae4:	d802      	bhi.n	800eaec <find_volume+0x2f0>
 800eae6:	2301      	movs	r3, #1
 800eae8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800eaec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eaee:	1c9a      	adds	r2, r3, #2
 800eaf0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eaf2:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800eaf4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eaf6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800eaf8:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800eafa:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800eafc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800eafe:	441a      	add	r2, r3
 800eb00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eb02:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800eb04:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800eb06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eb08:	441a      	add	r2, r3
 800eb0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eb0c:	62da      	str	r2, [r3, #44]	@ 0x2c
		if (fmt == FS_FAT32) {
 800eb0e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800eb12:	2b03      	cmp	r3, #3
 800eb14:	d11e      	bne.n	800eb54 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800eb16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eb18:	3334      	adds	r3, #52	@ 0x34
 800eb1a:	332a      	adds	r3, #42	@ 0x2a
 800eb1c:	4618      	mov	r0, r3
 800eb1e:	f7fe f875 	bl	800cc0c <ld_word>
 800eb22:	4603      	mov	r3, r0
 800eb24:	2b00      	cmp	r3, #0
 800eb26:	d001      	beq.n	800eb2c <find_volume+0x330>
 800eb28:	230d      	movs	r3, #13
 800eb2a:	e0ab      	b.n	800ec84 <find_volume+0x488>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800eb2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eb2e:	891b      	ldrh	r3, [r3, #8]
 800eb30:	2b00      	cmp	r3, #0
 800eb32:	d001      	beq.n	800eb38 <find_volume+0x33c>
 800eb34:	230d      	movs	r3, #13
 800eb36:	e0a5      	b.n	800ec84 <find_volume+0x488>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800eb38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eb3a:	3334      	adds	r3, #52	@ 0x34
 800eb3c:	332c      	adds	r3, #44	@ 0x2c
 800eb3e:	4618      	mov	r0, r3
 800eb40:	f7fe f87c 	bl	800cc3c <ld_dword>
 800eb44:	4602      	mov	r2, r0
 800eb46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eb48:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800eb4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eb4c:	699b      	ldr	r3, [r3, #24]
 800eb4e:	009b      	lsls	r3, r3, #2
 800eb50:	647b      	str	r3, [r7, #68]	@ 0x44
 800eb52:	e01f      	b.n	800eb94 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800eb54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eb56:	891b      	ldrh	r3, [r3, #8]
 800eb58:	2b00      	cmp	r3, #0
 800eb5a:	d101      	bne.n	800eb60 <find_volume+0x364>
 800eb5c:	230d      	movs	r3, #13
 800eb5e:	e091      	b.n	800ec84 <find_volume+0x488>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800eb60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eb62:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800eb64:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800eb66:	441a      	add	r2, r3
 800eb68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eb6a:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800eb6c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800eb70:	2b02      	cmp	r3, #2
 800eb72:	d103      	bne.n	800eb7c <find_volume+0x380>
 800eb74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eb76:	699b      	ldr	r3, [r3, #24]
 800eb78:	005b      	lsls	r3, r3, #1
 800eb7a:	e00a      	b.n	800eb92 <find_volume+0x396>
 800eb7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eb7e:	699a      	ldr	r2, [r3, #24]
 800eb80:	4613      	mov	r3, r2
 800eb82:	005b      	lsls	r3, r3, #1
 800eb84:	4413      	add	r3, r2
 800eb86:	085a      	lsrs	r2, r3, #1
 800eb88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eb8a:	699b      	ldr	r3, [r3, #24]
 800eb8c:	f003 0301 	and.w	r3, r3, #1
 800eb90:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800eb92:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800eb94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eb96:	69da      	ldr	r2, [r3, #28]
 800eb98:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800eb9a:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 800eb9e:	0a5b      	lsrs	r3, r3, #9
 800eba0:	429a      	cmp	r2, r3
 800eba2:	d201      	bcs.n	800eba8 <find_volume+0x3ac>
 800eba4:	230d      	movs	r3, #13
 800eba6:	e06d      	b.n	800ec84 <find_volume+0x488>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800eba8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ebaa:	f04f 32ff 	mov.w	r2, #4294967295
 800ebae:	615a      	str	r2, [r3, #20]
 800ebb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ebb2:	695a      	ldr	r2, [r3, #20]
 800ebb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ebb6:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800ebb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ebba:	2280      	movs	r2, #128	@ 0x80
 800ebbc:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800ebbe:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800ebc2:	2b03      	cmp	r3, #3
 800ebc4:	d149      	bne.n	800ec5a <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800ebc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ebc8:	3334      	adds	r3, #52	@ 0x34
 800ebca:	3330      	adds	r3, #48	@ 0x30
 800ebcc:	4618      	mov	r0, r3
 800ebce:	f7fe f81d 	bl	800cc0c <ld_word>
 800ebd2:	4603      	mov	r3, r0
 800ebd4:	2b01      	cmp	r3, #1
 800ebd6:	d140      	bne.n	800ec5a <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800ebd8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ebda:	3301      	adds	r3, #1
 800ebdc:	4619      	mov	r1, r3
 800ebde:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800ebe0:	f7fe fac4 	bl	800d16c <move_window>
 800ebe4:	4603      	mov	r3, r0
 800ebe6:	2b00      	cmp	r3, #0
 800ebe8:	d137      	bne.n	800ec5a <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800ebea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ebec:	2200      	movs	r2, #0
 800ebee:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800ebf0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ebf2:	3334      	adds	r3, #52	@ 0x34
 800ebf4:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800ebf8:	4618      	mov	r0, r3
 800ebfa:	f7fe f807 	bl	800cc0c <ld_word>
 800ebfe:	4603      	mov	r3, r0
 800ec00:	461a      	mov	r2, r3
 800ec02:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800ec06:	429a      	cmp	r2, r3
 800ec08:	d127      	bne.n	800ec5a <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800ec0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ec0c:	3334      	adds	r3, #52	@ 0x34
 800ec0e:	4618      	mov	r0, r3
 800ec10:	f7fe f814 	bl	800cc3c <ld_dword>
 800ec14:	4603      	mov	r3, r0
 800ec16:	4a1d      	ldr	r2, [pc, #116]	@ (800ec8c <find_volume+0x490>)
 800ec18:	4293      	cmp	r3, r2
 800ec1a:	d11e      	bne.n	800ec5a <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800ec1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ec1e:	3334      	adds	r3, #52	@ 0x34
 800ec20:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800ec24:	4618      	mov	r0, r3
 800ec26:	f7fe f809 	bl	800cc3c <ld_dword>
 800ec2a:	4603      	mov	r3, r0
 800ec2c:	4a18      	ldr	r2, [pc, #96]	@ (800ec90 <find_volume+0x494>)
 800ec2e:	4293      	cmp	r3, r2
 800ec30:	d113      	bne.n	800ec5a <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800ec32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ec34:	3334      	adds	r3, #52	@ 0x34
 800ec36:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800ec3a:	4618      	mov	r0, r3
 800ec3c:	f7fd fffe 	bl	800cc3c <ld_dword>
 800ec40:	4602      	mov	r2, r0
 800ec42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ec44:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800ec46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ec48:	3334      	adds	r3, #52	@ 0x34
 800ec4a:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800ec4e:	4618      	mov	r0, r3
 800ec50:	f7fd fff4 	bl	800cc3c <ld_dword>
 800ec54:	4602      	mov	r2, r0
 800ec56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ec58:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800ec5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ec5c:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800ec60:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800ec62:	4b0c      	ldr	r3, [pc, #48]	@ (800ec94 <find_volume+0x498>)
 800ec64:	881b      	ldrh	r3, [r3, #0]
 800ec66:	3301      	adds	r3, #1
 800ec68:	b29a      	uxth	r2, r3
 800ec6a:	4b0a      	ldr	r3, [pc, #40]	@ (800ec94 <find_volume+0x498>)
 800ec6c:	801a      	strh	r2, [r3, #0]
 800ec6e:	4b09      	ldr	r3, [pc, #36]	@ (800ec94 <find_volume+0x498>)
 800ec70:	881a      	ldrh	r2, [r3, #0]
 800ec72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ec74:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800ec76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ec78:	4a07      	ldr	r2, [pc, #28]	@ (800ec98 <find_volume+0x49c>)
 800ec7a:	60da      	str	r2, [r3, #12]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800ec7c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800ec7e:	f7fe fa0d 	bl	800d09c <clear_lock>
#endif
	return FR_OK;
 800ec82:	2300      	movs	r3, #0
}
 800ec84:	4618      	mov	r0, r3
 800ec86:	3758      	adds	r7, #88	@ 0x58
 800ec88:	46bd      	mov	sp, r7
 800ec8a:	bd80      	pop	{r7, pc}
 800ec8c:	41615252 	.word	0x41615252
 800ec90:	61417272 	.word	0x61417272
 800ec94:	20000a18 	.word	0x20000a18
 800ec98:	20000a6c 	.word	0x20000a6c

0800ec9c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800ec9c:	b580      	push	{r7, lr}
 800ec9e:	b084      	sub	sp, #16
 800eca0:	af00      	add	r7, sp, #0
 800eca2:	6078      	str	r0, [r7, #4]
 800eca4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800eca6:	2309      	movs	r3, #9
 800eca8:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800ecaa:	687b      	ldr	r3, [r7, #4]
 800ecac:	2b00      	cmp	r3, #0
 800ecae:	d01c      	beq.n	800ecea <validate+0x4e>
 800ecb0:	687b      	ldr	r3, [r7, #4]
 800ecb2:	681b      	ldr	r3, [r3, #0]
 800ecb4:	2b00      	cmp	r3, #0
 800ecb6:	d018      	beq.n	800ecea <validate+0x4e>
 800ecb8:	687b      	ldr	r3, [r7, #4]
 800ecba:	681b      	ldr	r3, [r3, #0]
 800ecbc:	781b      	ldrb	r3, [r3, #0]
 800ecbe:	2b00      	cmp	r3, #0
 800ecc0:	d013      	beq.n	800ecea <validate+0x4e>
 800ecc2:	687b      	ldr	r3, [r7, #4]
 800ecc4:	889a      	ldrh	r2, [r3, #4]
 800ecc6:	687b      	ldr	r3, [r7, #4]
 800ecc8:	681b      	ldr	r3, [r3, #0]
 800ecca:	88db      	ldrh	r3, [r3, #6]
 800eccc:	429a      	cmp	r2, r3
 800ecce:	d10c      	bne.n	800ecea <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800ecd0:	687b      	ldr	r3, [r7, #4]
 800ecd2:	681b      	ldr	r3, [r3, #0]
 800ecd4:	785b      	ldrb	r3, [r3, #1]
 800ecd6:	4618      	mov	r0, r3
 800ecd8:	f7fd fef8 	bl	800cacc <disk_status>
 800ecdc:	4603      	mov	r3, r0
 800ecde:	f003 0301 	and.w	r3, r3, #1
 800ece2:	2b00      	cmp	r3, #0
 800ece4:	d101      	bne.n	800ecea <validate+0x4e>
			res = FR_OK;
 800ece6:	2300      	movs	r3, #0
 800ece8:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800ecea:	7bfb      	ldrb	r3, [r7, #15]
 800ecec:	2b00      	cmp	r3, #0
 800ecee:	d102      	bne.n	800ecf6 <validate+0x5a>
 800ecf0:	687b      	ldr	r3, [r7, #4]
 800ecf2:	681b      	ldr	r3, [r3, #0]
 800ecf4:	e000      	b.n	800ecf8 <validate+0x5c>
 800ecf6:	2300      	movs	r3, #0
 800ecf8:	683a      	ldr	r2, [r7, #0]
 800ecfa:	6013      	str	r3, [r2, #0]
	return res;
 800ecfc:	7bfb      	ldrb	r3, [r7, #15]
}
 800ecfe:	4618      	mov	r0, r3
 800ed00:	3710      	adds	r7, #16
 800ed02:	46bd      	mov	sp, r7
 800ed04:	bd80      	pop	{r7, pc}
	...

0800ed08 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800ed08:	b580      	push	{r7, lr}
 800ed0a:	b088      	sub	sp, #32
 800ed0c:	af00      	add	r7, sp, #0
 800ed0e:	60f8      	str	r0, [r7, #12]
 800ed10:	60b9      	str	r1, [r7, #8]
 800ed12:	4613      	mov	r3, r2
 800ed14:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800ed16:	68bb      	ldr	r3, [r7, #8]
 800ed18:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800ed1a:	f107 0310 	add.w	r3, r7, #16
 800ed1e:	4618      	mov	r0, r3
 800ed20:	f7ff fcd1 	bl	800e6c6 <get_ldnumber>
 800ed24:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800ed26:	69fb      	ldr	r3, [r7, #28]
 800ed28:	2b00      	cmp	r3, #0
 800ed2a:	da01      	bge.n	800ed30 <f_mount+0x28>
 800ed2c:	230b      	movs	r3, #11
 800ed2e:	e02b      	b.n	800ed88 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800ed30:	4a17      	ldr	r2, [pc, #92]	@ (800ed90 <f_mount+0x88>)
 800ed32:	69fb      	ldr	r3, [r7, #28]
 800ed34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ed38:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800ed3a:	69bb      	ldr	r3, [r7, #24]
 800ed3c:	2b00      	cmp	r3, #0
 800ed3e:	d005      	beq.n	800ed4c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800ed40:	69b8      	ldr	r0, [r7, #24]
 800ed42:	f7fe f9ab 	bl	800d09c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800ed46:	69bb      	ldr	r3, [r7, #24]
 800ed48:	2200      	movs	r2, #0
 800ed4a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800ed4c:	68fb      	ldr	r3, [r7, #12]
 800ed4e:	2b00      	cmp	r3, #0
 800ed50:	d002      	beq.n	800ed58 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800ed52:	68fb      	ldr	r3, [r7, #12]
 800ed54:	2200      	movs	r2, #0
 800ed56:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800ed58:	68fa      	ldr	r2, [r7, #12]
 800ed5a:	490d      	ldr	r1, [pc, #52]	@ (800ed90 <f_mount+0x88>)
 800ed5c:	69fb      	ldr	r3, [r7, #28]
 800ed5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800ed62:	68fb      	ldr	r3, [r7, #12]
 800ed64:	2b00      	cmp	r3, #0
 800ed66:	d002      	beq.n	800ed6e <f_mount+0x66>
 800ed68:	79fb      	ldrb	r3, [r7, #7]
 800ed6a:	2b01      	cmp	r3, #1
 800ed6c:	d001      	beq.n	800ed72 <f_mount+0x6a>
 800ed6e:	2300      	movs	r3, #0
 800ed70:	e00a      	b.n	800ed88 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800ed72:	f107 010c 	add.w	r1, r7, #12
 800ed76:	f107 0308 	add.w	r3, r7, #8
 800ed7a:	2200      	movs	r2, #0
 800ed7c:	4618      	mov	r0, r3
 800ed7e:	f7ff fd3d 	bl	800e7fc <find_volume>
 800ed82:	4603      	mov	r3, r0
 800ed84:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800ed86:	7dfb      	ldrb	r3, [r7, #23]
}
 800ed88:	4618      	mov	r0, r3
 800ed8a:	3720      	adds	r7, #32
 800ed8c:	46bd      	mov	sp, r7
 800ed8e:	bd80      	pop	{r7, pc}
 800ed90:	20000a14 	.word	0x20000a14

0800ed94 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800ed94:	b580      	push	{r7, lr}
 800ed96:	b09a      	sub	sp, #104	@ 0x68
 800ed98:	af00      	add	r7, sp, #0
 800ed9a:	60f8      	str	r0, [r7, #12]
 800ed9c:	60b9      	str	r1, [r7, #8]
 800ed9e:	4613      	mov	r3, r2
 800eda0:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800eda2:	68fb      	ldr	r3, [r7, #12]
 800eda4:	2b00      	cmp	r3, #0
 800eda6:	d101      	bne.n	800edac <f_open+0x18>
 800eda8:	2309      	movs	r3, #9
 800edaa:	e1a9      	b.n	800f100 <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800edac:	79fb      	ldrb	r3, [r7, #7]
 800edae:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800edb2:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800edb4:	79fa      	ldrb	r2, [r7, #7]
 800edb6:	f107 0114 	add.w	r1, r7, #20
 800edba:	f107 0308 	add.w	r3, r7, #8
 800edbe:	4618      	mov	r0, r3
 800edc0:	f7ff fd1c 	bl	800e7fc <find_volume>
 800edc4:	4603      	mov	r3, r0
 800edc6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	if (res == FR_OK) {
 800edca:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800edce:	2b00      	cmp	r3, #0
 800edd0:	f040 818d 	bne.w	800f0ee <f_open+0x35a>
		dj.obj.fs = fs;
 800edd4:	697b      	ldr	r3, [r7, #20]
 800edd6:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800edd8:	68ba      	ldr	r2, [r7, #8]
 800edda:	f107 0318 	add.w	r3, r7, #24
 800edde:	4611      	mov	r1, r2
 800ede0:	4618      	mov	r0, r3
 800ede2:	f7ff fbff 	bl	800e5e4 <follow_path>
 800ede6:	4603      	mov	r3, r0
 800ede8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800edec:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800edf0:	2b00      	cmp	r3, #0
 800edf2:	d118      	bne.n	800ee26 <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800edf4:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800edf8:	b25b      	sxtb	r3, r3
 800edfa:	2b00      	cmp	r3, #0
 800edfc:	da03      	bge.n	800ee06 <f_open+0x72>
				res = FR_INVALID_NAME;
 800edfe:	2306      	movs	r3, #6
 800ee00:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800ee04:	e00f      	b.n	800ee26 <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800ee06:	79fb      	ldrb	r3, [r7, #7]
 800ee08:	2b01      	cmp	r3, #1
 800ee0a:	bf8c      	ite	hi
 800ee0c:	2301      	movhi	r3, #1
 800ee0e:	2300      	movls	r3, #0
 800ee10:	b2db      	uxtb	r3, r3
 800ee12:	461a      	mov	r2, r3
 800ee14:	f107 0318 	add.w	r3, r7, #24
 800ee18:	4611      	mov	r1, r2
 800ee1a:	4618      	mov	r0, r3
 800ee1c:	f7fd fff6 	bl	800ce0c <chk_lock>
 800ee20:	4603      	mov	r3, r0
 800ee22:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800ee26:	79fb      	ldrb	r3, [r7, #7]
 800ee28:	f003 031c 	and.w	r3, r3, #28
 800ee2c:	2b00      	cmp	r3, #0
 800ee2e:	d07f      	beq.n	800ef30 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 800ee30:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800ee34:	2b00      	cmp	r3, #0
 800ee36:	d017      	beq.n	800ee68 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800ee38:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800ee3c:	2b04      	cmp	r3, #4
 800ee3e:	d10e      	bne.n	800ee5e <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800ee40:	f7fe f840 	bl	800cec4 <enq_lock>
 800ee44:	4603      	mov	r3, r0
 800ee46:	2b00      	cmp	r3, #0
 800ee48:	d006      	beq.n	800ee58 <f_open+0xc4>
 800ee4a:	f107 0318 	add.w	r3, r7, #24
 800ee4e:	4618      	mov	r0, r3
 800ee50:	f7ff f918 	bl	800e084 <dir_register>
 800ee54:	4603      	mov	r3, r0
 800ee56:	e000      	b.n	800ee5a <f_open+0xc6>
 800ee58:	2312      	movs	r3, #18
 800ee5a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800ee5e:	79fb      	ldrb	r3, [r7, #7]
 800ee60:	f043 0308 	orr.w	r3, r3, #8
 800ee64:	71fb      	strb	r3, [r7, #7]
 800ee66:	e010      	b.n	800ee8a <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800ee68:	7fbb      	ldrb	r3, [r7, #30]
 800ee6a:	f003 0311 	and.w	r3, r3, #17
 800ee6e:	2b00      	cmp	r3, #0
 800ee70:	d003      	beq.n	800ee7a <f_open+0xe6>
					res = FR_DENIED;
 800ee72:	2307      	movs	r3, #7
 800ee74:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800ee78:	e007      	b.n	800ee8a <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800ee7a:	79fb      	ldrb	r3, [r7, #7]
 800ee7c:	f003 0304 	and.w	r3, r3, #4
 800ee80:	2b00      	cmp	r3, #0
 800ee82:	d002      	beq.n	800ee8a <f_open+0xf6>
 800ee84:	2308      	movs	r3, #8
 800ee86:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800ee8a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800ee8e:	2b00      	cmp	r3, #0
 800ee90:	d168      	bne.n	800ef64 <f_open+0x1d0>
 800ee92:	79fb      	ldrb	r3, [r7, #7]
 800ee94:	f003 0308 	and.w	r3, r3, #8
 800ee98:	2b00      	cmp	r3, #0
 800ee9a:	d063      	beq.n	800ef64 <f_open+0x1d0>
				dw = GET_FATTIME();
 800ee9c:	f7f9 fdce 	bl	8008a3c <get_fattime>
 800eea0:	65b8      	str	r0, [r7, #88]	@ 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800eea2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eea4:	330e      	adds	r3, #14
 800eea6:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800eea8:	4618      	mov	r0, r3
 800eeaa:	f7fd ff05 	bl	800ccb8 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800eeae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eeb0:	3316      	adds	r3, #22
 800eeb2:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800eeb4:	4618      	mov	r0, r3
 800eeb6:	f7fd feff 	bl	800ccb8 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800eeba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eebc:	330b      	adds	r3, #11
 800eebe:	2220      	movs	r2, #32
 800eec0:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800eec2:	697b      	ldr	r3, [r7, #20]
 800eec4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800eec6:	4611      	mov	r1, r2
 800eec8:	4618      	mov	r0, r3
 800eeca:	f7fe fe53 	bl	800db74 <ld_clust>
 800eece:	6578      	str	r0, [r7, #84]	@ 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800eed0:	697b      	ldr	r3, [r7, #20]
 800eed2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800eed4:	2200      	movs	r2, #0
 800eed6:	4618      	mov	r0, r3
 800eed8:	f7fe fe6b 	bl	800dbb2 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800eedc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eede:	331c      	adds	r3, #28
 800eee0:	2100      	movs	r1, #0
 800eee2:	4618      	mov	r0, r3
 800eee4:	f7fd fee8 	bl	800ccb8 <st_dword>
					fs->wflag = 1;
 800eee8:	697b      	ldr	r3, [r7, #20]
 800eeea:	2201      	movs	r2, #1
 800eeec:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800eeee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800eef0:	2b00      	cmp	r3, #0
 800eef2:	d037      	beq.n	800ef64 <f_open+0x1d0>
						dw = fs->winsect;
 800eef4:	697b      	ldr	r3, [r7, #20]
 800eef6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800eef8:	65bb      	str	r3, [r7, #88]	@ 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800eefa:	f107 0318 	add.w	r3, r7, #24
 800eefe:	2200      	movs	r2, #0
 800ef00:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800ef02:	4618      	mov	r0, r3
 800ef04:	f7fe fb7e 	bl	800d604 <remove_chain>
 800ef08:	4603      	mov	r3, r0
 800ef0a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
						if (res == FR_OK) {
 800ef0e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800ef12:	2b00      	cmp	r3, #0
 800ef14:	d126      	bne.n	800ef64 <f_open+0x1d0>
							res = move_window(fs, dw);
 800ef16:	697b      	ldr	r3, [r7, #20]
 800ef18:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800ef1a:	4618      	mov	r0, r3
 800ef1c:	f7fe f926 	bl	800d16c <move_window>
 800ef20:	4603      	mov	r3, r0
 800ef22:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800ef26:	697b      	ldr	r3, [r7, #20]
 800ef28:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800ef2a:	3a01      	subs	r2, #1
 800ef2c:	611a      	str	r2, [r3, #16]
 800ef2e:	e019      	b.n	800ef64 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800ef30:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800ef34:	2b00      	cmp	r3, #0
 800ef36:	d115      	bne.n	800ef64 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800ef38:	7fbb      	ldrb	r3, [r7, #30]
 800ef3a:	f003 0310 	and.w	r3, r3, #16
 800ef3e:	2b00      	cmp	r3, #0
 800ef40:	d003      	beq.n	800ef4a <f_open+0x1b6>
					res = FR_NO_FILE;
 800ef42:	2304      	movs	r3, #4
 800ef44:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800ef48:	e00c      	b.n	800ef64 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800ef4a:	79fb      	ldrb	r3, [r7, #7]
 800ef4c:	f003 0302 	and.w	r3, r3, #2
 800ef50:	2b00      	cmp	r3, #0
 800ef52:	d007      	beq.n	800ef64 <f_open+0x1d0>
 800ef54:	7fbb      	ldrb	r3, [r7, #30]
 800ef56:	f003 0301 	and.w	r3, r3, #1
 800ef5a:	2b00      	cmp	r3, #0
 800ef5c:	d002      	beq.n	800ef64 <f_open+0x1d0>
						res = FR_DENIED;
 800ef5e:	2307      	movs	r3, #7
 800ef60:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800ef64:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800ef68:	2b00      	cmp	r3, #0
 800ef6a:	d126      	bne.n	800efba <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800ef6c:	79fb      	ldrb	r3, [r7, #7]
 800ef6e:	f003 0308 	and.w	r3, r3, #8
 800ef72:	2b00      	cmp	r3, #0
 800ef74:	d003      	beq.n	800ef7e <f_open+0x1ea>
				mode |= FA_MODIFIED;
 800ef76:	79fb      	ldrb	r3, [r7, #7]
 800ef78:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ef7c:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800ef7e:	697b      	ldr	r3, [r7, #20]
 800ef80:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ef82:	68fb      	ldr	r3, [r7, #12]
 800ef84:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 800ef86:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ef88:	68fb      	ldr	r3, [r7, #12]
 800ef8a:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800ef8c:	79fb      	ldrb	r3, [r7, #7]
 800ef8e:	2b01      	cmp	r3, #1
 800ef90:	bf8c      	ite	hi
 800ef92:	2301      	movhi	r3, #1
 800ef94:	2300      	movls	r3, #0
 800ef96:	b2db      	uxtb	r3, r3
 800ef98:	461a      	mov	r2, r3
 800ef9a:	f107 0318 	add.w	r3, r7, #24
 800ef9e:	4611      	mov	r1, r2
 800efa0:	4618      	mov	r0, r3
 800efa2:	f7fd ffb1 	bl	800cf08 <inc_lock>
 800efa6:	4602      	mov	r2, r0
 800efa8:	68fb      	ldr	r3, [r7, #12]
 800efaa:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800efac:	68fb      	ldr	r3, [r7, #12]
 800efae:	691b      	ldr	r3, [r3, #16]
 800efb0:	2b00      	cmp	r3, #0
 800efb2:	d102      	bne.n	800efba <f_open+0x226>
 800efb4:	2302      	movs	r3, #2
 800efb6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800efba:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800efbe:	2b00      	cmp	r3, #0
 800efc0:	f040 8095 	bne.w	800f0ee <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800efc4:	697b      	ldr	r3, [r7, #20]
 800efc6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800efc8:	4611      	mov	r1, r2
 800efca:	4618      	mov	r0, r3
 800efcc:	f7fe fdd2 	bl	800db74 <ld_clust>
 800efd0:	4602      	mov	r2, r0
 800efd2:	68fb      	ldr	r3, [r7, #12]
 800efd4:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800efd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800efd8:	331c      	adds	r3, #28
 800efda:	4618      	mov	r0, r3
 800efdc:	f7fd fe2e 	bl	800cc3c <ld_dword>
 800efe0:	4602      	mov	r2, r0
 800efe2:	68fb      	ldr	r3, [r7, #12]
 800efe4:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800efe6:	68fb      	ldr	r3, [r7, #12]
 800efe8:	2200      	movs	r2, #0
 800efea:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800efec:	697a      	ldr	r2, [r7, #20]
 800efee:	68fb      	ldr	r3, [r7, #12]
 800eff0:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800eff2:	697b      	ldr	r3, [r7, #20]
 800eff4:	88da      	ldrh	r2, [r3, #6]
 800eff6:	68fb      	ldr	r3, [r7, #12]
 800eff8:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800effa:	68fb      	ldr	r3, [r7, #12]
 800effc:	79fa      	ldrb	r2, [r7, #7]
 800effe:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800f000:	68fb      	ldr	r3, [r7, #12]
 800f002:	2200      	movs	r2, #0
 800f004:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800f006:	68fb      	ldr	r3, [r7, #12]
 800f008:	2200      	movs	r2, #0
 800f00a:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800f00c:	68fb      	ldr	r3, [r7, #12]
 800f00e:	2200      	movs	r2, #0
 800f010:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800f012:	68fb      	ldr	r3, [r7, #12]
 800f014:	3330      	adds	r3, #48	@ 0x30
 800f016:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f01a:	2100      	movs	r1, #0
 800f01c:	4618      	mov	r0, r3
 800f01e:	f7fd fe98 	bl	800cd52 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800f022:	79fb      	ldrb	r3, [r7, #7]
 800f024:	f003 0320 	and.w	r3, r3, #32
 800f028:	2b00      	cmp	r3, #0
 800f02a:	d060      	beq.n	800f0ee <f_open+0x35a>
 800f02c:	68fb      	ldr	r3, [r7, #12]
 800f02e:	68db      	ldr	r3, [r3, #12]
 800f030:	2b00      	cmp	r3, #0
 800f032:	d05c      	beq.n	800f0ee <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800f034:	68fb      	ldr	r3, [r7, #12]
 800f036:	68da      	ldr	r2, [r3, #12]
 800f038:	68fb      	ldr	r3, [r7, #12]
 800f03a:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800f03c:	697b      	ldr	r3, [r7, #20]
 800f03e:	895b      	ldrh	r3, [r3, #10]
 800f040:	025b      	lsls	r3, r3, #9
 800f042:	653b      	str	r3, [r7, #80]	@ 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800f044:	68fb      	ldr	r3, [r7, #12]
 800f046:	689b      	ldr	r3, [r3, #8]
 800f048:	663b      	str	r3, [r7, #96]	@ 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800f04a:	68fb      	ldr	r3, [r7, #12]
 800f04c:	68db      	ldr	r3, [r3, #12]
 800f04e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800f050:	e016      	b.n	800f080 <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 800f052:	68fb      	ldr	r3, [r7, #12]
 800f054:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800f056:	4618      	mov	r0, r3
 800f058:	f7fe f943 	bl	800d2e2 <get_fat>
 800f05c:	6638      	str	r0, [r7, #96]	@ 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800f05e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800f060:	2b01      	cmp	r3, #1
 800f062:	d802      	bhi.n	800f06a <f_open+0x2d6>
 800f064:	2302      	movs	r3, #2
 800f066:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800f06a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800f06c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f070:	d102      	bne.n	800f078 <f_open+0x2e4>
 800f072:	2301      	movs	r3, #1
 800f074:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800f078:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800f07a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f07c:	1ad3      	subs	r3, r2, r3
 800f07e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800f080:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800f084:	2b00      	cmp	r3, #0
 800f086:	d103      	bne.n	800f090 <f_open+0x2fc>
 800f088:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800f08a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f08c:	429a      	cmp	r2, r3
 800f08e:	d8e0      	bhi.n	800f052 <f_open+0x2be>
				}
				fp->clust = clst;
 800f090:	68fb      	ldr	r3, [r7, #12]
 800f092:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800f094:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800f096:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800f09a:	2b00      	cmp	r3, #0
 800f09c:	d127      	bne.n	800f0ee <f_open+0x35a>
 800f09e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800f0a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f0a4:	2b00      	cmp	r3, #0
 800f0a6:	d022      	beq.n	800f0ee <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800f0a8:	697b      	ldr	r3, [r7, #20]
 800f0aa:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800f0ac:	4618      	mov	r0, r3
 800f0ae:	f7fe f8f9 	bl	800d2a4 <clust2sect>
 800f0b2:	64f8      	str	r0, [r7, #76]	@ 0x4c
 800f0b4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f0b6:	2b00      	cmp	r3, #0
 800f0b8:	d103      	bne.n	800f0c2 <f_open+0x32e>
						res = FR_INT_ERR;
 800f0ba:	2302      	movs	r3, #2
 800f0bc:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800f0c0:	e015      	b.n	800f0ee <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800f0c2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800f0c4:	0a5a      	lsrs	r2, r3, #9
 800f0c6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f0c8:	441a      	add	r2, r3
 800f0ca:	68fb      	ldr	r3, [r7, #12]
 800f0cc:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800f0ce:	697b      	ldr	r3, [r7, #20]
 800f0d0:	7858      	ldrb	r0, [r3, #1]
 800f0d2:	68fb      	ldr	r3, [r7, #12]
 800f0d4:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800f0d8:	68fb      	ldr	r3, [r7, #12]
 800f0da:	6a1a      	ldr	r2, [r3, #32]
 800f0dc:	2301      	movs	r3, #1
 800f0de:	f7fd fd37 	bl	800cb50 <disk_read>
 800f0e2:	4603      	mov	r3, r0
 800f0e4:	2b00      	cmp	r3, #0
 800f0e6:	d002      	beq.n	800f0ee <f_open+0x35a>
 800f0e8:	2301      	movs	r3, #1
 800f0ea:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800f0ee:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800f0f2:	2b00      	cmp	r3, #0
 800f0f4:	d002      	beq.n	800f0fc <f_open+0x368>
 800f0f6:	68fb      	ldr	r3, [r7, #12]
 800f0f8:	2200      	movs	r2, #0
 800f0fa:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800f0fc:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 800f100:	4618      	mov	r0, r3
 800f102:	3768      	adds	r7, #104	@ 0x68
 800f104:	46bd      	mov	sp, r7
 800f106:	bd80      	pop	{r7, pc}

0800f108 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800f108:	b580      	push	{r7, lr}
 800f10a:	b08c      	sub	sp, #48	@ 0x30
 800f10c:	af00      	add	r7, sp, #0
 800f10e:	60f8      	str	r0, [r7, #12]
 800f110:	60b9      	str	r1, [r7, #8]
 800f112:	607a      	str	r2, [r7, #4]
 800f114:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800f116:	68bb      	ldr	r3, [r7, #8]
 800f118:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800f11a:	683b      	ldr	r3, [r7, #0]
 800f11c:	2200      	movs	r2, #0
 800f11e:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800f120:	68fb      	ldr	r3, [r7, #12]
 800f122:	f107 0210 	add.w	r2, r7, #16
 800f126:	4611      	mov	r1, r2
 800f128:	4618      	mov	r0, r3
 800f12a:	f7ff fdb7 	bl	800ec9c <validate>
 800f12e:	4603      	mov	r3, r0
 800f130:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800f134:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800f138:	2b00      	cmp	r3, #0
 800f13a:	d107      	bne.n	800f14c <f_write+0x44>
 800f13c:	68fb      	ldr	r3, [r7, #12]
 800f13e:	7d5b      	ldrb	r3, [r3, #21]
 800f140:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800f144:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800f148:	2b00      	cmp	r3, #0
 800f14a:	d002      	beq.n	800f152 <f_write+0x4a>
 800f14c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800f150:	e14b      	b.n	800f3ea <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800f152:	68fb      	ldr	r3, [r7, #12]
 800f154:	7d1b      	ldrb	r3, [r3, #20]
 800f156:	f003 0302 	and.w	r3, r3, #2
 800f15a:	2b00      	cmp	r3, #0
 800f15c:	d101      	bne.n	800f162 <f_write+0x5a>
 800f15e:	2307      	movs	r3, #7
 800f160:	e143      	b.n	800f3ea <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800f162:	68fb      	ldr	r3, [r7, #12]
 800f164:	699a      	ldr	r2, [r3, #24]
 800f166:	687b      	ldr	r3, [r7, #4]
 800f168:	441a      	add	r2, r3
 800f16a:	68fb      	ldr	r3, [r7, #12]
 800f16c:	699b      	ldr	r3, [r3, #24]
 800f16e:	429a      	cmp	r2, r3
 800f170:	f080 812d 	bcs.w	800f3ce <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800f174:	68fb      	ldr	r3, [r7, #12]
 800f176:	699b      	ldr	r3, [r3, #24]
 800f178:	43db      	mvns	r3, r3
 800f17a:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800f17c:	e127      	b.n	800f3ce <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800f17e:	68fb      	ldr	r3, [r7, #12]
 800f180:	699b      	ldr	r3, [r3, #24]
 800f182:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f186:	2b00      	cmp	r3, #0
 800f188:	f040 80e3 	bne.w	800f352 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800f18c:	68fb      	ldr	r3, [r7, #12]
 800f18e:	699b      	ldr	r3, [r3, #24]
 800f190:	0a5b      	lsrs	r3, r3, #9
 800f192:	693a      	ldr	r2, [r7, #16]
 800f194:	8952      	ldrh	r2, [r2, #10]
 800f196:	3a01      	subs	r2, #1
 800f198:	4013      	ands	r3, r2
 800f19a:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800f19c:	69bb      	ldr	r3, [r7, #24]
 800f19e:	2b00      	cmp	r3, #0
 800f1a0:	d143      	bne.n	800f22a <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800f1a2:	68fb      	ldr	r3, [r7, #12]
 800f1a4:	699b      	ldr	r3, [r3, #24]
 800f1a6:	2b00      	cmp	r3, #0
 800f1a8:	d10c      	bne.n	800f1c4 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800f1aa:	68fb      	ldr	r3, [r7, #12]
 800f1ac:	689b      	ldr	r3, [r3, #8]
 800f1ae:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800f1b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f1b2:	2b00      	cmp	r3, #0
 800f1b4:	d11a      	bne.n	800f1ec <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800f1b6:	68fb      	ldr	r3, [r7, #12]
 800f1b8:	2100      	movs	r1, #0
 800f1ba:	4618      	mov	r0, r3
 800f1bc:	f7fe fa87 	bl	800d6ce <create_chain>
 800f1c0:	62b8      	str	r0, [r7, #40]	@ 0x28
 800f1c2:	e013      	b.n	800f1ec <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800f1c4:	68fb      	ldr	r3, [r7, #12]
 800f1c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f1c8:	2b00      	cmp	r3, #0
 800f1ca:	d007      	beq.n	800f1dc <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800f1cc:	68fb      	ldr	r3, [r7, #12]
 800f1ce:	699b      	ldr	r3, [r3, #24]
 800f1d0:	4619      	mov	r1, r3
 800f1d2:	68f8      	ldr	r0, [r7, #12]
 800f1d4:	f7fe fb13 	bl	800d7fe <clmt_clust>
 800f1d8:	62b8      	str	r0, [r7, #40]	@ 0x28
 800f1da:	e007      	b.n	800f1ec <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800f1dc:	68fa      	ldr	r2, [r7, #12]
 800f1de:	68fb      	ldr	r3, [r7, #12]
 800f1e0:	69db      	ldr	r3, [r3, #28]
 800f1e2:	4619      	mov	r1, r3
 800f1e4:	4610      	mov	r0, r2
 800f1e6:	f7fe fa72 	bl	800d6ce <create_chain>
 800f1ea:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800f1ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f1ee:	2b00      	cmp	r3, #0
 800f1f0:	f000 80f2 	beq.w	800f3d8 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800f1f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f1f6:	2b01      	cmp	r3, #1
 800f1f8:	d104      	bne.n	800f204 <f_write+0xfc>
 800f1fa:	68fb      	ldr	r3, [r7, #12]
 800f1fc:	2202      	movs	r2, #2
 800f1fe:	755a      	strb	r2, [r3, #21]
 800f200:	2302      	movs	r3, #2
 800f202:	e0f2      	b.n	800f3ea <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800f204:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f206:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f20a:	d104      	bne.n	800f216 <f_write+0x10e>
 800f20c:	68fb      	ldr	r3, [r7, #12]
 800f20e:	2201      	movs	r2, #1
 800f210:	755a      	strb	r2, [r3, #21]
 800f212:	2301      	movs	r3, #1
 800f214:	e0e9      	b.n	800f3ea <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 800f216:	68fb      	ldr	r3, [r7, #12]
 800f218:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f21a:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800f21c:	68fb      	ldr	r3, [r7, #12]
 800f21e:	689b      	ldr	r3, [r3, #8]
 800f220:	2b00      	cmp	r3, #0
 800f222:	d102      	bne.n	800f22a <f_write+0x122>
 800f224:	68fb      	ldr	r3, [r7, #12]
 800f226:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f228:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800f22a:	68fb      	ldr	r3, [r7, #12]
 800f22c:	7d1b      	ldrb	r3, [r3, #20]
 800f22e:	b25b      	sxtb	r3, r3
 800f230:	2b00      	cmp	r3, #0
 800f232:	da18      	bge.n	800f266 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f234:	693b      	ldr	r3, [r7, #16]
 800f236:	7858      	ldrb	r0, [r3, #1]
 800f238:	68fb      	ldr	r3, [r7, #12]
 800f23a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800f23e:	68fb      	ldr	r3, [r7, #12]
 800f240:	6a1a      	ldr	r2, [r3, #32]
 800f242:	2301      	movs	r3, #1
 800f244:	f7fd fca4 	bl	800cb90 <disk_write>
 800f248:	4603      	mov	r3, r0
 800f24a:	2b00      	cmp	r3, #0
 800f24c:	d004      	beq.n	800f258 <f_write+0x150>
 800f24e:	68fb      	ldr	r3, [r7, #12]
 800f250:	2201      	movs	r2, #1
 800f252:	755a      	strb	r2, [r3, #21]
 800f254:	2301      	movs	r3, #1
 800f256:	e0c8      	b.n	800f3ea <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 800f258:	68fb      	ldr	r3, [r7, #12]
 800f25a:	7d1b      	ldrb	r3, [r3, #20]
 800f25c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f260:	b2da      	uxtb	r2, r3
 800f262:	68fb      	ldr	r3, [r7, #12]
 800f264:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800f266:	693a      	ldr	r2, [r7, #16]
 800f268:	68fb      	ldr	r3, [r7, #12]
 800f26a:	69db      	ldr	r3, [r3, #28]
 800f26c:	4619      	mov	r1, r3
 800f26e:	4610      	mov	r0, r2
 800f270:	f7fe f818 	bl	800d2a4 <clust2sect>
 800f274:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800f276:	697b      	ldr	r3, [r7, #20]
 800f278:	2b00      	cmp	r3, #0
 800f27a:	d104      	bne.n	800f286 <f_write+0x17e>
 800f27c:	68fb      	ldr	r3, [r7, #12]
 800f27e:	2202      	movs	r2, #2
 800f280:	755a      	strb	r2, [r3, #21]
 800f282:	2302      	movs	r3, #2
 800f284:	e0b1      	b.n	800f3ea <f_write+0x2e2>
			sect += csect;
 800f286:	697a      	ldr	r2, [r7, #20]
 800f288:	69bb      	ldr	r3, [r7, #24]
 800f28a:	4413      	add	r3, r2
 800f28c:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800f28e:	687b      	ldr	r3, [r7, #4]
 800f290:	0a5b      	lsrs	r3, r3, #9
 800f292:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800f294:	6a3b      	ldr	r3, [r7, #32]
 800f296:	2b00      	cmp	r3, #0
 800f298:	d03c      	beq.n	800f314 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800f29a:	69ba      	ldr	r2, [r7, #24]
 800f29c:	6a3b      	ldr	r3, [r7, #32]
 800f29e:	4413      	add	r3, r2
 800f2a0:	693a      	ldr	r2, [r7, #16]
 800f2a2:	8952      	ldrh	r2, [r2, #10]
 800f2a4:	4293      	cmp	r3, r2
 800f2a6:	d905      	bls.n	800f2b4 <f_write+0x1ac>
					cc = fs->csize - csect;
 800f2a8:	693b      	ldr	r3, [r7, #16]
 800f2aa:	895b      	ldrh	r3, [r3, #10]
 800f2ac:	461a      	mov	r2, r3
 800f2ae:	69bb      	ldr	r3, [r7, #24]
 800f2b0:	1ad3      	subs	r3, r2, r3
 800f2b2:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f2b4:	693b      	ldr	r3, [r7, #16]
 800f2b6:	7858      	ldrb	r0, [r3, #1]
 800f2b8:	6a3b      	ldr	r3, [r7, #32]
 800f2ba:	697a      	ldr	r2, [r7, #20]
 800f2bc:	69f9      	ldr	r1, [r7, #28]
 800f2be:	f7fd fc67 	bl	800cb90 <disk_write>
 800f2c2:	4603      	mov	r3, r0
 800f2c4:	2b00      	cmp	r3, #0
 800f2c6:	d004      	beq.n	800f2d2 <f_write+0x1ca>
 800f2c8:	68fb      	ldr	r3, [r7, #12]
 800f2ca:	2201      	movs	r2, #1
 800f2cc:	755a      	strb	r2, [r3, #21]
 800f2ce:	2301      	movs	r3, #1
 800f2d0:	e08b      	b.n	800f3ea <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800f2d2:	68fb      	ldr	r3, [r7, #12]
 800f2d4:	6a1a      	ldr	r2, [r3, #32]
 800f2d6:	697b      	ldr	r3, [r7, #20]
 800f2d8:	1ad3      	subs	r3, r2, r3
 800f2da:	6a3a      	ldr	r2, [r7, #32]
 800f2dc:	429a      	cmp	r2, r3
 800f2de:	d915      	bls.n	800f30c <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800f2e0:	68fb      	ldr	r3, [r7, #12]
 800f2e2:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 800f2e6:	68fb      	ldr	r3, [r7, #12]
 800f2e8:	6a1a      	ldr	r2, [r3, #32]
 800f2ea:	697b      	ldr	r3, [r7, #20]
 800f2ec:	1ad3      	subs	r3, r2, r3
 800f2ee:	025b      	lsls	r3, r3, #9
 800f2f0:	69fa      	ldr	r2, [r7, #28]
 800f2f2:	4413      	add	r3, r2
 800f2f4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f2f8:	4619      	mov	r1, r3
 800f2fa:	f7fd fd09 	bl	800cd10 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800f2fe:	68fb      	ldr	r3, [r7, #12]
 800f300:	7d1b      	ldrb	r3, [r3, #20]
 800f302:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f306:	b2da      	uxtb	r2, r3
 800f308:	68fb      	ldr	r3, [r7, #12]
 800f30a:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800f30c:	6a3b      	ldr	r3, [r7, #32]
 800f30e:	025b      	lsls	r3, r3, #9
 800f310:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 800f312:	e03f      	b.n	800f394 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800f314:	68fb      	ldr	r3, [r7, #12]
 800f316:	6a1b      	ldr	r3, [r3, #32]
 800f318:	697a      	ldr	r2, [r7, #20]
 800f31a:	429a      	cmp	r2, r3
 800f31c:	d016      	beq.n	800f34c <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 800f31e:	68fb      	ldr	r3, [r7, #12]
 800f320:	699a      	ldr	r2, [r3, #24]
 800f322:	68fb      	ldr	r3, [r7, #12]
 800f324:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800f326:	429a      	cmp	r2, r3
 800f328:	d210      	bcs.n	800f34c <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800f32a:	693b      	ldr	r3, [r7, #16]
 800f32c:	7858      	ldrb	r0, [r3, #1]
 800f32e:	68fb      	ldr	r3, [r7, #12]
 800f330:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800f334:	2301      	movs	r3, #1
 800f336:	697a      	ldr	r2, [r7, #20]
 800f338:	f7fd fc0a 	bl	800cb50 <disk_read>
 800f33c:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800f33e:	2b00      	cmp	r3, #0
 800f340:	d004      	beq.n	800f34c <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 800f342:	68fb      	ldr	r3, [r7, #12]
 800f344:	2201      	movs	r2, #1
 800f346:	755a      	strb	r2, [r3, #21]
 800f348:	2301      	movs	r3, #1
 800f34a:	e04e      	b.n	800f3ea <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 800f34c:	68fb      	ldr	r3, [r7, #12]
 800f34e:	697a      	ldr	r2, [r7, #20]
 800f350:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800f352:	68fb      	ldr	r3, [r7, #12]
 800f354:	699b      	ldr	r3, [r3, #24]
 800f356:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f35a:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800f35e:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800f360:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f362:	687b      	ldr	r3, [r7, #4]
 800f364:	429a      	cmp	r2, r3
 800f366:	d901      	bls.n	800f36c <f_write+0x264>
 800f368:	687b      	ldr	r3, [r7, #4]
 800f36a:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800f36c:	68fb      	ldr	r3, [r7, #12]
 800f36e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800f372:	68fb      	ldr	r3, [r7, #12]
 800f374:	699b      	ldr	r3, [r3, #24]
 800f376:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f37a:	4413      	add	r3, r2
 800f37c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f37e:	69f9      	ldr	r1, [r7, #28]
 800f380:	4618      	mov	r0, r3
 800f382:	f7fd fcc5 	bl	800cd10 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800f386:	68fb      	ldr	r3, [r7, #12]
 800f388:	7d1b      	ldrb	r3, [r3, #20]
 800f38a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800f38e:	b2da      	uxtb	r2, r3
 800f390:	68fb      	ldr	r3, [r7, #12]
 800f392:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800f394:	69fa      	ldr	r2, [r7, #28]
 800f396:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f398:	4413      	add	r3, r2
 800f39a:	61fb      	str	r3, [r7, #28]
 800f39c:	68fb      	ldr	r3, [r7, #12]
 800f39e:	699a      	ldr	r2, [r3, #24]
 800f3a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f3a2:	441a      	add	r2, r3
 800f3a4:	68fb      	ldr	r3, [r7, #12]
 800f3a6:	619a      	str	r2, [r3, #24]
 800f3a8:	68fb      	ldr	r3, [r7, #12]
 800f3aa:	68da      	ldr	r2, [r3, #12]
 800f3ac:	68fb      	ldr	r3, [r7, #12]
 800f3ae:	699b      	ldr	r3, [r3, #24]
 800f3b0:	429a      	cmp	r2, r3
 800f3b2:	bf38      	it	cc
 800f3b4:	461a      	movcc	r2, r3
 800f3b6:	68fb      	ldr	r3, [r7, #12]
 800f3b8:	60da      	str	r2, [r3, #12]
 800f3ba:	683b      	ldr	r3, [r7, #0]
 800f3bc:	681a      	ldr	r2, [r3, #0]
 800f3be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f3c0:	441a      	add	r2, r3
 800f3c2:	683b      	ldr	r3, [r7, #0]
 800f3c4:	601a      	str	r2, [r3, #0]
 800f3c6:	687a      	ldr	r2, [r7, #4]
 800f3c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f3ca:	1ad3      	subs	r3, r2, r3
 800f3cc:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800f3ce:	687b      	ldr	r3, [r7, #4]
 800f3d0:	2b00      	cmp	r3, #0
 800f3d2:	f47f aed4 	bne.w	800f17e <f_write+0x76>
 800f3d6:	e000      	b.n	800f3da <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800f3d8:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800f3da:	68fb      	ldr	r3, [r7, #12]
 800f3dc:	7d1b      	ldrb	r3, [r3, #20]
 800f3de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f3e2:	b2da      	uxtb	r2, r3
 800f3e4:	68fb      	ldr	r3, [r7, #12]
 800f3e6:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800f3e8:	2300      	movs	r3, #0
}
 800f3ea:	4618      	mov	r0, r3
 800f3ec:	3730      	adds	r7, #48	@ 0x30
 800f3ee:	46bd      	mov	sp, r7
 800f3f0:	bd80      	pop	{r7, pc}

0800f3f2 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800f3f2:	b580      	push	{r7, lr}
 800f3f4:	b086      	sub	sp, #24
 800f3f6:	af00      	add	r7, sp, #0
 800f3f8:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800f3fa:	687b      	ldr	r3, [r7, #4]
 800f3fc:	f107 0208 	add.w	r2, r7, #8
 800f400:	4611      	mov	r1, r2
 800f402:	4618      	mov	r0, r3
 800f404:	f7ff fc4a 	bl	800ec9c <validate>
 800f408:	4603      	mov	r3, r0
 800f40a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800f40c:	7dfb      	ldrb	r3, [r7, #23]
 800f40e:	2b00      	cmp	r3, #0
 800f410:	d168      	bne.n	800f4e4 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800f412:	687b      	ldr	r3, [r7, #4]
 800f414:	7d1b      	ldrb	r3, [r3, #20]
 800f416:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f41a:	2b00      	cmp	r3, #0
 800f41c:	d062      	beq.n	800f4e4 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800f41e:	687b      	ldr	r3, [r7, #4]
 800f420:	7d1b      	ldrb	r3, [r3, #20]
 800f422:	b25b      	sxtb	r3, r3
 800f424:	2b00      	cmp	r3, #0
 800f426:	da15      	bge.n	800f454 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800f428:	68bb      	ldr	r3, [r7, #8]
 800f42a:	7858      	ldrb	r0, [r3, #1]
 800f42c:	687b      	ldr	r3, [r7, #4]
 800f42e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800f432:	687b      	ldr	r3, [r7, #4]
 800f434:	6a1a      	ldr	r2, [r3, #32]
 800f436:	2301      	movs	r3, #1
 800f438:	f7fd fbaa 	bl	800cb90 <disk_write>
 800f43c:	4603      	mov	r3, r0
 800f43e:	2b00      	cmp	r3, #0
 800f440:	d001      	beq.n	800f446 <f_sync+0x54>
 800f442:	2301      	movs	r3, #1
 800f444:	e04f      	b.n	800f4e6 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800f446:	687b      	ldr	r3, [r7, #4]
 800f448:	7d1b      	ldrb	r3, [r3, #20]
 800f44a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f44e:	b2da      	uxtb	r2, r3
 800f450:	687b      	ldr	r3, [r7, #4]
 800f452:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800f454:	f7f9 faf2 	bl	8008a3c <get_fattime>
 800f458:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800f45a:	68ba      	ldr	r2, [r7, #8]
 800f45c:	687b      	ldr	r3, [r7, #4]
 800f45e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f460:	4619      	mov	r1, r3
 800f462:	4610      	mov	r0, r2
 800f464:	f7fd fe82 	bl	800d16c <move_window>
 800f468:	4603      	mov	r3, r0
 800f46a:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800f46c:	7dfb      	ldrb	r3, [r7, #23]
 800f46e:	2b00      	cmp	r3, #0
 800f470:	d138      	bne.n	800f4e4 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800f472:	687b      	ldr	r3, [r7, #4]
 800f474:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f476:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800f478:	68fb      	ldr	r3, [r7, #12]
 800f47a:	330b      	adds	r3, #11
 800f47c:	781a      	ldrb	r2, [r3, #0]
 800f47e:	68fb      	ldr	r3, [r7, #12]
 800f480:	330b      	adds	r3, #11
 800f482:	f042 0220 	orr.w	r2, r2, #32
 800f486:	b2d2      	uxtb	r2, r2
 800f488:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800f48a:	687b      	ldr	r3, [r7, #4]
 800f48c:	6818      	ldr	r0, [r3, #0]
 800f48e:	687b      	ldr	r3, [r7, #4]
 800f490:	689b      	ldr	r3, [r3, #8]
 800f492:	461a      	mov	r2, r3
 800f494:	68f9      	ldr	r1, [r7, #12]
 800f496:	f7fe fb8c 	bl	800dbb2 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800f49a:	68fb      	ldr	r3, [r7, #12]
 800f49c:	f103 021c 	add.w	r2, r3, #28
 800f4a0:	687b      	ldr	r3, [r7, #4]
 800f4a2:	68db      	ldr	r3, [r3, #12]
 800f4a4:	4619      	mov	r1, r3
 800f4a6:	4610      	mov	r0, r2
 800f4a8:	f7fd fc06 	bl	800ccb8 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800f4ac:	68fb      	ldr	r3, [r7, #12]
 800f4ae:	3316      	adds	r3, #22
 800f4b0:	6939      	ldr	r1, [r7, #16]
 800f4b2:	4618      	mov	r0, r3
 800f4b4:	f7fd fc00 	bl	800ccb8 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800f4b8:	68fb      	ldr	r3, [r7, #12]
 800f4ba:	3312      	adds	r3, #18
 800f4bc:	2100      	movs	r1, #0
 800f4be:	4618      	mov	r0, r3
 800f4c0:	f7fd fbdf 	bl	800cc82 <st_word>
					fs->wflag = 1;
 800f4c4:	68bb      	ldr	r3, [r7, #8]
 800f4c6:	2201      	movs	r2, #1
 800f4c8:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800f4ca:	68bb      	ldr	r3, [r7, #8]
 800f4cc:	4618      	mov	r0, r3
 800f4ce:	f7fd fe7b 	bl	800d1c8 <sync_fs>
 800f4d2:	4603      	mov	r3, r0
 800f4d4:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800f4d6:	687b      	ldr	r3, [r7, #4]
 800f4d8:	7d1b      	ldrb	r3, [r3, #20]
 800f4da:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800f4de:	b2da      	uxtb	r2, r3
 800f4e0:	687b      	ldr	r3, [r7, #4]
 800f4e2:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800f4e4:	7dfb      	ldrb	r3, [r7, #23]
}
 800f4e6:	4618      	mov	r0, r3
 800f4e8:	3718      	adds	r7, #24
 800f4ea:	46bd      	mov	sp, r7
 800f4ec:	bd80      	pop	{r7, pc}

0800f4ee <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800f4ee:	b580      	push	{r7, lr}
 800f4f0:	b084      	sub	sp, #16
 800f4f2:	af00      	add	r7, sp, #0
 800f4f4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800f4f6:	6878      	ldr	r0, [r7, #4]
 800f4f8:	f7ff ff7b 	bl	800f3f2 <f_sync>
 800f4fc:	4603      	mov	r3, r0
 800f4fe:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800f500:	7bfb      	ldrb	r3, [r7, #15]
 800f502:	2b00      	cmp	r3, #0
 800f504:	d118      	bne.n	800f538 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800f506:	687b      	ldr	r3, [r7, #4]
 800f508:	f107 0208 	add.w	r2, r7, #8
 800f50c:	4611      	mov	r1, r2
 800f50e:	4618      	mov	r0, r3
 800f510:	f7ff fbc4 	bl	800ec9c <validate>
 800f514:	4603      	mov	r3, r0
 800f516:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800f518:	7bfb      	ldrb	r3, [r7, #15]
 800f51a:	2b00      	cmp	r3, #0
 800f51c:	d10c      	bne.n	800f538 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800f51e:	687b      	ldr	r3, [r7, #4]
 800f520:	691b      	ldr	r3, [r3, #16]
 800f522:	4618      	mov	r0, r3
 800f524:	f7fd fd7e 	bl	800d024 <dec_lock>
 800f528:	4603      	mov	r3, r0
 800f52a:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800f52c:	7bfb      	ldrb	r3, [r7, #15]
 800f52e:	2b00      	cmp	r3, #0
 800f530:	d102      	bne.n	800f538 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800f532:	687b      	ldr	r3, [r7, #4]
 800f534:	2200      	movs	r2, #0
 800f536:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800f538:	7bfb      	ldrb	r3, [r7, #15]
}
 800f53a:	4618      	mov	r0, r3
 800f53c:	3710      	adds	r7, #16
 800f53e:	46bd      	mov	sp, r7
 800f540:	bd80      	pop	{r7, pc}

0800f542 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800f542:	b580      	push	{r7, lr}
 800f544:	b090      	sub	sp, #64	@ 0x40
 800f546:	af00      	add	r7, sp, #0
 800f548:	6078      	str	r0, [r7, #4]
 800f54a:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800f54c:	687b      	ldr	r3, [r7, #4]
 800f54e:	f107 0208 	add.w	r2, r7, #8
 800f552:	4611      	mov	r1, r2
 800f554:	4618      	mov	r0, r3
 800f556:	f7ff fba1 	bl	800ec9c <validate>
 800f55a:	4603      	mov	r3, r0
 800f55c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800f560:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800f564:	2b00      	cmp	r3, #0
 800f566:	d103      	bne.n	800f570 <f_lseek+0x2e>
 800f568:	687b      	ldr	r3, [r7, #4]
 800f56a:	7d5b      	ldrb	r3, [r3, #21]
 800f56c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800f570:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800f574:	2b00      	cmp	r3, #0
 800f576:	d002      	beq.n	800f57e <f_lseek+0x3c>
 800f578:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800f57c:	e1e6      	b.n	800f94c <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800f57e:	687b      	ldr	r3, [r7, #4]
 800f580:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f582:	2b00      	cmp	r3, #0
 800f584:	f000 80d1 	beq.w	800f72a <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800f588:	683b      	ldr	r3, [r7, #0]
 800f58a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f58e:	d15a      	bne.n	800f646 <f_lseek+0x104>
			tbl = fp->cltbl;
 800f590:	687b      	ldr	r3, [r7, #4]
 800f592:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f594:	627b      	str	r3, [r7, #36]	@ 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800f596:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f598:	1d1a      	adds	r2, r3, #4
 800f59a:	627a      	str	r2, [r7, #36]	@ 0x24
 800f59c:	681b      	ldr	r3, [r3, #0]
 800f59e:	617b      	str	r3, [r7, #20]
 800f5a0:	2302      	movs	r3, #2
 800f5a2:	62bb      	str	r3, [r7, #40]	@ 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800f5a4:	687b      	ldr	r3, [r7, #4]
 800f5a6:	689b      	ldr	r3, [r3, #8]
 800f5a8:	633b      	str	r3, [r7, #48]	@ 0x30
			if (cl) {
 800f5aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f5ac:	2b00      	cmp	r3, #0
 800f5ae:	d03a      	beq.n	800f626 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800f5b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f5b2:	613b      	str	r3, [r7, #16]
 800f5b4:	2300      	movs	r3, #0
 800f5b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800f5b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f5ba:	3302      	adds	r3, #2
 800f5bc:	62bb      	str	r3, [r7, #40]	@ 0x28
					do {
						pcl = cl; ncl++;
 800f5be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f5c0:	60fb      	str	r3, [r7, #12]
 800f5c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f5c4:	3301      	adds	r3, #1
 800f5c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
						cl = get_fat(&fp->obj, cl);
 800f5c8:	687b      	ldr	r3, [r7, #4]
 800f5ca:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800f5cc:	4618      	mov	r0, r3
 800f5ce:	f7fd fe88 	bl	800d2e2 <get_fat>
 800f5d2:	6338      	str	r0, [r7, #48]	@ 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800f5d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f5d6:	2b01      	cmp	r3, #1
 800f5d8:	d804      	bhi.n	800f5e4 <f_lseek+0xa2>
 800f5da:	687b      	ldr	r3, [r7, #4]
 800f5dc:	2202      	movs	r2, #2
 800f5de:	755a      	strb	r2, [r3, #21]
 800f5e0:	2302      	movs	r3, #2
 800f5e2:	e1b3      	b.n	800f94c <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800f5e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f5e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f5ea:	d104      	bne.n	800f5f6 <f_lseek+0xb4>
 800f5ec:	687b      	ldr	r3, [r7, #4]
 800f5ee:	2201      	movs	r2, #1
 800f5f0:	755a      	strb	r2, [r3, #21]
 800f5f2:	2301      	movs	r3, #1
 800f5f4:	e1aa      	b.n	800f94c <f_lseek+0x40a>
					} while (cl == pcl + 1);
 800f5f6:	68fb      	ldr	r3, [r7, #12]
 800f5f8:	3301      	adds	r3, #1
 800f5fa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f5fc:	429a      	cmp	r2, r3
 800f5fe:	d0de      	beq.n	800f5be <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800f600:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f602:	697b      	ldr	r3, [r7, #20]
 800f604:	429a      	cmp	r2, r3
 800f606:	d809      	bhi.n	800f61c <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 800f608:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f60a:	1d1a      	adds	r2, r3, #4
 800f60c:	627a      	str	r2, [r7, #36]	@ 0x24
 800f60e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f610:	601a      	str	r2, [r3, #0]
 800f612:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f614:	1d1a      	adds	r2, r3, #4
 800f616:	627a      	str	r2, [r7, #36]	@ 0x24
 800f618:	693a      	ldr	r2, [r7, #16]
 800f61a:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800f61c:	68bb      	ldr	r3, [r7, #8]
 800f61e:	699b      	ldr	r3, [r3, #24]
 800f620:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f622:	429a      	cmp	r2, r3
 800f624:	d3c4      	bcc.n	800f5b0 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800f626:	687b      	ldr	r3, [r7, #4]
 800f628:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f62a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f62c:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800f62e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f630:	697b      	ldr	r3, [r7, #20]
 800f632:	429a      	cmp	r2, r3
 800f634:	d803      	bhi.n	800f63e <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 800f636:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f638:	2200      	movs	r2, #0
 800f63a:	601a      	str	r2, [r3, #0]
 800f63c:	e184      	b.n	800f948 <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800f63e:	2311      	movs	r3, #17
 800f640:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800f644:	e180      	b.n	800f948 <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800f646:	687b      	ldr	r3, [r7, #4]
 800f648:	68db      	ldr	r3, [r3, #12]
 800f64a:	683a      	ldr	r2, [r7, #0]
 800f64c:	429a      	cmp	r2, r3
 800f64e:	d902      	bls.n	800f656 <f_lseek+0x114>
 800f650:	687b      	ldr	r3, [r7, #4]
 800f652:	68db      	ldr	r3, [r3, #12]
 800f654:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800f656:	687b      	ldr	r3, [r7, #4]
 800f658:	683a      	ldr	r2, [r7, #0]
 800f65a:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800f65c:	683b      	ldr	r3, [r7, #0]
 800f65e:	2b00      	cmp	r3, #0
 800f660:	f000 8172 	beq.w	800f948 <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 800f664:	683b      	ldr	r3, [r7, #0]
 800f666:	3b01      	subs	r3, #1
 800f668:	4619      	mov	r1, r3
 800f66a:	6878      	ldr	r0, [r7, #4]
 800f66c:	f7fe f8c7 	bl	800d7fe <clmt_clust>
 800f670:	4602      	mov	r2, r0
 800f672:	687b      	ldr	r3, [r7, #4]
 800f674:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800f676:	68ba      	ldr	r2, [r7, #8]
 800f678:	687b      	ldr	r3, [r7, #4]
 800f67a:	69db      	ldr	r3, [r3, #28]
 800f67c:	4619      	mov	r1, r3
 800f67e:	4610      	mov	r0, r2
 800f680:	f7fd fe10 	bl	800d2a4 <clust2sect>
 800f684:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800f686:	69bb      	ldr	r3, [r7, #24]
 800f688:	2b00      	cmp	r3, #0
 800f68a:	d104      	bne.n	800f696 <f_lseek+0x154>
 800f68c:	687b      	ldr	r3, [r7, #4]
 800f68e:	2202      	movs	r2, #2
 800f690:	755a      	strb	r2, [r3, #21]
 800f692:	2302      	movs	r3, #2
 800f694:	e15a      	b.n	800f94c <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800f696:	683b      	ldr	r3, [r7, #0]
 800f698:	3b01      	subs	r3, #1
 800f69a:	0a5b      	lsrs	r3, r3, #9
 800f69c:	68ba      	ldr	r2, [r7, #8]
 800f69e:	8952      	ldrh	r2, [r2, #10]
 800f6a0:	3a01      	subs	r2, #1
 800f6a2:	4013      	ands	r3, r2
 800f6a4:	69ba      	ldr	r2, [r7, #24]
 800f6a6:	4413      	add	r3, r2
 800f6a8:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800f6aa:	687b      	ldr	r3, [r7, #4]
 800f6ac:	699b      	ldr	r3, [r3, #24]
 800f6ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f6b2:	2b00      	cmp	r3, #0
 800f6b4:	f000 8148 	beq.w	800f948 <f_lseek+0x406>
 800f6b8:	687b      	ldr	r3, [r7, #4]
 800f6ba:	6a1b      	ldr	r3, [r3, #32]
 800f6bc:	69ba      	ldr	r2, [r7, #24]
 800f6be:	429a      	cmp	r2, r3
 800f6c0:	f000 8142 	beq.w	800f948 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800f6c4:	687b      	ldr	r3, [r7, #4]
 800f6c6:	7d1b      	ldrb	r3, [r3, #20]
 800f6c8:	b25b      	sxtb	r3, r3
 800f6ca:	2b00      	cmp	r3, #0
 800f6cc:	da18      	bge.n	800f700 <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f6ce:	68bb      	ldr	r3, [r7, #8]
 800f6d0:	7858      	ldrb	r0, [r3, #1]
 800f6d2:	687b      	ldr	r3, [r7, #4]
 800f6d4:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800f6d8:	687b      	ldr	r3, [r7, #4]
 800f6da:	6a1a      	ldr	r2, [r3, #32]
 800f6dc:	2301      	movs	r3, #1
 800f6de:	f7fd fa57 	bl	800cb90 <disk_write>
 800f6e2:	4603      	mov	r3, r0
 800f6e4:	2b00      	cmp	r3, #0
 800f6e6:	d004      	beq.n	800f6f2 <f_lseek+0x1b0>
 800f6e8:	687b      	ldr	r3, [r7, #4]
 800f6ea:	2201      	movs	r2, #1
 800f6ec:	755a      	strb	r2, [r3, #21]
 800f6ee:	2301      	movs	r3, #1
 800f6f0:	e12c      	b.n	800f94c <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 800f6f2:	687b      	ldr	r3, [r7, #4]
 800f6f4:	7d1b      	ldrb	r3, [r3, #20]
 800f6f6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f6fa:	b2da      	uxtb	r2, r3
 800f6fc:	687b      	ldr	r3, [r7, #4]
 800f6fe:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800f700:	68bb      	ldr	r3, [r7, #8]
 800f702:	7858      	ldrb	r0, [r3, #1]
 800f704:	687b      	ldr	r3, [r7, #4]
 800f706:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800f70a:	2301      	movs	r3, #1
 800f70c:	69ba      	ldr	r2, [r7, #24]
 800f70e:	f7fd fa1f 	bl	800cb50 <disk_read>
 800f712:	4603      	mov	r3, r0
 800f714:	2b00      	cmp	r3, #0
 800f716:	d004      	beq.n	800f722 <f_lseek+0x1e0>
 800f718:	687b      	ldr	r3, [r7, #4]
 800f71a:	2201      	movs	r2, #1
 800f71c:	755a      	strb	r2, [r3, #21]
 800f71e:	2301      	movs	r3, #1
 800f720:	e114      	b.n	800f94c <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 800f722:	687b      	ldr	r3, [r7, #4]
 800f724:	69ba      	ldr	r2, [r7, #24]
 800f726:	621a      	str	r2, [r3, #32]
 800f728:	e10e      	b.n	800f948 <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800f72a:	687b      	ldr	r3, [r7, #4]
 800f72c:	68db      	ldr	r3, [r3, #12]
 800f72e:	683a      	ldr	r2, [r7, #0]
 800f730:	429a      	cmp	r2, r3
 800f732:	d908      	bls.n	800f746 <f_lseek+0x204>
 800f734:	687b      	ldr	r3, [r7, #4]
 800f736:	7d1b      	ldrb	r3, [r3, #20]
 800f738:	f003 0302 	and.w	r3, r3, #2
 800f73c:	2b00      	cmp	r3, #0
 800f73e:	d102      	bne.n	800f746 <f_lseek+0x204>
			ofs = fp->obj.objsize;
 800f740:	687b      	ldr	r3, [r7, #4]
 800f742:	68db      	ldr	r3, [r3, #12]
 800f744:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800f746:	687b      	ldr	r3, [r7, #4]
 800f748:	699b      	ldr	r3, [r3, #24]
 800f74a:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800f74c:	2300      	movs	r3, #0
 800f74e:	637b      	str	r3, [r7, #52]	@ 0x34
 800f750:	687b      	ldr	r3, [r7, #4]
 800f752:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800f754:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800f756:	683b      	ldr	r3, [r7, #0]
 800f758:	2b00      	cmp	r3, #0
 800f75a:	f000 80a7 	beq.w	800f8ac <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800f75e:	68bb      	ldr	r3, [r7, #8]
 800f760:	895b      	ldrh	r3, [r3, #10]
 800f762:	025b      	lsls	r3, r3, #9
 800f764:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800f766:	6a3b      	ldr	r3, [r7, #32]
 800f768:	2b00      	cmp	r3, #0
 800f76a:	d01b      	beq.n	800f7a4 <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800f76c:	683b      	ldr	r3, [r7, #0]
 800f76e:	1e5a      	subs	r2, r3, #1
 800f770:	69fb      	ldr	r3, [r7, #28]
 800f772:	fbb2 f2f3 	udiv	r2, r2, r3
 800f776:	6a3b      	ldr	r3, [r7, #32]
 800f778:	1e59      	subs	r1, r3, #1
 800f77a:	69fb      	ldr	r3, [r7, #28]
 800f77c:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800f780:	429a      	cmp	r2, r3
 800f782:	d30f      	bcc.n	800f7a4 <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800f784:	6a3b      	ldr	r3, [r7, #32]
 800f786:	1e5a      	subs	r2, r3, #1
 800f788:	69fb      	ldr	r3, [r7, #28]
 800f78a:	425b      	negs	r3, r3
 800f78c:	401a      	ands	r2, r3
 800f78e:	687b      	ldr	r3, [r7, #4]
 800f790:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800f792:	687b      	ldr	r3, [r7, #4]
 800f794:	699b      	ldr	r3, [r3, #24]
 800f796:	683a      	ldr	r2, [r7, #0]
 800f798:	1ad3      	subs	r3, r2, r3
 800f79a:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800f79c:	687b      	ldr	r3, [r7, #4]
 800f79e:	69db      	ldr	r3, [r3, #28]
 800f7a0:	63bb      	str	r3, [r7, #56]	@ 0x38
 800f7a2:	e022      	b.n	800f7ea <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800f7a4:	687b      	ldr	r3, [r7, #4]
 800f7a6:	689b      	ldr	r3, [r3, #8]
 800f7a8:	63bb      	str	r3, [r7, #56]	@ 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800f7aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f7ac:	2b00      	cmp	r3, #0
 800f7ae:	d119      	bne.n	800f7e4 <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 800f7b0:	687b      	ldr	r3, [r7, #4]
 800f7b2:	2100      	movs	r1, #0
 800f7b4:	4618      	mov	r0, r3
 800f7b6:	f7fd ff8a 	bl	800d6ce <create_chain>
 800f7ba:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800f7bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f7be:	2b01      	cmp	r3, #1
 800f7c0:	d104      	bne.n	800f7cc <f_lseek+0x28a>
 800f7c2:	687b      	ldr	r3, [r7, #4]
 800f7c4:	2202      	movs	r2, #2
 800f7c6:	755a      	strb	r2, [r3, #21]
 800f7c8:	2302      	movs	r3, #2
 800f7ca:	e0bf      	b.n	800f94c <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800f7cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f7ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f7d2:	d104      	bne.n	800f7de <f_lseek+0x29c>
 800f7d4:	687b      	ldr	r3, [r7, #4]
 800f7d6:	2201      	movs	r2, #1
 800f7d8:	755a      	strb	r2, [r3, #21]
 800f7da:	2301      	movs	r3, #1
 800f7dc:	e0b6      	b.n	800f94c <f_lseek+0x40a>
					fp->obj.sclust = clst;
 800f7de:	687b      	ldr	r3, [r7, #4]
 800f7e0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f7e2:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800f7e4:	687b      	ldr	r3, [r7, #4]
 800f7e6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f7e8:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800f7ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f7ec:	2b00      	cmp	r3, #0
 800f7ee:	d05d      	beq.n	800f8ac <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 800f7f0:	e03a      	b.n	800f868 <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 800f7f2:	683a      	ldr	r2, [r7, #0]
 800f7f4:	69fb      	ldr	r3, [r7, #28]
 800f7f6:	1ad3      	subs	r3, r2, r3
 800f7f8:	603b      	str	r3, [r7, #0]
 800f7fa:	687b      	ldr	r3, [r7, #4]
 800f7fc:	699a      	ldr	r2, [r3, #24]
 800f7fe:	69fb      	ldr	r3, [r7, #28]
 800f800:	441a      	add	r2, r3
 800f802:	687b      	ldr	r3, [r7, #4]
 800f804:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800f806:	687b      	ldr	r3, [r7, #4]
 800f808:	7d1b      	ldrb	r3, [r3, #20]
 800f80a:	f003 0302 	and.w	r3, r3, #2
 800f80e:	2b00      	cmp	r3, #0
 800f810:	d00b      	beq.n	800f82a <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800f812:	687b      	ldr	r3, [r7, #4]
 800f814:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800f816:	4618      	mov	r0, r3
 800f818:	f7fd ff59 	bl	800d6ce <create_chain>
 800f81c:	63b8      	str	r0, [r7, #56]	@ 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800f81e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f820:	2b00      	cmp	r3, #0
 800f822:	d108      	bne.n	800f836 <f_lseek+0x2f4>
							ofs = 0; break;
 800f824:	2300      	movs	r3, #0
 800f826:	603b      	str	r3, [r7, #0]
 800f828:	e022      	b.n	800f870 <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800f82a:	687b      	ldr	r3, [r7, #4]
 800f82c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800f82e:	4618      	mov	r0, r3
 800f830:	f7fd fd57 	bl	800d2e2 <get_fat>
 800f834:	63b8      	str	r0, [r7, #56]	@ 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800f836:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f838:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f83c:	d104      	bne.n	800f848 <f_lseek+0x306>
 800f83e:	687b      	ldr	r3, [r7, #4]
 800f840:	2201      	movs	r2, #1
 800f842:	755a      	strb	r2, [r3, #21]
 800f844:	2301      	movs	r3, #1
 800f846:	e081      	b.n	800f94c <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800f848:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f84a:	2b01      	cmp	r3, #1
 800f84c:	d904      	bls.n	800f858 <f_lseek+0x316>
 800f84e:	68bb      	ldr	r3, [r7, #8]
 800f850:	699b      	ldr	r3, [r3, #24]
 800f852:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f854:	429a      	cmp	r2, r3
 800f856:	d304      	bcc.n	800f862 <f_lseek+0x320>
 800f858:	687b      	ldr	r3, [r7, #4]
 800f85a:	2202      	movs	r2, #2
 800f85c:	755a      	strb	r2, [r3, #21]
 800f85e:	2302      	movs	r3, #2
 800f860:	e074      	b.n	800f94c <f_lseek+0x40a>
					fp->clust = clst;
 800f862:	687b      	ldr	r3, [r7, #4]
 800f864:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f866:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800f868:	683a      	ldr	r2, [r7, #0]
 800f86a:	69fb      	ldr	r3, [r7, #28]
 800f86c:	429a      	cmp	r2, r3
 800f86e:	d8c0      	bhi.n	800f7f2 <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 800f870:	687b      	ldr	r3, [r7, #4]
 800f872:	699a      	ldr	r2, [r3, #24]
 800f874:	683b      	ldr	r3, [r7, #0]
 800f876:	441a      	add	r2, r3
 800f878:	687b      	ldr	r3, [r7, #4]
 800f87a:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800f87c:	683b      	ldr	r3, [r7, #0]
 800f87e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f882:	2b00      	cmp	r3, #0
 800f884:	d012      	beq.n	800f8ac <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800f886:	68bb      	ldr	r3, [r7, #8]
 800f888:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800f88a:	4618      	mov	r0, r3
 800f88c:	f7fd fd0a 	bl	800d2a4 <clust2sect>
 800f890:	6378      	str	r0, [r7, #52]	@ 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800f892:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f894:	2b00      	cmp	r3, #0
 800f896:	d104      	bne.n	800f8a2 <f_lseek+0x360>
 800f898:	687b      	ldr	r3, [r7, #4]
 800f89a:	2202      	movs	r2, #2
 800f89c:	755a      	strb	r2, [r3, #21]
 800f89e:	2302      	movs	r3, #2
 800f8a0:	e054      	b.n	800f94c <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 800f8a2:	683b      	ldr	r3, [r7, #0]
 800f8a4:	0a5b      	lsrs	r3, r3, #9
 800f8a6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800f8a8:	4413      	add	r3, r2
 800f8aa:	637b      	str	r3, [r7, #52]	@ 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800f8ac:	687b      	ldr	r3, [r7, #4]
 800f8ae:	699a      	ldr	r2, [r3, #24]
 800f8b0:	687b      	ldr	r3, [r7, #4]
 800f8b2:	68db      	ldr	r3, [r3, #12]
 800f8b4:	429a      	cmp	r2, r3
 800f8b6:	d90a      	bls.n	800f8ce <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 800f8b8:	687b      	ldr	r3, [r7, #4]
 800f8ba:	699a      	ldr	r2, [r3, #24]
 800f8bc:	687b      	ldr	r3, [r7, #4]
 800f8be:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800f8c0:	687b      	ldr	r3, [r7, #4]
 800f8c2:	7d1b      	ldrb	r3, [r3, #20]
 800f8c4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f8c8:	b2da      	uxtb	r2, r3
 800f8ca:	687b      	ldr	r3, [r7, #4]
 800f8cc:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800f8ce:	687b      	ldr	r3, [r7, #4]
 800f8d0:	699b      	ldr	r3, [r3, #24]
 800f8d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f8d6:	2b00      	cmp	r3, #0
 800f8d8:	d036      	beq.n	800f948 <f_lseek+0x406>
 800f8da:	687b      	ldr	r3, [r7, #4]
 800f8dc:	6a1b      	ldr	r3, [r3, #32]
 800f8de:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800f8e0:	429a      	cmp	r2, r3
 800f8e2:	d031      	beq.n	800f948 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800f8e4:	687b      	ldr	r3, [r7, #4]
 800f8e6:	7d1b      	ldrb	r3, [r3, #20]
 800f8e8:	b25b      	sxtb	r3, r3
 800f8ea:	2b00      	cmp	r3, #0
 800f8ec:	da18      	bge.n	800f920 <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f8ee:	68bb      	ldr	r3, [r7, #8]
 800f8f0:	7858      	ldrb	r0, [r3, #1]
 800f8f2:	687b      	ldr	r3, [r7, #4]
 800f8f4:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800f8f8:	687b      	ldr	r3, [r7, #4]
 800f8fa:	6a1a      	ldr	r2, [r3, #32]
 800f8fc:	2301      	movs	r3, #1
 800f8fe:	f7fd f947 	bl	800cb90 <disk_write>
 800f902:	4603      	mov	r3, r0
 800f904:	2b00      	cmp	r3, #0
 800f906:	d004      	beq.n	800f912 <f_lseek+0x3d0>
 800f908:	687b      	ldr	r3, [r7, #4]
 800f90a:	2201      	movs	r2, #1
 800f90c:	755a      	strb	r2, [r3, #21]
 800f90e:	2301      	movs	r3, #1
 800f910:	e01c      	b.n	800f94c <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800f912:	687b      	ldr	r3, [r7, #4]
 800f914:	7d1b      	ldrb	r3, [r3, #20]
 800f916:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f91a:	b2da      	uxtb	r2, r3
 800f91c:	687b      	ldr	r3, [r7, #4]
 800f91e:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800f920:	68bb      	ldr	r3, [r7, #8]
 800f922:	7858      	ldrb	r0, [r3, #1]
 800f924:	687b      	ldr	r3, [r7, #4]
 800f926:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800f92a:	2301      	movs	r3, #1
 800f92c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800f92e:	f7fd f90f 	bl	800cb50 <disk_read>
 800f932:	4603      	mov	r3, r0
 800f934:	2b00      	cmp	r3, #0
 800f936:	d004      	beq.n	800f942 <f_lseek+0x400>
 800f938:	687b      	ldr	r3, [r7, #4]
 800f93a:	2201      	movs	r2, #1
 800f93c:	755a      	strb	r2, [r3, #21]
 800f93e:	2301      	movs	r3, #1
 800f940:	e004      	b.n	800f94c <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 800f942:	687b      	ldr	r3, [r7, #4]
 800f944:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800f946:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800f948:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 800f94c:	4618      	mov	r0, r3
 800f94e:	3740      	adds	r7, #64	@ 0x40
 800f950:	46bd      	mov	sp, r7
 800f952:	bd80      	pop	{r7, pc}

0800f954 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800f954:	b480      	push	{r7}
 800f956:	b087      	sub	sp, #28
 800f958:	af00      	add	r7, sp, #0
 800f95a:	60f8      	str	r0, [r7, #12]
 800f95c:	60b9      	str	r1, [r7, #8]
 800f95e:	4613      	mov	r3, r2
 800f960:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800f962:	2301      	movs	r3, #1
 800f964:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800f966:	2300      	movs	r3, #0
 800f968:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800f96a:	4b1f      	ldr	r3, [pc, #124]	@ (800f9e8 <FATFS_LinkDriverEx+0x94>)
 800f96c:	7a5b      	ldrb	r3, [r3, #9]
 800f96e:	b2db      	uxtb	r3, r3
 800f970:	2b00      	cmp	r3, #0
 800f972:	d131      	bne.n	800f9d8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800f974:	4b1c      	ldr	r3, [pc, #112]	@ (800f9e8 <FATFS_LinkDriverEx+0x94>)
 800f976:	7a5b      	ldrb	r3, [r3, #9]
 800f978:	b2db      	uxtb	r3, r3
 800f97a:	461a      	mov	r2, r3
 800f97c:	4b1a      	ldr	r3, [pc, #104]	@ (800f9e8 <FATFS_LinkDriverEx+0x94>)
 800f97e:	2100      	movs	r1, #0
 800f980:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800f982:	4b19      	ldr	r3, [pc, #100]	@ (800f9e8 <FATFS_LinkDriverEx+0x94>)
 800f984:	7a5b      	ldrb	r3, [r3, #9]
 800f986:	b2db      	uxtb	r3, r3
 800f988:	4a17      	ldr	r2, [pc, #92]	@ (800f9e8 <FATFS_LinkDriverEx+0x94>)
 800f98a:	009b      	lsls	r3, r3, #2
 800f98c:	4413      	add	r3, r2
 800f98e:	68fa      	ldr	r2, [r7, #12]
 800f990:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800f992:	4b15      	ldr	r3, [pc, #84]	@ (800f9e8 <FATFS_LinkDriverEx+0x94>)
 800f994:	7a5b      	ldrb	r3, [r3, #9]
 800f996:	b2db      	uxtb	r3, r3
 800f998:	461a      	mov	r2, r3
 800f99a:	4b13      	ldr	r3, [pc, #76]	@ (800f9e8 <FATFS_LinkDriverEx+0x94>)
 800f99c:	4413      	add	r3, r2
 800f99e:	79fa      	ldrb	r2, [r7, #7]
 800f9a0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800f9a2:	4b11      	ldr	r3, [pc, #68]	@ (800f9e8 <FATFS_LinkDriverEx+0x94>)
 800f9a4:	7a5b      	ldrb	r3, [r3, #9]
 800f9a6:	b2db      	uxtb	r3, r3
 800f9a8:	1c5a      	adds	r2, r3, #1
 800f9aa:	b2d1      	uxtb	r1, r2
 800f9ac:	4a0e      	ldr	r2, [pc, #56]	@ (800f9e8 <FATFS_LinkDriverEx+0x94>)
 800f9ae:	7251      	strb	r1, [r2, #9]
 800f9b0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800f9b2:	7dbb      	ldrb	r3, [r7, #22]
 800f9b4:	3330      	adds	r3, #48	@ 0x30
 800f9b6:	b2da      	uxtb	r2, r3
 800f9b8:	68bb      	ldr	r3, [r7, #8]
 800f9ba:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800f9bc:	68bb      	ldr	r3, [r7, #8]
 800f9be:	3301      	adds	r3, #1
 800f9c0:	223a      	movs	r2, #58	@ 0x3a
 800f9c2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800f9c4:	68bb      	ldr	r3, [r7, #8]
 800f9c6:	3302      	adds	r3, #2
 800f9c8:	222f      	movs	r2, #47	@ 0x2f
 800f9ca:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800f9cc:	68bb      	ldr	r3, [r7, #8]
 800f9ce:	3303      	adds	r3, #3
 800f9d0:	2200      	movs	r2, #0
 800f9d2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800f9d4:	2300      	movs	r3, #0
 800f9d6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800f9d8:	7dfb      	ldrb	r3, [r7, #23]
}
 800f9da:	4618      	mov	r0, r3
 800f9dc:	371c      	adds	r7, #28
 800f9de:	46bd      	mov	sp, r7
 800f9e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9e4:	4770      	bx	lr
 800f9e6:	bf00      	nop
 800f9e8:	20000c6c 	.word	0x20000c6c

0800f9ec <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800f9ec:	b580      	push	{r7, lr}
 800f9ee:	b082      	sub	sp, #8
 800f9f0:	af00      	add	r7, sp, #0
 800f9f2:	6078      	str	r0, [r7, #4]
 800f9f4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800f9f6:	2200      	movs	r2, #0
 800f9f8:	6839      	ldr	r1, [r7, #0]
 800f9fa:	6878      	ldr	r0, [r7, #4]
 800f9fc:	f7ff ffaa 	bl	800f954 <FATFS_LinkDriverEx>
 800fa00:	4603      	mov	r3, r0
}
 800fa02:	4618      	mov	r0, r3
 800fa04:	3708      	adds	r7, #8
 800fa06:	46bd      	mov	sp, r7
 800fa08:	bd80      	pop	{r7, pc}
	...

0800fa0c <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800fa0c:	b480      	push	{r7}
 800fa0e:	b085      	sub	sp, #20
 800fa10:	af00      	add	r7, sp, #0
 800fa12:	4603      	mov	r3, r0
 800fa14:	6039      	str	r1, [r7, #0]
 800fa16:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800fa18:	88fb      	ldrh	r3, [r7, #6]
 800fa1a:	2b7f      	cmp	r3, #127	@ 0x7f
 800fa1c:	d802      	bhi.n	800fa24 <ff_convert+0x18>
		c = chr;
 800fa1e:	88fb      	ldrh	r3, [r7, #6]
 800fa20:	81fb      	strh	r3, [r7, #14]
 800fa22:	e025      	b.n	800fa70 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800fa24:	683b      	ldr	r3, [r7, #0]
 800fa26:	2b00      	cmp	r3, #0
 800fa28:	d00b      	beq.n	800fa42 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800fa2a:	88fb      	ldrh	r3, [r7, #6]
 800fa2c:	2bff      	cmp	r3, #255	@ 0xff
 800fa2e:	d805      	bhi.n	800fa3c <ff_convert+0x30>
 800fa30:	88fb      	ldrh	r3, [r7, #6]
 800fa32:	3b80      	subs	r3, #128	@ 0x80
 800fa34:	4a12      	ldr	r2, [pc, #72]	@ (800fa80 <ff_convert+0x74>)
 800fa36:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fa3a:	e000      	b.n	800fa3e <ff_convert+0x32>
 800fa3c:	2300      	movs	r3, #0
 800fa3e:	81fb      	strh	r3, [r7, #14]
 800fa40:	e016      	b.n	800fa70 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800fa42:	2300      	movs	r3, #0
 800fa44:	81fb      	strh	r3, [r7, #14]
 800fa46:	e009      	b.n	800fa5c <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800fa48:	89fb      	ldrh	r3, [r7, #14]
 800fa4a:	4a0d      	ldr	r2, [pc, #52]	@ (800fa80 <ff_convert+0x74>)
 800fa4c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fa50:	88fa      	ldrh	r2, [r7, #6]
 800fa52:	429a      	cmp	r2, r3
 800fa54:	d006      	beq.n	800fa64 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800fa56:	89fb      	ldrh	r3, [r7, #14]
 800fa58:	3301      	adds	r3, #1
 800fa5a:	81fb      	strh	r3, [r7, #14]
 800fa5c:	89fb      	ldrh	r3, [r7, #14]
 800fa5e:	2b7f      	cmp	r3, #127	@ 0x7f
 800fa60:	d9f2      	bls.n	800fa48 <ff_convert+0x3c>
 800fa62:	e000      	b.n	800fa66 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800fa64:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800fa66:	89fb      	ldrh	r3, [r7, #14]
 800fa68:	3380      	adds	r3, #128	@ 0x80
 800fa6a:	b29b      	uxth	r3, r3
 800fa6c:	b2db      	uxtb	r3, r3
 800fa6e:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800fa70:	89fb      	ldrh	r3, [r7, #14]
}
 800fa72:	4618      	mov	r0, r3
 800fa74:	3714      	adds	r7, #20
 800fa76:	46bd      	mov	sp, r7
 800fa78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa7c:	4770      	bx	lr
 800fa7e:	bf00      	nop
 800fa80:	08011d6c 	.word	0x08011d6c

0800fa84 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800fa84:	b480      	push	{r7}
 800fa86:	b087      	sub	sp, #28
 800fa88:	af00      	add	r7, sp, #0
 800fa8a:	4603      	mov	r3, r0
 800fa8c:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800fa8e:	88fb      	ldrh	r3, [r7, #6]
 800fa90:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800fa94:	d201      	bcs.n	800fa9a <ff_wtoupper+0x16>
 800fa96:	4b3e      	ldr	r3, [pc, #248]	@ (800fb90 <ff_wtoupper+0x10c>)
 800fa98:	e000      	b.n	800fa9c <ff_wtoupper+0x18>
 800fa9a:	4b3e      	ldr	r3, [pc, #248]	@ (800fb94 <ff_wtoupper+0x110>)
 800fa9c:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800fa9e:	697b      	ldr	r3, [r7, #20]
 800faa0:	1c9a      	adds	r2, r3, #2
 800faa2:	617a      	str	r2, [r7, #20]
 800faa4:	881b      	ldrh	r3, [r3, #0]
 800faa6:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800faa8:	8a7b      	ldrh	r3, [r7, #18]
 800faaa:	2b00      	cmp	r3, #0
 800faac:	d068      	beq.n	800fb80 <ff_wtoupper+0xfc>
 800faae:	88fa      	ldrh	r2, [r7, #6]
 800fab0:	8a7b      	ldrh	r3, [r7, #18]
 800fab2:	429a      	cmp	r2, r3
 800fab4:	d364      	bcc.n	800fb80 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800fab6:	697b      	ldr	r3, [r7, #20]
 800fab8:	1c9a      	adds	r2, r3, #2
 800faba:	617a      	str	r2, [r7, #20]
 800fabc:	881b      	ldrh	r3, [r3, #0]
 800fabe:	823b      	strh	r3, [r7, #16]
 800fac0:	8a3b      	ldrh	r3, [r7, #16]
 800fac2:	0a1b      	lsrs	r3, r3, #8
 800fac4:	81fb      	strh	r3, [r7, #14]
 800fac6:	8a3b      	ldrh	r3, [r7, #16]
 800fac8:	b2db      	uxtb	r3, r3
 800faca:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800facc:	88fa      	ldrh	r2, [r7, #6]
 800face:	8a79      	ldrh	r1, [r7, #18]
 800fad0:	8a3b      	ldrh	r3, [r7, #16]
 800fad2:	440b      	add	r3, r1
 800fad4:	429a      	cmp	r2, r3
 800fad6:	da49      	bge.n	800fb6c <ff_wtoupper+0xe8>
			switch (cmd) {
 800fad8:	89fb      	ldrh	r3, [r7, #14]
 800fada:	2b08      	cmp	r3, #8
 800fadc:	d84f      	bhi.n	800fb7e <ff_wtoupper+0xfa>
 800fade:	a201      	add	r2, pc, #4	@ (adr r2, 800fae4 <ff_wtoupper+0x60>)
 800fae0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fae4:	0800fb09 	.word	0x0800fb09
 800fae8:	0800fb1b 	.word	0x0800fb1b
 800faec:	0800fb31 	.word	0x0800fb31
 800faf0:	0800fb39 	.word	0x0800fb39
 800faf4:	0800fb41 	.word	0x0800fb41
 800faf8:	0800fb49 	.word	0x0800fb49
 800fafc:	0800fb51 	.word	0x0800fb51
 800fb00:	0800fb59 	.word	0x0800fb59
 800fb04:	0800fb61 	.word	0x0800fb61
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800fb08:	88fa      	ldrh	r2, [r7, #6]
 800fb0a:	8a7b      	ldrh	r3, [r7, #18]
 800fb0c:	1ad3      	subs	r3, r2, r3
 800fb0e:	005b      	lsls	r3, r3, #1
 800fb10:	697a      	ldr	r2, [r7, #20]
 800fb12:	4413      	add	r3, r2
 800fb14:	881b      	ldrh	r3, [r3, #0]
 800fb16:	80fb      	strh	r3, [r7, #6]
 800fb18:	e027      	b.n	800fb6a <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800fb1a:	88fa      	ldrh	r2, [r7, #6]
 800fb1c:	8a7b      	ldrh	r3, [r7, #18]
 800fb1e:	1ad3      	subs	r3, r2, r3
 800fb20:	b29b      	uxth	r3, r3
 800fb22:	f003 0301 	and.w	r3, r3, #1
 800fb26:	b29b      	uxth	r3, r3
 800fb28:	88fa      	ldrh	r2, [r7, #6]
 800fb2a:	1ad3      	subs	r3, r2, r3
 800fb2c:	80fb      	strh	r3, [r7, #6]
 800fb2e:	e01c      	b.n	800fb6a <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800fb30:	88fb      	ldrh	r3, [r7, #6]
 800fb32:	3b10      	subs	r3, #16
 800fb34:	80fb      	strh	r3, [r7, #6]
 800fb36:	e018      	b.n	800fb6a <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800fb38:	88fb      	ldrh	r3, [r7, #6]
 800fb3a:	3b20      	subs	r3, #32
 800fb3c:	80fb      	strh	r3, [r7, #6]
 800fb3e:	e014      	b.n	800fb6a <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800fb40:	88fb      	ldrh	r3, [r7, #6]
 800fb42:	3b30      	subs	r3, #48	@ 0x30
 800fb44:	80fb      	strh	r3, [r7, #6]
 800fb46:	e010      	b.n	800fb6a <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800fb48:	88fb      	ldrh	r3, [r7, #6]
 800fb4a:	3b1a      	subs	r3, #26
 800fb4c:	80fb      	strh	r3, [r7, #6]
 800fb4e:	e00c      	b.n	800fb6a <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800fb50:	88fb      	ldrh	r3, [r7, #6]
 800fb52:	3308      	adds	r3, #8
 800fb54:	80fb      	strh	r3, [r7, #6]
 800fb56:	e008      	b.n	800fb6a <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800fb58:	88fb      	ldrh	r3, [r7, #6]
 800fb5a:	3b50      	subs	r3, #80	@ 0x50
 800fb5c:	80fb      	strh	r3, [r7, #6]
 800fb5e:	e004      	b.n	800fb6a <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800fb60:	88fb      	ldrh	r3, [r7, #6]
 800fb62:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 800fb66:	80fb      	strh	r3, [r7, #6]
 800fb68:	bf00      	nop
			}
			break;
 800fb6a:	e008      	b.n	800fb7e <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800fb6c:	89fb      	ldrh	r3, [r7, #14]
 800fb6e:	2b00      	cmp	r3, #0
 800fb70:	d195      	bne.n	800fa9e <ff_wtoupper+0x1a>
 800fb72:	8a3b      	ldrh	r3, [r7, #16]
 800fb74:	005b      	lsls	r3, r3, #1
 800fb76:	697a      	ldr	r2, [r7, #20]
 800fb78:	4413      	add	r3, r2
 800fb7a:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800fb7c:	e78f      	b.n	800fa9e <ff_wtoupper+0x1a>
			break;
 800fb7e:	bf00      	nop
	}

	return chr;
 800fb80:	88fb      	ldrh	r3, [r7, #6]
}
 800fb82:	4618      	mov	r0, r3
 800fb84:	371c      	adds	r7, #28
 800fb86:	46bd      	mov	sp, r7
 800fb88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb8c:	4770      	bx	lr
 800fb8e:	bf00      	nop
 800fb90:	08011e6c 	.word	0x08011e6c
 800fb94:	08012060 	.word	0x08012060

0800fb98 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800fb98:	b580      	push	{r7, lr}
 800fb9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800fb9c:	2200      	movs	r2, #0
 800fb9e:	4912      	ldr	r1, [pc, #72]	@ (800fbe8 <MX_USB_DEVICE_Init+0x50>)
 800fba0:	4812      	ldr	r0, [pc, #72]	@ (800fbec <MX_USB_DEVICE_Init+0x54>)
 800fba2:	f7fb fcae 	bl	800b502 <USBD_Init>
 800fba6:	4603      	mov	r3, r0
 800fba8:	2b00      	cmp	r3, #0
 800fbaa:	d001      	beq.n	800fbb0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800fbac:	f7f1 fbc6 	bl	800133c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_MSC) != USBD_OK)
 800fbb0:	490f      	ldr	r1, [pc, #60]	@ (800fbf0 <MX_USB_DEVICE_Init+0x58>)
 800fbb2:	480e      	ldr	r0, [pc, #56]	@ (800fbec <MX_USB_DEVICE_Init+0x54>)
 800fbb4:	f7fb fcd5 	bl	800b562 <USBD_RegisterClass>
 800fbb8:	4603      	mov	r3, r0
 800fbba:	2b00      	cmp	r3, #0
 800fbbc:	d001      	beq.n	800fbc2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800fbbe:	f7f1 fbbd 	bl	800133c <Error_Handler>
  }
  if (USBD_MSC_RegisterStorage(&hUsbDeviceFS, &USBD_Storage_Interface_fops_FS) != USBD_OK)
 800fbc2:	490c      	ldr	r1, [pc, #48]	@ (800fbf4 <MX_USB_DEVICE_Init+0x5c>)
 800fbc4:	4809      	ldr	r0, [pc, #36]	@ (800fbec <MX_USB_DEVICE_Init+0x54>)
 800fbc6:	f7f9 ff53 	bl	8009a70 <USBD_MSC_RegisterStorage>
 800fbca:	4603      	mov	r3, r0
 800fbcc:	2b00      	cmp	r3, #0
 800fbce:	d001      	beq.n	800fbd4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800fbd0:	f7f1 fbb4 	bl	800133c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800fbd4:	4805      	ldr	r0, [pc, #20]	@ (800fbec <MX_USB_DEVICE_Init+0x54>)
 800fbd6:	f7fb fcfa 	bl	800b5ce <USBD_Start>
 800fbda:	4603      	mov	r3, r0
 800fbdc:	2b00      	cmp	r3, #0
 800fbde:	d001      	beq.n	800fbe4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800fbe0:	f7f1 fbac 	bl	800133c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800fbe4:	bf00      	nop
 800fbe6:	bd80      	pop	{r7, pc}
 800fbe8:	200000ac 	.word	0x200000ac
 800fbec:	20000c78 	.word	0x20000c78
 800fbf0:	2000002c 	.word	0x2000002c
 800fbf4:	200000fc 	.word	0x200000fc

0800fbf8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fbf8:	b480      	push	{r7}
 800fbfa:	b083      	sub	sp, #12
 800fbfc:	af00      	add	r7, sp, #0
 800fbfe:	4603      	mov	r3, r0
 800fc00:	6039      	str	r1, [r7, #0]
 800fc02:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800fc04:	683b      	ldr	r3, [r7, #0]
 800fc06:	2212      	movs	r2, #18
 800fc08:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800fc0a:	4b03      	ldr	r3, [pc, #12]	@ (800fc18 <USBD_FS_DeviceDescriptor+0x20>)
}
 800fc0c:	4618      	mov	r0, r3
 800fc0e:	370c      	adds	r7, #12
 800fc10:	46bd      	mov	sp, r7
 800fc12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc16:	4770      	bx	lr
 800fc18:	200000c8 	.word	0x200000c8

0800fc1c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fc1c:	b480      	push	{r7}
 800fc1e:	b083      	sub	sp, #12
 800fc20:	af00      	add	r7, sp, #0
 800fc22:	4603      	mov	r3, r0
 800fc24:	6039      	str	r1, [r7, #0]
 800fc26:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800fc28:	683b      	ldr	r3, [r7, #0]
 800fc2a:	2204      	movs	r2, #4
 800fc2c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800fc2e:	4b03      	ldr	r3, [pc, #12]	@ (800fc3c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800fc30:	4618      	mov	r0, r3
 800fc32:	370c      	adds	r7, #12
 800fc34:	46bd      	mov	sp, r7
 800fc36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc3a:	4770      	bx	lr
 800fc3c:	200000dc 	.word	0x200000dc

0800fc40 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fc40:	b580      	push	{r7, lr}
 800fc42:	b082      	sub	sp, #8
 800fc44:	af00      	add	r7, sp, #0
 800fc46:	4603      	mov	r3, r0
 800fc48:	6039      	str	r1, [r7, #0]
 800fc4a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800fc4c:	79fb      	ldrb	r3, [r7, #7]
 800fc4e:	2b00      	cmp	r3, #0
 800fc50:	d105      	bne.n	800fc5e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800fc52:	683a      	ldr	r2, [r7, #0]
 800fc54:	4907      	ldr	r1, [pc, #28]	@ (800fc74 <USBD_FS_ProductStrDescriptor+0x34>)
 800fc56:	4808      	ldr	r0, [pc, #32]	@ (800fc78 <USBD_FS_ProductStrDescriptor+0x38>)
 800fc58:	f7fc fe68 	bl	800c92c <USBD_GetString>
 800fc5c:	e004      	b.n	800fc68 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800fc5e:	683a      	ldr	r2, [r7, #0]
 800fc60:	4904      	ldr	r1, [pc, #16]	@ (800fc74 <USBD_FS_ProductStrDescriptor+0x34>)
 800fc62:	4805      	ldr	r0, [pc, #20]	@ (800fc78 <USBD_FS_ProductStrDescriptor+0x38>)
 800fc64:	f7fc fe62 	bl	800c92c <USBD_GetString>
  }
  return USBD_StrDesc;
 800fc68:	4b02      	ldr	r3, [pc, #8]	@ (800fc74 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800fc6a:	4618      	mov	r0, r3
 800fc6c:	3708      	adds	r7, #8
 800fc6e:	46bd      	mov	sp, r7
 800fc70:	bd80      	pop	{r7, pc}
 800fc72:	bf00      	nop
 800fc74:	20000f54 	.word	0x20000f54
 800fc78:	08010f1c 	.word	0x08010f1c

0800fc7c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fc7c:	b580      	push	{r7, lr}
 800fc7e:	b082      	sub	sp, #8
 800fc80:	af00      	add	r7, sp, #0
 800fc82:	4603      	mov	r3, r0
 800fc84:	6039      	str	r1, [r7, #0]
 800fc86:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800fc88:	683a      	ldr	r2, [r7, #0]
 800fc8a:	4904      	ldr	r1, [pc, #16]	@ (800fc9c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800fc8c:	4804      	ldr	r0, [pc, #16]	@ (800fca0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800fc8e:	f7fc fe4d 	bl	800c92c <USBD_GetString>
  return USBD_StrDesc;
 800fc92:	4b02      	ldr	r3, [pc, #8]	@ (800fc9c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800fc94:	4618      	mov	r0, r3
 800fc96:	3708      	adds	r7, #8
 800fc98:	46bd      	mov	sp, r7
 800fc9a:	bd80      	pop	{r7, pc}
 800fc9c:	20000f54 	.word	0x20000f54
 800fca0:	08010f30 	.word	0x08010f30

0800fca4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fca4:	b580      	push	{r7, lr}
 800fca6:	b082      	sub	sp, #8
 800fca8:	af00      	add	r7, sp, #0
 800fcaa:	4603      	mov	r3, r0
 800fcac:	6039      	str	r1, [r7, #0]
 800fcae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800fcb0:	683b      	ldr	r3, [r7, #0]
 800fcb2:	221a      	movs	r2, #26
 800fcb4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800fcb6:	f000 f843 	bl	800fd40 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800fcba:	4b02      	ldr	r3, [pc, #8]	@ (800fcc4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800fcbc:	4618      	mov	r0, r3
 800fcbe:	3708      	adds	r7, #8
 800fcc0:	46bd      	mov	sp, r7
 800fcc2:	bd80      	pop	{r7, pc}
 800fcc4:	200000e0 	.word	0x200000e0

0800fcc8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fcc8:	b580      	push	{r7, lr}
 800fcca:	b082      	sub	sp, #8
 800fccc:	af00      	add	r7, sp, #0
 800fcce:	4603      	mov	r3, r0
 800fcd0:	6039      	str	r1, [r7, #0]
 800fcd2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800fcd4:	79fb      	ldrb	r3, [r7, #7]
 800fcd6:	2b00      	cmp	r3, #0
 800fcd8:	d105      	bne.n	800fce6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800fcda:	683a      	ldr	r2, [r7, #0]
 800fcdc:	4907      	ldr	r1, [pc, #28]	@ (800fcfc <USBD_FS_ConfigStrDescriptor+0x34>)
 800fcde:	4808      	ldr	r0, [pc, #32]	@ (800fd00 <USBD_FS_ConfigStrDescriptor+0x38>)
 800fce0:	f7fc fe24 	bl	800c92c <USBD_GetString>
 800fce4:	e004      	b.n	800fcf0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800fce6:	683a      	ldr	r2, [r7, #0]
 800fce8:	4904      	ldr	r1, [pc, #16]	@ (800fcfc <USBD_FS_ConfigStrDescriptor+0x34>)
 800fcea:	4805      	ldr	r0, [pc, #20]	@ (800fd00 <USBD_FS_ConfigStrDescriptor+0x38>)
 800fcec:	f7fc fe1e 	bl	800c92c <USBD_GetString>
  }
  return USBD_StrDesc;
 800fcf0:	4b02      	ldr	r3, [pc, #8]	@ (800fcfc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800fcf2:	4618      	mov	r0, r3
 800fcf4:	3708      	adds	r7, #8
 800fcf6:	46bd      	mov	sp, r7
 800fcf8:	bd80      	pop	{r7, pc}
 800fcfa:	bf00      	nop
 800fcfc:	20000f54 	.word	0x20000f54
 800fd00:	08010f44 	.word	0x08010f44

0800fd04 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fd04:	b580      	push	{r7, lr}
 800fd06:	b082      	sub	sp, #8
 800fd08:	af00      	add	r7, sp, #0
 800fd0a:	4603      	mov	r3, r0
 800fd0c:	6039      	str	r1, [r7, #0]
 800fd0e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800fd10:	79fb      	ldrb	r3, [r7, #7]
 800fd12:	2b00      	cmp	r3, #0
 800fd14:	d105      	bne.n	800fd22 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800fd16:	683a      	ldr	r2, [r7, #0]
 800fd18:	4907      	ldr	r1, [pc, #28]	@ (800fd38 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800fd1a:	4808      	ldr	r0, [pc, #32]	@ (800fd3c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800fd1c:	f7fc fe06 	bl	800c92c <USBD_GetString>
 800fd20:	e004      	b.n	800fd2c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800fd22:	683a      	ldr	r2, [r7, #0]
 800fd24:	4904      	ldr	r1, [pc, #16]	@ (800fd38 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800fd26:	4805      	ldr	r0, [pc, #20]	@ (800fd3c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800fd28:	f7fc fe00 	bl	800c92c <USBD_GetString>
  }
  return USBD_StrDesc;
 800fd2c:	4b02      	ldr	r3, [pc, #8]	@ (800fd38 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800fd2e:	4618      	mov	r0, r3
 800fd30:	3708      	adds	r7, #8
 800fd32:	46bd      	mov	sp, r7
 800fd34:	bd80      	pop	{r7, pc}
 800fd36:	bf00      	nop
 800fd38:	20000f54 	.word	0x20000f54
 800fd3c:	08010f50 	.word	0x08010f50

0800fd40 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800fd40:	b580      	push	{r7, lr}
 800fd42:	b084      	sub	sp, #16
 800fd44:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800fd46:	4b0f      	ldr	r3, [pc, #60]	@ (800fd84 <Get_SerialNum+0x44>)
 800fd48:	681b      	ldr	r3, [r3, #0]
 800fd4a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800fd4c:	4b0e      	ldr	r3, [pc, #56]	@ (800fd88 <Get_SerialNum+0x48>)
 800fd4e:	681b      	ldr	r3, [r3, #0]
 800fd50:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800fd52:	4b0e      	ldr	r3, [pc, #56]	@ (800fd8c <Get_SerialNum+0x4c>)
 800fd54:	681b      	ldr	r3, [r3, #0]
 800fd56:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800fd58:	68fa      	ldr	r2, [r7, #12]
 800fd5a:	687b      	ldr	r3, [r7, #4]
 800fd5c:	4413      	add	r3, r2
 800fd5e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800fd60:	68fb      	ldr	r3, [r7, #12]
 800fd62:	2b00      	cmp	r3, #0
 800fd64:	d009      	beq.n	800fd7a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800fd66:	2208      	movs	r2, #8
 800fd68:	4909      	ldr	r1, [pc, #36]	@ (800fd90 <Get_SerialNum+0x50>)
 800fd6a:	68f8      	ldr	r0, [r7, #12]
 800fd6c:	f000 f814 	bl	800fd98 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800fd70:	2204      	movs	r2, #4
 800fd72:	4908      	ldr	r1, [pc, #32]	@ (800fd94 <Get_SerialNum+0x54>)
 800fd74:	68b8      	ldr	r0, [r7, #8]
 800fd76:	f000 f80f 	bl	800fd98 <IntToUnicode>
  }
}
 800fd7a:	bf00      	nop
 800fd7c:	3710      	adds	r7, #16
 800fd7e:	46bd      	mov	sp, r7
 800fd80:	bd80      	pop	{r7, pc}
 800fd82:	bf00      	nop
 800fd84:	1fff7a10 	.word	0x1fff7a10
 800fd88:	1fff7a14 	.word	0x1fff7a14
 800fd8c:	1fff7a18 	.word	0x1fff7a18
 800fd90:	200000e2 	.word	0x200000e2
 800fd94:	200000f2 	.word	0x200000f2

0800fd98 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800fd98:	b480      	push	{r7}
 800fd9a:	b087      	sub	sp, #28
 800fd9c:	af00      	add	r7, sp, #0
 800fd9e:	60f8      	str	r0, [r7, #12]
 800fda0:	60b9      	str	r1, [r7, #8]
 800fda2:	4613      	mov	r3, r2
 800fda4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800fda6:	2300      	movs	r3, #0
 800fda8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800fdaa:	2300      	movs	r3, #0
 800fdac:	75fb      	strb	r3, [r7, #23]
 800fdae:	e027      	b.n	800fe00 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800fdb0:	68fb      	ldr	r3, [r7, #12]
 800fdb2:	0f1b      	lsrs	r3, r3, #28
 800fdb4:	2b09      	cmp	r3, #9
 800fdb6:	d80b      	bhi.n	800fdd0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800fdb8:	68fb      	ldr	r3, [r7, #12]
 800fdba:	0f1b      	lsrs	r3, r3, #28
 800fdbc:	b2da      	uxtb	r2, r3
 800fdbe:	7dfb      	ldrb	r3, [r7, #23]
 800fdc0:	005b      	lsls	r3, r3, #1
 800fdc2:	4619      	mov	r1, r3
 800fdc4:	68bb      	ldr	r3, [r7, #8]
 800fdc6:	440b      	add	r3, r1
 800fdc8:	3230      	adds	r2, #48	@ 0x30
 800fdca:	b2d2      	uxtb	r2, r2
 800fdcc:	701a      	strb	r2, [r3, #0]
 800fdce:	e00a      	b.n	800fde6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800fdd0:	68fb      	ldr	r3, [r7, #12]
 800fdd2:	0f1b      	lsrs	r3, r3, #28
 800fdd4:	b2da      	uxtb	r2, r3
 800fdd6:	7dfb      	ldrb	r3, [r7, #23]
 800fdd8:	005b      	lsls	r3, r3, #1
 800fdda:	4619      	mov	r1, r3
 800fddc:	68bb      	ldr	r3, [r7, #8]
 800fdde:	440b      	add	r3, r1
 800fde0:	3237      	adds	r2, #55	@ 0x37
 800fde2:	b2d2      	uxtb	r2, r2
 800fde4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800fde6:	68fb      	ldr	r3, [r7, #12]
 800fde8:	011b      	lsls	r3, r3, #4
 800fdea:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800fdec:	7dfb      	ldrb	r3, [r7, #23]
 800fdee:	005b      	lsls	r3, r3, #1
 800fdf0:	3301      	adds	r3, #1
 800fdf2:	68ba      	ldr	r2, [r7, #8]
 800fdf4:	4413      	add	r3, r2
 800fdf6:	2200      	movs	r2, #0
 800fdf8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800fdfa:	7dfb      	ldrb	r3, [r7, #23]
 800fdfc:	3301      	adds	r3, #1
 800fdfe:	75fb      	strb	r3, [r7, #23]
 800fe00:	7dfa      	ldrb	r2, [r7, #23]
 800fe02:	79fb      	ldrb	r3, [r7, #7]
 800fe04:	429a      	cmp	r2, r3
 800fe06:	d3d3      	bcc.n	800fdb0 <IntToUnicode+0x18>
  }
}
 800fe08:	bf00      	nop
 800fe0a:	bf00      	nop
 800fe0c:	371c      	adds	r7, #28
 800fe0e:	46bd      	mov	sp, r7
 800fe10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe14:	4770      	bx	lr

0800fe16 <STORAGE_Init_FS>:
  * @brief  Initializes the storage unit (medium) over USB FS IP
  * @param  lun: Logical unit number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Init_FS(uint8_t lun)
{
 800fe16:	b480      	push	{r7}
 800fe18:	b083      	sub	sp, #12
 800fe1a:	af00      	add	r7, sp, #0
 800fe1c:	4603      	mov	r3, r0
 800fe1e:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
 UNUSED(lun);

  return (USBD_OK);
 800fe20:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 800fe22:	4618      	mov	r0, r3
 800fe24:	370c      	adds	r7, #12
 800fe26:	46bd      	mov	sp, r7
 800fe28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe2c:	4770      	bx	lr

0800fe2e <STORAGE_GetCapacity_FS>:
  * @param  block_num: Number of total block number.
  * @param  block_size: Block size.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_GetCapacity_FS(uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
 800fe2e:	b480      	push	{r7}
 800fe30:	b085      	sub	sp, #20
 800fe32:	af00      	add	r7, sp, #0
 800fe34:	4603      	mov	r3, r0
 800fe36:	60b9      	str	r1, [r7, #8]
 800fe38:	607a      	str	r2, [r7, #4]
 800fe3a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 3 */
  UNUSED(lun);

  *block_num  = STORAGE_BLK_NBR;
 800fe3c:	68bb      	ldr	r3, [r7, #8]
 800fe3e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800fe42:	601a      	str	r2, [r3, #0]
  *block_size = STORAGE_BLK_SIZ;
 800fe44:	687b      	ldr	r3, [r7, #4]
 800fe46:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800fe4a:	801a      	strh	r2, [r3, #0]
  return (USBD_OK);
 800fe4c:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800fe4e:	4618      	mov	r0, r3
 800fe50:	3714      	adds	r7, #20
 800fe52:	46bd      	mov	sp, r7
 800fe54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe58:	4770      	bx	lr

0800fe5a <STORAGE_IsReady_FS>:
  * @brief   Checks whether the medium is ready.
  * @param  lun:  Logical unit number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsReady_FS(uint8_t lun)
{
 800fe5a:	b480      	push	{r7}
 800fe5c:	b083      	sub	sp, #12
 800fe5e:	af00      	add	r7, sp, #0
 800fe60:	4603      	mov	r3, r0
 800fe62:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
  UNUSED(lun);

  return (USBD_OK);
 800fe64:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800fe66:	4618      	mov	r0, r3
 800fe68:	370c      	adds	r7, #12
 800fe6a:	46bd      	mov	sp, r7
 800fe6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe70:	4770      	bx	lr

0800fe72 <STORAGE_IsWriteProtected_FS>:
  * @brief  Checks whether the medium is write protected.
  * @param  lun: Logical unit number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsWriteProtected_FS(uint8_t lun)
{
 800fe72:	b480      	push	{r7}
 800fe74:	b083      	sub	sp, #12
 800fe76:	af00      	add	r7, sp, #0
 800fe78:	4603      	mov	r3, r0
 800fe7a:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  UNUSED(lun);

  return (USBD_OK);
 800fe7c:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800fe7e:	4618      	mov	r0, r3
 800fe80:	370c      	adds	r7, #12
 800fe82:	46bd      	mov	sp, r7
 800fe84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe88:	4770      	bx	lr

0800fe8a <STORAGE_Read_FS>:
  * @param  blk_addr: Logical block address.
  * @param  blk_len: Blocks number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Read_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 800fe8a:	b480      	push	{r7}
 800fe8c:	b085      	sub	sp, #20
 800fe8e:	af00      	add	r7, sp, #0
 800fe90:	60b9      	str	r1, [r7, #8]
 800fe92:	607a      	str	r2, [r7, #4]
 800fe94:	461a      	mov	r2, r3
 800fe96:	4603      	mov	r3, r0
 800fe98:	73fb      	strb	r3, [r7, #15]
 800fe9a:	4613      	mov	r3, r2
 800fe9c:	81bb      	strh	r3, [r7, #12]
  UNUSED(lun);
  UNUSED(buf);
  UNUSED(blk_addr);
  UNUSED(blk_len);

  return (USBD_OK);
 800fe9e:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800fea0:	4618      	mov	r0, r3
 800fea2:	3714      	adds	r7, #20
 800fea4:	46bd      	mov	sp, r7
 800fea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800feaa:	4770      	bx	lr

0800feac <STORAGE_Write_FS>:
  * @param  blk_addr: Logical block address.
  * @param  blk_len: Blocks number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Write_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 800feac:	b480      	push	{r7}
 800feae:	b085      	sub	sp, #20
 800feb0:	af00      	add	r7, sp, #0
 800feb2:	60b9      	str	r1, [r7, #8]
 800feb4:	607a      	str	r2, [r7, #4]
 800feb6:	461a      	mov	r2, r3
 800feb8:	4603      	mov	r3, r0
 800feba:	73fb      	strb	r3, [r7, #15]
 800febc:	4613      	mov	r3, r2
 800febe:	81bb      	strh	r3, [r7, #12]
  UNUSED(lun);
  UNUSED(buf);
  UNUSED(blk_addr);
  UNUSED(blk_len);

  return (USBD_OK);
 800fec0:	2300      	movs	r3, #0
  /* USER CODE END 7 */
}
 800fec2:	4618      	mov	r0, r3
 800fec4:	3714      	adds	r7, #20
 800fec6:	46bd      	mov	sp, r7
 800fec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fecc:	4770      	bx	lr

0800fece <STORAGE_GetMaxLun_FS>:
  * @brief  Returns the Max Supported LUNs.
  * @param  None
  * @retval Lun(s) number.
  */
int8_t STORAGE_GetMaxLun_FS(void)
{
 800fece:	b480      	push	{r7}
 800fed0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  return (STORAGE_LUN_NBR - 1);
 800fed2:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 800fed4:	4618      	mov	r0, r3
 800fed6:	46bd      	mov	sp, r7
 800fed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fedc:	4770      	bx	lr
	...

0800fee0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800fee0:	b580      	push	{r7, lr}
 800fee2:	b08a      	sub	sp, #40	@ 0x28
 800fee4:	af00      	add	r7, sp, #0
 800fee6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800fee8:	f107 0314 	add.w	r3, r7, #20
 800feec:	2200      	movs	r2, #0
 800feee:	601a      	str	r2, [r3, #0]
 800fef0:	605a      	str	r2, [r3, #4]
 800fef2:	609a      	str	r2, [r3, #8]
 800fef4:	60da      	str	r2, [r3, #12]
 800fef6:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800fef8:	687b      	ldr	r3, [r7, #4]
 800fefa:	681b      	ldr	r3, [r3, #0]
 800fefc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800ff00:	d13a      	bne.n	800ff78 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ff02:	2300      	movs	r3, #0
 800ff04:	613b      	str	r3, [r7, #16]
 800ff06:	4b1e      	ldr	r3, [pc, #120]	@ (800ff80 <HAL_PCD_MspInit+0xa0>)
 800ff08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ff0a:	4a1d      	ldr	r2, [pc, #116]	@ (800ff80 <HAL_PCD_MspInit+0xa0>)
 800ff0c:	f043 0301 	orr.w	r3, r3, #1
 800ff10:	6313      	str	r3, [r2, #48]	@ 0x30
 800ff12:	4b1b      	ldr	r3, [pc, #108]	@ (800ff80 <HAL_PCD_MspInit+0xa0>)
 800ff14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ff16:	f003 0301 	and.w	r3, r3, #1
 800ff1a:	613b      	str	r3, [r7, #16]
 800ff1c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800ff1e:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800ff22:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ff24:	2302      	movs	r3, #2
 800ff26:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ff28:	2300      	movs	r3, #0
 800ff2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ff2c:	2303      	movs	r3, #3
 800ff2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800ff30:	230a      	movs	r3, #10
 800ff32:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ff34:	f107 0314 	add.w	r3, r7, #20
 800ff38:	4619      	mov	r1, r3
 800ff3a:	4812      	ldr	r0, [pc, #72]	@ (800ff84 <HAL_PCD_MspInit+0xa4>)
 800ff3c:	f7f3 f8da 	bl	80030f4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800ff40:	4b0f      	ldr	r3, [pc, #60]	@ (800ff80 <HAL_PCD_MspInit+0xa0>)
 800ff42:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ff44:	4a0e      	ldr	r2, [pc, #56]	@ (800ff80 <HAL_PCD_MspInit+0xa0>)
 800ff46:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ff4a:	6353      	str	r3, [r2, #52]	@ 0x34
 800ff4c:	2300      	movs	r3, #0
 800ff4e:	60fb      	str	r3, [r7, #12]
 800ff50:	4b0b      	ldr	r3, [pc, #44]	@ (800ff80 <HAL_PCD_MspInit+0xa0>)
 800ff52:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ff54:	4a0a      	ldr	r2, [pc, #40]	@ (800ff80 <HAL_PCD_MspInit+0xa0>)
 800ff56:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800ff5a:	6453      	str	r3, [r2, #68]	@ 0x44
 800ff5c:	4b08      	ldr	r3, [pc, #32]	@ (800ff80 <HAL_PCD_MspInit+0xa0>)
 800ff5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ff60:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800ff64:	60fb      	str	r3, [r7, #12]
 800ff66:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800ff68:	2200      	movs	r2, #0
 800ff6a:	2100      	movs	r1, #0
 800ff6c:	2043      	movs	r0, #67	@ 0x43
 800ff6e:	f7f2 fcaa 	bl	80028c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800ff72:	2043      	movs	r0, #67	@ 0x43
 800ff74:	f7f2 fcc3 	bl	80028fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800ff78:	bf00      	nop
 800ff7a:	3728      	adds	r7, #40	@ 0x28
 800ff7c:	46bd      	mov	sp, r7
 800ff7e:	bd80      	pop	{r7, pc}
 800ff80:	40023800 	.word	0x40023800
 800ff84:	40020000 	.word	0x40020000

0800ff88 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ff88:	b580      	push	{r7, lr}
 800ff8a:	b082      	sub	sp, #8
 800ff8c:	af00      	add	r7, sp, #0
 800ff8e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800ff90:	687b      	ldr	r3, [r7, #4]
 800ff92:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800ff96:	687b      	ldr	r3, [r7, #4]
 800ff98:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800ff9c:	4619      	mov	r1, r3
 800ff9e:	4610      	mov	r0, r2
 800ffa0:	f7fb fb62 	bl	800b668 <USBD_LL_SetupStage>
}
 800ffa4:	bf00      	nop
 800ffa6:	3708      	adds	r7, #8
 800ffa8:	46bd      	mov	sp, r7
 800ffaa:	bd80      	pop	{r7, pc}

0800ffac <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ffac:	b580      	push	{r7, lr}
 800ffae:	b082      	sub	sp, #8
 800ffb0:	af00      	add	r7, sp, #0
 800ffb2:	6078      	str	r0, [r7, #4]
 800ffb4:	460b      	mov	r3, r1
 800ffb6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800ffb8:	687b      	ldr	r3, [r7, #4]
 800ffba:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800ffbe:	78fa      	ldrb	r2, [r7, #3]
 800ffc0:	6879      	ldr	r1, [r7, #4]
 800ffc2:	4613      	mov	r3, r2
 800ffc4:	00db      	lsls	r3, r3, #3
 800ffc6:	4413      	add	r3, r2
 800ffc8:	009b      	lsls	r3, r3, #2
 800ffca:	440b      	add	r3, r1
 800ffcc:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800ffd0:	681a      	ldr	r2, [r3, #0]
 800ffd2:	78fb      	ldrb	r3, [r7, #3]
 800ffd4:	4619      	mov	r1, r3
 800ffd6:	f7fb fb9c 	bl	800b712 <USBD_LL_DataOutStage>
}
 800ffda:	bf00      	nop
 800ffdc:	3708      	adds	r7, #8
 800ffde:	46bd      	mov	sp, r7
 800ffe0:	bd80      	pop	{r7, pc}

0800ffe2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ffe2:	b580      	push	{r7, lr}
 800ffe4:	b082      	sub	sp, #8
 800ffe6:	af00      	add	r7, sp, #0
 800ffe8:	6078      	str	r0, [r7, #4]
 800ffea:	460b      	mov	r3, r1
 800ffec:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800ffee:	687b      	ldr	r3, [r7, #4]
 800fff0:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800fff4:	78fa      	ldrb	r2, [r7, #3]
 800fff6:	6879      	ldr	r1, [r7, #4]
 800fff8:	4613      	mov	r3, r2
 800fffa:	00db      	lsls	r3, r3, #3
 800fffc:	4413      	add	r3, r2
 800fffe:	009b      	lsls	r3, r3, #2
 8010000:	440b      	add	r3, r1
 8010002:	3320      	adds	r3, #32
 8010004:	681a      	ldr	r2, [r3, #0]
 8010006:	78fb      	ldrb	r3, [r7, #3]
 8010008:	4619      	mov	r1, r3
 801000a:	f7fb fc35 	bl	800b878 <USBD_LL_DataInStage>
}
 801000e:	bf00      	nop
 8010010:	3708      	adds	r7, #8
 8010012:	46bd      	mov	sp, r7
 8010014:	bd80      	pop	{r7, pc}

08010016 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010016:	b580      	push	{r7, lr}
 8010018:	b082      	sub	sp, #8
 801001a:	af00      	add	r7, sp, #0
 801001c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801001e:	687b      	ldr	r3, [r7, #4]
 8010020:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8010024:	4618      	mov	r0, r3
 8010026:	f7fb fd6f 	bl	800bb08 <USBD_LL_SOF>
}
 801002a:	bf00      	nop
 801002c:	3708      	adds	r7, #8
 801002e:	46bd      	mov	sp, r7
 8010030:	bd80      	pop	{r7, pc}

08010032 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010032:	b580      	push	{r7, lr}
 8010034:	b084      	sub	sp, #16
 8010036:	af00      	add	r7, sp, #0
 8010038:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801003a:	2301      	movs	r3, #1
 801003c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 801003e:	687b      	ldr	r3, [r7, #4]
 8010040:	79db      	ldrb	r3, [r3, #7]
 8010042:	2b02      	cmp	r3, #2
 8010044:	d001      	beq.n	801004a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8010046:	f7f1 f979 	bl	800133c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801004a:	687b      	ldr	r3, [r7, #4]
 801004c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8010050:	7bfa      	ldrb	r2, [r7, #15]
 8010052:	4611      	mov	r1, r2
 8010054:	4618      	mov	r0, r3
 8010056:	f7fb fd13 	bl	800ba80 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801005a:	687b      	ldr	r3, [r7, #4]
 801005c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8010060:	4618      	mov	r0, r3
 8010062:	f7fb fcbb 	bl	800b9dc <USBD_LL_Reset>
}
 8010066:	bf00      	nop
 8010068:	3710      	adds	r7, #16
 801006a:	46bd      	mov	sp, r7
 801006c:	bd80      	pop	{r7, pc}
	...

08010070 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010070:	b580      	push	{r7, lr}
 8010072:	b082      	sub	sp, #8
 8010074:	af00      	add	r7, sp, #0
 8010076:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8010078:	687b      	ldr	r3, [r7, #4]
 801007a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801007e:	4618      	mov	r0, r3
 8010080:	f7fb fd0e 	bl	800baa0 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8010084:	687b      	ldr	r3, [r7, #4]
 8010086:	681b      	ldr	r3, [r3, #0]
 8010088:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 801008c:	681b      	ldr	r3, [r3, #0]
 801008e:	687a      	ldr	r2, [r7, #4]
 8010090:	6812      	ldr	r2, [r2, #0]
 8010092:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8010096:	f043 0301 	orr.w	r3, r3, #1
 801009a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 801009c:	687b      	ldr	r3, [r7, #4]
 801009e:	7adb      	ldrb	r3, [r3, #11]
 80100a0:	2b00      	cmp	r3, #0
 80100a2:	d005      	beq.n	80100b0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80100a4:	4b04      	ldr	r3, [pc, #16]	@ (80100b8 <HAL_PCD_SuspendCallback+0x48>)
 80100a6:	691b      	ldr	r3, [r3, #16]
 80100a8:	4a03      	ldr	r2, [pc, #12]	@ (80100b8 <HAL_PCD_SuspendCallback+0x48>)
 80100aa:	f043 0306 	orr.w	r3, r3, #6
 80100ae:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80100b0:	bf00      	nop
 80100b2:	3708      	adds	r7, #8
 80100b4:	46bd      	mov	sp, r7
 80100b6:	bd80      	pop	{r7, pc}
 80100b8:	e000ed00 	.word	0xe000ed00

080100bc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80100bc:	b580      	push	{r7, lr}
 80100be:	b082      	sub	sp, #8
 80100c0:	af00      	add	r7, sp, #0
 80100c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80100c4:	687b      	ldr	r3, [r7, #4]
 80100c6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80100ca:	4618      	mov	r0, r3
 80100cc:	f7fb fd04 	bl	800bad8 <USBD_LL_Resume>
}
 80100d0:	bf00      	nop
 80100d2:	3708      	adds	r7, #8
 80100d4:	46bd      	mov	sp, r7
 80100d6:	bd80      	pop	{r7, pc}

080100d8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80100d8:	b580      	push	{r7, lr}
 80100da:	b082      	sub	sp, #8
 80100dc:	af00      	add	r7, sp, #0
 80100de:	6078      	str	r0, [r7, #4]
 80100e0:	460b      	mov	r3, r1
 80100e2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80100e4:	687b      	ldr	r3, [r7, #4]
 80100e6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80100ea:	78fa      	ldrb	r2, [r7, #3]
 80100ec:	4611      	mov	r1, r2
 80100ee:	4618      	mov	r0, r3
 80100f0:	f7fb fd5c 	bl	800bbac <USBD_LL_IsoOUTIncomplete>
}
 80100f4:	bf00      	nop
 80100f6:	3708      	adds	r7, #8
 80100f8:	46bd      	mov	sp, r7
 80100fa:	bd80      	pop	{r7, pc}

080100fc <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80100fc:	b580      	push	{r7, lr}
 80100fe:	b082      	sub	sp, #8
 8010100:	af00      	add	r7, sp, #0
 8010102:	6078      	str	r0, [r7, #4]
 8010104:	460b      	mov	r3, r1
 8010106:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8010108:	687b      	ldr	r3, [r7, #4]
 801010a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801010e:	78fa      	ldrb	r2, [r7, #3]
 8010110:	4611      	mov	r1, r2
 8010112:	4618      	mov	r0, r3
 8010114:	f7fb fd18 	bl	800bb48 <USBD_LL_IsoINIncomplete>
}
 8010118:	bf00      	nop
 801011a:	3708      	adds	r7, #8
 801011c:	46bd      	mov	sp, r7
 801011e:	bd80      	pop	{r7, pc}

08010120 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010120:	b580      	push	{r7, lr}
 8010122:	b082      	sub	sp, #8
 8010124:	af00      	add	r7, sp, #0
 8010126:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8010128:	687b      	ldr	r3, [r7, #4]
 801012a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801012e:	4618      	mov	r0, r3
 8010130:	f7fb fd6e 	bl	800bc10 <USBD_LL_DevConnected>
}
 8010134:	bf00      	nop
 8010136:	3708      	adds	r7, #8
 8010138:	46bd      	mov	sp, r7
 801013a:	bd80      	pop	{r7, pc}

0801013c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801013c:	b580      	push	{r7, lr}
 801013e:	b082      	sub	sp, #8
 8010140:	af00      	add	r7, sp, #0
 8010142:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8010144:	687b      	ldr	r3, [r7, #4]
 8010146:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801014a:	4618      	mov	r0, r3
 801014c:	f7fb fd6b 	bl	800bc26 <USBD_LL_DevDisconnected>
}
 8010150:	bf00      	nop
 8010152:	3708      	adds	r7, #8
 8010154:	46bd      	mov	sp, r7
 8010156:	bd80      	pop	{r7, pc}

08010158 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8010158:	b580      	push	{r7, lr}
 801015a:	b082      	sub	sp, #8
 801015c:	af00      	add	r7, sp, #0
 801015e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8010160:	687b      	ldr	r3, [r7, #4]
 8010162:	781b      	ldrb	r3, [r3, #0]
 8010164:	2b00      	cmp	r3, #0
 8010166:	d13c      	bne.n	80101e2 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8010168:	4a20      	ldr	r2, [pc, #128]	@ (80101ec <USBD_LL_Init+0x94>)
 801016a:	687b      	ldr	r3, [r7, #4]
 801016c:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8010170:	687b      	ldr	r3, [r7, #4]
 8010172:	4a1e      	ldr	r2, [pc, #120]	@ (80101ec <USBD_LL_Init+0x94>)
 8010174:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8010178:	4b1c      	ldr	r3, [pc, #112]	@ (80101ec <USBD_LL_Init+0x94>)
 801017a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 801017e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8010180:	4b1a      	ldr	r3, [pc, #104]	@ (80101ec <USBD_LL_Init+0x94>)
 8010182:	2204      	movs	r2, #4
 8010184:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8010186:	4b19      	ldr	r3, [pc, #100]	@ (80101ec <USBD_LL_Init+0x94>)
 8010188:	2202      	movs	r2, #2
 801018a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 801018c:	4b17      	ldr	r3, [pc, #92]	@ (80101ec <USBD_LL_Init+0x94>)
 801018e:	2200      	movs	r2, #0
 8010190:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8010192:	4b16      	ldr	r3, [pc, #88]	@ (80101ec <USBD_LL_Init+0x94>)
 8010194:	2202      	movs	r2, #2
 8010196:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8010198:	4b14      	ldr	r3, [pc, #80]	@ (80101ec <USBD_LL_Init+0x94>)
 801019a:	2200      	movs	r2, #0
 801019c:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 801019e:	4b13      	ldr	r3, [pc, #76]	@ (80101ec <USBD_LL_Init+0x94>)
 80101a0:	2200      	movs	r2, #0
 80101a2:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80101a4:	4b11      	ldr	r3, [pc, #68]	@ (80101ec <USBD_LL_Init+0x94>)
 80101a6:	2200      	movs	r2, #0
 80101a8:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80101aa:	4b10      	ldr	r3, [pc, #64]	@ (80101ec <USBD_LL_Init+0x94>)
 80101ac:	2200      	movs	r2, #0
 80101ae:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80101b0:	4b0e      	ldr	r3, [pc, #56]	@ (80101ec <USBD_LL_Init+0x94>)
 80101b2:	2200      	movs	r2, #0
 80101b4:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80101b6:	480d      	ldr	r0, [pc, #52]	@ (80101ec <USBD_LL_Init+0x94>)
 80101b8:	f7f3 ff1f 	bl	8003ffa <HAL_PCD_Init>
 80101bc:	4603      	mov	r3, r0
 80101be:	2b00      	cmp	r3, #0
 80101c0:	d001      	beq.n	80101c6 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80101c2:	f7f1 f8bb 	bl	800133c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80101c6:	2180      	movs	r1, #128	@ 0x80
 80101c8:	4808      	ldr	r0, [pc, #32]	@ (80101ec <USBD_LL_Init+0x94>)
 80101ca:	f7f5 f978 	bl	80054be <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80101ce:	2240      	movs	r2, #64	@ 0x40
 80101d0:	2100      	movs	r1, #0
 80101d2:	4806      	ldr	r0, [pc, #24]	@ (80101ec <USBD_LL_Init+0x94>)
 80101d4:	f7f5 f92c 	bl	8005430 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80101d8:	2280      	movs	r2, #128	@ 0x80
 80101da:	2101      	movs	r1, #1
 80101dc:	4803      	ldr	r0, [pc, #12]	@ (80101ec <USBD_LL_Init+0x94>)
 80101de:	f7f5 f927 	bl	8005430 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80101e2:	2300      	movs	r3, #0
}
 80101e4:	4618      	mov	r0, r3
 80101e6:	3708      	adds	r7, #8
 80101e8:	46bd      	mov	sp, r7
 80101ea:	bd80      	pop	{r7, pc}
 80101ec:	20001154 	.word	0x20001154

080101f0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80101f0:	b580      	push	{r7, lr}
 80101f2:	b084      	sub	sp, #16
 80101f4:	af00      	add	r7, sp, #0
 80101f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80101f8:	2300      	movs	r3, #0
 80101fa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80101fc:	2300      	movs	r3, #0
 80101fe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8010200:	687b      	ldr	r3, [r7, #4]
 8010202:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8010206:	4618      	mov	r0, r3
 8010208:	f7f4 f806 	bl	8004218 <HAL_PCD_Start>
 801020c:	4603      	mov	r3, r0
 801020e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010210:	7bfb      	ldrb	r3, [r7, #15]
 8010212:	4618      	mov	r0, r3
 8010214:	f000 f962 	bl	80104dc <USBD_Get_USB_Status>
 8010218:	4603      	mov	r3, r0
 801021a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801021c:	7bbb      	ldrb	r3, [r7, #14]
}
 801021e:	4618      	mov	r0, r3
 8010220:	3710      	adds	r7, #16
 8010222:	46bd      	mov	sp, r7
 8010224:	bd80      	pop	{r7, pc}

08010226 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8010226:	b580      	push	{r7, lr}
 8010228:	b084      	sub	sp, #16
 801022a:	af00      	add	r7, sp, #0
 801022c:	6078      	str	r0, [r7, #4]
 801022e:	4608      	mov	r0, r1
 8010230:	4611      	mov	r1, r2
 8010232:	461a      	mov	r2, r3
 8010234:	4603      	mov	r3, r0
 8010236:	70fb      	strb	r3, [r7, #3]
 8010238:	460b      	mov	r3, r1
 801023a:	70bb      	strb	r3, [r7, #2]
 801023c:	4613      	mov	r3, r2
 801023e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010240:	2300      	movs	r3, #0
 8010242:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010244:	2300      	movs	r3, #0
 8010246:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8010248:	687b      	ldr	r3, [r7, #4]
 801024a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801024e:	78bb      	ldrb	r3, [r7, #2]
 8010250:	883a      	ldrh	r2, [r7, #0]
 8010252:	78f9      	ldrb	r1, [r7, #3]
 8010254:	f7f4 fcda 	bl	8004c0c <HAL_PCD_EP_Open>
 8010258:	4603      	mov	r3, r0
 801025a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801025c:	7bfb      	ldrb	r3, [r7, #15]
 801025e:	4618      	mov	r0, r3
 8010260:	f000 f93c 	bl	80104dc <USBD_Get_USB_Status>
 8010264:	4603      	mov	r3, r0
 8010266:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010268:	7bbb      	ldrb	r3, [r7, #14]
}
 801026a:	4618      	mov	r0, r3
 801026c:	3710      	adds	r7, #16
 801026e:	46bd      	mov	sp, r7
 8010270:	bd80      	pop	{r7, pc}

08010272 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010272:	b580      	push	{r7, lr}
 8010274:	b084      	sub	sp, #16
 8010276:	af00      	add	r7, sp, #0
 8010278:	6078      	str	r0, [r7, #4]
 801027a:	460b      	mov	r3, r1
 801027c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801027e:	2300      	movs	r3, #0
 8010280:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010282:	2300      	movs	r3, #0
 8010284:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8010286:	687b      	ldr	r3, [r7, #4]
 8010288:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801028c:	78fa      	ldrb	r2, [r7, #3]
 801028e:	4611      	mov	r1, r2
 8010290:	4618      	mov	r0, r3
 8010292:	f7f4 fd25 	bl	8004ce0 <HAL_PCD_EP_Close>
 8010296:	4603      	mov	r3, r0
 8010298:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801029a:	7bfb      	ldrb	r3, [r7, #15]
 801029c:	4618      	mov	r0, r3
 801029e:	f000 f91d 	bl	80104dc <USBD_Get_USB_Status>
 80102a2:	4603      	mov	r3, r0
 80102a4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80102a6:	7bbb      	ldrb	r3, [r7, #14]
}
 80102a8:	4618      	mov	r0, r3
 80102aa:	3710      	adds	r7, #16
 80102ac:	46bd      	mov	sp, r7
 80102ae:	bd80      	pop	{r7, pc}

080102b0 <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80102b0:	b580      	push	{r7, lr}
 80102b2:	b084      	sub	sp, #16
 80102b4:	af00      	add	r7, sp, #0
 80102b6:	6078      	str	r0, [r7, #4]
 80102b8:	460b      	mov	r3, r1
 80102ba:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80102bc:	2300      	movs	r3, #0
 80102be:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80102c0:	2300      	movs	r3, #0
 80102c2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 80102c4:	687b      	ldr	r3, [r7, #4]
 80102c6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80102ca:	78fa      	ldrb	r2, [r7, #3]
 80102cc:	4611      	mov	r1, r2
 80102ce:	4618      	mov	r0, r3
 80102d0:	f7f4 fec7 	bl	8005062 <HAL_PCD_EP_Flush>
 80102d4:	4603      	mov	r3, r0
 80102d6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80102d8:	7bfb      	ldrb	r3, [r7, #15]
 80102da:	4618      	mov	r0, r3
 80102dc:	f000 f8fe 	bl	80104dc <USBD_Get_USB_Status>
 80102e0:	4603      	mov	r3, r0
 80102e2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80102e4:	7bbb      	ldrb	r3, [r7, #14]
}
 80102e6:	4618      	mov	r0, r3
 80102e8:	3710      	adds	r7, #16
 80102ea:	46bd      	mov	sp, r7
 80102ec:	bd80      	pop	{r7, pc}

080102ee <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80102ee:	b580      	push	{r7, lr}
 80102f0:	b084      	sub	sp, #16
 80102f2:	af00      	add	r7, sp, #0
 80102f4:	6078      	str	r0, [r7, #4]
 80102f6:	460b      	mov	r3, r1
 80102f8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80102fa:	2300      	movs	r3, #0
 80102fc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80102fe:	2300      	movs	r3, #0
 8010300:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8010302:	687b      	ldr	r3, [r7, #4]
 8010304:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8010308:	78fa      	ldrb	r2, [r7, #3]
 801030a:	4611      	mov	r1, r2
 801030c:	4618      	mov	r0, r3
 801030e:	f7f4 fdbe 	bl	8004e8e <HAL_PCD_EP_SetStall>
 8010312:	4603      	mov	r3, r0
 8010314:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010316:	7bfb      	ldrb	r3, [r7, #15]
 8010318:	4618      	mov	r0, r3
 801031a:	f000 f8df 	bl	80104dc <USBD_Get_USB_Status>
 801031e:	4603      	mov	r3, r0
 8010320:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010322:	7bbb      	ldrb	r3, [r7, #14]
}
 8010324:	4618      	mov	r0, r3
 8010326:	3710      	adds	r7, #16
 8010328:	46bd      	mov	sp, r7
 801032a:	bd80      	pop	{r7, pc}

0801032c <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801032c:	b580      	push	{r7, lr}
 801032e:	b084      	sub	sp, #16
 8010330:	af00      	add	r7, sp, #0
 8010332:	6078      	str	r0, [r7, #4]
 8010334:	460b      	mov	r3, r1
 8010336:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010338:	2300      	movs	r3, #0
 801033a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801033c:	2300      	movs	r3, #0
 801033e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8010340:	687b      	ldr	r3, [r7, #4]
 8010342:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8010346:	78fa      	ldrb	r2, [r7, #3]
 8010348:	4611      	mov	r1, r2
 801034a:	4618      	mov	r0, r3
 801034c:	f7f4 fe02 	bl	8004f54 <HAL_PCD_EP_ClrStall>
 8010350:	4603      	mov	r3, r0
 8010352:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010354:	7bfb      	ldrb	r3, [r7, #15]
 8010356:	4618      	mov	r0, r3
 8010358:	f000 f8c0 	bl	80104dc <USBD_Get_USB_Status>
 801035c:	4603      	mov	r3, r0
 801035e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010360:	7bbb      	ldrb	r3, [r7, #14]
}
 8010362:	4618      	mov	r0, r3
 8010364:	3710      	adds	r7, #16
 8010366:	46bd      	mov	sp, r7
 8010368:	bd80      	pop	{r7, pc}

0801036a <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801036a:	b480      	push	{r7}
 801036c:	b085      	sub	sp, #20
 801036e:	af00      	add	r7, sp, #0
 8010370:	6078      	str	r0, [r7, #4]
 8010372:	460b      	mov	r3, r1
 8010374:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8010376:	687b      	ldr	r3, [r7, #4]
 8010378:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801037c:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 801037e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8010382:	2b00      	cmp	r3, #0
 8010384:	da0b      	bge.n	801039e <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8010386:	78fb      	ldrb	r3, [r7, #3]
 8010388:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801038c:	68f9      	ldr	r1, [r7, #12]
 801038e:	4613      	mov	r3, r2
 8010390:	00db      	lsls	r3, r3, #3
 8010392:	4413      	add	r3, r2
 8010394:	009b      	lsls	r3, r3, #2
 8010396:	440b      	add	r3, r1
 8010398:	3316      	adds	r3, #22
 801039a:	781b      	ldrb	r3, [r3, #0]
 801039c:	e00b      	b.n	80103b6 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 801039e:	78fb      	ldrb	r3, [r7, #3]
 80103a0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80103a4:	68f9      	ldr	r1, [r7, #12]
 80103a6:	4613      	mov	r3, r2
 80103a8:	00db      	lsls	r3, r3, #3
 80103aa:	4413      	add	r3, r2
 80103ac:	009b      	lsls	r3, r3, #2
 80103ae:	440b      	add	r3, r1
 80103b0:	f203 2356 	addw	r3, r3, #598	@ 0x256
 80103b4:	781b      	ldrb	r3, [r3, #0]
  }
}
 80103b6:	4618      	mov	r0, r3
 80103b8:	3714      	adds	r7, #20
 80103ba:	46bd      	mov	sp, r7
 80103bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103c0:	4770      	bx	lr

080103c2 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80103c2:	b580      	push	{r7, lr}
 80103c4:	b084      	sub	sp, #16
 80103c6:	af00      	add	r7, sp, #0
 80103c8:	6078      	str	r0, [r7, #4]
 80103ca:	460b      	mov	r3, r1
 80103cc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80103ce:	2300      	movs	r3, #0
 80103d0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80103d2:	2300      	movs	r3, #0
 80103d4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80103d6:	687b      	ldr	r3, [r7, #4]
 80103d8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80103dc:	78fa      	ldrb	r2, [r7, #3]
 80103de:	4611      	mov	r1, r2
 80103e0:	4618      	mov	r0, r3
 80103e2:	f7f4 fbef 	bl	8004bc4 <HAL_PCD_SetAddress>
 80103e6:	4603      	mov	r3, r0
 80103e8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80103ea:	7bfb      	ldrb	r3, [r7, #15]
 80103ec:	4618      	mov	r0, r3
 80103ee:	f000 f875 	bl	80104dc <USBD_Get_USB_Status>
 80103f2:	4603      	mov	r3, r0
 80103f4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80103f6:	7bbb      	ldrb	r3, [r7, #14]
}
 80103f8:	4618      	mov	r0, r3
 80103fa:	3710      	adds	r7, #16
 80103fc:	46bd      	mov	sp, r7
 80103fe:	bd80      	pop	{r7, pc}

08010400 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8010400:	b580      	push	{r7, lr}
 8010402:	b086      	sub	sp, #24
 8010404:	af00      	add	r7, sp, #0
 8010406:	60f8      	str	r0, [r7, #12]
 8010408:	607a      	str	r2, [r7, #4]
 801040a:	603b      	str	r3, [r7, #0]
 801040c:	460b      	mov	r3, r1
 801040e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010410:	2300      	movs	r3, #0
 8010412:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010414:	2300      	movs	r3, #0
 8010416:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8010418:	68fb      	ldr	r3, [r7, #12]
 801041a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801041e:	7af9      	ldrb	r1, [r7, #11]
 8010420:	683b      	ldr	r3, [r7, #0]
 8010422:	687a      	ldr	r2, [r7, #4]
 8010424:	f7f4 fcf9 	bl	8004e1a <HAL_PCD_EP_Transmit>
 8010428:	4603      	mov	r3, r0
 801042a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801042c:	7dfb      	ldrb	r3, [r7, #23]
 801042e:	4618      	mov	r0, r3
 8010430:	f000 f854 	bl	80104dc <USBD_Get_USB_Status>
 8010434:	4603      	mov	r3, r0
 8010436:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8010438:	7dbb      	ldrb	r3, [r7, #22]
}
 801043a:	4618      	mov	r0, r3
 801043c:	3718      	adds	r7, #24
 801043e:	46bd      	mov	sp, r7
 8010440:	bd80      	pop	{r7, pc}

08010442 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8010442:	b580      	push	{r7, lr}
 8010444:	b086      	sub	sp, #24
 8010446:	af00      	add	r7, sp, #0
 8010448:	60f8      	str	r0, [r7, #12]
 801044a:	607a      	str	r2, [r7, #4]
 801044c:	603b      	str	r3, [r7, #0]
 801044e:	460b      	mov	r3, r1
 8010450:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010452:	2300      	movs	r3, #0
 8010454:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010456:	2300      	movs	r3, #0
 8010458:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801045a:	68fb      	ldr	r3, [r7, #12]
 801045c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8010460:	7af9      	ldrb	r1, [r7, #11]
 8010462:	683b      	ldr	r3, [r7, #0]
 8010464:	687a      	ldr	r2, [r7, #4]
 8010466:	f7f4 fc85 	bl	8004d74 <HAL_PCD_EP_Receive>
 801046a:	4603      	mov	r3, r0
 801046c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801046e:	7dfb      	ldrb	r3, [r7, #23]
 8010470:	4618      	mov	r0, r3
 8010472:	f000 f833 	bl	80104dc <USBD_Get_USB_Status>
 8010476:	4603      	mov	r3, r0
 8010478:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801047a:	7dbb      	ldrb	r3, [r7, #22]
}
 801047c:	4618      	mov	r0, r3
 801047e:	3718      	adds	r7, #24
 8010480:	46bd      	mov	sp, r7
 8010482:	bd80      	pop	{r7, pc}

08010484 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010484:	b580      	push	{r7, lr}
 8010486:	b082      	sub	sp, #8
 8010488:	af00      	add	r7, sp, #0
 801048a:	6078      	str	r0, [r7, #4]
 801048c:	460b      	mov	r3, r1
 801048e:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8010490:	687b      	ldr	r3, [r7, #4]
 8010492:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8010496:	78fa      	ldrb	r2, [r7, #3]
 8010498:	4611      	mov	r1, r2
 801049a:	4618      	mov	r0, r3
 801049c:	f7f4 fca5 	bl	8004dea <HAL_PCD_EP_GetRxCount>
 80104a0:	4603      	mov	r3, r0
}
 80104a2:	4618      	mov	r0, r3
 80104a4:	3708      	adds	r7, #8
 80104a6:	46bd      	mov	sp, r7
 80104a8:	bd80      	pop	{r7, pc}
	...

080104ac <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80104ac:	b480      	push	{r7}
 80104ae:	b083      	sub	sp, #12
 80104b0:	af00      	add	r7, sp, #0
 80104b2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_MSC_BOT_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80104b4:	4b03      	ldr	r3, [pc, #12]	@ (80104c4 <USBD_static_malloc+0x18>)
}
 80104b6:	4618      	mov	r0, r3
 80104b8:	370c      	adds	r7, #12
 80104ba:	46bd      	mov	sp, r7
 80104bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104c0:	4770      	bx	lr
 80104c2:	bf00      	nop
 80104c4:	20001638 	.word	0x20001638

080104c8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80104c8:	b480      	push	{r7}
 80104ca:	b083      	sub	sp, #12
 80104cc:	af00      	add	r7, sp, #0
 80104ce:	6078      	str	r0, [r7, #4]

}
 80104d0:	bf00      	nop
 80104d2:	370c      	adds	r7, #12
 80104d4:	46bd      	mov	sp, r7
 80104d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104da:	4770      	bx	lr

080104dc <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80104dc:	b480      	push	{r7}
 80104de:	b085      	sub	sp, #20
 80104e0:	af00      	add	r7, sp, #0
 80104e2:	4603      	mov	r3, r0
 80104e4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80104e6:	2300      	movs	r3, #0
 80104e8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80104ea:	79fb      	ldrb	r3, [r7, #7]
 80104ec:	2b03      	cmp	r3, #3
 80104ee:	d817      	bhi.n	8010520 <USBD_Get_USB_Status+0x44>
 80104f0:	a201      	add	r2, pc, #4	@ (adr r2, 80104f8 <USBD_Get_USB_Status+0x1c>)
 80104f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80104f6:	bf00      	nop
 80104f8:	08010509 	.word	0x08010509
 80104fc:	0801050f 	.word	0x0801050f
 8010500:	08010515 	.word	0x08010515
 8010504:	0801051b 	.word	0x0801051b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8010508:	2300      	movs	r3, #0
 801050a:	73fb      	strb	r3, [r7, #15]
    break;
 801050c:	e00b      	b.n	8010526 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801050e:	2303      	movs	r3, #3
 8010510:	73fb      	strb	r3, [r7, #15]
    break;
 8010512:	e008      	b.n	8010526 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8010514:	2301      	movs	r3, #1
 8010516:	73fb      	strb	r3, [r7, #15]
    break;
 8010518:	e005      	b.n	8010526 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801051a:	2303      	movs	r3, #3
 801051c:	73fb      	strb	r3, [r7, #15]
    break;
 801051e:	e002      	b.n	8010526 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8010520:	2303      	movs	r3, #3
 8010522:	73fb      	strb	r3, [r7, #15]
    break;
 8010524:	bf00      	nop
  }
  return usb_status;
 8010526:	7bfb      	ldrb	r3, [r7, #15]
}
 8010528:	4618      	mov	r0, r3
 801052a:	3714      	adds	r7, #20
 801052c:	46bd      	mov	sp, r7
 801052e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010532:	4770      	bx	lr

08010534 <siprintf>:
 8010534:	b40e      	push	{r1, r2, r3}
 8010536:	b500      	push	{lr}
 8010538:	b09c      	sub	sp, #112	@ 0x70
 801053a:	ab1d      	add	r3, sp, #116	@ 0x74
 801053c:	9002      	str	r0, [sp, #8]
 801053e:	9006      	str	r0, [sp, #24]
 8010540:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8010544:	4809      	ldr	r0, [pc, #36]	@ (801056c <siprintf+0x38>)
 8010546:	9107      	str	r1, [sp, #28]
 8010548:	9104      	str	r1, [sp, #16]
 801054a:	4909      	ldr	r1, [pc, #36]	@ (8010570 <siprintf+0x3c>)
 801054c:	f853 2b04 	ldr.w	r2, [r3], #4
 8010550:	9105      	str	r1, [sp, #20]
 8010552:	6800      	ldr	r0, [r0, #0]
 8010554:	9301      	str	r3, [sp, #4]
 8010556:	a902      	add	r1, sp, #8
 8010558:	f000 f994 	bl	8010884 <_svfiprintf_r>
 801055c:	9b02      	ldr	r3, [sp, #8]
 801055e:	2200      	movs	r2, #0
 8010560:	701a      	strb	r2, [r3, #0]
 8010562:	b01c      	add	sp, #112	@ 0x70
 8010564:	f85d eb04 	ldr.w	lr, [sp], #4
 8010568:	b003      	add	sp, #12
 801056a:	4770      	bx	lr
 801056c:	2000011c 	.word	0x2000011c
 8010570:	ffff0208 	.word	0xffff0208

08010574 <memset>:
 8010574:	4402      	add	r2, r0
 8010576:	4603      	mov	r3, r0
 8010578:	4293      	cmp	r3, r2
 801057a:	d100      	bne.n	801057e <memset+0xa>
 801057c:	4770      	bx	lr
 801057e:	f803 1b01 	strb.w	r1, [r3], #1
 8010582:	e7f9      	b.n	8010578 <memset+0x4>

08010584 <__errno>:
 8010584:	4b01      	ldr	r3, [pc, #4]	@ (801058c <__errno+0x8>)
 8010586:	6818      	ldr	r0, [r3, #0]
 8010588:	4770      	bx	lr
 801058a:	bf00      	nop
 801058c:	2000011c 	.word	0x2000011c

08010590 <__libc_init_array>:
 8010590:	b570      	push	{r4, r5, r6, lr}
 8010592:	4d0d      	ldr	r5, [pc, #52]	@ (80105c8 <__libc_init_array+0x38>)
 8010594:	4c0d      	ldr	r4, [pc, #52]	@ (80105cc <__libc_init_array+0x3c>)
 8010596:	1b64      	subs	r4, r4, r5
 8010598:	10a4      	asrs	r4, r4, #2
 801059a:	2600      	movs	r6, #0
 801059c:	42a6      	cmp	r6, r4
 801059e:	d109      	bne.n	80105b4 <__libc_init_array+0x24>
 80105a0:	4d0b      	ldr	r5, [pc, #44]	@ (80105d0 <__libc_init_array+0x40>)
 80105a2:	4c0c      	ldr	r4, [pc, #48]	@ (80105d4 <__libc_init_array+0x44>)
 80105a4:	f000 fc66 	bl	8010e74 <_init>
 80105a8:	1b64      	subs	r4, r4, r5
 80105aa:	10a4      	asrs	r4, r4, #2
 80105ac:	2600      	movs	r6, #0
 80105ae:	42a6      	cmp	r6, r4
 80105b0:	d105      	bne.n	80105be <__libc_init_array+0x2e>
 80105b2:	bd70      	pop	{r4, r5, r6, pc}
 80105b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80105b8:	4798      	blx	r3
 80105ba:	3601      	adds	r6, #1
 80105bc:	e7ee      	b.n	801059c <__libc_init_array+0xc>
 80105be:	f855 3b04 	ldr.w	r3, [r5], #4
 80105c2:	4798      	blx	r3
 80105c4:	3601      	adds	r6, #1
 80105c6:	e7f2      	b.n	80105ae <__libc_init_array+0x1e>
 80105c8:	0801217c 	.word	0x0801217c
 80105cc:	0801217c 	.word	0x0801217c
 80105d0:	0801217c 	.word	0x0801217c
 80105d4:	08012180 	.word	0x08012180

080105d8 <__retarget_lock_acquire_recursive>:
 80105d8:	4770      	bx	lr

080105da <__retarget_lock_release_recursive>:
 80105da:	4770      	bx	lr

080105dc <_free_r>:
 80105dc:	b538      	push	{r3, r4, r5, lr}
 80105de:	4605      	mov	r5, r0
 80105e0:	2900      	cmp	r1, #0
 80105e2:	d041      	beq.n	8010668 <_free_r+0x8c>
 80105e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80105e8:	1f0c      	subs	r4, r1, #4
 80105ea:	2b00      	cmp	r3, #0
 80105ec:	bfb8      	it	lt
 80105ee:	18e4      	addlt	r4, r4, r3
 80105f0:	f000 f8e0 	bl	80107b4 <__malloc_lock>
 80105f4:	4a1d      	ldr	r2, [pc, #116]	@ (801066c <_free_r+0x90>)
 80105f6:	6813      	ldr	r3, [r2, #0]
 80105f8:	b933      	cbnz	r3, 8010608 <_free_r+0x2c>
 80105fa:	6063      	str	r3, [r4, #4]
 80105fc:	6014      	str	r4, [r2, #0]
 80105fe:	4628      	mov	r0, r5
 8010600:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010604:	f000 b8dc 	b.w	80107c0 <__malloc_unlock>
 8010608:	42a3      	cmp	r3, r4
 801060a:	d908      	bls.n	801061e <_free_r+0x42>
 801060c:	6820      	ldr	r0, [r4, #0]
 801060e:	1821      	adds	r1, r4, r0
 8010610:	428b      	cmp	r3, r1
 8010612:	bf01      	itttt	eq
 8010614:	6819      	ldreq	r1, [r3, #0]
 8010616:	685b      	ldreq	r3, [r3, #4]
 8010618:	1809      	addeq	r1, r1, r0
 801061a:	6021      	streq	r1, [r4, #0]
 801061c:	e7ed      	b.n	80105fa <_free_r+0x1e>
 801061e:	461a      	mov	r2, r3
 8010620:	685b      	ldr	r3, [r3, #4]
 8010622:	b10b      	cbz	r3, 8010628 <_free_r+0x4c>
 8010624:	42a3      	cmp	r3, r4
 8010626:	d9fa      	bls.n	801061e <_free_r+0x42>
 8010628:	6811      	ldr	r1, [r2, #0]
 801062a:	1850      	adds	r0, r2, r1
 801062c:	42a0      	cmp	r0, r4
 801062e:	d10b      	bne.n	8010648 <_free_r+0x6c>
 8010630:	6820      	ldr	r0, [r4, #0]
 8010632:	4401      	add	r1, r0
 8010634:	1850      	adds	r0, r2, r1
 8010636:	4283      	cmp	r3, r0
 8010638:	6011      	str	r1, [r2, #0]
 801063a:	d1e0      	bne.n	80105fe <_free_r+0x22>
 801063c:	6818      	ldr	r0, [r3, #0]
 801063e:	685b      	ldr	r3, [r3, #4]
 8010640:	6053      	str	r3, [r2, #4]
 8010642:	4408      	add	r0, r1
 8010644:	6010      	str	r0, [r2, #0]
 8010646:	e7da      	b.n	80105fe <_free_r+0x22>
 8010648:	d902      	bls.n	8010650 <_free_r+0x74>
 801064a:	230c      	movs	r3, #12
 801064c:	602b      	str	r3, [r5, #0]
 801064e:	e7d6      	b.n	80105fe <_free_r+0x22>
 8010650:	6820      	ldr	r0, [r4, #0]
 8010652:	1821      	adds	r1, r4, r0
 8010654:	428b      	cmp	r3, r1
 8010656:	bf04      	itt	eq
 8010658:	6819      	ldreq	r1, [r3, #0]
 801065a:	685b      	ldreq	r3, [r3, #4]
 801065c:	6063      	str	r3, [r4, #4]
 801065e:	bf04      	itt	eq
 8010660:	1809      	addeq	r1, r1, r0
 8010662:	6021      	streq	r1, [r4, #0]
 8010664:	6054      	str	r4, [r2, #4]
 8010666:	e7ca      	b.n	80105fe <_free_r+0x22>
 8010668:	bd38      	pop	{r3, r4, r5, pc}
 801066a:	bf00      	nop
 801066c:	200019f4 	.word	0x200019f4

08010670 <sbrk_aligned>:
 8010670:	b570      	push	{r4, r5, r6, lr}
 8010672:	4e0f      	ldr	r6, [pc, #60]	@ (80106b0 <sbrk_aligned+0x40>)
 8010674:	460c      	mov	r4, r1
 8010676:	6831      	ldr	r1, [r6, #0]
 8010678:	4605      	mov	r5, r0
 801067a:	b911      	cbnz	r1, 8010682 <sbrk_aligned+0x12>
 801067c:	f000 fba6 	bl	8010dcc <_sbrk_r>
 8010680:	6030      	str	r0, [r6, #0]
 8010682:	4621      	mov	r1, r4
 8010684:	4628      	mov	r0, r5
 8010686:	f000 fba1 	bl	8010dcc <_sbrk_r>
 801068a:	1c43      	adds	r3, r0, #1
 801068c:	d103      	bne.n	8010696 <sbrk_aligned+0x26>
 801068e:	f04f 34ff 	mov.w	r4, #4294967295
 8010692:	4620      	mov	r0, r4
 8010694:	bd70      	pop	{r4, r5, r6, pc}
 8010696:	1cc4      	adds	r4, r0, #3
 8010698:	f024 0403 	bic.w	r4, r4, #3
 801069c:	42a0      	cmp	r0, r4
 801069e:	d0f8      	beq.n	8010692 <sbrk_aligned+0x22>
 80106a0:	1a21      	subs	r1, r4, r0
 80106a2:	4628      	mov	r0, r5
 80106a4:	f000 fb92 	bl	8010dcc <_sbrk_r>
 80106a8:	3001      	adds	r0, #1
 80106aa:	d1f2      	bne.n	8010692 <sbrk_aligned+0x22>
 80106ac:	e7ef      	b.n	801068e <sbrk_aligned+0x1e>
 80106ae:	bf00      	nop
 80106b0:	200019f0 	.word	0x200019f0

080106b4 <_malloc_r>:
 80106b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80106b8:	1ccd      	adds	r5, r1, #3
 80106ba:	f025 0503 	bic.w	r5, r5, #3
 80106be:	3508      	adds	r5, #8
 80106c0:	2d0c      	cmp	r5, #12
 80106c2:	bf38      	it	cc
 80106c4:	250c      	movcc	r5, #12
 80106c6:	2d00      	cmp	r5, #0
 80106c8:	4606      	mov	r6, r0
 80106ca:	db01      	blt.n	80106d0 <_malloc_r+0x1c>
 80106cc:	42a9      	cmp	r1, r5
 80106ce:	d904      	bls.n	80106da <_malloc_r+0x26>
 80106d0:	230c      	movs	r3, #12
 80106d2:	6033      	str	r3, [r6, #0]
 80106d4:	2000      	movs	r0, #0
 80106d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80106da:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80107b0 <_malloc_r+0xfc>
 80106de:	f000 f869 	bl	80107b4 <__malloc_lock>
 80106e2:	f8d8 3000 	ldr.w	r3, [r8]
 80106e6:	461c      	mov	r4, r3
 80106e8:	bb44      	cbnz	r4, 801073c <_malloc_r+0x88>
 80106ea:	4629      	mov	r1, r5
 80106ec:	4630      	mov	r0, r6
 80106ee:	f7ff ffbf 	bl	8010670 <sbrk_aligned>
 80106f2:	1c43      	adds	r3, r0, #1
 80106f4:	4604      	mov	r4, r0
 80106f6:	d158      	bne.n	80107aa <_malloc_r+0xf6>
 80106f8:	f8d8 4000 	ldr.w	r4, [r8]
 80106fc:	4627      	mov	r7, r4
 80106fe:	2f00      	cmp	r7, #0
 8010700:	d143      	bne.n	801078a <_malloc_r+0xd6>
 8010702:	2c00      	cmp	r4, #0
 8010704:	d04b      	beq.n	801079e <_malloc_r+0xea>
 8010706:	6823      	ldr	r3, [r4, #0]
 8010708:	4639      	mov	r1, r7
 801070a:	4630      	mov	r0, r6
 801070c:	eb04 0903 	add.w	r9, r4, r3
 8010710:	f000 fb5c 	bl	8010dcc <_sbrk_r>
 8010714:	4581      	cmp	r9, r0
 8010716:	d142      	bne.n	801079e <_malloc_r+0xea>
 8010718:	6821      	ldr	r1, [r4, #0]
 801071a:	1a6d      	subs	r5, r5, r1
 801071c:	4629      	mov	r1, r5
 801071e:	4630      	mov	r0, r6
 8010720:	f7ff ffa6 	bl	8010670 <sbrk_aligned>
 8010724:	3001      	adds	r0, #1
 8010726:	d03a      	beq.n	801079e <_malloc_r+0xea>
 8010728:	6823      	ldr	r3, [r4, #0]
 801072a:	442b      	add	r3, r5
 801072c:	6023      	str	r3, [r4, #0]
 801072e:	f8d8 3000 	ldr.w	r3, [r8]
 8010732:	685a      	ldr	r2, [r3, #4]
 8010734:	bb62      	cbnz	r2, 8010790 <_malloc_r+0xdc>
 8010736:	f8c8 7000 	str.w	r7, [r8]
 801073a:	e00f      	b.n	801075c <_malloc_r+0xa8>
 801073c:	6822      	ldr	r2, [r4, #0]
 801073e:	1b52      	subs	r2, r2, r5
 8010740:	d420      	bmi.n	8010784 <_malloc_r+0xd0>
 8010742:	2a0b      	cmp	r2, #11
 8010744:	d917      	bls.n	8010776 <_malloc_r+0xc2>
 8010746:	1961      	adds	r1, r4, r5
 8010748:	42a3      	cmp	r3, r4
 801074a:	6025      	str	r5, [r4, #0]
 801074c:	bf18      	it	ne
 801074e:	6059      	strne	r1, [r3, #4]
 8010750:	6863      	ldr	r3, [r4, #4]
 8010752:	bf08      	it	eq
 8010754:	f8c8 1000 	streq.w	r1, [r8]
 8010758:	5162      	str	r2, [r4, r5]
 801075a:	604b      	str	r3, [r1, #4]
 801075c:	4630      	mov	r0, r6
 801075e:	f000 f82f 	bl	80107c0 <__malloc_unlock>
 8010762:	f104 000b 	add.w	r0, r4, #11
 8010766:	1d23      	adds	r3, r4, #4
 8010768:	f020 0007 	bic.w	r0, r0, #7
 801076c:	1ac2      	subs	r2, r0, r3
 801076e:	bf1c      	itt	ne
 8010770:	1a1b      	subne	r3, r3, r0
 8010772:	50a3      	strne	r3, [r4, r2]
 8010774:	e7af      	b.n	80106d6 <_malloc_r+0x22>
 8010776:	6862      	ldr	r2, [r4, #4]
 8010778:	42a3      	cmp	r3, r4
 801077a:	bf0c      	ite	eq
 801077c:	f8c8 2000 	streq.w	r2, [r8]
 8010780:	605a      	strne	r2, [r3, #4]
 8010782:	e7eb      	b.n	801075c <_malloc_r+0xa8>
 8010784:	4623      	mov	r3, r4
 8010786:	6864      	ldr	r4, [r4, #4]
 8010788:	e7ae      	b.n	80106e8 <_malloc_r+0x34>
 801078a:	463c      	mov	r4, r7
 801078c:	687f      	ldr	r7, [r7, #4]
 801078e:	e7b6      	b.n	80106fe <_malloc_r+0x4a>
 8010790:	461a      	mov	r2, r3
 8010792:	685b      	ldr	r3, [r3, #4]
 8010794:	42a3      	cmp	r3, r4
 8010796:	d1fb      	bne.n	8010790 <_malloc_r+0xdc>
 8010798:	2300      	movs	r3, #0
 801079a:	6053      	str	r3, [r2, #4]
 801079c:	e7de      	b.n	801075c <_malloc_r+0xa8>
 801079e:	230c      	movs	r3, #12
 80107a0:	6033      	str	r3, [r6, #0]
 80107a2:	4630      	mov	r0, r6
 80107a4:	f000 f80c 	bl	80107c0 <__malloc_unlock>
 80107a8:	e794      	b.n	80106d4 <_malloc_r+0x20>
 80107aa:	6005      	str	r5, [r0, #0]
 80107ac:	e7d6      	b.n	801075c <_malloc_r+0xa8>
 80107ae:	bf00      	nop
 80107b0:	200019f4 	.word	0x200019f4

080107b4 <__malloc_lock>:
 80107b4:	4801      	ldr	r0, [pc, #4]	@ (80107bc <__malloc_lock+0x8>)
 80107b6:	f7ff bf0f 	b.w	80105d8 <__retarget_lock_acquire_recursive>
 80107ba:	bf00      	nop
 80107bc:	200019ec 	.word	0x200019ec

080107c0 <__malloc_unlock>:
 80107c0:	4801      	ldr	r0, [pc, #4]	@ (80107c8 <__malloc_unlock+0x8>)
 80107c2:	f7ff bf0a 	b.w	80105da <__retarget_lock_release_recursive>
 80107c6:	bf00      	nop
 80107c8:	200019ec 	.word	0x200019ec

080107cc <__ssputs_r>:
 80107cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80107d0:	688e      	ldr	r6, [r1, #8]
 80107d2:	461f      	mov	r7, r3
 80107d4:	42be      	cmp	r6, r7
 80107d6:	680b      	ldr	r3, [r1, #0]
 80107d8:	4682      	mov	sl, r0
 80107da:	460c      	mov	r4, r1
 80107dc:	4690      	mov	r8, r2
 80107de:	d82d      	bhi.n	801083c <__ssputs_r+0x70>
 80107e0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80107e4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80107e8:	d026      	beq.n	8010838 <__ssputs_r+0x6c>
 80107ea:	6965      	ldr	r5, [r4, #20]
 80107ec:	6909      	ldr	r1, [r1, #16]
 80107ee:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80107f2:	eba3 0901 	sub.w	r9, r3, r1
 80107f6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80107fa:	1c7b      	adds	r3, r7, #1
 80107fc:	444b      	add	r3, r9
 80107fe:	106d      	asrs	r5, r5, #1
 8010800:	429d      	cmp	r5, r3
 8010802:	bf38      	it	cc
 8010804:	461d      	movcc	r5, r3
 8010806:	0553      	lsls	r3, r2, #21
 8010808:	d527      	bpl.n	801085a <__ssputs_r+0x8e>
 801080a:	4629      	mov	r1, r5
 801080c:	f7ff ff52 	bl	80106b4 <_malloc_r>
 8010810:	4606      	mov	r6, r0
 8010812:	b360      	cbz	r0, 801086e <__ssputs_r+0xa2>
 8010814:	6921      	ldr	r1, [r4, #16]
 8010816:	464a      	mov	r2, r9
 8010818:	f000 fae8 	bl	8010dec <memcpy>
 801081c:	89a3      	ldrh	r3, [r4, #12]
 801081e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8010822:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010826:	81a3      	strh	r3, [r4, #12]
 8010828:	6126      	str	r6, [r4, #16]
 801082a:	6165      	str	r5, [r4, #20]
 801082c:	444e      	add	r6, r9
 801082e:	eba5 0509 	sub.w	r5, r5, r9
 8010832:	6026      	str	r6, [r4, #0]
 8010834:	60a5      	str	r5, [r4, #8]
 8010836:	463e      	mov	r6, r7
 8010838:	42be      	cmp	r6, r7
 801083a:	d900      	bls.n	801083e <__ssputs_r+0x72>
 801083c:	463e      	mov	r6, r7
 801083e:	6820      	ldr	r0, [r4, #0]
 8010840:	4632      	mov	r2, r6
 8010842:	4641      	mov	r1, r8
 8010844:	f000 faa8 	bl	8010d98 <memmove>
 8010848:	68a3      	ldr	r3, [r4, #8]
 801084a:	1b9b      	subs	r3, r3, r6
 801084c:	60a3      	str	r3, [r4, #8]
 801084e:	6823      	ldr	r3, [r4, #0]
 8010850:	4433      	add	r3, r6
 8010852:	6023      	str	r3, [r4, #0]
 8010854:	2000      	movs	r0, #0
 8010856:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801085a:	462a      	mov	r2, r5
 801085c:	f000 fad4 	bl	8010e08 <_realloc_r>
 8010860:	4606      	mov	r6, r0
 8010862:	2800      	cmp	r0, #0
 8010864:	d1e0      	bne.n	8010828 <__ssputs_r+0x5c>
 8010866:	6921      	ldr	r1, [r4, #16]
 8010868:	4650      	mov	r0, sl
 801086a:	f7ff feb7 	bl	80105dc <_free_r>
 801086e:	230c      	movs	r3, #12
 8010870:	f8ca 3000 	str.w	r3, [sl]
 8010874:	89a3      	ldrh	r3, [r4, #12]
 8010876:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801087a:	81a3      	strh	r3, [r4, #12]
 801087c:	f04f 30ff 	mov.w	r0, #4294967295
 8010880:	e7e9      	b.n	8010856 <__ssputs_r+0x8a>
	...

08010884 <_svfiprintf_r>:
 8010884:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010888:	4698      	mov	r8, r3
 801088a:	898b      	ldrh	r3, [r1, #12]
 801088c:	061b      	lsls	r3, r3, #24
 801088e:	b09d      	sub	sp, #116	@ 0x74
 8010890:	4607      	mov	r7, r0
 8010892:	460d      	mov	r5, r1
 8010894:	4614      	mov	r4, r2
 8010896:	d510      	bpl.n	80108ba <_svfiprintf_r+0x36>
 8010898:	690b      	ldr	r3, [r1, #16]
 801089a:	b973      	cbnz	r3, 80108ba <_svfiprintf_r+0x36>
 801089c:	2140      	movs	r1, #64	@ 0x40
 801089e:	f7ff ff09 	bl	80106b4 <_malloc_r>
 80108a2:	6028      	str	r0, [r5, #0]
 80108a4:	6128      	str	r0, [r5, #16]
 80108a6:	b930      	cbnz	r0, 80108b6 <_svfiprintf_r+0x32>
 80108a8:	230c      	movs	r3, #12
 80108aa:	603b      	str	r3, [r7, #0]
 80108ac:	f04f 30ff 	mov.w	r0, #4294967295
 80108b0:	b01d      	add	sp, #116	@ 0x74
 80108b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80108b6:	2340      	movs	r3, #64	@ 0x40
 80108b8:	616b      	str	r3, [r5, #20]
 80108ba:	2300      	movs	r3, #0
 80108bc:	9309      	str	r3, [sp, #36]	@ 0x24
 80108be:	2320      	movs	r3, #32
 80108c0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80108c4:	f8cd 800c 	str.w	r8, [sp, #12]
 80108c8:	2330      	movs	r3, #48	@ 0x30
 80108ca:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8010a68 <_svfiprintf_r+0x1e4>
 80108ce:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80108d2:	f04f 0901 	mov.w	r9, #1
 80108d6:	4623      	mov	r3, r4
 80108d8:	469a      	mov	sl, r3
 80108da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80108de:	b10a      	cbz	r2, 80108e4 <_svfiprintf_r+0x60>
 80108e0:	2a25      	cmp	r2, #37	@ 0x25
 80108e2:	d1f9      	bne.n	80108d8 <_svfiprintf_r+0x54>
 80108e4:	ebba 0b04 	subs.w	fp, sl, r4
 80108e8:	d00b      	beq.n	8010902 <_svfiprintf_r+0x7e>
 80108ea:	465b      	mov	r3, fp
 80108ec:	4622      	mov	r2, r4
 80108ee:	4629      	mov	r1, r5
 80108f0:	4638      	mov	r0, r7
 80108f2:	f7ff ff6b 	bl	80107cc <__ssputs_r>
 80108f6:	3001      	adds	r0, #1
 80108f8:	f000 80a7 	beq.w	8010a4a <_svfiprintf_r+0x1c6>
 80108fc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80108fe:	445a      	add	r2, fp
 8010900:	9209      	str	r2, [sp, #36]	@ 0x24
 8010902:	f89a 3000 	ldrb.w	r3, [sl]
 8010906:	2b00      	cmp	r3, #0
 8010908:	f000 809f 	beq.w	8010a4a <_svfiprintf_r+0x1c6>
 801090c:	2300      	movs	r3, #0
 801090e:	f04f 32ff 	mov.w	r2, #4294967295
 8010912:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010916:	f10a 0a01 	add.w	sl, sl, #1
 801091a:	9304      	str	r3, [sp, #16]
 801091c:	9307      	str	r3, [sp, #28]
 801091e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8010922:	931a      	str	r3, [sp, #104]	@ 0x68
 8010924:	4654      	mov	r4, sl
 8010926:	2205      	movs	r2, #5
 8010928:	f814 1b01 	ldrb.w	r1, [r4], #1
 801092c:	484e      	ldr	r0, [pc, #312]	@ (8010a68 <_svfiprintf_r+0x1e4>)
 801092e:	f7ef fc57 	bl	80001e0 <memchr>
 8010932:	9a04      	ldr	r2, [sp, #16]
 8010934:	b9d8      	cbnz	r0, 801096e <_svfiprintf_r+0xea>
 8010936:	06d0      	lsls	r0, r2, #27
 8010938:	bf44      	itt	mi
 801093a:	2320      	movmi	r3, #32
 801093c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010940:	0711      	lsls	r1, r2, #28
 8010942:	bf44      	itt	mi
 8010944:	232b      	movmi	r3, #43	@ 0x2b
 8010946:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801094a:	f89a 3000 	ldrb.w	r3, [sl]
 801094e:	2b2a      	cmp	r3, #42	@ 0x2a
 8010950:	d015      	beq.n	801097e <_svfiprintf_r+0xfa>
 8010952:	9a07      	ldr	r2, [sp, #28]
 8010954:	4654      	mov	r4, sl
 8010956:	2000      	movs	r0, #0
 8010958:	f04f 0c0a 	mov.w	ip, #10
 801095c:	4621      	mov	r1, r4
 801095e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010962:	3b30      	subs	r3, #48	@ 0x30
 8010964:	2b09      	cmp	r3, #9
 8010966:	d94b      	bls.n	8010a00 <_svfiprintf_r+0x17c>
 8010968:	b1b0      	cbz	r0, 8010998 <_svfiprintf_r+0x114>
 801096a:	9207      	str	r2, [sp, #28]
 801096c:	e014      	b.n	8010998 <_svfiprintf_r+0x114>
 801096e:	eba0 0308 	sub.w	r3, r0, r8
 8010972:	fa09 f303 	lsl.w	r3, r9, r3
 8010976:	4313      	orrs	r3, r2
 8010978:	9304      	str	r3, [sp, #16]
 801097a:	46a2      	mov	sl, r4
 801097c:	e7d2      	b.n	8010924 <_svfiprintf_r+0xa0>
 801097e:	9b03      	ldr	r3, [sp, #12]
 8010980:	1d19      	adds	r1, r3, #4
 8010982:	681b      	ldr	r3, [r3, #0]
 8010984:	9103      	str	r1, [sp, #12]
 8010986:	2b00      	cmp	r3, #0
 8010988:	bfbb      	ittet	lt
 801098a:	425b      	neglt	r3, r3
 801098c:	f042 0202 	orrlt.w	r2, r2, #2
 8010990:	9307      	strge	r3, [sp, #28]
 8010992:	9307      	strlt	r3, [sp, #28]
 8010994:	bfb8      	it	lt
 8010996:	9204      	strlt	r2, [sp, #16]
 8010998:	7823      	ldrb	r3, [r4, #0]
 801099a:	2b2e      	cmp	r3, #46	@ 0x2e
 801099c:	d10a      	bne.n	80109b4 <_svfiprintf_r+0x130>
 801099e:	7863      	ldrb	r3, [r4, #1]
 80109a0:	2b2a      	cmp	r3, #42	@ 0x2a
 80109a2:	d132      	bne.n	8010a0a <_svfiprintf_r+0x186>
 80109a4:	9b03      	ldr	r3, [sp, #12]
 80109a6:	1d1a      	adds	r2, r3, #4
 80109a8:	681b      	ldr	r3, [r3, #0]
 80109aa:	9203      	str	r2, [sp, #12]
 80109ac:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80109b0:	3402      	adds	r4, #2
 80109b2:	9305      	str	r3, [sp, #20]
 80109b4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8010a78 <_svfiprintf_r+0x1f4>
 80109b8:	7821      	ldrb	r1, [r4, #0]
 80109ba:	2203      	movs	r2, #3
 80109bc:	4650      	mov	r0, sl
 80109be:	f7ef fc0f 	bl	80001e0 <memchr>
 80109c2:	b138      	cbz	r0, 80109d4 <_svfiprintf_r+0x150>
 80109c4:	9b04      	ldr	r3, [sp, #16]
 80109c6:	eba0 000a 	sub.w	r0, r0, sl
 80109ca:	2240      	movs	r2, #64	@ 0x40
 80109cc:	4082      	lsls	r2, r0
 80109ce:	4313      	orrs	r3, r2
 80109d0:	3401      	adds	r4, #1
 80109d2:	9304      	str	r3, [sp, #16]
 80109d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80109d8:	4824      	ldr	r0, [pc, #144]	@ (8010a6c <_svfiprintf_r+0x1e8>)
 80109da:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80109de:	2206      	movs	r2, #6
 80109e0:	f7ef fbfe 	bl	80001e0 <memchr>
 80109e4:	2800      	cmp	r0, #0
 80109e6:	d036      	beq.n	8010a56 <_svfiprintf_r+0x1d2>
 80109e8:	4b21      	ldr	r3, [pc, #132]	@ (8010a70 <_svfiprintf_r+0x1ec>)
 80109ea:	bb1b      	cbnz	r3, 8010a34 <_svfiprintf_r+0x1b0>
 80109ec:	9b03      	ldr	r3, [sp, #12]
 80109ee:	3307      	adds	r3, #7
 80109f0:	f023 0307 	bic.w	r3, r3, #7
 80109f4:	3308      	adds	r3, #8
 80109f6:	9303      	str	r3, [sp, #12]
 80109f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80109fa:	4433      	add	r3, r6
 80109fc:	9309      	str	r3, [sp, #36]	@ 0x24
 80109fe:	e76a      	b.n	80108d6 <_svfiprintf_r+0x52>
 8010a00:	fb0c 3202 	mla	r2, ip, r2, r3
 8010a04:	460c      	mov	r4, r1
 8010a06:	2001      	movs	r0, #1
 8010a08:	e7a8      	b.n	801095c <_svfiprintf_r+0xd8>
 8010a0a:	2300      	movs	r3, #0
 8010a0c:	3401      	adds	r4, #1
 8010a0e:	9305      	str	r3, [sp, #20]
 8010a10:	4619      	mov	r1, r3
 8010a12:	f04f 0c0a 	mov.w	ip, #10
 8010a16:	4620      	mov	r0, r4
 8010a18:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010a1c:	3a30      	subs	r2, #48	@ 0x30
 8010a1e:	2a09      	cmp	r2, #9
 8010a20:	d903      	bls.n	8010a2a <_svfiprintf_r+0x1a6>
 8010a22:	2b00      	cmp	r3, #0
 8010a24:	d0c6      	beq.n	80109b4 <_svfiprintf_r+0x130>
 8010a26:	9105      	str	r1, [sp, #20]
 8010a28:	e7c4      	b.n	80109b4 <_svfiprintf_r+0x130>
 8010a2a:	fb0c 2101 	mla	r1, ip, r1, r2
 8010a2e:	4604      	mov	r4, r0
 8010a30:	2301      	movs	r3, #1
 8010a32:	e7f0      	b.n	8010a16 <_svfiprintf_r+0x192>
 8010a34:	ab03      	add	r3, sp, #12
 8010a36:	9300      	str	r3, [sp, #0]
 8010a38:	462a      	mov	r2, r5
 8010a3a:	4b0e      	ldr	r3, [pc, #56]	@ (8010a74 <_svfiprintf_r+0x1f0>)
 8010a3c:	a904      	add	r1, sp, #16
 8010a3e:	4638      	mov	r0, r7
 8010a40:	f3af 8000 	nop.w
 8010a44:	1c42      	adds	r2, r0, #1
 8010a46:	4606      	mov	r6, r0
 8010a48:	d1d6      	bne.n	80109f8 <_svfiprintf_r+0x174>
 8010a4a:	89ab      	ldrh	r3, [r5, #12]
 8010a4c:	065b      	lsls	r3, r3, #25
 8010a4e:	f53f af2d 	bmi.w	80108ac <_svfiprintf_r+0x28>
 8010a52:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010a54:	e72c      	b.n	80108b0 <_svfiprintf_r+0x2c>
 8010a56:	ab03      	add	r3, sp, #12
 8010a58:	9300      	str	r3, [sp, #0]
 8010a5a:	462a      	mov	r2, r5
 8010a5c:	4b05      	ldr	r3, [pc, #20]	@ (8010a74 <_svfiprintf_r+0x1f0>)
 8010a5e:	a904      	add	r1, sp, #16
 8010a60:	4638      	mov	r0, r7
 8010a62:	f000 f879 	bl	8010b58 <_printf_i>
 8010a66:	e7ed      	b.n	8010a44 <_svfiprintf_r+0x1c0>
 8010a68:	08012140 	.word	0x08012140
 8010a6c:	0801214a 	.word	0x0801214a
 8010a70:	00000000 	.word	0x00000000
 8010a74:	080107cd 	.word	0x080107cd
 8010a78:	08012146 	.word	0x08012146

08010a7c <_printf_common>:
 8010a7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010a80:	4616      	mov	r6, r2
 8010a82:	4698      	mov	r8, r3
 8010a84:	688a      	ldr	r2, [r1, #8]
 8010a86:	690b      	ldr	r3, [r1, #16]
 8010a88:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8010a8c:	4293      	cmp	r3, r2
 8010a8e:	bfb8      	it	lt
 8010a90:	4613      	movlt	r3, r2
 8010a92:	6033      	str	r3, [r6, #0]
 8010a94:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8010a98:	4607      	mov	r7, r0
 8010a9a:	460c      	mov	r4, r1
 8010a9c:	b10a      	cbz	r2, 8010aa2 <_printf_common+0x26>
 8010a9e:	3301      	adds	r3, #1
 8010aa0:	6033      	str	r3, [r6, #0]
 8010aa2:	6823      	ldr	r3, [r4, #0]
 8010aa4:	0699      	lsls	r1, r3, #26
 8010aa6:	bf42      	ittt	mi
 8010aa8:	6833      	ldrmi	r3, [r6, #0]
 8010aaa:	3302      	addmi	r3, #2
 8010aac:	6033      	strmi	r3, [r6, #0]
 8010aae:	6825      	ldr	r5, [r4, #0]
 8010ab0:	f015 0506 	ands.w	r5, r5, #6
 8010ab4:	d106      	bne.n	8010ac4 <_printf_common+0x48>
 8010ab6:	f104 0a19 	add.w	sl, r4, #25
 8010aba:	68e3      	ldr	r3, [r4, #12]
 8010abc:	6832      	ldr	r2, [r6, #0]
 8010abe:	1a9b      	subs	r3, r3, r2
 8010ac0:	42ab      	cmp	r3, r5
 8010ac2:	dc26      	bgt.n	8010b12 <_printf_common+0x96>
 8010ac4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8010ac8:	6822      	ldr	r2, [r4, #0]
 8010aca:	3b00      	subs	r3, #0
 8010acc:	bf18      	it	ne
 8010ace:	2301      	movne	r3, #1
 8010ad0:	0692      	lsls	r2, r2, #26
 8010ad2:	d42b      	bmi.n	8010b2c <_printf_common+0xb0>
 8010ad4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8010ad8:	4641      	mov	r1, r8
 8010ada:	4638      	mov	r0, r7
 8010adc:	47c8      	blx	r9
 8010ade:	3001      	adds	r0, #1
 8010ae0:	d01e      	beq.n	8010b20 <_printf_common+0xa4>
 8010ae2:	6823      	ldr	r3, [r4, #0]
 8010ae4:	6922      	ldr	r2, [r4, #16]
 8010ae6:	f003 0306 	and.w	r3, r3, #6
 8010aea:	2b04      	cmp	r3, #4
 8010aec:	bf02      	ittt	eq
 8010aee:	68e5      	ldreq	r5, [r4, #12]
 8010af0:	6833      	ldreq	r3, [r6, #0]
 8010af2:	1aed      	subeq	r5, r5, r3
 8010af4:	68a3      	ldr	r3, [r4, #8]
 8010af6:	bf0c      	ite	eq
 8010af8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010afc:	2500      	movne	r5, #0
 8010afe:	4293      	cmp	r3, r2
 8010b00:	bfc4      	itt	gt
 8010b02:	1a9b      	subgt	r3, r3, r2
 8010b04:	18ed      	addgt	r5, r5, r3
 8010b06:	2600      	movs	r6, #0
 8010b08:	341a      	adds	r4, #26
 8010b0a:	42b5      	cmp	r5, r6
 8010b0c:	d11a      	bne.n	8010b44 <_printf_common+0xc8>
 8010b0e:	2000      	movs	r0, #0
 8010b10:	e008      	b.n	8010b24 <_printf_common+0xa8>
 8010b12:	2301      	movs	r3, #1
 8010b14:	4652      	mov	r2, sl
 8010b16:	4641      	mov	r1, r8
 8010b18:	4638      	mov	r0, r7
 8010b1a:	47c8      	blx	r9
 8010b1c:	3001      	adds	r0, #1
 8010b1e:	d103      	bne.n	8010b28 <_printf_common+0xac>
 8010b20:	f04f 30ff 	mov.w	r0, #4294967295
 8010b24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010b28:	3501      	adds	r5, #1
 8010b2a:	e7c6      	b.n	8010aba <_printf_common+0x3e>
 8010b2c:	18e1      	adds	r1, r4, r3
 8010b2e:	1c5a      	adds	r2, r3, #1
 8010b30:	2030      	movs	r0, #48	@ 0x30
 8010b32:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8010b36:	4422      	add	r2, r4
 8010b38:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8010b3c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8010b40:	3302      	adds	r3, #2
 8010b42:	e7c7      	b.n	8010ad4 <_printf_common+0x58>
 8010b44:	2301      	movs	r3, #1
 8010b46:	4622      	mov	r2, r4
 8010b48:	4641      	mov	r1, r8
 8010b4a:	4638      	mov	r0, r7
 8010b4c:	47c8      	blx	r9
 8010b4e:	3001      	adds	r0, #1
 8010b50:	d0e6      	beq.n	8010b20 <_printf_common+0xa4>
 8010b52:	3601      	adds	r6, #1
 8010b54:	e7d9      	b.n	8010b0a <_printf_common+0x8e>
	...

08010b58 <_printf_i>:
 8010b58:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010b5c:	7e0f      	ldrb	r7, [r1, #24]
 8010b5e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8010b60:	2f78      	cmp	r7, #120	@ 0x78
 8010b62:	4691      	mov	r9, r2
 8010b64:	4680      	mov	r8, r0
 8010b66:	460c      	mov	r4, r1
 8010b68:	469a      	mov	sl, r3
 8010b6a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8010b6e:	d807      	bhi.n	8010b80 <_printf_i+0x28>
 8010b70:	2f62      	cmp	r7, #98	@ 0x62
 8010b72:	d80a      	bhi.n	8010b8a <_printf_i+0x32>
 8010b74:	2f00      	cmp	r7, #0
 8010b76:	f000 80d2 	beq.w	8010d1e <_printf_i+0x1c6>
 8010b7a:	2f58      	cmp	r7, #88	@ 0x58
 8010b7c:	f000 80b9 	beq.w	8010cf2 <_printf_i+0x19a>
 8010b80:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8010b84:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8010b88:	e03a      	b.n	8010c00 <_printf_i+0xa8>
 8010b8a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8010b8e:	2b15      	cmp	r3, #21
 8010b90:	d8f6      	bhi.n	8010b80 <_printf_i+0x28>
 8010b92:	a101      	add	r1, pc, #4	@ (adr r1, 8010b98 <_printf_i+0x40>)
 8010b94:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010b98:	08010bf1 	.word	0x08010bf1
 8010b9c:	08010c05 	.word	0x08010c05
 8010ba0:	08010b81 	.word	0x08010b81
 8010ba4:	08010b81 	.word	0x08010b81
 8010ba8:	08010b81 	.word	0x08010b81
 8010bac:	08010b81 	.word	0x08010b81
 8010bb0:	08010c05 	.word	0x08010c05
 8010bb4:	08010b81 	.word	0x08010b81
 8010bb8:	08010b81 	.word	0x08010b81
 8010bbc:	08010b81 	.word	0x08010b81
 8010bc0:	08010b81 	.word	0x08010b81
 8010bc4:	08010d05 	.word	0x08010d05
 8010bc8:	08010c2f 	.word	0x08010c2f
 8010bcc:	08010cbf 	.word	0x08010cbf
 8010bd0:	08010b81 	.word	0x08010b81
 8010bd4:	08010b81 	.word	0x08010b81
 8010bd8:	08010d27 	.word	0x08010d27
 8010bdc:	08010b81 	.word	0x08010b81
 8010be0:	08010c2f 	.word	0x08010c2f
 8010be4:	08010b81 	.word	0x08010b81
 8010be8:	08010b81 	.word	0x08010b81
 8010bec:	08010cc7 	.word	0x08010cc7
 8010bf0:	6833      	ldr	r3, [r6, #0]
 8010bf2:	1d1a      	adds	r2, r3, #4
 8010bf4:	681b      	ldr	r3, [r3, #0]
 8010bf6:	6032      	str	r2, [r6, #0]
 8010bf8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8010bfc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8010c00:	2301      	movs	r3, #1
 8010c02:	e09d      	b.n	8010d40 <_printf_i+0x1e8>
 8010c04:	6833      	ldr	r3, [r6, #0]
 8010c06:	6820      	ldr	r0, [r4, #0]
 8010c08:	1d19      	adds	r1, r3, #4
 8010c0a:	6031      	str	r1, [r6, #0]
 8010c0c:	0606      	lsls	r6, r0, #24
 8010c0e:	d501      	bpl.n	8010c14 <_printf_i+0xbc>
 8010c10:	681d      	ldr	r5, [r3, #0]
 8010c12:	e003      	b.n	8010c1c <_printf_i+0xc4>
 8010c14:	0645      	lsls	r5, r0, #25
 8010c16:	d5fb      	bpl.n	8010c10 <_printf_i+0xb8>
 8010c18:	f9b3 5000 	ldrsh.w	r5, [r3]
 8010c1c:	2d00      	cmp	r5, #0
 8010c1e:	da03      	bge.n	8010c28 <_printf_i+0xd0>
 8010c20:	232d      	movs	r3, #45	@ 0x2d
 8010c22:	426d      	negs	r5, r5
 8010c24:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010c28:	4859      	ldr	r0, [pc, #356]	@ (8010d90 <_printf_i+0x238>)
 8010c2a:	230a      	movs	r3, #10
 8010c2c:	e011      	b.n	8010c52 <_printf_i+0xfa>
 8010c2e:	6821      	ldr	r1, [r4, #0]
 8010c30:	6833      	ldr	r3, [r6, #0]
 8010c32:	0608      	lsls	r0, r1, #24
 8010c34:	f853 5b04 	ldr.w	r5, [r3], #4
 8010c38:	d402      	bmi.n	8010c40 <_printf_i+0xe8>
 8010c3a:	0649      	lsls	r1, r1, #25
 8010c3c:	bf48      	it	mi
 8010c3e:	b2ad      	uxthmi	r5, r5
 8010c40:	2f6f      	cmp	r7, #111	@ 0x6f
 8010c42:	4853      	ldr	r0, [pc, #332]	@ (8010d90 <_printf_i+0x238>)
 8010c44:	6033      	str	r3, [r6, #0]
 8010c46:	bf14      	ite	ne
 8010c48:	230a      	movne	r3, #10
 8010c4a:	2308      	moveq	r3, #8
 8010c4c:	2100      	movs	r1, #0
 8010c4e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8010c52:	6866      	ldr	r6, [r4, #4]
 8010c54:	60a6      	str	r6, [r4, #8]
 8010c56:	2e00      	cmp	r6, #0
 8010c58:	bfa2      	ittt	ge
 8010c5a:	6821      	ldrge	r1, [r4, #0]
 8010c5c:	f021 0104 	bicge.w	r1, r1, #4
 8010c60:	6021      	strge	r1, [r4, #0]
 8010c62:	b90d      	cbnz	r5, 8010c68 <_printf_i+0x110>
 8010c64:	2e00      	cmp	r6, #0
 8010c66:	d04b      	beq.n	8010d00 <_printf_i+0x1a8>
 8010c68:	4616      	mov	r6, r2
 8010c6a:	fbb5 f1f3 	udiv	r1, r5, r3
 8010c6e:	fb03 5711 	mls	r7, r3, r1, r5
 8010c72:	5dc7      	ldrb	r7, [r0, r7]
 8010c74:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8010c78:	462f      	mov	r7, r5
 8010c7a:	42bb      	cmp	r3, r7
 8010c7c:	460d      	mov	r5, r1
 8010c7e:	d9f4      	bls.n	8010c6a <_printf_i+0x112>
 8010c80:	2b08      	cmp	r3, #8
 8010c82:	d10b      	bne.n	8010c9c <_printf_i+0x144>
 8010c84:	6823      	ldr	r3, [r4, #0]
 8010c86:	07df      	lsls	r7, r3, #31
 8010c88:	d508      	bpl.n	8010c9c <_printf_i+0x144>
 8010c8a:	6923      	ldr	r3, [r4, #16]
 8010c8c:	6861      	ldr	r1, [r4, #4]
 8010c8e:	4299      	cmp	r1, r3
 8010c90:	bfde      	ittt	le
 8010c92:	2330      	movle	r3, #48	@ 0x30
 8010c94:	f806 3c01 	strble.w	r3, [r6, #-1]
 8010c98:	f106 36ff 	addle.w	r6, r6, #4294967295
 8010c9c:	1b92      	subs	r2, r2, r6
 8010c9e:	6122      	str	r2, [r4, #16]
 8010ca0:	f8cd a000 	str.w	sl, [sp]
 8010ca4:	464b      	mov	r3, r9
 8010ca6:	aa03      	add	r2, sp, #12
 8010ca8:	4621      	mov	r1, r4
 8010caa:	4640      	mov	r0, r8
 8010cac:	f7ff fee6 	bl	8010a7c <_printf_common>
 8010cb0:	3001      	adds	r0, #1
 8010cb2:	d14a      	bne.n	8010d4a <_printf_i+0x1f2>
 8010cb4:	f04f 30ff 	mov.w	r0, #4294967295
 8010cb8:	b004      	add	sp, #16
 8010cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010cbe:	6823      	ldr	r3, [r4, #0]
 8010cc0:	f043 0320 	orr.w	r3, r3, #32
 8010cc4:	6023      	str	r3, [r4, #0]
 8010cc6:	4833      	ldr	r0, [pc, #204]	@ (8010d94 <_printf_i+0x23c>)
 8010cc8:	2778      	movs	r7, #120	@ 0x78
 8010cca:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8010cce:	6823      	ldr	r3, [r4, #0]
 8010cd0:	6831      	ldr	r1, [r6, #0]
 8010cd2:	061f      	lsls	r7, r3, #24
 8010cd4:	f851 5b04 	ldr.w	r5, [r1], #4
 8010cd8:	d402      	bmi.n	8010ce0 <_printf_i+0x188>
 8010cda:	065f      	lsls	r7, r3, #25
 8010cdc:	bf48      	it	mi
 8010cde:	b2ad      	uxthmi	r5, r5
 8010ce0:	6031      	str	r1, [r6, #0]
 8010ce2:	07d9      	lsls	r1, r3, #31
 8010ce4:	bf44      	itt	mi
 8010ce6:	f043 0320 	orrmi.w	r3, r3, #32
 8010cea:	6023      	strmi	r3, [r4, #0]
 8010cec:	b11d      	cbz	r5, 8010cf6 <_printf_i+0x19e>
 8010cee:	2310      	movs	r3, #16
 8010cf0:	e7ac      	b.n	8010c4c <_printf_i+0xf4>
 8010cf2:	4827      	ldr	r0, [pc, #156]	@ (8010d90 <_printf_i+0x238>)
 8010cf4:	e7e9      	b.n	8010cca <_printf_i+0x172>
 8010cf6:	6823      	ldr	r3, [r4, #0]
 8010cf8:	f023 0320 	bic.w	r3, r3, #32
 8010cfc:	6023      	str	r3, [r4, #0]
 8010cfe:	e7f6      	b.n	8010cee <_printf_i+0x196>
 8010d00:	4616      	mov	r6, r2
 8010d02:	e7bd      	b.n	8010c80 <_printf_i+0x128>
 8010d04:	6833      	ldr	r3, [r6, #0]
 8010d06:	6825      	ldr	r5, [r4, #0]
 8010d08:	6961      	ldr	r1, [r4, #20]
 8010d0a:	1d18      	adds	r0, r3, #4
 8010d0c:	6030      	str	r0, [r6, #0]
 8010d0e:	062e      	lsls	r6, r5, #24
 8010d10:	681b      	ldr	r3, [r3, #0]
 8010d12:	d501      	bpl.n	8010d18 <_printf_i+0x1c0>
 8010d14:	6019      	str	r1, [r3, #0]
 8010d16:	e002      	b.n	8010d1e <_printf_i+0x1c6>
 8010d18:	0668      	lsls	r0, r5, #25
 8010d1a:	d5fb      	bpl.n	8010d14 <_printf_i+0x1bc>
 8010d1c:	8019      	strh	r1, [r3, #0]
 8010d1e:	2300      	movs	r3, #0
 8010d20:	6123      	str	r3, [r4, #16]
 8010d22:	4616      	mov	r6, r2
 8010d24:	e7bc      	b.n	8010ca0 <_printf_i+0x148>
 8010d26:	6833      	ldr	r3, [r6, #0]
 8010d28:	1d1a      	adds	r2, r3, #4
 8010d2a:	6032      	str	r2, [r6, #0]
 8010d2c:	681e      	ldr	r6, [r3, #0]
 8010d2e:	6862      	ldr	r2, [r4, #4]
 8010d30:	2100      	movs	r1, #0
 8010d32:	4630      	mov	r0, r6
 8010d34:	f7ef fa54 	bl	80001e0 <memchr>
 8010d38:	b108      	cbz	r0, 8010d3e <_printf_i+0x1e6>
 8010d3a:	1b80      	subs	r0, r0, r6
 8010d3c:	6060      	str	r0, [r4, #4]
 8010d3e:	6863      	ldr	r3, [r4, #4]
 8010d40:	6123      	str	r3, [r4, #16]
 8010d42:	2300      	movs	r3, #0
 8010d44:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010d48:	e7aa      	b.n	8010ca0 <_printf_i+0x148>
 8010d4a:	6923      	ldr	r3, [r4, #16]
 8010d4c:	4632      	mov	r2, r6
 8010d4e:	4649      	mov	r1, r9
 8010d50:	4640      	mov	r0, r8
 8010d52:	47d0      	blx	sl
 8010d54:	3001      	adds	r0, #1
 8010d56:	d0ad      	beq.n	8010cb4 <_printf_i+0x15c>
 8010d58:	6823      	ldr	r3, [r4, #0]
 8010d5a:	079b      	lsls	r3, r3, #30
 8010d5c:	d413      	bmi.n	8010d86 <_printf_i+0x22e>
 8010d5e:	68e0      	ldr	r0, [r4, #12]
 8010d60:	9b03      	ldr	r3, [sp, #12]
 8010d62:	4298      	cmp	r0, r3
 8010d64:	bfb8      	it	lt
 8010d66:	4618      	movlt	r0, r3
 8010d68:	e7a6      	b.n	8010cb8 <_printf_i+0x160>
 8010d6a:	2301      	movs	r3, #1
 8010d6c:	4632      	mov	r2, r6
 8010d6e:	4649      	mov	r1, r9
 8010d70:	4640      	mov	r0, r8
 8010d72:	47d0      	blx	sl
 8010d74:	3001      	adds	r0, #1
 8010d76:	d09d      	beq.n	8010cb4 <_printf_i+0x15c>
 8010d78:	3501      	adds	r5, #1
 8010d7a:	68e3      	ldr	r3, [r4, #12]
 8010d7c:	9903      	ldr	r1, [sp, #12]
 8010d7e:	1a5b      	subs	r3, r3, r1
 8010d80:	42ab      	cmp	r3, r5
 8010d82:	dcf2      	bgt.n	8010d6a <_printf_i+0x212>
 8010d84:	e7eb      	b.n	8010d5e <_printf_i+0x206>
 8010d86:	2500      	movs	r5, #0
 8010d88:	f104 0619 	add.w	r6, r4, #25
 8010d8c:	e7f5      	b.n	8010d7a <_printf_i+0x222>
 8010d8e:	bf00      	nop
 8010d90:	08012151 	.word	0x08012151
 8010d94:	08012162 	.word	0x08012162

08010d98 <memmove>:
 8010d98:	4288      	cmp	r0, r1
 8010d9a:	b510      	push	{r4, lr}
 8010d9c:	eb01 0402 	add.w	r4, r1, r2
 8010da0:	d902      	bls.n	8010da8 <memmove+0x10>
 8010da2:	4284      	cmp	r4, r0
 8010da4:	4623      	mov	r3, r4
 8010da6:	d807      	bhi.n	8010db8 <memmove+0x20>
 8010da8:	1e43      	subs	r3, r0, #1
 8010daa:	42a1      	cmp	r1, r4
 8010dac:	d008      	beq.n	8010dc0 <memmove+0x28>
 8010dae:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010db2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8010db6:	e7f8      	b.n	8010daa <memmove+0x12>
 8010db8:	4402      	add	r2, r0
 8010dba:	4601      	mov	r1, r0
 8010dbc:	428a      	cmp	r2, r1
 8010dbe:	d100      	bne.n	8010dc2 <memmove+0x2a>
 8010dc0:	bd10      	pop	{r4, pc}
 8010dc2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010dc6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8010dca:	e7f7      	b.n	8010dbc <memmove+0x24>

08010dcc <_sbrk_r>:
 8010dcc:	b538      	push	{r3, r4, r5, lr}
 8010dce:	4d06      	ldr	r5, [pc, #24]	@ (8010de8 <_sbrk_r+0x1c>)
 8010dd0:	2300      	movs	r3, #0
 8010dd2:	4604      	mov	r4, r0
 8010dd4:	4608      	mov	r0, r1
 8010dd6:	602b      	str	r3, [r5, #0]
 8010dd8:	f7f0 ffa0 	bl	8001d1c <_sbrk>
 8010ddc:	1c43      	adds	r3, r0, #1
 8010dde:	d102      	bne.n	8010de6 <_sbrk_r+0x1a>
 8010de0:	682b      	ldr	r3, [r5, #0]
 8010de2:	b103      	cbz	r3, 8010de6 <_sbrk_r+0x1a>
 8010de4:	6023      	str	r3, [r4, #0]
 8010de6:	bd38      	pop	{r3, r4, r5, pc}
 8010de8:	200019e8 	.word	0x200019e8

08010dec <memcpy>:
 8010dec:	440a      	add	r2, r1
 8010dee:	4291      	cmp	r1, r2
 8010df0:	f100 33ff 	add.w	r3, r0, #4294967295
 8010df4:	d100      	bne.n	8010df8 <memcpy+0xc>
 8010df6:	4770      	bx	lr
 8010df8:	b510      	push	{r4, lr}
 8010dfa:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010dfe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010e02:	4291      	cmp	r1, r2
 8010e04:	d1f9      	bne.n	8010dfa <memcpy+0xe>
 8010e06:	bd10      	pop	{r4, pc}

08010e08 <_realloc_r>:
 8010e08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010e0c:	4680      	mov	r8, r0
 8010e0e:	4615      	mov	r5, r2
 8010e10:	460c      	mov	r4, r1
 8010e12:	b921      	cbnz	r1, 8010e1e <_realloc_r+0x16>
 8010e14:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010e18:	4611      	mov	r1, r2
 8010e1a:	f7ff bc4b 	b.w	80106b4 <_malloc_r>
 8010e1e:	b92a      	cbnz	r2, 8010e2c <_realloc_r+0x24>
 8010e20:	f7ff fbdc 	bl	80105dc <_free_r>
 8010e24:	2400      	movs	r4, #0
 8010e26:	4620      	mov	r0, r4
 8010e28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010e2c:	f000 f81a 	bl	8010e64 <_malloc_usable_size_r>
 8010e30:	4285      	cmp	r5, r0
 8010e32:	4606      	mov	r6, r0
 8010e34:	d802      	bhi.n	8010e3c <_realloc_r+0x34>
 8010e36:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8010e3a:	d8f4      	bhi.n	8010e26 <_realloc_r+0x1e>
 8010e3c:	4629      	mov	r1, r5
 8010e3e:	4640      	mov	r0, r8
 8010e40:	f7ff fc38 	bl	80106b4 <_malloc_r>
 8010e44:	4607      	mov	r7, r0
 8010e46:	2800      	cmp	r0, #0
 8010e48:	d0ec      	beq.n	8010e24 <_realloc_r+0x1c>
 8010e4a:	42b5      	cmp	r5, r6
 8010e4c:	462a      	mov	r2, r5
 8010e4e:	4621      	mov	r1, r4
 8010e50:	bf28      	it	cs
 8010e52:	4632      	movcs	r2, r6
 8010e54:	f7ff ffca 	bl	8010dec <memcpy>
 8010e58:	4621      	mov	r1, r4
 8010e5a:	4640      	mov	r0, r8
 8010e5c:	f7ff fbbe 	bl	80105dc <_free_r>
 8010e60:	463c      	mov	r4, r7
 8010e62:	e7e0      	b.n	8010e26 <_realloc_r+0x1e>

08010e64 <_malloc_usable_size_r>:
 8010e64:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010e68:	1f18      	subs	r0, r3, #4
 8010e6a:	2b00      	cmp	r3, #0
 8010e6c:	bfbc      	itt	lt
 8010e6e:	580b      	ldrlt	r3, [r1, r0]
 8010e70:	18c0      	addlt	r0, r0, r3
 8010e72:	4770      	bx	lr

08010e74 <_init>:
 8010e74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010e76:	bf00      	nop
 8010e78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010e7a:	bc08      	pop	{r3}
 8010e7c:	469e      	mov	lr, r3
 8010e7e:	4770      	bx	lr

08010e80 <_fini>:
 8010e80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010e82:	bf00      	nop
 8010e84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010e86:	bc08      	pop	{r3}
 8010e88:	469e      	mov	lr, r3
 8010e8a:	4770      	bx	lr
