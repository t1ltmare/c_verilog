
RTC_clock.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000412c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000dc8  080042cc  080042cc  000052cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005094  08005094  00007064  2**0
                  CONTENTS
  4 .ARM          00000008  08005094  08005094  00006094  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800509c  0800509c  00007064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800509c  0800509c  0000609c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080050a0  080050a0  000060a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000064  20000000  080050a4  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000650  20000064  08005108  00007064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200006b4  08005108  000076b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007064  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cd8f  00000000  00000000  00007094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f09  00000000  00000000  00013e23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ba0  00000000  00000000  00015d30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000912  00000000  00000000  000168d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016f83  00000000  00000000  000171e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f6a1  00000000  00000000  0002e165  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008e6f2  00000000  00000000  0003d806  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cbef8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003540  00000000  00000000  000cbf3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000059  00000000  00000000  000cf47c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000064 	.word	0x20000064
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080042b4 	.word	0x080042b4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000068 	.word	0x20000068
 80001dc:	080042b4 	.word	0x080042b4

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <get_time_date>:
		Error_Handler();
	}
}

void get_time_date(char *time, char *date)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b08a      	sub	sp, #40	@ 0x28
 8000574:	af02      	add	r7, sp, #8
 8000576:	6078      	str	r0, [r7, #4]
 8000578:	6039      	str	r1, [r7, #0]
  RTC_DateTypeDef gDate;
  RTC_TimeTypeDef gTime;

  /* Get the RTC current Time */
  HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BIN);
 800057a:	f107 0308 	add.w	r3, r7, #8
 800057e:	2200      	movs	r2, #0
 8000580:	4619      	mov	r1, r3
 8000582:	4813      	ldr	r0, [pc, #76]	@ (80005d0 <get_time_date+0x60>)
 8000584:	f002 fd43 	bl	800300e <HAL_RTC_GetTime>
  /* Get the RTC current Date */
  HAL_RTC_GetDate(&hrtc, &gDate, RTC_FORMAT_BIN);
 8000588:	f107 031c 	add.w	r3, r7, #28
 800058c:	2200      	movs	r2, #0
 800058e:	4619      	mov	r1, r3
 8000590:	480f      	ldr	r0, [pc, #60]	@ (80005d0 <get_time_date+0x60>)
 8000592:	f002 fe1e 	bl	80031d2 <HAL_RTC_GetDate>

  /* Display time Format: hh:mm:ss */
  sprintf((char*)time,"%02d:%02d:%02d",gTime.Hours, gTime.Minutes, gTime.Seconds);
 8000596:	7a3b      	ldrb	r3, [r7, #8]
 8000598:	461a      	mov	r2, r3
 800059a:	7a7b      	ldrb	r3, [r7, #9]
 800059c:	4619      	mov	r1, r3
 800059e:	7abb      	ldrb	r3, [r7, #10]
 80005a0:	9300      	str	r3, [sp, #0]
 80005a2:	460b      	mov	r3, r1
 80005a4:	490b      	ldr	r1, [pc, #44]	@ (80005d4 <get_time_date+0x64>)
 80005a6:	6878      	ldr	r0, [r7, #4]
 80005a8:	f003 f9e4 	bl	8003974 <siprintf>

  /* Display date Format: dd-mm-yyyy */
  sprintf((char*)date,"%02d-%02d-%2d",gDate.Date, gDate.Month, 2000 + gDate.Year);
 80005ac:	7fbb      	ldrb	r3, [r7, #30]
 80005ae:	461a      	mov	r2, r3
 80005b0:	7f7b      	ldrb	r3, [r7, #29]
 80005b2:	4619      	mov	r1, r3
 80005b4:	7ffb      	ldrb	r3, [r7, #31]
 80005b6:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 80005ba:	9300      	str	r3, [sp, #0]
 80005bc:	460b      	mov	r3, r1
 80005be:	4906      	ldr	r1, [pc, #24]	@ (80005d8 <get_time_date+0x68>)
 80005c0:	6838      	ldr	r0, [r7, #0]
 80005c2:	f003 f9d7 	bl	8003974 <siprintf>
}
 80005c6:	bf00      	nop
 80005c8:	3720      	adds	r7, #32
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	bf00      	nop
 80005d0:	200000d4 	.word	0x200000d4
 80005d4:	080042cc 	.word	0x080042cc
 80005d8:	080042dc 	.word	0x080042dc

080005dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005e0:	f000 fde4 	bl	80011ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e4:	f000 f830 	bl	8000648 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005e8:	f000 f94a 	bl	8000880 <MX_GPIO_Init>
  MX_RTC_Init();
 80005ec:	f000 f8c4 	bl	8000778 <MX_RTC_Init>
  MX_USART1_UART_Init();
 80005f0:	f000 f91c 	bl	800082c <MX_USART1_UART_Init>
  MX_I2C1_Init();
 80005f4:	f000 f892 	bl	800071c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  SSD1306_Init();
 80005f8:	f000 f98c 	bl	8000914 <SSD1306_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  SSD1306_Clear();
 80005fc:	f000 fbad 	bl	8000d5a <SSD1306_Clear>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  get_time_date(timeData, dateData);
 8000600:	490e      	ldr	r1, [pc, #56]	@ (800063c <main+0x60>)
 8000602:	480f      	ldr	r0, [pc, #60]	@ (8000640 <main+0x64>)
 8000604:	f7ff ffb4 	bl	8000570 <get_time_date>
	  SSD1306_GotoXY(0,0);
 8000608:	2100      	movs	r1, #0
 800060a:	2000      	movs	r0, #0
 800060c:	f000 faec 	bl	8000be8 <SSD1306_GotoXY>
	  SSD1306_Puts(timeData, &Font_11x18, 1);  //доступные шрифты Font_7x10, Font_11x18, Font_16x26
 8000610:	2201      	movs	r2, #1
 8000612:	490c      	ldr	r1, [pc, #48]	@ (8000644 <main+0x68>)
 8000614:	480a      	ldr	r0, [pc, #40]	@ (8000640 <main+0x64>)
 8000616:	f000 fb7b 	bl	8000d10 <SSD1306_Puts>
	  SSD1306_GotoXY(0,40);
 800061a:	2128      	movs	r1, #40	@ 0x28
 800061c:	2000      	movs	r0, #0
 800061e:	f000 fae3 	bl	8000be8 <SSD1306_GotoXY>
	  SSD1306_Puts(dateData, &Font_11x18, 1);
 8000622:	2201      	movs	r2, #1
 8000624:	4907      	ldr	r1, [pc, #28]	@ (8000644 <main+0x68>)
 8000626:	4805      	ldr	r0, [pc, #20]	@ (800063c <main+0x60>)
 8000628:	f000 fb72 	bl	8000d10 <SSD1306_Puts>
	  HAL_Delay(1000);
 800062c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000630:	f000 fe2e 	bl	8001290 <HAL_Delay>
	  SSD1306_UpdateScreen();
 8000634:	f000 fa32 	bl	8000a9c <SSD1306_UpdateScreen>
	  get_time_date(timeData, dateData);
 8000638:	bf00      	nop
 800063a:	e7e1      	b.n	8000600 <main+0x24>
 800063c:	2000014c 	.word	0x2000014c
 8000640:	2000013c 	.word	0x2000013c
 8000644:	20000000 	.word	0x20000000

08000648 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b094      	sub	sp, #80	@ 0x50
 800064c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800064e:	f107 0320 	add.w	r3, r7, #32
 8000652:	2230      	movs	r2, #48	@ 0x30
 8000654:	2100      	movs	r1, #0
 8000656:	4618      	mov	r0, r3
 8000658:	f003 f9ac 	bl	80039b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800065c:	f107 030c 	add.w	r3, r7, #12
 8000660:	2200      	movs	r2, #0
 8000662:	601a      	str	r2, [r3, #0]
 8000664:	605a      	str	r2, [r3, #4]
 8000666:	609a      	str	r2, [r3, #8]
 8000668:	60da      	str	r2, [r3, #12]
 800066a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800066c:	2300      	movs	r3, #0
 800066e:	60bb      	str	r3, [r7, #8]
 8000670:	4b28      	ldr	r3, [pc, #160]	@ (8000714 <SystemClock_Config+0xcc>)
 8000672:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000674:	4a27      	ldr	r2, [pc, #156]	@ (8000714 <SystemClock_Config+0xcc>)
 8000676:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800067a:	6413      	str	r3, [r2, #64]	@ 0x40
 800067c:	4b25      	ldr	r3, [pc, #148]	@ (8000714 <SystemClock_Config+0xcc>)
 800067e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000680:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000684:	60bb      	str	r3, [r7, #8]
 8000686:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000688:	2300      	movs	r3, #0
 800068a:	607b      	str	r3, [r7, #4]
 800068c:	4b22      	ldr	r3, [pc, #136]	@ (8000718 <SystemClock_Config+0xd0>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	4a21      	ldr	r2, [pc, #132]	@ (8000718 <SystemClock_Config+0xd0>)
 8000692:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000696:	6013      	str	r3, [r2, #0]
 8000698:	4b1f      	ldr	r3, [pc, #124]	@ (8000718 <SystemClock_Config+0xd0>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006a0:	607b      	str	r3, [r7, #4]
 80006a2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 80006a4:	2306      	movs	r3, #6
 80006a6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80006a8:	2301      	movs	r3, #1
 80006aa:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006ac:	2301      	movs	r3, #1
 80006ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006b0:	2310      	movs	r3, #16
 80006b2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006b4:	2302      	movs	r3, #2
 80006b6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006b8:	2300      	movs	r3, #0
 80006ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006bc:	2308      	movs	r3, #8
 80006be:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 80006c0:	2364      	movs	r3, #100	@ 0x64
 80006c2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006c4:	2302      	movs	r3, #2
 80006c6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006c8:	2304      	movs	r3, #4
 80006ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006cc:	f107 0320 	add.w	r3, r7, #32
 80006d0:	4618      	mov	r0, r3
 80006d2:	f001 fe37 	bl	8002344 <HAL_RCC_OscConfig>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80006dc:	f000 f914 	bl	8000908 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006e0:	230f      	movs	r3, #15
 80006e2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006e4:	2302      	movs	r3, #2
 80006e6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006e8:	2300      	movs	r3, #0
 80006ea:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006ec:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006f0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006f2:	2300      	movs	r3, #0
 80006f4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80006f6:	f107 030c 	add.w	r3, r7, #12
 80006fa:	2103      	movs	r1, #3
 80006fc:	4618      	mov	r0, r3
 80006fe:	f002 f899 	bl	8002834 <HAL_RCC_ClockConfig>
 8000702:	4603      	mov	r3, r0
 8000704:	2b00      	cmp	r3, #0
 8000706:	d001      	beq.n	800070c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000708:	f000 f8fe 	bl	8000908 <Error_Handler>
  }
}
 800070c:	bf00      	nop
 800070e:	3750      	adds	r7, #80	@ 0x50
 8000710:	46bd      	mov	sp, r7
 8000712:	bd80      	pop	{r7, pc}
 8000714:	40023800 	.word	0x40023800
 8000718:	40007000 	.word	0x40007000

0800071c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000720:	4b12      	ldr	r3, [pc, #72]	@ (800076c <MX_I2C1_Init+0x50>)
 8000722:	4a13      	ldr	r2, [pc, #76]	@ (8000770 <MX_I2C1_Init+0x54>)
 8000724:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000726:	4b11      	ldr	r3, [pc, #68]	@ (800076c <MX_I2C1_Init+0x50>)
 8000728:	4a12      	ldr	r2, [pc, #72]	@ (8000774 <MX_I2C1_Init+0x58>)
 800072a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800072c:	4b0f      	ldr	r3, [pc, #60]	@ (800076c <MX_I2C1_Init+0x50>)
 800072e:	2200      	movs	r2, #0
 8000730:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000732:	4b0e      	ldr	r3, [pc, #56]	@ (800076c <MX_I2C1_Init+0x50>)
 8000734:	2200      	movs	r2, #0
 8000736:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000738:	4b0c      	ldr	r3, [pc, #48]	@ (800076c <MX_I2C1_Init+0x50>)
 800073a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800073e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000740:	4b0a      	ldr	r3, [pc, #40]	@ (800076c <MX_I2C1_Init+0x50>)
 8000742:	2200      	movs	r2, #0
 8000744:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000746:	4b09      	ldr	r3, [pc, #36]	@ (800076c <MX_I2C1_Init+0x50>)
 8000748:	2200      	movs	r2, #0
 800074a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800074c:	4b07      	ldr	r3, [pc, #28]	@ (800076c <MX_I2C1_Init+0x50>)
 800074e:	2200      	movs	r2, #0
 8000750:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000752:	4b06      	ldr	r3, [pc, #24]	@ (800076c <MX_I2C1_Init+0x50>)
 8000754:	2200      	movs	r2, #0
 8000756:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000758:	4804      	ldr	r0, [pc, #16]	@ (800076c <MX_I2C1_Init+0x50>)
 800075a:	f001 f827 	bl	80017ac <HAL_I2C_Init>
 800075e:	4603      	mov	r3, r0
 8000760:	2b00      	cmp	r3, #0
 8000762:	d001      	beq.n	8000768 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000764:	f000 f8d0 	bl	8000908 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000768:	bf00      	nop
 800076a:	bd80      	pop	{r7, pc}
 800076c:	20000080 	.word	0x20000080
 8000770:	40005400 	.word	0x40005400
 8000774:	00061a80 	.word	0x00061a80

08000778 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b086      	sub	sp, #24
 800077c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800077e:	1d3b      	adds	r3, r7, #4
 8000780:	2200      	movs	r2, #0
 8000782:	601a      	str	r2, [r3, #0]
 8000784:	605a      	str	r2, [r3, #4]
 8000786:	609a      	str	r2, [r3, #8]
 8000788:	60da      	str	r2, [r3, #12]
 800078a:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 800078c:	2300      	movs	r3, #0
 800078e:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000790:	4b24      	ldr	r3, [pc, #144]	@ (8000824 <MX_RTC_Init+0xac>)
 8000792:	4a25      	ldr	r2, [pc, #148]	@ (8000828 <MX_RTC_Init+0xb0>)
 8000794:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000796:	4b23      	ldr	r3, [pc, #140]	@ (8000824 <MX_RTC_Init+0xac>)
 8000798:	2200      	movs	r2, #0
 800079a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800079c:	4b21      	ldr	r3, [pc, #132]	@ (8000824 <MX_RTC_Init+0xac>)
 800079e:	227f      	movs	r2, #127	@ 0x7f
 80007a0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80007a2:	4b20      	ldr	r3, [pc, #128]	@ (8000824 <MX_RTC_Init+0xac>)
 80007a4:	22ff      	movs	r2, #255	@ 0xff
 80007a6:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80007a8:	4b1e      	ldr	r3, [pc, #120]	@ (8000824 <MX_RTC_Init+0xac>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80007ae:	4b1d      	ldr	r3, [pc, #116]	@ (8000824 <MX_RTC_Init+0xac>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80007b4:	4b1b      	ldr	r3, [pc, #108]	@ (8000824 <MX_RTC_Init+0xac>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80007ba:	481a      	ldr	r0, [pc, #104]	@ (8000824 <MX_RTC_Init+0xac>)
 80007bc:	f002 fb0a 	bl	8002dd4 <HAL_RTC_Init>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d001      	beq.n	80007ca <MX_RTC_Init+0x52>
  {
    Error_Handler();
 80007c6:	f000 f89f 	bl	8000908 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x17;
 80007ca:	2317      	movs	r3, #23
 80007cc:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x44;
 80007ce:	2344      	movs	r3, #68	@ 0x44
 80007d0:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 80007d2:	2300      	movs	r3, #0
 80007d4:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80007d6:	2300      	movs	r3, #0
 80007d8:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80007da:	2300      	movs	r3, #0
 80007dc:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80007de:	1d3b      	adds	r3, r7, #4
 80007e0:	2201      	movs	r2, #1
 80007e2:	4619      	mov	r1, r3
 80007e4:	480f      	ldr	r0, [pc, #60]	@ (8000824 <MX_RTC_Init+0xac>)
 80007e6:	f002 fb78 	bl	8002eda <HAL_RTC_SetTime>
 80007ea:	4603      	mov	r3, r0
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d001      	beq.n	80007f4 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 80007f0:	f000 f88a 	bl	8000908 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_FRIDAY;
 80007f4:	2305      	movs	r3, #5
 80007f6:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_SEPTEMBER;
 80007f8:	2309      	movs	r3, #9
 80007fa:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x6;
 80007fc:	2306      	movs	r3, #6
 80007fe:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x24;
 8000800:	2324      	movs	r3, #36	@ 0x24
 8000802:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000804:	463b      	mov	r3, r7
 8000806:	2201      	movs	r2, #1
 8000808:	4619      	mov	r1, r3
 800080a:	4806      	ldr	r0, [pc, #24]	@ (8000824 <MX_RTC_Init+0xac>)
 800080c:	f002 fc5d 	bl	80030ca <HAL_RTC_SetDate>
 8000810:	4603      	mov	r3, r0
 8000812:	2b00      	cmp	r3, #0
 8000814:	d001      	beq.n	800081a <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8000816:	f000 f877 	bl	8000908 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800081a:	bf00      	nop
 800081c:	3718      	adds	r7, #24
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	200000d4 	.word	0x200000d4
 8000828:	40002800 	.word	0x40002800

0800082c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000830:	4b11      	ldr	r3, [pc, #68]	@ (8000878 <MX_USART1_UART_Init+0x4c>)
 8000832:	4a12      	ldr	r2, [pc, #72]	@ (800087c <MX_USART1_UART_Init+0x50>)
 8000834:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000836:	4b10      	ldr	r3, [pc, #64]	@ (8000878 <MX_USART1_UART_Init+0x4c>)
 8000838:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800083c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800083e:	4b0e      	ldr	r3, [pc, #56]	@ (8000878 <MX_USART1_UART_Init+0x4c>)
 8000840:	2200      	movs	r2, #0
 8000842:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000844:	4b0c      	ldr	r3, [pc, #48]	@ (8000878 <MX_USART1_UART_Init+0x4c>)
 8000846:	2200      	movs	r2, #0
 8000848:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800084a:	4b0b      	ldr	r3, [pc, #44]	@ (8000878 <MX_USART1_UART_Init+0x4c>)
 800084c:	2200      	movs	r2, #0
 800084e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000850:	4b09      	ldr	r3, [pc, #36]	@ (8000878 <MX_USART1_UART_Init+0x4c>)
 8000852:	220c      	movs	r2, #12
 8000854:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000856:	4b08      	ldr	r3, [pc, #32]	@ (8000878 <MX_USART1_UART_Init+0x4c>)
 8000858:	2200      	movs	r2, #0
 800085a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800085c:	4b06      	ldr	r3, [pc, #24]	@ (8000878 <MX_USART1_UART_Init+0x4c>)
 800085e:	2200      	movs	r2, #0
 8000860:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000862:	4805      	ldr	r0, [pc, #20]	@ (8000878 <MX_USART1_UART_Init+0x4c>)
 8000864:	f002 fdc2 	bl	80033ec <HAL_UART_Init>
 8000868:	4603      	mov	r3, r0
 800086a:	2b00      	cmp	r3, #0
 800086c:	d001      	beq.n	8000872 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800086e:	f000 f84b 	bl	8000908 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000872:	bf00      	nop
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	200000f4 	.word	0x200000f4
 800087c:	40011000 	.word	0x40011000

08000880 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000880:	b480      	push	{r7}
 8000882:	b085      	sub	sp, #20
 8000884:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000886:	2300      	movs	r3, #0
 8000888:	60fb      	str	r3, [r7, #12]
 800088a:	4b1e      	ldr	r3, [pc, #120]	@ (8000904 <MX_GPIO_Init+0x84>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800088e:	4a1d      	ldr	r2, [pc, #116]	@ (8000904 <MX_GPIO_Init+0x84>)
 8000890:	f043 0304 	orr.w	r3, r3, #4
 8000894:	6313      	str	r3, [r2, #48]	@ 0x30
 8000896:	4b1b      	ldr	r3, [pc, #108]	@ (8000904 <MX_GPIO_Init+0x84>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800089a:	f003 0304 	and.w	r3, r3, #4
 800089e:	60fb      	str	r3, [r7, #12]
 80008a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008a2:	2300      	movs	r3, #0
 80008a4:	60bb      	str	r3, [r7, #8]
 80008a6:	4b17      	ldr	r3, [pc, #92]	@ (8000904 <MX_GPIO_Init+0x84>)
 80008a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008aa:	4a16      	ldr	r2, [pc, #88]	@ (8000904 <MX_GPIO_Init+0x84>)
 80008ac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80008b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80008b2:	4b14      	ldr	r3, [pc, #80]	@ (8000904 <MX_GPIO_Init+0x84>)
 80008b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80008ba:	60bb      	str	r3, [r7, #8]
 80008bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008be:	2300      	movs	r3, #0
 80008c0:	607b      	str	r3, [r7, #4]
 80008c2:	4b10      	ldr	r3, [pc, #64]	@ (8000904 <MX_GPIO_Init+0x84>)
 80008c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008c6:	4a0f      	ldr	r2, [pc, #60]	@ (8000904 <MX_GPIO_Init+0x84>)
 80008c8:	f043 0301 	orr.w	r3, r3, #1
 80008cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80008ce:	4b0d      	ldr	r3, [pc, #52]	@ (8000904 <MX_GPIO_Init+0x84>)
 80008d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008d2:	f003 0301 	and.w	r3, r3, #1
 80008d6:	607b      	str	r3, [r7, #4]
 80008d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008da:	2300      	movs	r3, #0
 80008dc:	603b      	str	r3, [r7, #0]
 80008de:	4b09      	ldr	r3, [pc, #36]	@ (8000904 <MX_GPIO_Init+0x84>)
 80008e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008e2:	4a08      	ldr	r2, [pc, #32]	@ (8000904 <MX_GPIO_Init+0x84>)
 80008e4:	f043 0302 	orr.w	r3, r3, #2
 80008e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80008ea:	4b06      	ldr	r3, [pc, #24]	@ (8000904 <MX_GPIO_Init+0x84>)
 80008ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ee:	f003 0302 	and.w	r3, r3, #2
 80008f2:	603b      	str	r3, [r7, #0]
 80008f4:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008f6:	bf00      	nop
 80008f8:	3714      	adds	r7, #20
 80008fa:	46bd      	mov	sp, r7
 80008fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000900:	4770      	bx	lr
 8000902:	bf00      	nop
 8000904:	40023800 	.word	0x40023800

08000908 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000908:	b480      	push	{r7}
 800090a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800090c:	b672      	cpsid	i
}
 800090e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000910:	bf00      	nop
 8000912:	e7fd      	b.n	8000910 <Error_Handler+0x8>

08000914 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8000914:	b580      	push	{r7, lr}
 8000916:	b082      	sub	sp, #8
 8000918:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 800091a:	f000 fa27 	bl	8000d6c <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 800091e:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8000922:	2201      	movs	r2, #1
 8000924:	2178      	movs	r1, #120	@ 0x78
 8000926:	485b      	ldr	r0, [pc, #364]	@ (8000a94 <SSD1306_Init+0x180>)
 8000928:	f001 f982 	bl	8001c30 <HAL_I2C_IsDeviceReady>
 800092c:	4603      	mov	r3, r0
 800092e:	2b00      	cmp	r3, #0
 8000930:	d001      	beq.n	8000936 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8000932:	2300      	movs	r3, #0
 8000934:	e0a9      	b.n	8000a8a <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 8000936:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 800093a:	607b      	str	r3, [r7, #4]
	while(p>0)
 800093c:	e002      	b.n	8000944 <SSD1306_Init+0x30>
		p--;
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	3b01      	subs	r3, #1
 8000942:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	2b00      	cmp	r3, #0
 8000948:	d1f9      	bne.n	800093e <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 800094a:	22ae      	movs	r2, #174	@ 0xae
 800094c:	2100      	movs	r1, #0
 800094e:	2078      	movs	r0, #120	@ 0x78
 8000950:	f000 fa88 	bl	8000e64 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8000954:	2220      	movs	r2, #32
 8000956:	2100      	movs	r1, #0
 8000958:	2078      	movs	r0, #120	@ 0x78
 800095a:	f000 fa83 	bl	8000e64 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 800095e:	2210      	movs	r2, #16
 8000960:	2100      	movs	r1, #0
 8000962:	2078      	movs	r0, #120	@ 0x78
 8000964:	f000 fa7e 	bl	8000e64 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000968:	22b0      	movs	r2, #176	@ 0xb0
 800096a:	2100      	movs	r1, #0
 800096c:	2078      	movs	r0, #120	@ 0x78
 800096e:	f000 fa79 	bl	8000e64 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8000972:	22c8      	movs	r2, #200	@ 0xc8
 8000974:	2100      	movs	r1, #0
 8000976:	2078      	movs	r0, #120	@ 0x78
 8000978:	f000 fa74 	bl	8000e64 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 800097c:	2200      	movs	r2, #0
 800097e:	2100      	movs	r1, #0
 8000980:	2078      	movs	r0, #120	@ 0x78
 8000982:	f000 fa6f 	bl	8000e64 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8000986:	2210      	movs	r2, #16
 8000988:	2100      	movs	r1, #0
 800098a:	2078      	movs	r0, #120	@ 0x78
 800098c:	f000 fa6a 	bl	8000e64 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8000990:	2240      	movs	r2, #64	@ 0x40
 8000992:	2100      	movs	r1, #0
 8000994:	2078      	movs	r0, #120	@ 0x78
 8000996:	f000 fa65 	bl	8000e64 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 800099a:	2281      	movs	r2, #129	@ 0x81
 800099c:	2100      	movs	r1, #0
 800099e:	2078      	movs	r0, #120	@ 0x78
 80009a0:	f000 fa60 	bl	8000e64 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 80009a4:	22ff      	movs	r2, #255	@ 0xff
 80009a6:	2100      	movs	r1, #0
 80009a8:	2078      	movs	r0, #120	@ 0x78
 80009aa:	f000 fa5b 	bl	8000e64 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 80009ae:	22a1      	movs	r2, #161	@ 0xa1
 80009b0:	2100      	movs	r1, #0
 80009b2:	2078      	movs	r0, #120	@ 0x78
 80009b4:	f000 fa56 	bl	8000e64 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 80009b8:	22a6      	movs	r2, #166	@ 0xa6
 80009ba:	2100      	movs	r1, #0
 80009bc:	2078      	movs	r0, #120	@ 0x78
 80009be:	f000 fa51 	bl	8000e64 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 80009c2:	22a8      	movs	r2, #168	@ 0xa8
 80009c4:	2100      	movs	r1, #0
 80009c6:	2078      	movs	r0, #120	@ 0x78
 80009c8:	f000 fa4c 	bl	8000e64 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 80009cc:	223f      	movs	r2, #63	@ 0x3f
 80009ce:	2100      	movs	r1, #0
 80009d0:	2078      	movs	r0, #120	@ 0x78
 80009d2:	f000 fa47 	bl	8000e64 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80009d6:	22a4      	movs	r2, #164	@ 0xa4
 80009d8:	2100      	movs	r1, #0
 80009da:	2078      	movs	r0, #120	@ 0x78
 80009dc:	f000 fa42 	bl	8000e64 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 80009e0:	22d3      	movs	r2, #211	@ 0xd3
 80009e2:	2100      	movs	r1, #0
 80009e4:	2078      	movs	r0, #120	@ 0x78
 80009e6:	f000 fa3d 	bl	8000e64 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 80009ea:	2200      	movs	r2, #0
 80009ec:	2100      	movs	r1, #0
 80009ee:	2078      	movs	r0, #120	@ 0x78
 80009f0:	f000 fa38 	bl	8000e64 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 80009f4:	22d5      	movs	r2, #213	@ 0xd5
 80009f6:	2100      	movs	r1, #0
 80009f8:	2078      	movs	r0, #120	@ 0x78
 80009fa:	f000 fa33 	bl	8000e64 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 80009fe:	22f0      	movs	r2, #240	@ 0xf0
 8000a00:	2100      	movs	r1, #0
 8000a02:	2078      	movs	r0, #120	@ 0x78
 8000a04:	f000 fa2e 	bl	8000e64 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8000a08:	22d9      	movs	r2, #217	@ 0xd9
 8000a0a:	2100      	movs	r1, #0
 8000a0c:	2078      	movs	r0, #120	@ 0x78
 8000a0e:	f000 fa29 	bl	8000e64 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8000a12:	2222      	movs	r2, #34	@ 0x22
 8000a14:	2100      	movs	r1, #0
 8000a16:	2078      	movs	r0, #120	@ 0x78
 8000a18:	f000 fa24 	bl	8000e64 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8000a1c:	22da      	movs	r2, #218	@ 0xda
 8000a1e:	2100      	movs	r1, #0
 8000a20:	2078      	movs	r0, #120	@ 0x78
 8000a22:	f000 fa1f 	bl	8000e64 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8000a26:	2212      	movs	r2, #18
 8000a28:	2100      	movs	r1, #0
 8000a2a:	2078      	movs	r0, #120	@ 0x78
 8000a2c:	f000 fa1a 	bl	8000e64 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8000a30:	22db      	movs	r2, #219	@ 0xdb
 8000a32:	2100      	movs	r1, #0
 8000a34:	2078      	movs	r0, #120	@ 0x78
 8000a36:	f000 fa15 	bl	8000e64 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8000a3a:	2220      	movs	r2, #32
 8000a3c:	2100      	movs	r1, #0
 8000a3e:	2078      	movs	r0, #120	@ 0x78
 8000a40:	f000 fa10 	bl	8000e64 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8000a44:	228d      	movs	r2, #141	@ 0x8d
 8000a46:	2100      	movs	r1, #0
 8000a48:	2078      	movs	r0, #120	@ 0x78
 8000a4a:	f000 fa0b 	bl	8000e64 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8000a4e:	2214      	movs	r2, #20
 8000a50:	2100      	movs	r1, #0
 8000a52:	2078      	movs	r0, #120	@ 0x78
 8000a54:	f000 fa06 	bl	8000e64 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8000a58:	22af      	movs	r2, #175	@ 0xaf
 8000a5a:	2100      	movs	r1, #0
 8000a5c:	2078      	movs	r0, #120	@ 0x78
 8000a5e:	f000 fa01 	bl	8000e64 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8000a62:	222e      	movs	r2, #46	@ 0x2e
 8000a64:	2100      	movs	r1, #0
 8000a66:	2078      	movs	r0, #120	@ 0x78
 8000a68:	f000 f9fc 	bl	8000e64 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8000a6c:	2000      	movs	r0, #0
 8000a6e:	f000 f843 	bl	8000af8 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 8000a72:	f000 f813 	bl	8000a9c <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 8000a76:	4b08      	ldr	r3, [pc, #32]	@ (8000a98 <SSD1306_Init+0x184>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8000a7c:	4b06      	ldr	r3, [pc, #24]	@ (8000a98 <SSD1306_Init+0x184>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 8000a82:	4b05      	ldr	r3, [pc, #20]	@ (8000a98 <SSD1306_Init+0x184>)
 8000a84:	2201      	movs	r2, #1
 8000a86:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8000a88:	2301      	movs	r3, #1
}
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	3708      	adds	r7, #8
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	20000080 	.word	0x20000080
 8000a98:	2000055c 	.word	0x2000055c

08000a9c <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b082      	sub	sp, #8
 8000aa0:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	71fb      	strb	r3, [r7, #7]
 8000aa6:	e01d      	b.n	8000ae4 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8000aa8:	79fb      	ldrb	r3, [r7, #7]
 8000aaa:	3b50      	subs	r3, #80	@ 0x50
 8000aac:	b2db      	uxtb	r3, r3
 8000aae:	461a      	mov	r2, r3
 8000ab0:	2100      	movs	r1, #0
 8000ab2:	2078      	movs	r0, #120	@ 0x78
 8000ab4:	f000 f9d6 	bl	8000e64 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8000ab8:	2200      	movs	r2, #0
 8000aba:	2100      	movs	r1, #0
 8000abc:	2078      	movs	r0, #120	@ 0x78
 8000abe:	f000 f9d1 	bl	8000e64 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8000ac2:	2210      	movs	r2, #16
 8000ac4:	2100      	movs	r1, #0
 8000ac6:	2078      	movs	r0, #120	@ 0x78
 8000ac8:	f000 f9cc 	bl	8000e64 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8000acc:	79fb      	ldrb	r3, [r7, #7]
 8000ace:	01db      	lsls	r3, r3, #7
 8000ad0:	4a08      	ldr	r2, [pc, #32]	@ (8000af4 <SSD1306_UpdateScreen+0x58>)
 8000ad2:	441a      	add	r2, r3
 8000ad4:	2380      	movs	r3, #128	@ 0x80
 8000ad6:	2140      	movs	r1, #64	@ 0x40
 8000ad8:	2078      	movs	r0, #120	@ 0x78
 8000ada:	f000 f95d 	bl	8000d98 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8000ade:	79fb      	ldrb	r3, [r7, #7]
 8000ae0:	3301      	adds	r3, #1
 8000ae2:	71fb      	strb	r3, [r7, #7]
 8000ae4:	79fb      	ldrb	r3, [r7, #7]
 8000ae6:	2b07      	cmp	r3, #7
 8000ae8:	d9de      	bls.n	8000aa8 <SSD1306_UpdateScreen+0xc>
	}
}
 8000aea:	bf00      	nop
 8000aec:	bf00      	nop
 8000aee:	3708      	adds	r7, #8
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	2000015c 	.word	0x2000015c

08000af8 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b082      	sub	sp, #8
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	4603      	mov	r3, r0
 8000b00:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8000b02:	79fb      	ldrb	r3, [r7, #7]
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d101      	bne.n	8000b0c <SSD1306_Fill+0x14>
 8000b08:	2300      	movs	r3, #0
 8000b0a:	e000      	b.n	8000b0e <SSD1306_Fill+0x16>
 8000b0c:	23ff      	movs	r3, #255	@ 0xff
 8000b0e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000b12:	4619      	mov	r1, r3
 8000b14:	4803      	ldr	r0, [pc, #12]	@ (8000b24 <SSD1306_Fill+0x2c>)
 8000b16:	f002 ff4d 	bl	80039b4 <memset>
}
 8000b1a:	bf00      	nop
 8000b1c:	3708      	adds	r7, #8
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	2000015c 	.word	0x2000015c

08000b28 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8000b28:	b480      	push	{r7}
 8000b2a:	b083      	sub	sp, #12
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	4603      	mov	r3, r0
 8000b30:	80fb      	strh	r3, [r7, #6]
 8000b32:	460b      	mov	r3, r1
 8000b34:	80bb      	strh	r3, [r7, #4]
 8000b36:	4613      	mov	r3, r2
 8000b38:	70fb      	strb	r3, [r7, #3]
	if (
 8000b3a:	88fb      	ldrh	r3, [r7, #6]
 8000b3c:	2b7f      	cmp	r3, #127	@ 0x7f
 8000b3e:	d848      	bhi.n	8000bd2 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8000b40:	88bb      	ldrh	r3, [r7, #4]
 8000b42:	2b3f      	cmp	r3, #63	@ 0x3f
 8000b44:	d845      	bhi.n	8000bd2 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8000b46:	4b26      	ldr	r3, [pc, #152]	@ (8000be0 <SSD1306_DrawPixel+0xb8>)
 8000b48:	791b      	ldrb	r3, [r3, #4]
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d006      	beq.n	8000b5c <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8000b4e:	78fb      	ldrb	r3, [r7, #3]
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	bf0c      	ite	eq
 8000b54:	2301      	moveq	r3, #1
 8000b56:	2300      	movne	r3, #0
 8000b58:	b2db      	uxtb	r3, r3
 8000b5a:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8000b5c:	78fb      	ldrb	r3, [r7, #3]
 8000b5e:	2b01      	cmp	r3, #1
 8000b60:	d11a      	bne.n	8000b98 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8000b62:	88fa      	ldrh	r2, [r7, #6]
 8000b64:	88bb      	ldrh	r3, [r7, #4]
 8000b66:	08db      	lsrs	r3, r3, #3
 8000b68:	b298      	uxth	r0, r3
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	01db      	lsls	r3, r3, #7
 8000b6e:	4413      	add	r3, r2
 8000b70:	4a1c      	ldr	r2, [pc, #112]	@ (8000be4 <SSD1306_DrawPixel+0xbc>)
 8000b72:	5cd3      	ldrb	r3, [r2, r3]
 8000b74:	b25a      	sxtb	r2, r3
 8000b76:	88bb      	ldrh	r3, [r7, #4]
 8000b78:	f003 0307 	and.w	r3, r3, #7
 8000b7c:	2101      	movs	r1, #1
 8000b7e:	fa01 f303 	lsl.w	r3, r1, r3
 8000b82:	b25b      	sxtb	r3, r3
 8000b84:	4313      	orrs	r3, r2
 8000b86:	b259      	sxtb	r1, r3
 8000b88:	88fa      	ldrh	r2, [r7, #6]
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	01db      	lsls	r3, r3, #7
 8000b8e:	4413      	add	r3, r2
 8000b90:	b2c9      	uxtb	r1, r1
 8000b92:	4a14      	ldr	r2, [pc, #80]	@ (8000be4 <SSD1306_DrawPixel+0xbc>)
 8000b94:	54d1      	strb	r1, [r2, r3]
 8000b96:	e01d      	b.n	8000bd4 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000b98:	88fa      	ldrh	r2, [r7, #6]
 8000b9a:	88bb      	ldrh	r3, [r7, #4]
 8000b9c:	08db      	lsrs	r3, r3, #3
 8000b9e:	b298      	uxth	r0, r3
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	01db      	lsls	r3, r3, #7
 8000ba4:	4413      	add	r3, r2
 8000ba6:	4a0f      	ldr	r2, [pc, #60]	@ (8000be4 <SSD1306_DrawPixel+0xbc>)
 8000ba8:	5cd3      	ldrb	r3, [r2, r3]
 8000baa:	b25a      	sxtb	r2, r3
 8000bac:	88bb      	ldrh	r3, [r7, #4]
 8000bae:	f003 0307 	and.w	r3, r3, #7
 8000bb2:	2101      	movs	r1, #1
 8000bb4:	fa01 f303 	lsl.w	r3, r1, r3
 8000bb8:	b25b      	sxtb	r3, r3
 8000bba:	43db      	mvns	r3, r3
 8000bbc:	b25b      	sxtb	r3, r3
 8000bbe:	4013      	ands	r3, r2
 8000bc0:	b259      	sxtb	r1, r3
 8000bc2:	88fa      	ldrh	r2, [r7, #6]
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	01db      	lsls	r3, r3, #7
 8000bc8:	4413      	add	r3, r2
 8000bca:	b2c9      	uxtb	r1, r1
 8000bcc:	4a05      	ldr	r2, [pc, #20]	@ (8000be4 <SSD1306_DrawPixel+0xbc>)
 8000bce:	54d1      	strb	r1, [r2, r3]
 8000bd0:	e000      	b.n	8000bd4 <SSD1306_DrawPixel+0xac>
		return;
 8000bd2:	bf00      	nop
	}
}
 8000bd4:	370c      	adds	r7, #12
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bdc:	4770      	bx	lr
 8000bde:	bf00      	nop
 8000be0:	2000055c 	.word	0x2000055c
 8000be4:	2000015c 	.word	0x2000015c

08000be8 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8000be8:	b480      	push	{r7}
 8000bea:	b083      	sub	sp, #12
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	4603      	mov	r3, r0
 8000bf0:	460a      	mov	r2, r1
 8000bf2:	80fb      	strh	r3, [r7, #6]
 8000bf4:	4613      	mov	r3, r2
 8000bf6:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8000bf8:	4a05      	ldr	r2, [pc, #20]	@ (8000c10 <SSD1306_GotoXY+0x28>)
 8000bfa:	88fb      	ldrh	r3, [r7, #6]
 8000bfc:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8000bfe:	4a04      	ldr	r2, [pc, #16]	@ (8000c10 <SSD1306_GotoXY+0x28>)
 8000c00:	88bb      	ldrh	r3, [r7, #4]
 8000c02:	8053      	strh	r3, [r2, #2]
}
 8000c04:	bf00      	nop
 8000c06:	370c      	adds	r7, #12
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0e:	4770      	bx	lr
 8000c10:	2000055c 	.word	0x2000055c

08000c14 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b086      	sub	sp, #24
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	6039      	str	r1, [r7, #0]
 8000c1e:	71fb      	strb	r3, [r7, #7]
 8000c20:	4613      	mov	r3, r2
 8000c22:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8000c24:	4b39      	ldr	r3, [pc, #228]	@ (8000d0c <SSD1306_Putc+0xf8>)
 8000c26:	881b      	ldrh	r3, [r3, #0]
 8000c28:	461a      	mov	r2, r3
 8000c2a:	683b      	ldr	r3, [r7, #0]
 8000c2c:	781b      	ldrb	r3, [r3, #0]
 8000c2e:	4413      	add	r3, r2
	if (
 8000c30:	2b7f      	cmp	r3, #127	@ 0x7f
 8000c32:	dc07      	bgt.n	8000c44 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8000c34:	4b35      	ldr	r3, [pc, #212]	@ (8000d0c <SSD1306_Putc+0xf8>)
 8000c36:	885b      	ldrh	r3, [r3, #2]
 8000c38:	461a      	mov	r2, r3
 8000c3a:	683b      	ldr	r3, [r7, #0]
 8000c3c:	785b      	ldrb	r3, [r3, #1]
 8000c3e:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8000c40:	2b3f      	cmp	r3, #63	@ 0x3f
 8000c42:	dd01      	ble.n	8000c48 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8000c44:	2300      	movs	r3, #0
 8000c46:	e05d      	b.n	8000d04 <SSD1306_Putc+0xf0>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8000c48:	2300      	movs	r3, #0
 8000c4a:	617b      	str	r3, [r7, #20]
 8000c4c:	e04b      	b.n	8000ce6 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8000c4e:	683b      	ldr	r3, [r7, #0]
 8000c50:	685a      	ldr	r2, [r3, #4]
 8000c52:	79fb      	ldrb	r3, [r7, #7]
 8000c54:	3b20      	subs	r3, #32
 8000c56:	6839      	ldr	r1, [r7, #0]
 8000c58:	7849      	ldrb	r1, [r1, #1]
 8000c5a:	fb01 f303 	mul.w	r3, r1, r3
 8000c5e:	4619      	mov	r1, r3
 8000c60:	697b      	ldr	r3, [r7, #20]
 8000c62:	440b      	add	r3, r1
 8000c64:	005b      	lsls	r3, r3, #1
 8000c66:	4413      	add	r3, r2
 8000c68:	881b      	ldrh	r3, [r3, #0]
 8000c6a:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	613b      	str	r3, [r7, #16]
 8000c70:	e030      	b.n	8000cd4 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8000c72:	68fa      	ldr	r2, [r7, #12]
 8000c74:	693b      	ldr	r3, [r7, #16]
 8000c76:	fa02 f303 	lsl.w	r3, r2, r3
 8000c7a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d010      	beq.n	8000ca4 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8000c82:	4b22      	ldr	r3, [pc, #136]	@ (8000d0c <SSD1306_Putc+0xf8>)
 8000c84:	881a      	ldrh	r2, [r3, #0]
 8000c86:	693b      	ldr	r3, [r7, #16]
 8000c88:	b29b      	uxth	r3, r3
 8000c8a:	4413      	add	r3, r2
 8000c8c:	b298      	uxth	r0, r3
 8000c8e:	4b1f      	ldr	r3, [pc, #124]	@ (8000d0c <SSD1306_Putc+0xf8>)
 8000c90:	885a      	ldrh	r2, [r3, #2]
 8000c92:	697b      	ldr	r3, [r7, #20]
 8000c94:	b29b      	uxth	r3, r3
 8000c96:	4413      	add	r3, r2
 8000c98:	b29b      	uxth	r3, r3
 8000c9a:	79ba      	ldrb	r2, [r7, #6]
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	f7ff ff43 	bl	8000b28 <SSD1306_DrawPixel>
 8000ca2:	e014      	b.n	8000cce <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8000ca4:	4b19      	ldr	r3, [pc, #100]	@ (8000d0c <SSD1306_Putc+0xf8>)
 8000ca6:	881a      	ldrh	r2, [r3, #0]
 8000ca8:	693b      	ldr	r3, [r7, #16]
 8000caa:	b29b      	uxth	r3, r3
 8000cac:	4413      	add	r3, r2
 8000cae:	b298      	uxth	r0, r3
 8000cb0:	4b16      	ldr	r3, [pc, #88]	@ (8000d0c <SSD1306_Putc+0xf8>)
 8000cb2:	885a      	ldrh	r2, [r3, #2]
 8000cb4:	697b      	ldr	r3, [r7, #20]
 8000cb6:	b29b      	uxth	r3, r3
 8000cb8:	4413      	add	r3, r2
 8000cba:	b299      	uxth	r1, r3
 8000cbc:	79bb      	ldrb	r3, [r7, #6]
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	bf0c      	ite	eq
 8000cc2:	2301      	moveq	r3, #1
 8000cc4:	2300      	movne	r3, #0
 8000cc6:	b2db      	uxtb	r3, r3
 8000cc8:	461a      	mov	r2, r3
 8000cca:	f7ff ff2d 	bl	8000b28 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8000cce:	693b      	ldr	r3, [r7, #16]
 8000cd0:	3301      	adds	r3, #1
 8000cd2:	613b      	str	r3, [r7, #16]
 8000cd4:	683b      	ldr	r3, [r7, #0]
 8000cd6:	781b      	ldrb	r3, [r3, #0]
 8000cd8:	461a      	mov	r2, r3
 8000cda:	693b      	ldr	r3, [r7, #16]
 8000cdc:	4293      	cmp	r3, r2
 8000cde:	d3c8      	bcc.n	8000c72 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8000ce0:	697b      	ldr	r3, [r7, #20]
 8000ce2:	3301      	adds	r3, #1
 8000ce4:	617b      	str	r3, [r7, #20]
 8000ce6:	683b      	ldr	r3, [r7, #0]
 8000ce8:	785b      	ldrb	r3, [r3, #1]
 8000cea:	461a      	mov	r2, r3
 8000cec:	697b      	ldr	r3, [r7, #20]
 8000cee:	4293      	cmp	r3, r2
 8000cf0:	d3ad      	bcc.n	8000c4e <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8000cf2:	4b06      	ldr	r3, [pc, #24]	@ (8000d0c <SSD1306_Putc+0xf8>)
 8000cf4:	881b      	ldrh	r3, [r3, #0]
 8000cf6:	683a      	ldr	r2, [r7, #0]
 8000cf8:	7812      	ldrb	r2, [r2, #0]
 8000cfa:	4413      	add	r3, r2
 8000cfc:	b29a      	uxth	r2, r3
 8000cfe:	4b03      	ldr	r3, [pc, #12]	@ (8000d0c <SSD1306_Putc+0xf8>)
 8000d00:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 8000d02:	79fb      	ldrb	r3, [r7, #7]
}
 8000d04:	4618      	mov	r0, r3
 8000d06:	3718      	adds	r7, #24
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bd80      	pop	{r7, pc}
 8000d0c:	2000055c 	.word	0x2000055c

08000d10 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b084      	sub	sp, #16
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	60f8      	str	r0, [r7, #12]
 8000d18:	60b9      	str	r1, [r7, #8]
 8000d1a:	4613      	mov	r3, r2
 8000d1c:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8000d1e:	e012      	b.n	8000d46 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8000d20:	68fb      	ldr	r3, [r7, #12]
 8000d22:	781b      	ldrb	r3, [r3, #0]
 8000d24:	79fa      	ldrb	r2, [r7, #7]
 8000d26:	68b9      	ldr	r1, [r7, #8]
 8000d28:	4618      	mov	r0, r3
 8000d2a:	f7ff ff73 	bl	8000c14 <SSD1306_Putc>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	461a      	mov	r2, r3
 8000d32:	68fb      	ldr	r3, [r7, #12]
 8000d34:	781b      	ldrb	r3, [r3, #0]
 8000d36:	429a      	cmp	r2, r3
 8000d38:	d002      	beq.n	8000d40 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8000d3a:	68fb      	ldr	r3, [r7, #12]
 8000d3c:	781b      	ldrb	r3, [r3, #0]
 8000d3e:	e008      	b.n	8000d52 <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	3301      	adds	r3, #1
 8000d44:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8000d46:	68fb      	ldr	r3, [r7, #12]
 8000d48:	781b      	ldrb	r3, [r3, #0]
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d1e8      	bne.n	8000d20 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 8000d4e:	68fb      	ldr	r3, [r7, #12]
 8000d50:	781b      	ldrb	r3, [r3, #0]
}
 8000d52:	4618      	mov	r0, r3
 8000d54:	3710      	adds	r7, #16
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}

08000d5a <SSD1306_Clear>:
}
 


void SSD1306_Clear (void)
{
 8000d5a:	b580      	push	{r7, lr}
 8000d5c:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 8000d5e:	2000      	movs	r0, #0
 8000d60:	f7ff feca 	bl	8000af8 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8000d64:	f7ff fe9a 	bl	8000a9c <SSD1306_UpdateScreen>
}
 8000d68:	bf00      	nop
 8000d6a:	bd80      	pop	{r7, pc}

08000d6c <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8000d6c:	b480      	push	{r7}
 8000d6e:	b083      	sub	sp, #12
 8000d70:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8000d72:	4b08      	ldr	r3, [pc, #32]	@ (8000d94 <ssd1306_I2C_Init+0x28>)
 8000d74:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000d76:	e002      	b.n	8000d7e <ssd1306_I2C_Init+0x12>
		p--;
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	3b01      	subs	r3, #1
 8000d7c:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d1f9      	bne.n	8000d78 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8000d84:	bf00      	nop
 8000d86:	bf00      	nop
 8000d88:	370c      	adds	r7, #12
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d90:	4770      	bx	lr
 8000d92:	bf00      	nop
 8000d94:	0003d090 	.word	0x0003d090

08000d98 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8000d98:	b590      	push	{r4, r7, lr}
 8000d9a:	b0c7      	sub	sp, #284	@ 0x11c
 8000d9c:	af02      	add	r7, sp, #8
 8000d9e:	4604      	mov	r4, r0
 8000da0:	4608      	mov	r0, r1
 8000da2:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 8000da6:	f5a1 7188 	sub.w	r1, r1, #272	@ 0x110
 8000daa:	600a      	str	r2, [r1, #0]
 8000dac:	4619      	mov	r1, r3
 8000dae:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000db2:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8000db6:	4622      	mov	r2, r4
 8000db8:	701a      	strb	r2, [r3, #0]
 8000dba:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000dbe:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 8000dc2:	4602      	mov	r2, r0
 8000dc4:	701a      	strb	r2, [r3, #0]
 8000dc6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000dca:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000dce:	460a      	mov	r2, r1
 8000dd0:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8000dd2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000dd6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000dda:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8000dde:	f5a2 7285 	sub.w	r2, r2, #266	@ 0x10a
 8000de2:	7812      	ldrb	r2, [r2, #0]
 8000de4:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8000de6:	2300      	movs	r3, #0
 8000de8:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8000dec:	e015      	b.n	8000e1a <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 8000dee:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8000df2:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8000df6:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 8000dfa:	6812      	ldr	r2, [r2, #0]
 8000dfc:	441a      	add	r2, r3
 8000dfe:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8000e02:	3301      	adds	r3, #1
 8000e04:	7811      	ldrb	r1, [r2, #0]
 8000e06:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8000e0a:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 8000e0e:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8000e10:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8000e14:	3301      	adds	r3, #1
 8000e16:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8000e1a:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8000e1e:	b29b      	uxth	r3, r3
 8000e20:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8000e24:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8000e28:	8812      	ldrh	r2, [r2, #0]
 8000e2a:	429a      	cmp	r2, r3
 8000e2c:	d8df      	bhi.n	8000dee <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8000e2e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000e32:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8000e36:	781b      	ldrb	r3, [r3, #0]
 8000e38:	b299      	uxth	r1, r3
 8000e3a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000e3e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000e42:	881b      	ldrh	r3, [r3, #0]
 8000e44:	3301      	adds	r3, #1
 8000e46:	b29b      	uxth	r3, r3
 8000e48:	f107 020c 	add.w	r2, r7, #12
 8000e4c:	200a      	movs	r0, #10
 8000e4e:	9000      	str	r0, [sp, #0]
 8000e50:	4803      	ldr	r0, [pc, #12]	@ (8000e60 <ssd1306_I2C_WriteMulti+0xc8>)
 8000e52:	f000 fdef 	bl	8001a34 <HAL_I2C_Master_Transmit>
}
 8000e56:	bf00      	nop
 8000e58:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bd90      	pop	{r4, r7, pc}
 8000e60:	20000080 	.word	0x20000080

08000e64 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b086      	sub	sp, #24
 8000e68:	af02      	add	r7, sp, #8
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	71fb      	strb	r3, [r7, #7]
 8000e6e:	460b      	mov	r3, r1
 8000e70:	71bb      	strb	r3, [r7, #6]
 8000e72:	4613      	mov	r3, r2
 8000e74:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8000e76:	79bb      	ldrb	r3, [r7, #6]
 8000e78:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8000e7a:	797b      	ldrb	r3, [r7, #5]
 8000e7c:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8000e7e:	79fb      	ldrb	r3, [r7, #7]
 8000e80:	b299      	uxth	r1, r3
 8000e82:	f107 020c 	add.w	r2, r7, #12
 8000e86:	230a      	movs	r3, #10
 8000e88:	9300      	str	r3, [sp, #0]
 8000e8a:	2302      	movs	r3, #2
 8000e8c:	4803      	ldr	r0, [pc, #12]	@ (8000e9c <ssd1306_I2C_Write+0x38>)
 8000e8e:	f000 fdd1 	bl	8001a34 <HAL_I2C_Master_Transmit>
}
 8000e92:	bf00      	nop
 8000e94:	3710      	adds	r7, #16
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	20000080 	.word	0x20000080

08000ea0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	b083      	sub	sp, #12
 8000ea4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	607b      	str	r3, [r7, #4]
 8000eaa:	4b10      	ldr	r3, [pc, #64]	@ (8000eec <HAL_MspInit+0x4c>)
 8000eac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000eae:	4a0f      	ldr	r2, [pc, #60]	@ (8000eec <HAL_MspInit+0x4c>)
 8000eb0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000eb4:	6453      	str	r3, [r2, #68]	@ 0x44
 8000eb6:	4b0d      	ldr	r3, [pc, #52]	@ (8000eec <HAL_MspInit+0x4c>)
 8000eb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000eba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ebe:	607b      	str	r3, [r7, #4]
 8000ec0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	603b      	str	r3, [r7, #0]
 8000ec6:	4b09      	ldr	r3, [pc, #36]	@ (8000eec <HAL_MspInit+0x4c>)
 8000ec8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000eca:	4a08      	ldr	r2, [pc, #32]	@ (8000eec <HAL_MspInit+0x4c>)
 8000ecc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ed0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ed2:	4b06      	ldr	r3, [pc, #24]	@ (8000eec <HAL_MspInit+0x4c>)
 8000ed4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ed6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000eda:	603b      	str	r3, [r7, #0]
 8000edc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ede:	bf00      	nop
 8000ee0:	370c      	adds	r7, #12
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop
 8000eec:	40023800 	.word	0x40023800

08000ef0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b08a      	sub	sp, #40	@ 0x28
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ef8:	f107 0314 	add.w	r3, r7, #20
 8000efc:	2200      	movs	r2, #0
 8000efe:	601a      	str	r2, [r3, #0]
 8000f00:	605a      	str	r2, [r3, #4]
 8000f02:	609a      	str	r2, [r3, #8]
 8000f04:	60da      	str	r2, [r3, #12]
 8000f06:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	4a19      	ldr	r2, [pc, #100]	@ (8000f74 <HAL_I2C_MspInit+0x84>)
 8000f0e:	4293      	cmp	r3, r2
 8000f10:	d12c      	bne.n	8000f6c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f12:	2300      	movs	r3, #0
 8000f14:	613b      	str	r3, [r7, #16]
 8000f16:	4b18      	ldr	r3, [pc, #96]	@ (8000f78 <HAL_I2C_MspInit+0x88>)
 8000f18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f1a:	4a17      	ldr	r2, [pc, #92]	@ (8000f78 <HAL_I2C_MspInit+0x88>)
 8000f1c:	f043 0302 	orr.w	r3, r3, #2
 8000f20:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f22:	4b15      	ldr	r3, [pc, #84]	@ (8000f78 <HAL_I2C_MspInit+0x88>)
 8000f24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f26:	f003 0302 	and.w	r3, r3, #2
 8000f2a:	613b      	str	r3, [r7, #16]
 8000f2c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000f2e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000f32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f34:	2312      	movs	r3, #18
 8000f36:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f3c:	2303      	movs	r3, #3
 8000f3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000f40:	2304      	movs	r3, #4
 8000f42:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f44:	f107 0314 	add.w	r3, r7, #20
 8000f48:	4619      	mov	r1, r3
 8000f4a:	480c      	ldr	r0, [pc, #48]	@ (8000f7c <HAL_I2C_MspInit+0x8c>)
 8000f4c:	f000 faaa 	bl	80014a4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000f50:	2300      	movs	r3, #0
 8000f52:	60fb      	str	r3, [r7, #12]
 8000f54:	4b08      	ldr	r3, [pc, #32]	@ (8000f78 <HAL_I2C_MspInit+0x88>)
 8000f56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f58:	4a07      	ldr	r2, [pc, #28]	@ (8000f78 <HAL_I2C_MspInit+0x88>)
 8000f5a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000f5e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f60:	4b05      	ldr	r3, [pc, #20]	@ (8000f78 <HAL_I2C_MspInit+0x88>)
 8000f62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f64:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000f68:	60fb      	str	r3, [r7, #12]
 8000f6a:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000f6c:	bf00      	nop
 8000f6e:	3728      	adds	r7, #40	@ 0x28
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	40005400 	.word	0x40005400
 8000f78:	40023800 	.word	0x40023800
 8000f7c:	40020400 	.word	0x40020400

08000f80 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b088      	sub	sp, #32
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f88:	f107 0308 	add.w	r3, r7, #8
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	601a      	str	r2, [r3, #0]
 8000f90:	605a      	str	r2, [r3, #4]
 8000f92:	609a      	str	r2, [r3, #8]
 8000f94:	60da      	str	r2, [r3, #12]
 8000f96:	611a      	str	r2, [r3, #16]
 8000f98:	615a      	str	r2, [r3, #20]
  if(hrtc->Instance==RTC)
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	4a0c      	ldr	r2, [pc, #48]	@ (8000fd0 <HAL_RTC_MspInit+0x50>)
 8000fa0:	4293      	cmp	r3, r2
 8000fa2:	d111      	bne.n	8000fc8 <HAL_RTC_MspInit+0x48>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000fa4:	2302      	movs	r3, #2
 8000fa6:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000fa8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000fac:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000fae:	f107 0308 	add.w	r3, r7, #8
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f001 fe1e 	bl	8002bf4 <HAL_RCCEx_PeriphCLKConfig>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d001      	beq.n	8000fc2 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8000fbe:	f7ff fca3 	bl	8000908 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000fc2:	4b04      	ldr	r3, [pc, #16]	@ (8000fd4 <HAL_RTC_MspInit+0x54>)
 8000fc4:	2201      	movs	r2, #1
 8000fc6:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTC_MspInit 1 */

  }

}
 8000fc8:	bf00      	nop
 8000fca:	3720      	adds	r7, #32
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	40002800 	.word	0x40002800
 8000fd4:	42470e3c 	.word	0x42470e3c

08000fd8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b08a      	sub	sp, #40	@ 0x28
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fe0:	f107 0314 	add.w	r3, r7, #20
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	601a      	str	r2, [r3, #0]
 8000fe8:	605a      	str	r2, [r3, #4]
 8000fea:	609a      	str	r2, [r3, #8]
 8000fec:	60da      	str	r2, [r3, #12]
 8000fee:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	4a19      	ldr	r2, [pc, #100]	@ (800105c <HAL_UART_MspInit+0x84>)
 8000ff6:	4293      	cmp	r3, r2
 8000ff8:	d12c      	bne.n	8001054 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	613b      	str	r3, [r7, #16]
 8000ffe:	4b18      	ldr	r3, [pc, #96]	@ (8001060 <HAL_UART_MspInit+0x88>)
 8001000:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001002:	4a17      	ldr	r2, [pc, #92]	@ (8001060 <HAL_UART_MspInit+0x88>)
 8001004:	f043 0310 	orr.w	r3, r3, #16
 8001008:	6453      	str	r3, [r2, #68]	@ 0x44
 800100a:	4b15      	ldr	r3, [pc, #84]	@ (8001060 <HAL_UART_MspInit+0x88>)
 800100c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800100e:	f003 0310 	and.w	r3, r3, #16
 8001012:	613b      	str	r3, [r7, #16]
 8001014:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001016:	2300      	movs	r3, #0
 8001018:	60fb      	str	r3, [r7, #12]
 800101a:	4b11      	ldr	r3, [pc, #68]	@ (8001060 <HAL_UART_MspInit+0x88>)
 800101c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800101e:	4a10      	ldr	r2, [pc, #64]	@ (8001060 <HAL_UART_MspInit+0x88>)
 8001020:	f043 0301 	orr.w	r3, r3, #1
 8001024:	6313      	str	r3, [r2, #48]	@ 0x30
 8001026:	4b0e      	ldr	r3, [pc, #56]	@ (8001060 <HAL_UART_MspInit+0x88>)
 8001028:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800102a:	f003 0301 	and.w	r3, r3, #1
 800102e:	60fb      	str	r3, [r7, #12]
 8001030:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001032:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001036:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001038:	2302      	movs	r3, #2
 800103a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103c:	2300      	movs	r3, #0
 800103e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001040:	2303      	movs	r3, #3
 8001042:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001044:	2307      	movs	r3, #7
 8001046:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001048:	f107 0314 	add.w	r3, r7, #20
 800104c:	4619      	mov	r1, r3
 800104e:	4805      	ldr	r0, [pc, #20]	@ (8001064 <HAL_UART_MspInit+0x8c>)
 8001050:	f000 fa28 	bl	80014a4 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8001054:	bf00      	nop
 8001056:	3728      	adds	r7, #40	@ 0x28
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}
 800105c:	40011000 	.word	0x40011000
 8001060:	40023800 	.word	0x40023800
 8001064:	40020000 	.word	0x40020000

08001068 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800106c:	bf00      	nop
 800106e:	e7fd      	b.n	800106c <NMI_Handler+0x4>

08001070 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001070:	b480      	push	{r7}
 8001072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001074:	bf00      	nop
 8001076:	e7fd      	b.n	8001074 <HardFault_Handler+0x4>

08001078 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001078:	b480      	push	{r7}
 800107a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800107c:	bf00      	nop
 800107e:	e7fd      	b.n	800107c <MemManage_Handler+0x4>

08001080 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001080:	b480      	push	{r7}
 8001082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001084:	bf00      	nop
 8001086:	e7fd      	b.n	8001084 <BusFault_Handler+0x4>

08001088 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001088:	b480      	push	{r7}
 800108a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800108c:	bf00      	nop
 800108e:	e7fd      	b.n	800108c <UsageFault_Handler+0x4>

08001090 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001090:	b480      	push	{r7}
 8001092:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001094:	bf00      	nop
 8001096:	46bd      	mov	sp, r7
 8001098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109c:	4770      	bx	lr

0800109e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800109e:	b480      	push	{r7}
 80010a0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010a2:	bf00      	nop
 80010a4:	46bd      	mov	sp, r7
 80010a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010aa:	4770      	bx	lr

080010ac <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010b0:	bf00      	nop
 80010b2:	46bd      	mov	sp, r7
 80010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b8:	4770      	bx	lr

080010ba <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010ba:	b580      	push	{r7, lr}
 80010bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010be:	f000 f8c7 	bl	8001250 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010c2:	bf00      	nop
 80010c4:	bd80      	pop	{r7, pc}
	...

080010c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b086      	sub	sp, #24
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010d0:	4a14      	ldr	r2, [pc, #80]	@ (8001124 <_sbrk+0x5c>)
 80010d2:	4b15      	ldr	r3, [pc, #84]	@ (8001128 <_sbrk+0x60>)
 80010d4:	1ad3      	subs	r3, r2, r3
 80010d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010d8:	697b      	ldr	r3, [r7, #20]
 80010da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010dc:	4b13      	ldr	r3, [pc, #76]	@ (800112c <_sbrk+0x64>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d102      	bne.n	80010ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010e4:	4b11      	ldr	r3, [pc, #68]	@ (800112c <_sbrk+0x64>)
 80010e6:	4a12      	ldr	r2, [pc, #72]	@ (8001130 <_sbrk+0x68>)
 80010e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010ea:	4b10      	ldr	r3, [pc, #64]	@ (800112c <_sbrk+0x64>)
 80010ec:	681a      	ldr	r2, [r3, #0]
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	4413      	add	r3, r2
 80010f2:	693a      	ldr	r2, [r7, #16]
 80010f4:	429a      	cmp	r2, r3
 80010f6:	d207      	bcs.n	8001108 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010f8:	f002 fc64 	bl	80039c4 <__errno>
 80010fc:	4603      	mov	r3, r0
 80010fe:	220c      	movs	r2, #12
 8001100:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001102:	f04f 33ff 	mov.w	r3, #4294967295
 8001106:	e009      	b.n	800111c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001108:	4b08      	ldr	r3, [pc, #32]	@ (800112c <_sbrk+0x64>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800110e:	4b07      	ldr	r3, [pc, #28]	@ (800112c <_sbrk+0x64>)
 8001110:	681a      	ldr	r2, [r3, #0]
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	4413      	add	r3, r2
 8001116:	4a05      	ldr	r2, [pc, #20]	@ (800112c <_sbrk+0x64>)
 8001118:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800111a:	68fb      	ldr	r3, [r7, #12]
}
 800111c:	4618      	mov	r0, r3
 800111e:	3718      	adds	r7, #24
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}
 8001124:	20020000 	.word	0x20020000
 8001128:	00000400 	.word	0x00000400
 800112c:	20000564 	.word	0x20000564
 8001130:	200006b8 	.word	0x200006b8

08001134 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001138:	4b06      	ldr	r3, [pc, #24]	@ (8001154 <SystemInit+0x20>)
 800113a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800113e:	4a05      	ldr	r2, [pc, #20]	@ (8001154 <SystemInit+0x20>)
 8001140:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001144:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001148:	bf00      	nop
 800114a:	46bd      	mov	sp, r7
 800114c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001150:	4770      	bx	lr
 8001152:	bf00      	nop
 8001154:	e000ed00 	.word	0xe000ed00

08001158 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001158:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001190 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800115c:	f7ff ffea 	bl	8001134 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001160:	480c      	ldr	r0, [pc, #48]	@ (8001194 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001162:	490d      	ldr	r1, [pc, #52]	@ (8001198 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001164:	4a0d      	ldr	r2, [pc, #52]	@ (800119c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001166:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001168:	e002      	b.n	8001170 <LoopCopyDataInit>

0800116a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800116a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800116c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800116e:	3304      	adds	r3, #4

08001170 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001170:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001172:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001174:	d3f9      	bcc.n	800116a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001176:	4a0a      	ldr	r2, [pc, #40]	@ (80011a0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001178:	4c0a      	ldr	r4, [pc, #40]	@ (80011a4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800117a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800117c:	e001      	b.n	8001182 <LoopFillZerobss>

0800117e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800117e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001180:	3204      	adds	r2, #4

08001182 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001182:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001184:	d3fb      	bcc.n	800117e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001186:	f002 fc23 	bl	80039d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800118a:	f7ff fa27 	bl	80005dc <main>
  bx  lr    
 800118e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001190:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001194:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001198:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 800119c:	080050a4 	.word	0x080050a4
  ldr r2, =_sbss
 80011a0:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 80011a4:	200006b4 	.word	0x200006b4

080011a8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011a8:	e7fe      	b.n	80011a8 <ADC_IRQHandler>
	...

080011ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80011b0:	4b0e      	ldr	r3, [pc, #56]	@ (80011ec <HAL_Init+0x40>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	4a0d      	ldr	r2, [pc, #52]	@ (80011ec <HAL_Init+0x40>)
 80011b6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80011ba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80011bc:	4b0b      	ldr	r3, [pc, #44]	@ (80011ec <HAL_Init+0x40>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	4a0a      	ldr	r2, [pc, #40]	@ (80011ec <HAL_Init+0x40>)
 80011c2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80011c6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011c8:	4b08      	ldr	r3, [pc, #32]	@ (80011ec <HAL_Init+0x40>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	4a07      	ldr	r2, [pc, #28]	@ (80011ec <HAL_Init+0x40>)
 80011ce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80011d2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011d4:	2003      	movs	r0, #3
 80011d6:	f000 f931 	bl	800143c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011da:	200f      	movs	r0, #15
 80011dc:	f000 f808 	bl	80011f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011e0:	f7ff fe5e 	bl	8000ea0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011e4:	2300      	movs	r3, #0
}
 80011e6:	4618      	mov	r0, r3
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	40023c00 	.word	0x40023c00

080011f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b082      	sub	sp, #8
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011f8:	4b12      	ldr	r3, [pc, #72]	@ (8001244 <HAL_InitTick+0x54>)
 80011fa:	681a      	ldr	r2, [r3, #0]
 80011fc:	4b12      	ldr	r3, [pc, #72]	@ (8001248 <HAL_InitTick+0x58>)
 80011fe:	781b      	ldrb	r3, [r3, #0]
 8001200:	4619      	mov	r1, r3
 8001202:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001206:	fbb3 f3f1 	udiv	r3, r3, r1
 800120a:	fbb2 f3f3 	udiv	r3, r2, r3
 800120e:	4618      	mov	r0, r3
 8001210:	f000 f93b 	bl	800148a <HAL_SYSTICK_Config>
 8001214:	4603      	mov	r3, r0
 8001216:	2b00      	cmp	r3, #0
 8001218:	d001      	beq.n	800121e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800121a:	2301      	movs	r3, #1
 800121c:	e00e      	b.n	800123c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	2b0f      	cmp	r3, #15
 8001222:	d80a      	bhi.n	800123a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001224:	2200      	movs	r2, #0
 8001226:	6879      	ldr	r1, [r7, #4]
 8001228:	f04f 30ff 	mov.w	r0, #4294967295
 800122c:	f000 f911 	bl	8001452 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001230:	4a06      	ldr	r2, [pc, #24]	@ (800124c <HAL_InitTick+0x5c>)
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001236:	2300      	movs	r3, #0
 8001238:	e000      	b.n	800123c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800123a:	2301      	movs	r3, #1
}
 800123c:	4618      	mov	r0, r3
 800123e:	3708      	adds	r7, #8
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}
 8001244:	20000008 	.word	0x20000008
 8001248:	20000010 	.word	0x20000010
 800124c:	2000000c 	.word	0x2000000c

08001250 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001250:	b480      	push	{r7}
 8001252:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001254:	4b06      	ldr	r3, [pc, #24]	@ (8001270 <HAL_IncTick+0x20>)
 8001256:	781b      	ldrb	r3, [r3, #0]
 8001258:	461a      	mov	r2, r3
 800125a:	4b06      	ldr	r3, [pc, #24]	@ (8001274 <HAL_IncTick+0x24>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	4413      	add	r3, r2
 8001260:	4a04      	ldr	r2, [pc, #16]	@ (8001274 <HAL_IncTick+0x24>)
 8001262:	6013      	str	r3, [r2, #0]
}
 8001264:	bf00      	nop
 8001266:	46bd      	mov	sp, r7
 8001268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126c:	4770      	bx	lr
 800126e:	bf00      	nop
 8001270:	20000010 	.word	0x20000010
 8001274:	20000568 	.word	0x20000568

08001278 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001278:	b480      	push	{r7}
 800127a:	af00      	add	r7, sp, #0
  return uwTick;
 800127c:	4b03      	ldr	r3, [pc, #12]	@ (800128c <HAL_GetTick+0x14>)
 800127e:	681b      	ldr	r3, [r3, #0]
}
 8001280:	4618      	mov	r0, r3
 8001282:	46bd      	mov	sp, r7
 8001284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001288:	4770      	bx	lr
 800128a:	bf00      	nop
 800128c:	20000568 	.word	0x20000568

08001290 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b084      	sub	sp, #16
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001298:	f7ff ffee 	bl	8001278 <HAL_GetTick>
 800129c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012a8:	d005      	beq.n	80012b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012aa:	4b0a      	ldr	r3, [pc, #40]	@ (80012d4 <HAL_Delay+0x44>)
 80012ac:	781b      	ldrb	r3, [r3, #0]
 80012ae:	461a      	mov	r2, r3
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	4413      	add	r3, r2
 80012b4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80012b6:	bf00      	nop
 80012b8:	f7ff ffde 	bl	8001278 <HAL_GetTick>
 80012bc:	4602      	mov	r2, r0
 80012be:	68bb      	ldr	r3, [r7, #8]
 80012c0:	1ad3      	subs	r3, r2, r3
 80012c2:	68fa      	ldr	r2, [r7, #12]
 80012c4:	429a      	cmp	r2, r3
 80012c6:	d8f7      	bhi.n	80012b8 <HAL_Delay+0x28>
  {
  }
}
 80012c8:	bf00      	nop
 80012ca:	bf00      	nop
 80012cc:	3710      	adds	r7, #16
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	20000010 	.word	0x20000010

080012d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012d8:	b480      	push	{r7}
 80012da:	b085      	sub	sp, #20
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	f003 0307 	and.w	r3, r3, #7
 80012e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012e8:	4b0c      	ldr	r3, [pc, #48]	@ (800131c <__NVIC_SetPriorityGrouping+0x44>)
 80012ea:	68db      	ldr	r3, [r3, #12]
 80012ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012ee:	68ba      	ldr	r2, [r7, #8]
 80012f0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80012f4:	4013      	ands	r3, r2
 80012f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012fc:	68bb      	ldr	r3, [r7, #8]
 80012fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001300:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001304:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001308:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800130a:	4a04      	ldr	r2, [pc, #16]	@ (800131c <__NVIC_SetPriorityGrouping+0x44>)
 800130c:	68bb      	ldr	r3, [r7, #8]
 800130e:	60d3      	str	r3, [r2, #12]
}
 8001310:	bf00      	nop
 8001312:	3714      	adds	r7, #20
 8001314:	46bd      	mov	sp, r7
 8001316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131a:	4770      	bx	lr
 800131c:	e000ed00 	.word	0xe000ed00

08001320 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001320:	b480      	push	{r7}
 8001322:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001324:	4b04      	ldr	r3, [pc, #16]	@ (8001338 <__NVIC_GetPriorityGrouping+0x18>)
 8001326:	68db      	ldr	r3, [r3, #12]
 8001328:	0a1b      	lsrs	r3, r3, #8
 800132a:	f003 0307 	and.w	r3, r3, #7
}
 800132e:	4618      	mov	r0, r3
 8001330:	46bd      	mov	sp, r7
 8001332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001336:	4770      	bx	lr
 8001338:	e000ed00 	.word	0xe000ed00

0800133c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800133c:	b480      	push	{r7}
 800133e:	b083      	sub	sp, #12
 8001340:	af00      	add	r7, sp, #0
 8001342:	4603      	mov	r3, r0
 8001344:	6039      	str	r1, [r7, #0]
 8001346:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001348:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800134c:	2b00      	cmp	r3, #0
 800134e:	db0a      	blt.n	8001366 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	b2da      	uxtb	r2, r3
 8001354:	490c      	ldr	r1, [pc, #48]	@ (8001388 <__NVIC_SetPriority+0x4c>)
 8001356:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800135a:	0112      	lsls	r2, r2, #4
 800135c:	b2d2      	uxtb	r2, r2
 800135e:	440b      	add	r3, r1
 8001360:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001364:	e00a      	b.n	800137c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	b2da      	uxtb	r2, r3
 800136a:	4908      	ldr	r1, [pc, #32]	@ (800138c <__NVIC_SetPriority+0x50>)
 800136c:	79fb      	ldrb	r3, [r7, #7]
 800136e:	f003 030f 	and.w	r3, r3, #15
 8001372:	3b04      	subs	r3, #4
 8001374:	0112      	lsls	r2, r2, #4
 8001376:	b2d2      	uxtb	r2, r2
 8001378:	440b      	add	r3, r1
 800137a:	761a      	strb	r2, [r3, #24]
}
 800137c:	bf00      	nop
 800137e:	370c      	adds	r7, #12
 8001380:	46bd      	mov	sp, r7
 8001382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001386:	4770      	bx	lr
 8001388:	e000e100 	.word	0xe000e100
 800138c:	e000ed00 	.word	0xe000ed00

08001390 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001390:	b480      	push	{r7}
 8001392:	b089      	sub	sp, #36	@ 0x24
 8001394:	af00      	add	r7, sp, #0
 8001396:	60f8      	str	r0, [r7, #12]
 8001398:	60b9      	str	r1, [r7, #8]
 800139a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	f003 0307 	and.w	r3, r3, #7
 80013a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013a4:	69fb      	ldr	r3, [r7, #28]
 80013a6:	f1c3 0307 	rsb	r3, r3, #7
 80013aa:	2b04      	cmp	r3, #4
 80013ac:	bf28      	it	cs
 80013ae:	2304      	movcs	r3, #4
 80013b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013b2:	69fb      	ldr	r3, [r7, #28]
 80013b4:	3304      	adds	r3, #4
 80013b6:	2b06      	cmp	r3, #6
 80013b8:	d902      	bls.n	80013c0 <NVIC_EncodePriority+0x30>
 80013ba:	69fb      	ldr	r3, [r7, #28]
 80013bc:	3b03      	subs	r3, #3
 80013be:	e000      	b.n	80013c2 <NVIC_EncodePriority+0x32>
 80013c0:	2300      	movs	r3, #0
 80013c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013c4:	f04f 32ff 	mov.w	r2, #4294967295
 80013c8:	69bb      	ldr	r3, [r7, #24]
 80013ca:	fa02 f303 	lsl.w	r3, r2, r3
 80013ce:	43da      	mvns	r2, r3
 80013d0:	68bb      	ldr	r3, [r7, #8]
 80013d2:	401a      	ands	r2, r3
 80013d4:	697b      	ldr	r3, [r7, #20]
 80013d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013d8:	f04f 31ff 	mov.w	r1, #4294967295
 80013dc:	697b      	ldr	r3, [r7, #20]
 80013de:	fa01 f303 	lsl.w	r3, r1, r3
 80013e2:	43d9      	mvns	r1, r3
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013e8:	4313      	orrs	r3, r2
         );
}
 80013ea:	4618      	mov	r0, r3
 80013ec:	3724      	adds	r7, #36	@ 0x24
 80013ee:	46bd      	mov	sp, r7
 80013f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f4:	4770      	bx	lr
	...

080013f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b082      	sub	sp, #8
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	3b01      	subs	r3, #1
 8001404:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001408:	d301      	bcc.n	800140e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800140a:	2301      	movs	r3, #1
 800140c:	e00f      	b.n	800142e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800140e:	4a0a      	ldr	r2, [pc, #40]	@ (8001438 <SysTick_Config+0x40>)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	3b01      	subs	r3, #1
 8001414:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001416:	210f      	movs	r1, #15
 8001418:	f04f 30ff 	mov.w	r0, #4294967295
 800141c:	f7ff ff8e 	bl	800133c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001420:	4b05      	ldr	r3, [pc, #20]	@ (8001438 <SysTick_Config+0x40>)
 8001422:	2200      	movs	r2, #0
 8001424:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001426:	4b04      	ldr	r3, [pc, #16]	@ (8001438 <SysTick_Config+0x40>)
 8001428:	2207      	movs	r2, #7
 800142a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800142c:	2300      	movs	r3, #0
}
 800142e:	4618      	mov	r0, r3
 8001430:	3708      	adds	r7, #8
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	e000e010 	.word	0xe000e010

0800143c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b082      	sub	sp, #8
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001444:	6878      	ldr	r0, [r7, #4]
 8001446:	f7ff ff47 	bl	80012d8 <__NVIC_SetPriorityGrouping>
}
 800144a:	bf00      	nop
 800144c:	3708      	adds	r7, #8
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}

08001452 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001452:	b580      	push	{r7, lr}
 8001454:	b086      	sub	sp, #24
 8001456:	af00      	add	r7, sp, #0
 8001458:	4603      	mov	r3, r0
 800145a:	60b9      	str	r1, [r7, #8]
 800145c:	607a      	str	r2, [r7, #4]
 800145e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001460:	2300      	movs	r3, #0
 8001462:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001464:	f7ff ff5c 	bl	8001320 <__NVIC_GetPriorityGrouping>
 8001468:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800146a:	687a      	ldr	r2, [r7, #4]
 800146c:	68b9      	ldr	r1, [r7, #8]
 800146e:	6978      	ldr	r0, [r7, #20]
 8001470:	f7ff ff8e 	bl	8001390 <NVIC_EncodePriority>
 8001474:	4602      	mov	r2, r0
 8001476:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800147a:	4611      	mov	r1, r2
 800147c:	4618      	mov	r0, r3
 800147e:	f7ff ff5d 	bl	800133c <__NVIC_SetPriority>
}
 8001482:	bf00      	nop
 8001484:	3718      	adds	r7, #24
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}

0800148a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800148a:	b580      	push	{r7, lr}
 800148c:	b082      	sub	sp, #8
 800148e:	af00      	add	r7, sp, #0
 8001490:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001492:	6878      	ldr	r0, [r7, #4]
 8001494:	f7ff ffb0 	bl	80013f8 <SysTick_Config>
 8001498:	4603      	mov	r3, r0
}
 800149a:	4618      	mov	r0, r3
 800149c:	3708      	adds	r7, #8
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
	...

080014a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b089      	sub	sp, #36	@ 0x24
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
 80014ac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80014ae:	2300      	movs	r3, #0
 80014b0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80014b2:	2300      	movs	r3, #0
 80014b4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80014b6:	2300      	movs	r3, #0
 80014b8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014ba:	2300      	movs	r3, #0
 80014bc:	61fb      	str	r3, [r7, #28]
 80014be:	e159      	b.n	8001774 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80014c0:	2201      	movs	r2, #1
 80014c2:	69fb      	ldr	r3, [r7, #28]
 80014c4:	fa02 f303 	lsl.w	r3, r2, r3
 80014c8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	697a      	ldr	r2, [r7, #20]
 80014d0:	4013      	ands	r3, r2
 80014d2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80014d4:	693a      	ldr	r2, [r7, #16]
 80014d6:	697b      	ldr	r3, [r7, #20]
 80014d8:	429a      	cmp	r2, r3
 80014da:	f040 8148 	bne.w	800176e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	685b      	ldr	r3, [r3, #4]
 80014e2:	f003 0303 	and.w	r3, r3, #3
 80014e6:	2b01      	cmp	r3, #1
 80014e8:	d005      	beq.n	80014f6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	685b      	ldr	r3, [r3, #4]
 80014ee:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80014f2:	2b02      	cmp	r3, #2
 80014f4:	d130      	bne.n	8001558 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	689b      	ldr	r3, [r3, #8]
 80014fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80014fc:	69fb      	ldr	r3, [r7, #28]
 80014fe:	005b      	lsls	r3, r3, #1
 8001500:	2203      	movs	r2, #3
 8001502:	fa02 f303 	lsl.w	r3, r2, r3
 8001506:	43db      	mvns	r3, r3
 8001508:	69ba      	ldr	r2, [r7, #24]
 800150a:	4013      	ands	r3, r2
 800150c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	68da      	ldr	r2, [r3, #12]
 8001512:	69fb      	ldr	r3, [r7, #28]
 8001514:	005b      	lsls	r3, r3, #1
 8001516:	fa02 f303 	lsl.w	r3, r2, r3
 800151a:	69ba      	ldr	r2, [r7, #24]
 800151c:	4313      	orrs	r3, r2
 800151e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	69ba      	ldr	r2, [r7, #24]
 8001524:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	685b      	ldr	r3, [r3, #4]
 800152a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800152c:	2201      	movs	r2, #1
 800152e:	69fb      	ldr	r3, [r7, #28]
 8001530:	fa02 f303 	lsl.w	r3, r2, r3
 8001534:	43db      	mvns	r3, r3
 8001536:	69ba      	ldr	r2, [r7, #24]
 8001538:	4013      	ands	r3, r2
 800153a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	091b      	lsrs	r3, r3, #4
 8001542:	f003 0201 	and.w	r2, r3, #1
 8001546:	69fb      	ldr	r3, [r7, #28]
 8001548:	fa02 f303 	lsl.w	r3, r2, r3
 800154c:	69ba      	ldr	r2, [r7, #24]
 800154e:	4313      	orrs	r3, r2
 8001550:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	69ba      	ldr	r2, [r7, #24]
 8001556:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	f003 0303 	and.w	r3, r3, #3
 8001560:	2b03      	cmp	r3, #3
 8001562:	d017      	beq.n	8001594 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	68db      	ldr	r3, [r3, #12]
 8001568:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800156a:	69fb      	ldr	r3, [r7, #28]
 800156c:	005b      	lsls	r3, r3, #1
 800156e:	2203      	movs	r2, #3
 8001570:	fa02 f303 	lsl.w	r3, r2, r3
 8001574:	43db      	mvns	r3, r3
 8001576:	69ba      	ldr	r2, [r7, #24]
 8001578:	4013      	ands	r3, r2
 800157a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	689a      	ldr	r2, [r3, #8]
 8001580:	69fb      	ldr	r3, [r7, #28]
 8001582:	005b      	lsls	r3, r3, #1
 8001584:	fa02 f303 	lsl.w	r3, r2, r3
 8001588:	69ba      	ldr	r2, [r7, #24]
 800158a:	4313      	orrs	r3, r2
 800158c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	69ba      	ldr	r2, [r7, #24]
 8001592:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	685b      	ldr	r3, [r3, #4]
 8001598:	f003 0303 	and.w	r3, r3, #3
 800159c:	2b02      	cmp	r3, #2
 800159e:	d123      	bne.n	80015e8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80015a0:	69fb      	ldr	r3, [r7, #28]
 80015a2:	08da      	lsrs	r2, r3, #3
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	3208      	adds	r2, #8
 80015a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80015ae:	69fb      	ldr	r3, [r7, #28]
 80015b0:	f003 0307 	and.w	r3, r3, #7
 80015b4:	009b      	lsls	r3, r3, #2
 80015b6:	220f      	movs	r2, #15
 80015b8:	fa02 f303 	lsl.w	r3, r2, r3
 80015bc:	43db      	mvns	r3, r3
 80015be:	69ba      	ldr	r2, [r7, #24]
 80015c0:	4013      	ands	r3, r2
 80015c2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	691a      	ldr	r2, [r3, #16]
 80015c8:	69fb      	ldr	r3, [r7, #28]
 80015ca:	f003 0307 	and.w	r3, r3, #7
 80015ce:	009b      	lsls	r3, r3, #2
 80015d0:	fa02 f303 	lsl.w	r3, r2, r3
 80015d4:	69ba      	ldr	r2, [r7, #24]
 80015d6:	4313      	orrs	r3, r2
 80015d8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80015da:	69fb      	ldr	r3, [r7, #28]
 80015dc:	08da      	lsrs	r2, r3, #3
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	3208      	adds	r2, #8
 80015e2:	69b9      	ldr	r1, [r7, #24]
 80015e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80015ee:	69fb      	ldr	r3, [r7, #28]
 80015f0:	005b      	lsls	r3, r3, #1
 80015f2:	2203      	movs	r2, #3
 80015f4:	fa02 f303 	lsl.w	r3, r2, r3
 80015f8:	43db      	mvns	r3, r3
 80015fa:	69ba      	ldr	r2, [r7, #24]
 80015fc:	4013      	ands	r3, r2
 80015fe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	f003 0203 	and.w	r2, r3, #3
 8001608:	69fb      	ldr	r3, [r7, #28]
 800160a:	005b      	lsls	r3, r3, #1
 800160c:	fa02 f303 	lsl.w	r3, r2, r3
 8001610:	69ba      	ldr	r2, [r7, #24]
 8001612:	4313      	orrs	r3, r2
 8001614:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	69ba      	ldr	r2, [r7, #24]
 800161a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001624:	2b00      	cmp	r3, #0
 8001626:	f000 80a2 	beq.w	800176e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800162a:	2300      	movs	r3, #0
 800162c:	60fb      	str	r3, [r7, #12]
 800162e:	4b57      	ldr	r3, [pc, #348]	@ (800178c <HAL_GPIO_Init+0x2e8>)
 8001630:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001632:	4a56      	ldr	r2, [pc, #344]	@ (800178c <HAL_GPIO_Init+0x2e8>)
 8001634:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001638:	6453      	str	r3, [r2, #68]	@ 0x44
 800163a:	4b54      	ldr	r3, [pc, #336]	@ (800178c <HAL_GPIO_Init+0x2e8>)
 800163c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800163e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001642:	60fb      	str	r3, [r7, #12]
 8001644:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001646:	4a52      	ldr	r2, [pc, #328]	@ (8001790 <HAL_GPIO_Init+0x2ec>)
 8001648:	69fb      	ldr	r3, [r7, #28]
 800164a:	089b      	lsrs	r3, r3, #2
 800164c:	3302      	adds	r3, #2
 800164e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001652:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001654:	69fb      	ldr	r3, [r7, #28]
 8001656:	f003 0303 	and.w	r3, r3, #3
 800165a:	009b      	lsls	r3, r3, #2
 800165c:	220f      	movs	r2, #15
 800165e:	fa02 f303 	lsl.w	r3, r2, r3
 8001662:	43db      	mvns	r3, r3
 8001664:	69ba      	ldr	r2, [r7, #24]
 8001666:	4013      	ands	r3, r2
 8001668:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	4a49      	ldr	r2, [pc, #292]	@ (8001794 <HAL_GPIO_Init+0x2f0>)
 800166e:	4293      	cmp	r3, r2
 8001670:	d019      	beq.n	80016a6 <HAL_GPIO_Init+0x202>
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	4a48      	ldr	r2, [pc, #288]	@ (8001798 <HAL_GPIO_Init+0x2f4>)
 8001676:	4293      	cmp	r3, r2
 8001678:	d013      	beq.n	80016a2 <HAL_GPIO_Init+0x1fe>
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	4a47      	ldr	r2, [pc, #284]	@ (800179c <HAL_GPIO_Init+0x2f8>)
 800167e:	4293      	cmp	r3, r2
 8001680:	d00d      	beq.n	800169e <HAL_GPIO_Init+0x1fa>
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	4a46      	ldr	r2, [pc, #280]	@ (80017a0 <HAL_GPIO_Init+0x2fc>)
 8001686:	4293      	cmp	r3, r2
 8001688:	d007      	beq.n	800169a <HAL_GPIO_Init+0x1f6>
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	4a45      	ldr	r2, [pc, #276]	@ (80017a4 <HAL_GPIO_Init+0x300>)
 800168e:	4293      	cmp	r3, r2
 8001690:	d101      	bne.n	8001696 <HAL_GPIO_Init+0x1f2>
 8001692:	2304      	movs	r3, #4
 8001694:	e008      	b.n	80016a8 <HAL_GPIO_Init+0x204>
 8001696:	2307      	movs	r3, #7
 8001698:	e006      	b.n	80016a8 <HAL_GPIO_Init+0x204>
 800169a:	2303      	movs	r3, #3
 800169c:	e004      	b.n	80016a8 <HAL_GPIO_Init+0x204>
 800169e:	2302      	movs	r3, #2
 80016a0:	e002      	b.n	80016a8 <HAL_GPIO_Init+0x204>
 80016a2:	2301      	movs	r3, #1
 80016a4:	e000      	b.n	80016a8 <HAL_GPIO_Init+0x204>
 80016a6:	2300      	movs	r3, #0
 80016a8:	69fa      	ldr	r2, [r7, #28]
 80016aa:	f002 0203 	and.w	r2, r2, #3
 80016ae:	0092      	lsls	r2, r2, #2
 80016b0:	4093      	lsls	r3, r2
 80016b2:	69ba      	ldr	r2, [r7, #24]
 80016b4:	4313      	orrs	r3, r2
 80016b6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80016b8:	4935      	ldr	r1, [pc, #212]	@ (8001790 <HAL_GPIO_Init+0x2ec>)
 80016ba:	69fb      	ldr	r3, [r7, #28]
 80016bc:	089b      	lsrs	r3, r3, #2
 80016be:	3302      	adds	r3, #2
 80016c0:	69ba      	ldr	r2, [r7, #24]
 80016c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80016c6:	4b38      	ldr	r3, [pc, #224]	@ (80017a8 <HAL_GPIO_Init+0x304>)
 80016c8:	689b      	ldr	r3, [r3, #8]
 80016ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016cc:	693b      	ldr	r3, [r7, #16]
 80016ce:	43db      	mvns	r3, r3
 80016d0:	69ba      	ldr	r2, [r7, #24]
 80016d2:	4013      	ands	r3, r2
 80016d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	685b      	ldr	r3, [r3, #4]
 80016da:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d003      	beq.n	80016ea <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80016e2:	69ba      	ldr	r2, [r7, #24]
 80016e4:	693b      	ldr	r3, [r7, #16]
 80016e6:	4313      	orrs	r3, r2
 80016e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80016ea:	4a2f      	ldr	r2, [pc, #188]	@ (80017a8 <HAL_GPIO_Init+0x304>)
 80016ec:	69bb      	ldr	r3, [r7, #24]
 80016ee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80016f0:	4b2d      	ldr	r3, [pc, #180]	@ (80017a8 <HAL_GPIO_Init+0x304>)
 80016f2:	68db      	ldr	r3, [r3, #12]
 80016f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016f6:	693b      	ldr	r3, [r7, #16]
 80016f8:	43db      	mvns	r3, r3
 80016fa:	69ba      	ldr	r2, [r7, #24]
 80016fc:	4013      	ands	r3, r2
 80016fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001708:	2b00      	cmp	r3, #0
 800170a:	d003      	beq.n	8001714 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800170c:	69ba      	ldr	r2, [r7, #24]
 800170e:	693b      	ldr	r3, [r7, #16]
 8001710:	4313      	orrs	r3, r2
 8001712:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001714:	4a24      	ldr	r2, [pc, #144]	@ (80017a8 <HAL_GPIO_Init+0x304>)
 8001716:	69bb      	ldr	r3, [r7, #24]
 8001718:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800171a:	4b23      	ldr	r3, [pc, #140]	@ (80017a8 <HAL_GPIO_Init+0x304>)
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001720:	693b      	ldr	r3, [r7, #16]
 8001722:	43db      	mvns	r3, r3
 8001724:	69ba      	ldr	r2, [r7, #24]
 8001726:	4013      	ands	r3, r2
 8001728:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001732:	2b00      	cmp	r3, #0
 8001734:	d003      	beq.n	800173e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001736:	69ba      	ldr	r2, [r7, #24]
 8001738:	693b      	ldr	r3, [r7, #16]
 800173a:	4313      	orrs	r3, r2
 800173c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800173e:	4a1a      	ldr	r2, [pc, #104]	@ (80017a8 <HAL_GPIO_Init+0x304>)
 8001740:	69bb      	ldr	r3, [r7, #24]
 8001742:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001744:	4b18      	ldr	r3, [pc, #96]	@ (80017a8 <HAL_GPIO_Init+0x304>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800174a:	693b      	ldr	r3, [r7, #16]
 800174c:	43db      	mvns	r3, r3
 800174e:	69ba      	ldr	r2, [r7, #24]
 8001750:	4013      	ands	r3, r2
 8001752:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800175c:	2b00      	cmp	r3, #0
 800175e:	d003      	beq.n	8001768 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001760:	69ba      	ldr	r2, [r7, #24]
 8001762:	693b      	ldr	r3, [r7, #16]
 8001764:	4313      	orrs	r3, r2
 8001766:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001768:	4a0f      	ldr	r2, [pc, #60]	@ (80017a8 <HAL_GPIO_Init+0x304>)
 800176a:	69bb      	ldr	r3, [r7, #24]
 800176c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800176e:	69fb      	ldr	r3, [r7, #28]
 8001770:	3301      	adds	r3, #1
 8001772:	61fb      	str	r3, [r7, #28]
 8001774:	69fb      	ldr	r3, [r7, #28]
 8001776:	2b0f      	cmp	r3, #15
 8001778:	f67f aea2 	bls.w	80014c0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800177c:	bf00      	nop
 800177e:	bf00      	nop
 8001780:	3724      	adds	r7, #36	@ 0x24
 8001782:	46bd      	mov	sp, r7
 8001784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001788:	4770      	bx	lr
 800178a:	bf00      	nop
 800178c:	40023800 	.word	0x40023800
 8001790:	40013800 	.word	0x40013800
 8001794:	40020000 	.word	0x40020000
 8001798:	40020400 	.word	0x40020400
 800179c:	40020800 	.word	0x40020800
 80017a0:	40020c00 	.word	0x40020c00
 80017a4:	40021000 	.word	0x40021000
 80017a8:	40013c00 	.word	0x40013c00

080017ac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b084      	sub	sp, #16
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d101      	bne.n	80017be <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80017ba:	2301      	movs	r3, #1
 80017bc:	e12b      	b.n	8001a16 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80017c4:	b2db      	uxtb	r3, r3
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d106      	bne.n	80017d8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	2200      	movs	r2, #0
 80017ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80017d2:	6878      	ldr	r0, [r7, #4]
 80017d4:	f7ff fb8c 	bl	8000ef0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	2224      	movs	r2, #36	@ 0x24
 80017dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	681a      	ldr	r2, [r3, #0]
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f022 0201 	bic.w	r2, r2, #1
 80017ee:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	681a      	ldr	r2, [r3, #0]
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80017fe:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	681a      	ldr	r2, [r3, #0]
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800180e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001810:	f001 f9c8 	bl	8002ba4 <HAL_RCC_GetPCLK1Freq>
 8001814:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	4a81      	ldr	r2, [pc, #516]	@ (8001a20 <HAL_I2C_Init+0x274>)
 800181c:	4293      	cmp	r3, r2
 800181e:	d807      	bhi.n	8001830 <HAL_I2C_Init+0x84>
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	4a80      	ldr	r2, [pc, #512]	@ (8001a24 <HAL_I2C_Init+0x278>)
 8001824:	4293      	cmp	r3, r2
 8001826:	bf94      	ite	ls
 8001828:	2301      	movls	r3, #1
 800182a:	2300      	movhi	r3, #0
 800182c:	b2db      	uxtb	r3, r3
 800182e:	e006      	b.n	800183e <HAL_I2C_Init+0x92>
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	4a7d      	ldr	r2, [pc, #500]	@ (8001a28 <HAL_I2C_Init+0x27c>)
 8001834:	4293      	cmp	r3, r2
 8001836:	bf94      	ite	ls
 8001838:	2301      	movls	r3, #1
 800183a:	2300      	movhi	r3, #0
 800183c:	b2db      	uxtb	r3, r3
 800183e:	2b00      	cmp	r3, #0
 8001840:	d001      	beq.n	8001846 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001842:	2301      	movs	r3, #1
 8001844:	e0e7      	b.n	8001a16 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	4a78      	ldr	r2, [pc, #480]	@ (8001a2c <HAL_I2C_Init+0x280>)
 800184a:	fba2 2303 	umull	r2, r3, r2, r3
 800184e:	0c9b      	lsrs	r3, r3, #18
 8001850:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	68ba      	ldr	r2, [r7, #8]
 8001862:	430a      	orrs	r2, r1
 8001864:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	6a1b      	ldr	r3, [r3, #32]
 800186c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	4a6a      	ldr	r2, [pc, #424]	@ (8001a20 <HAL_I2C_Init+0x274>)
 8001876:	4293      	cmp	r3, r2
 8001878:	d802      	bhi.n	8001880 <HAL_I2C_Init+0xd4>
 800187a:	68bb      	ldr	r3, [r7, #8]
 800187c:	3301      	adds	r3, #1
 800187e:	e009      	b.n	8001894 <HAL_I2C_Init+0xe8>
 8001880:	68bb      	ldr	r3, [r7, #8]
 8001882:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001886:	fb02 f303 	mul.w	r3, r2, r3
 800188a:	4a69      	ldr	r2, [pc, #420]	@ (8001a30 <HAL_I2C_Init+0x284>)
 800188c:	fba2 2303 	umull	r2, r3, r2, r3
 8001890:	099b      	lsrs	r3, r3, #6
 8001892:	3301      	adds	r3, #1
 8001894:	687a      	ldr	r2, [r7, #4]
 8001896:	6812      	ldr	r2, [r2, #0]
 8001898:	430b      	orrs	r3, r1
 800189a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	69db      	ldr	r3, [r3, #28]
 80018a2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80018a6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	685b      	ldr	r3, [r3, #4]
 80018ae:	495c      	ldr	r1, [pc, #368]	@ (8001a20 <HAL_I2C_Init+0x274>)
 80018b0:	428b      	cmp	r3, r1
 80018b2:	d819      	bhi.n	80018e8 <HAL_I2C_Init+0x13c>
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	1e59      	subs	r1, r3, #1
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	005b      	lsls	r3, r3, #1
 80018be:	fbb1 f3f3 	udiv	r3, r1, r3
 80018c2:	1c59      	adds	r1, r3, #1
 80018c4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80018c8:	400b      	ands	r3, r1
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d00a      	beq.n	80018e4 <HAL_I2C_Init+0x138>
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	1e59      	subs	r1, r3, #1
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	685b      	ldr	r3, [r3, #4]
 80018d6:	005b      	lsls	r3, r3, #1
 80018d8:	fbb1 f3f3 	udiv	r3, r1, r3
 80018dc:	3301      	adds	r3, #1
 80018de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018e2:	e051      	b.n	8001988 <HAL_I2C_Init+0x1dc>
 80018e4:	2304      	movs	r3, #4
 80018e6:	e04f      	b.n	8001988 <HAL_I2C_Init+0x1dc>
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	689b      	ldr	r3, [r3, #8]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d111      	bne.n	8001914 <HAL_I2C_Init+0x168>
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	1e58      	subs	r0, r3, #1
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6859      	ldr	r1, [r3, #4]
 80018f8:	460b      	mov	r3, r1
 80018fa:	005b      	lsls	r3, r3, #1
 80018fc:	440b      	add	r3, r1
 80018fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8001902:	3301      	adds	r3, #1
 8001904:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001908:	2b00      	cmp	r3, #0
 800190a:	bf0c      	ite	eq
 800190c:	2301      	moveq	r3, #1
 800190e:	2300      	movne	r3, #0
 8001910:	b2db      	uxtb	r3, r3
 8001912:	e012      	b.n	800193a <HAL_I2C_Init+0x18e>
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	1e58      	subs	r0, r3, #1
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	6859      	ldr	r1, [r3, #4]
 800191c:	460b      	mov	r3, r1
 800191e:	009b      	lsls	r3, r3, #2
 8001920:	440b      	add	r3, r1
 8001922:	0099      	lsls	r1, r3, #2
 8001924:	440b      	add	r3, r1
 8001926:	fbb0 f3f3 	udiv	r3, r0, r3
 800192a:	3301      	adds	r3, #1
 800192c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001930:	2b00      	cmp	r3, #0
 8001932:	bf0c      	ite	eq
 8001934:	2301      	moveq	r3, #1
 8001936:	2300      	movne	r3, #0
 8001938:	b2db      	uxtb	r3, r3
 800193a:	2b00      	cmp	r3, #0
 800193c:	d001      	beq.n	8001942 <HAL_I2C_Init+0x196>
 800193e:	2301      	movs	r3, #1
 8001940:	e022      	b.n	8001988 <HAL_I2C_Init+0x1dc>
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	689b      	ldr	r3, [r3, #8]
 8001946:	2b00      	cmp	r3, #0
 8001948:	d10e      	bne.n	8001968 <HAL_I2C_Init+0x1bc>
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	1e58      	subs	r0, r3, #1
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	6859      	ldr	r1, [r3, #4]
 8001952:	460b      	mov	r3, r1
 8001954:	005b      	lsls	r3, r3, #1
 8001956:	440b      	add	r3, r1
 8001958:	fbb0 f3f3 	udiv	r3, r0, r3
 800195c:	3301      	adds	r3, #1
 800195e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001962:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001966:	e00f      	b.n	8001988 <HAL_I2C_Init+0x1dc>
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	1e58      	subs	r0, r3, #1
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	6859      	ldr	r1, [r3, #4]
 8001970:	460b      	mov	r3, r1
 8001972:	009b      	lsls	r3, r3, #2
 8001974:	440b      	add	r3, r1
 8001976:	0099      	lsls	r1, r3, #2
 8001978:	440b      	add	r3, r1
 800197a:	fbb0 f3f3 	udiv	r3, r0, r3
 800197e:	3301      	adds	r3, #1
 8001980:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001984:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001988:	6879      	ldr	r1, [r7, #4]
 800198a:	6809      	ldr	r1, [r1, #0]
 800198c:	4313      	orrs	r3, r2
 800198e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	69da      	ldr	r2, [r3, #28]
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	6a1b      	ldr	r3, [r3, #32]
 80019a2:	431a      	orrs	r2, r3
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	430a      	orrs	r2, r1
 80019aa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	689b      	ldr	r3, [r3, #8]
 80019b2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80019b6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80019ba:	687a      	ldr	r2, [r7, #4]
 80019bc:	6911      	ldr	r1, [r2, #16]
 80019be:	687a      	ldr	r2, [r7, #4]
 80019c0:	68d2      	ldr	r2, [r2, #12]
 80019c2:	4311      	orrs	r1, r2
 80019c4:	687a      	ldr	r2, [r7, #4]
 80019c6:	6812      	ldr	r2, [r2, #0]
 80019c8:	430b      	orrs	r3, r1
 80019ca:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	68db      	ldr	r3, [r3, #12]
 80019d2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	695a      	ldr	r2, [r3, #20]
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	699b      	ldr	r3, [r3, #24]
 80019de:	431a      	orrs	r2, r3
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	430a      	orrs	r2, r1
 80019e6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	681a      	ldr	r2, [r3, #0]
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f042 0201 	orr.w	r2, r2, #1
 80019f6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	2200      	movs	r2, #0
 80019fc:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	2220      	movs	r2, #32
 8001a02:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	2200      	movs	r2, #0
 8001a0a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2200      	movs	r2, #0
 8001a10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001a14:	2300      	movs	r3, #0
}
 8001a16:	4618      	mov	r0, r3
 8001a18:	3710      	adds	r7, #16
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}
 8001a1e:	bf00      	nop
 8001a20:	000186a0 	.word	0x000186a0
 8001a24:	001e847f 	.word	0x001e847f
 8001a28:	003d08ff 	.word	0x003d08ff
 8001a2c:	431bde83 	.word	0x431bde83
 8001a30:	10624dd3 	.word	0x10624dd3

08001a34 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b088      	sub	sp, #32
 8001a38:	af02      	add	r7, sp, #8
 8001a3a:	60f8      	str	r0, [r7, #12]
 8001a3c:	607a      	str	r2, [r7, #4]
 8001a3e:	461a      	mov	r2, r3
 8001a40:	460b      	mov	r3, r1
 8001a42:	817b      	strh	r3, [r7, #10]
 8001a44:	4613      	mov	r3, r2
 8001a46:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001a48:	f7ff fc16 	bl	8001278 <HAL_GetTick>
 8001a4c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001a54:	b2db      	uxtb	r3, r3
 8001a56:	2b20      	cmp	r3, #32
 8001a58:	f040 80e0 	bne.w	8001c1c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001a5c:	697b      	ldr	r3, [r7, #20]
 8001a5e:	9300      	str	r3, [sp, #0]
 8001a60:	2319      	movs	r3, #25
 8001a62:	2201      	movs	r2, #1
 8001a64:	4970      	ldr	r1, [pc, #448]	@ (8001c28 <HAL_I2C_Master_Transmit+0x1f4>)
 8001a66:	68f8      	ldr	r0, [r7, #12]
 8001a68:	f000 fa92 	bl	8001f90 <I2C_WaitOnFlagUntilTimeout>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d001      	beq.n	8001a76 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001a72:	2302      	movs	r3, #2
 8001a74:	e0d3      	b.n	8001c1e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001a7c:	2b01      	cmp	r3, #1
 8001a7e:	d101      	bne.n	8001a84 <HAL_I2C_Master_Transmit+0x50>
 8001a80:	2302      	movs	r3, #2
 8001a82:	e0cc      	b.n	8001c1e <HAL_I2C_Master_Transmit+0x1ea>
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	2201      	movs	r2, #1
 8001a88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f003 0301 	and.w	r3, r3, #1
 8001a96:	2b01      	cmp	r3, #1
 8001a98:	d007      	beq.n	8001aaa <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	681a      	ldr	r2, [r3, #0]
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f042 0201 	orr.w	r2, r2, #1
 8001aa8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	681a      	ldr	r2, [r3, #0]
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001ab8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	2221      	movs	r2, #33	@ 0x21
 8001abe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	2210      	movs	r2, #16
 8001ac6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	2200      	movs	r2, #0
 8001ace:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	687a      	ldr	r2, [r7, #4]
 8001ad4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	893a      	ldrh	r2, [r7, #8]
 8001ada:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ae0:	b29a      	uxth	r2, r3
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	4a50      	ldr	r2, [pc, #320]	@ (8001c2c <HAL_I2C_Master_Transmit+0x1f8>)
 8001aea:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001aec:	8979      	ldrh	r1, [r7, #10]
 8001aee:	697b      	ldr	r3, [r7, #20]
 8001af0:	6a3a      	ldr	r2, [r7, #32]
 8001af2:	68f8      	ldr	r0, [r7, #12]
 8001af4:	f000 f9ca 	bl	8001e8c <I2C_MasterRequestWrite>
 8001af8:	4603      	mov	r3, r0
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d001      	beq.n	8001b02 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001afe:	2301      	movs	r3, #1
 8001b00:	e08d      	b.n	8001c1e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001b02:	2300      	movs	r3, #0
 8001b04:	613b      	str	r3, [r7, #16]
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	695b      	ldr	r3, [r3, #20]
 8001b0c:	613b      	str	r3, [r7, #16]
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	699b      	ldr	r3, [r3, #24]
 8001b14:	613b      	str	r3, [r7, #16]
 8001b16:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001b18:	e066      	b.n	8001be8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b1a:	697a      	ldr	r2, [r7, #20]
 8001b1c:	6a39      	ldr	r1, [r7, #32]
 8001b1e:	68f8      	ldr	r0, [r7, #12]
 8001b20:	f000 fb50 	bl	80021c4 <I2C_WaitOnTXEFlagUntilTimeout>
 8001b24:	4603      	mov	r3, r0
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d00d      	beq.n	8001b46 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b2e:	2b04      	cmp	r3, #4
 8001b30:	d107      	bne.n	8001b42 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	681a      	ldr	r2, [r3, #0]
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001b40:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001b42:	2301      	movs	r3, #1
 8001b44:	e06b      	b.n	8001c1e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b4a:	781a      	ldrb	r2, [r3, #0]
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b56:	1c5a      	adds	r2, r3, #1
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b60:	b29b      	uxth	r3, r3
 8001b62:	3b01      	subs	r3, #1
 8001b64:	b29a      	uxth	r2, r3
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b6e:	3b01      	subs	r3, #1
 8001b70:	b29a      	uxth	r2, r3
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	695b      	ldr	r3, [r3, #20]
 8001b7c:	f003 0304 	and.w	r3, r3, #4
 8001b80:	2b04      	cmp	r3, #4
 8001b82:	d11b      	bne.n	8001bbc <HAL_I2C_Master_Transmit+0x188>
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d017      	beq.n	8001bbc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b90:	781a      	ldrb	r2, [r3, #0]
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b9c:	1c5a      	adds	r2, r3, #1
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ba6:	b29b      	uxth	r3, r3
 8001ba8:	3b01      	subs	r3, #1
 8001baa:	b29a      	uxth	r2, r3
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001bb4:	3b01      	subs	r3, #1
 8001bb6:	b29a      	uxth	r2, r3
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001bbc:	697a      	ldr	r2, [r7, #20]
 8001bbe:	6a39      	ldr	r1, [r7, #32]
 8001bc0:	68f8      	ldr	r0, [r7, #12]
 8001bc2:	f000 fb47 	bl	8002254 <I2C_WaitOnBTFFlagUntilTimeout>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d00d      	beq.n	8001be8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bd0:	2b04      	cmp	r3, #4
 8001bd2:	d107      	bne.n	8001be4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	681a      	ldr	r2, [r3, #0]
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001be2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001be4:	2301      	movs	r3, #1
 8001be6:	e01a      	b.n	8001c1e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d194      	bne.n	8001b1a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	681a      	ldr	r2, [r3, #0]
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001bfe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	2220      	movs	r2, #32
 8001c04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	2200      	movs	r2, #0
 8001c14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	e000      	b.n	8001c1e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001c1c:	2302      	movs	r3, #2
  }
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	3718      	adds	r7, #24
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	bf00      	nop
 8001c28:	00100002 	.word	0x00100002
 8001c2c:	ffff0000 	.word	0xffff0000

08001c30 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b08a      	sub	sp, #40	@ 0x28
 8001c34:	af02      	add	r7, sp, #8
 8001c36:	60f8      	str	r0, [r7, #12]
 8001c38:	607a      	str	r2, [r7, #4]
 8001c3a:	603b      	str	r3, [r7, #0]
 8001c3c:	460b      	mov	r3, r1
 8001c3e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8001c40:	f7ff fb1a 	bl	8001278 <HAL_GetTick>
 8001c44:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8001c46:	2300      	movs	r3, #0
 8001c48:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001c50:	b2db      	uxtb	r3, r3
 8001c52:	2b20      	cmp	r3, #32
 8001c54:	f040 8111 	bne.w	8001e7a <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001c58:	69fb      	ldr	r3, [r7, #28]
 8001c5a:	9300      	str	r3, [sp, #0]
 8001c5c:	2319      	movs	r3, #25
 8001c5e:	2201      	movs	r2, #1
 8001c60:	4988      	ldr	r1, [pc, #544]	@ (8001e84 <HAL_I2C_IsDeviceReady+0x254>)
 8001c62:	68f8      	ldr	r0, [r7, #12]
 8001c64:	f000 f994 	bl	8001f90 <I2C_WaitOnFlagUntilTimeout>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d001      	beq.n	8001c72 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8001c6e:	2302      	movs	r3, #2
 8001c70:	e104      	b.n	8001e7c <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001c78:	2b01      	cmp	r3, #1
 8001c7a:	d101      	bne.n	8001c80 <HAL_I2C_IsDeviceReady+0x50>
 8001c7c:	2302      	movs	r3, #2
 8001c7e:	e0fd      	b.n	8001e7c <HAL_I2C_IsDeviceReady+0x24c>
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	2201      	movs	r2, #1
 8001c84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f003 0301 	and.w	r3, r3, #1
 8001c92:	2b01      	cmp	r3, #1
 8001c94:	d007      	beq.n	8001ca6 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	681a      	ldr	r2, [r3, #0]
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f042 0201 	orr.w	r2, r2, #1
 8001ca4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	681a      	ldr	r2, [r3, #0]
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001cb4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	2224      	movs	r2, #36	@ 0x24
 8001cba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	4a70      	ldr	r2, [pc, #448]	@ (8001e88 <HAL_I2C_IsDeviceReady+0x258>)
 8001cc8:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	681a      	ldr	r2, [r3, #0]
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001cd8:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8001cda:	69fb      	ldr	r3, [r7, #28]
 8001cdc:	9300      	str	r3, [sp, #0]
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001ce6:	68f8      	ldr	r0, [r7, #12]
 8001ce8:	f000 f952 	bl	8001f90 <I2C_WaitOnFlagUntilTimeout>
 8001cec:	4603      	mov	r3, r0
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d00d      	beq.n	8001d0e <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001cfc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001d00:	d103      	bne.n	8001d0a <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001d08:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8001d0a:	2303      	movs	r3, #3
 8001d0c:	e0b6      	b.n	8001e7c <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001d0e:	897b      	ldrh	r3, [r7, #10]
 8001d10:	b2db      	uxtb	r3, r3
 8001d12:	461a      	mov	r2, r3
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001d1c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8001d1e:	f7ff faab 	bl	8001278 <HAL_GetTick>
 8001d22:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	695b      	ldr	r3, [r3, #20]
 8001d2a:	f003 0302 	and.w	r3, r3, #2
 8001d2e:	2b02      	cmp	r3, #2
 8001d30:	bf0c      	ite	eq
 8001d32:	2301      	moveq	r3, #1
 8001d34:	2300      	movne	r3, #0
 8001d36:	b2db      	uxtb	r3, r3
 8001d38:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	695b      	ldr	r3, [r3, #20]
 8001d40:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d44:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001d48:	bf0c      	ite	eq
 8001d4a:	2301      	moveq	r3, #1
 8001d4c:	2300      	movne	r3, #0
 8001d4e:	b2db      	uxtb	r3, r3
 8001d50:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001d52:	e025      	b.n	8001da0 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001d54:	f7ff fa90 	bl	8001278 <HAL_GetTick>
 8001d58:	4602      	mov	r2, r0
 8001d5a:	69fb      	ldr	r3, [r7, #28]
 8001d5c:	1ad3      	subs	r3, r2, r3
 8001d5e:	683a      	ldr	r2, [r7, #0]
 8001d60:	429a      	cmp	r2, r3
 8001d62:	d302      	bcc.n	8001d6a <HAL_I2C_IsDeviceReady+0x13a>
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d103      	bne.n	8001d72 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	22a0      	movs	r2, #160	@ 0xa0
 8001d6e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	695b      	ldr	r3, [r3, #20]
 8001d78:	f003 0302 	and.w	r3, r3, #2
 8001d7c:	2b02      	cmp	r3, #2
 8001d7e:	bf0c      	ite	eq
 8001d80:	2301      	moveq	r3, #1
 8001d82:	2300      	movne	r3, #0
 8001d84:	b2db      	uxtb	r3, r3
 8001d86:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	695b      	ldr	r3, [r3, #20]
 8001d8e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d92:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001d96:	bf0c      	ite	eq
 8001d98:	2301      	moveq	r3, #1
 8001d9a:	2300      	movne	r3, #0
 8001d9c:	b2db      	uxtb	r3, r3
 8001d9e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001da6:	b2db      	uxtb	r3, r3
 8001da8:	2ba0      	cmp	r3, #160	@ 0xa0
 8001daa:	d005      	beq.n	8001db8 <HAL_I2C_IsDeviceReady+0x188>
 8001dac:	7dfb      	ldrb	r3, [r7, #23]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d102      	bne.n	8001db8 <HAL_I2C_IsDeviceReady+0x188>
 8001db2:	7dbb      	ldrb	r3, [r7, #22]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d0cd      	beq.n	8001d54 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	2220      	movs	r2, #32
 8001dbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	695b      	ldr	r3, [r3, #20]
 8001dc6:	f003 0302 	and.w	r3, r3, #2
 8001dca:	2b02      	cmp	r3, #2
 8001dcc:	d129      	bne.n	8001e22 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	681a      	ldr	r2, [r3, #0]
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001ddc:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001dde:	2300      	movs	r3, #0
 8001de0:	613b      	str	r3, [r7, #16]
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	695b      	ldr	r3, [r3, #20]
 8001de8:	613b      	str	r3, [r7, #16]
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	699b      	ldr	r3, [r3, #24]
 8001df0:	613b      	str	r3, [r7, #16]
 8001df2:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001df4:	69fb      	ldr	r3, [r7, #28]
 8001df6:	9300      	str	r3, [sp, #0]
 8001df8:	2319      	movs	r3, #25
 8001dfa:	2201      	movs	r2, #1
 8001dfc:	4921      	ldr	r1, [pc, #132]	@ (8001e84 <HAL_I2C_IsDeviceReady+0x254>)
 8001dfe:	68f8      	ldr	r0, [r7, #12]
 8001e00:	f000 f8c6 	bl	8001f90 <I2C_WaitOnFlagUntilTimeout>
 8001e04:	4603      	mov	r3, r0
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d001      	beq.n	8001e0e <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	e036      	b.n	8001e7c <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	2220      	movs	r2, #32
 8001e12:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	2200      	movs	r2, #0
 8001e1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	e02c      	b.n	8001e7c <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	681a      	ldr	r2, [r3, #0]
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001e30:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001e3a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001e3c:	69fb      	ldr	r3, [r7, #28]
 8001e3e:	9300      	str	r3, [sp, #0]
 8001e40:	2319      	movs	r3, #25
 8001e42:	2201      	movs	r2, #1
 8001e44:	490f      	ldr	r1, [pc, #60]	@ (8001e84 <HAL_I2C_IsDeviceReady+0x254>)
 8001e46:	68f8      	ldr	r0, [r7, #12]
 8001e48:	f000 f8a2 	bl	8001f90 <I2C_WaitOnFlagUntilTimeout>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d001      	beq.n	8001e56 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8001e52:	2301      	movs	r3, #1
 8001e54:	e012      	b.n	8001e7c <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8001e56:	69bb      	ldr	r3, [r7, #24]
 8001e58:	3301      	adds	r3, #1
 8001e5a:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8001e5c:	69ba      	ldr	r2, [r7, #24]
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	429a      	cmp	r2, r3
 8001e62:	f4ff af32 	bcc.w	8001cca <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	2220      	movs	r2, #32
 8001e6a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	2200      	movs	r2, #0
 8001e72:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8001e76:	2301      	movs	r3, #1
 8001e78:	e000      	b.n	8001e7c <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8001e7a:	2302      	movs	r3, #2
  }
}
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	3720      	adds	r7, #32
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bd80      	pop	{r7, pc}
 8001e84:	00100002 	.word	0x00100002
 8001e88:	ffff0000 	.word	0xffff0000

08001e8c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b088      	sub	sp, #32
 8001e90:	af02      	add	r7, sp, #8
 8001e92:	60f8      	str	r0, [r7, #12]
 8001e94:	607a      	str	r2, [r7, #4]
 8001e96:	603b      	str	r3, [r7, #0]
 8001e98:	460b      	mov	r3, r1
 8001e9a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ea0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001ea2:	697b      	ldr	r3, [r7, #20]
 8001ea4:	2b08      	cmp	r3, #8
 8001ea6:	d006      	beq.n	8001eb6 <I2C_MasterRequestWrite+0x2a>
 8001ea8:	697b      	ldr	r3, [r7, #20]
 8001eaa:	2b01      	cmp	r3, #1
 8001eac:	d003      	beq.n	8001eb6 <I2C_MasterRequestWrite+0x2a>
 8001eae:	697b      	ldr	r3, [r7, #20]
 8001eb0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001eb4:	d108      	bne.n	8001ec8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	681a      	ldr	r2, [r3, #0]
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001ec4:	601a      	str	r2, [r3, #0]
 8001ec6:	e00b      	b.n	8001ee0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ecc:	2b12      	cmp	r3, #18
 8001ece:	d107      	bne.n	8001ee0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	681a      	ldr	r2, [r3, #0]
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001ede:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	9300      	str	r3, [sp, #0]
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001eec:	68f8      	ldr	r0, [r7, #12]
 8001eee:	f000 f84f 	bl	8001f90 <I2C_WaitOnFlagUntilTimeout>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d00d      	beq.n	8001f14 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f02:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001f06:	d103      	bne.n	8001f10 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001f0e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8001f10:	2303      	movs	r3, #3
 8001f12:	e035      	b.n	8001f80 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	691b      	ldr	r3, [r3, #16]
 8001f18:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001f1c:	d108      	bne.n	8001f30 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001f1e:	897b      	ldrh	r3, [r7, #10]
 8001f20:	b2db      	uxtb	r3, r3
 8001f22:	461a      	mov	r2, r3
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001f2c:	611a      	str	r2, [r3, #16]
 8001f2e:	e01b      	b.n	8001f68 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001f30:	897b      	ldrh	r3, [r7, #10]
 8001f32:	11db      	asrs	r3, r3, #7
 8001f34:	b2db      	uxtb	r3, r3
 8001f36:	f003 0306 	and.w	r3, r3, #6
 8001f3a:	b2db      	uxtb	r3, r3
 8001f3c:	f063 030f 	orn	r3, r3, #15
 8001f40:	b2da      	uxtb	r2, r3
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	687a      	ldr	r2, [r7, #4]
 8001f4c:	490e      	ldr	r1, [pc, #56]	@ (8001f88 <I2C_MasterRequestWrite+0xfc>)
 8001f4e:	68f8      	ldr	r0, [r7, #12]
 8001f50:	f000 f898 	bl	8002084 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001f54:	4603      	mov	r3, r0
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d001      	beq.n	8001f5e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	e010      	b.n	8001f80 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001f5e:	897b      	ldrh	r3, [r7, #10]
 8001f60:	b2da      	uxtb	r2, r3
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	687a      	ldr	r2, [r7, #4]
 8001f6c:	4907      	ldr	r1, [pc, #28]	@ (8001f8c <I2C_MasterRequestWrite+0x100>)
 8001f6e:	68f8      	ldr	r0, [r7, #12]
 8001f70:	f000 f888 	bl	8002084 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001f74:	4603      	mov	r3, r0
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d001      	beq.n	8001f7e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	e000      	b.n	8001f80 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001f7e:	2300      	movs	r3, #0
}
 8001f80:	4618      	mov	r0, r3
 8001f82:	3718      	adds	r7, #24
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bd80      	pop	{r7, pc}
 8001f88:	00010008 	.word	0x00010008
 8001f8c:	00010002 	.word	0x00010002

08001f90 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b084      	sub	sp, #16
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	60f8      	str	r0, [r7, #12]
 8001f98:	60b9      	str	r1, [r7, #8]
 8001f9a:	603b      	str	r3, [r7, #0]
 8001f9c:	4613      	mov	r3, r2
 8001f9e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001fa0:	e048      	b.n	8002034 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fa8:	d044      	beq.n	8002034 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001faa:	f7ff f965 	bl	8001278 <HAL_GetTick>
 8001fae:	4602      	mov	r2, r0
 8001fb0:	69bb      	ldr	r3, [r7, #24]
 8001fb2:	1ad3      	subs	r3, r2, r3
 8001fb4:	683a      	ldr	r2, [r7, #0]
 8001fb6:	429a      	cmp	r2, r3
 8001fb8:	d302      	bcc.n	8001fc0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d139      	bne.n	8002034 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001fc0:	68bb      	ldr	r3, [r7, #8]
 8001fc2:	0c1b      	lsrs	r3, r3, #16
 8001fc4:	b2db      	uxtb	r3, r3
 8001fc6:	2b01      	cmp	r3, #1
 8001fc8:	d10d      	bne.n	8001fe6 <I2C_WaitOnFlagUntilTimeout+0x56>
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	695b      	ldr	r3, [r3, #20]
 8001fd0:	43da      	mvns	r2, r3
 8001fd2:	68bb      	ldr	r3, [r7, #8]
 8001fd4:	4013      	ands	r3, r2
 8001fd6:	b29b      	uxth	r3, r3
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	bf0c      	ite	eq
 8001fdc:	2301      	moveq	r3, #1
 8001fde:	2300      	movne	r3, #0
 8001fe0:	b2db      	uxtb	r3, r3
 8001fe2:	461a      	mov	r2, r3
 8001fe4:	e00c      	b.n	8002000 <I2C_WaitOnFlagUntilTimeout+0x70>
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	699b      	ldr	r3, [r3, #24]
 8001fec:	43da      	mvns	r2, r3
 8001fee:	68bb      	ldr	r3, [r7, #8]
 8001ff0:	4013      	ands	r3, r2
 8001ff2:	b29b      	uxth	r3, r3
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	bf0c      	ite	eq
 8001ff8:	2301      	moveq	r3, #1
 8001ffa:	2300      	movne	r3, #0
 8001ffc:	b2db      	uxtb	r3, r3
 8001ffe:	461a      	mov	r2, r3
 8002000:	79fb      	ldrb	r3, [r7, #7]
 8002002:	429a      	cmp	r2, r3
 8002004:	d116      	bne.n	8002034 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	2200      	movs	r2, #0
 800200a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	2220      	movs	r2, #32
 8002010:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	2200      	movs	r2, #0
 8002018:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002020:	f043 0220 	orr.w	r2, r3, #32
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	2200      	movs	r2, #0
 800202c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002030:	2301      	movs	r3, #1
 8002032:	e023      	b.n	800207c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002034:	68bb      	ldr	r3, [r7, #8]
 8002036:	0c1b      	lsrs	r3, r3, #16
 8002038:	b2db      	uxtb	r3, r3
 800203a:	2b01      	cmp	r3, #1
 800203c:	d10d      	bne.n	800205a <I2C_WaitOnFlagUntilTimeout+0xca>
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	695b      	ldr	r3, [r3, #20]
 8002044:	43da      	mvns	r2, r3
 8002046:	68bb      	ldr	r3, [r7, #8]
 8002048:	4013      	ands	r3, r2
 800204a:	b29b      	uxth	r3, r3
 800204c:	2b00      	cmp	r3, #0
 800204e:	bf0c      	ite	eq
 8002050:	2301      	moveq	r3, #1
 8002052:	2300      	movne	r3, #0
 8002054:	b2db      	uxtb	r3, r3
 8002056:	461a      	mov	r2, r3
 8002058:	e00c      	b.n	8002074 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	699b      	ldr	r3, [r3, #24]
 8002060:	43da      	mvns	r2, r3
 8002062:	68bb      	ldr	r3, [r7, #8]
 8002064:	4013      	ands	r3, r2
 8002066:	b29b      	uxth	r3, r3
 8002068:	2b00      	cmp	r3, #0
 800206a:	bf0c      	ite	eq
 800206c:	2301      	moveq	r3, #1
 800206e:	2300      	movne	r3, #0
 8002070:	b2db      	uxtb	r3, r3
 8002072:	461a      	mov	r2, r3
 8002074:	79fb      	ldrb	r3, [r7, #7]
 8002076:	429a      	cmp	r2, r3
 8002078:	d093      	beq.n	8001fa2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800207a:	2300      	movs	r3, #0
}
 800207c:	4618      	mov	r0, r3
 800207e:	3710      	adds	r7, #16
 8002080:	46bd      	mov	sp, r7
 8002082:	bd80      	pop	{r7, pc}

08002084 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b084      	sub	sp, #16
 8002088:	af00      	add	r7, sp, #0
 800208a:	60f8      	str	r0, [r7, #12]
 800208c:	60b9      	str	r1, [r7, #8]
 800208e:	607a      	str	r2, [r7, #4]
 8002090:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002092:	e071      	b.n	8002178 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	695b      	ldr	r3, [r3, #20]
 800209a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800209e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80020a2:	d123      	bne.n	80020ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	681a      	ldr	r2, [r3, #0]
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80020b2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80020bc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	2200      	movs	r2, #0
 80020c2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	2220      	movs	r2, #32
 80020c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	2200      	movs	r2, #0
 80020d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020d8:	f043 0204 	orr.w	r2, r3, #4
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	2200      	movs	r2, #0
 80020e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80020e8:	2301      	movs	r3, #1
 80020ea:	e067      	b.n	80021bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020f2:	d041      	beq.n	8002178 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80020f4:	f7ff f8c0 	bl	8001278 <HAL_GetTick>
 80020f8:	4602      	mov	r2, r0
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	1ad3      	subs	r3, r2, r3
 80020fe:	687a      	ldr	r2, [r7, #4]
 8002100:	429a      	cmp	r2, r3
 8002102:	d302      	bcc.n	800210a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d136      	bne.n	8002178 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800210a:	68bb      	ldr	r3, [r7, #8]
 800210c:	0c1b      	lsrs	r3, r3, #16
 800210e:	b2db      	uxtb	r3, r3
 8002110:	2b01      	cmp	r3, #1
 8002112:	d10c      	bne.n	800212e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	695b      	ldr	r3, [r3, #20]
 800211a:	43da      	mvns	r2, r3
 800211c:	68bb      	ldr	r3, [r7, #8]
 800211e:	4013      	ands	r3, r2
 8002120:	b29b      	uxth	r3, r3
 8002122:	2b00      	cmp	r3, #0
 8002124:	bf14      	ite	ne
 8002126:	2301      	movne	r3, #1
 8002128:	2300      	moveq	r3, #0
 800212a:	b2db      	uxtb	r3, r3
 800212c:	e00b      	b.n	8002146 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	699b      	ldr	r3, [r3, #24]
 8002134:	43da      	mvns	r2, r3
 8002136:	68bb      	ldr	r3, [r7, #8]
 8002138:	4013      	ands	r3, r2
 800213a:	b29b      	uxth	r3, r3
 800213c:	2b00      	cmp	r3, #0
 800213e:	bf14      	ite	ne
 8002140:	2301      	movne	r3, #1
 8002142:	2300      	moveq	r3, #0
 8002144:	b2db      	uxtb	r3, r3
 8002146:	2b00      	cmp	r3, #0
 8002148:	d016      	beq.n	8002178 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	2200      	movs	r2, #0
 800214e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	2220      	movs	r2, #32
 8002154:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	2200      	movs	r2, #0
 800215c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002164:	f043 0220 	orr.w	r2, r3, #32
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	2200      	movs	r2, #0
 8002170:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002174:	2301      	movs	r3, #1
 8002176:	e021      	b.n	80021bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002178:	68bb      	ldr	r3, [r7, #8]
 800217a:	0c1b      	lsrs	r3, r3, #16
 800217c:	b2db      	uxtb	r3, r3
 800217e:	2b01      	cmp	r3, #1
 8002180:	d10c      	bne.n	800219c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	695b      	ldr	r3, [r3, #20]
 8002188:	43da      	mvns	r2, r3
 800218a:	68bb      	ldr	r3, [r7, #8]
 800218c:	4013      	ands	r3, r2
 800218e:	b29b      	uxth	r3, r3
 8002190:	2b00      	cmp	r3, #0
 8002192:	bf14      	ite	ne
 8002194:	2301      	movne	r3, #1
 8002196:	2300      	moveq	r3, #0
 8002198:	b2db      	uxtb	r3, r3
 800219a:	e00b      	b.n	80021b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	699b      	ldr	r3, [r3, #24]
 80021a2:	43da      	mvns	r2, r3
 80021a4:	68bb      	ldr	r3, [r7, #8]
 80021a6:	4013      	ands	r3, r2
 80021a8:	b29b      	uxth	r3, r3
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	bf14      	ite	ne
 80021ae:	2301      	movne	r3, #1
 80021b0:	2300      	moveq	r3, #0
 80021b2:	b2db      	uxtb	r3, r3
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	f47f af6d 	bne.w	8002094 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80021ba:	2300      	movs	r3, #0
}
 80021bc:	4618      	mov	r0, r3
 80021be:	3710      	adds	r7, #16
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bd80      	pop	{r7, pc}

080021c4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b084      	sub	sp, #16
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	60f8      	str	r0, [r7, #12]
 80021cc:	60b9      	str	r1, [r7, #8]
 80021ce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80021d0:	e034      	b.n	800223c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80021d2:	68f8      	ldr	r0, [r7, #12]
 80021d4:	f000 f886 	bl	80022e4 <I2C_IsAcknowledgeFailed>
 80021d8:	4603      	mov	r3, r0
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d001      	beq.n	80021e2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80021de:	2301      	movs	r3, #1
 80021e0:	e034      	b.n	800224c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80021e2:	68bb      	ldr	r3, [r7, #8]
 80021e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021e8:	d028      	beq.n	800223c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80021ea:	f7ff f845 	bl	8001278 <HAL_GetTick>
 80021ee:	4602      	mov	r2, r0
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	1ad3      	subs	r3, r2, r3
 80021f4:	68ba      	ldr	r2, [r7, #8]
 80021f6:	429a      	cmp	r2, r3
 80021f8:	d302      	bcc.n	8002200 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80021fa:	68bb      	ldr	r3, [r7, #8]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d11d      	bne.n	800223c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	695b      	ldr	r3, [r3, #20]
 8002206:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800220a:	2b80      	cmp	r3, #128	@ 0x80
 800220c:	d016      	beq.n	800223c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	2200      	movs	r2, #0
 8002212:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	2220      	movs	r2, #32
 8002218:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	2200      	movs	r2, #0
 8002220:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002228:	f043 0220 	orr.w	r2, r3, #32
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	2200      	movs	r2, #0
 8002234:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002238:	2301      	movs	r3, #1
 800223a:	e007      	b.n	800224c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	695b      	ldr	r3, [r3, #20]
 8002242:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002246:	2b80      	cmp	r3, #128	@ 0x80
 8002248:	d1c3      	bne.n	80021d2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800224a:	2300      	movs	r3, #0
}
 800224c:	4618      	mov	r0, r3
 800224e:	3710      	adds	r7, #16
 8002250:	46bd      	mov	sp, r7
 8002252:	bd80      	pop	{r7, pc}

08002254 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b084      	sub	sp, #16
 8002258:	af00      	add	r7, sp, #0
 800225a:	60f8      	str	r0, [r7, #12]
 800225c:	60b9      	str	r1, [r7, #8]
 800225e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002260:	e034      	b.n	80022cc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002262:	68f8      	ldr	r0, [r7, #12]
 8002264:	f000 f83e 	bl	80022e4 <I2C_IsAcknowledgeFailed>
 8002268:	4603      	mov	r3, r0
 800226a:	2b00      	cmp	r3, #0
 800226c:	d001      	beq.n	8002272 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800226e:	2301      	movs	r3, #1
 8002270:	e034      	b.n	80022dc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002272:	68bb      	ldr	r3, [r7, #8]
 8002274:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002278:	d028      	beq.n	80022cc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800227a:	f7fe fffd 	bl	8001278 <HAL_GetTick>
 800227e:	4602      	mov	r2, r0
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	1ad3      	subs	r3, r2, r3
 8002284:	68ba      	ldr	r2, [r7, #8]
 8002286:	429a      	cmp	r2, r3
 8002288:	d302      	bcc.n	8002290 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800228a:	68bb      	ldr	r3, [r7, #8]
 800228c:	2b00      	cmp	r3, #0
 800228e:	d11d      	bne.n	80022cc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	695b      	ldr	r3, [r3, #20]
 8002296:	f003 0304 	and.w	r3, r3, #4
 800229a:	2b04      	cmp	r3, #4
 800229c:	d016      	beq.n	80022cc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	2200      	movs	r2, #0
 80022a2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	2220      	movs	r2, #32
 80022a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	2200      	movs	r2, #0
 80022b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022b8:	f043 0220 	orr.w	r2, r3, #32
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	2200      	movs	r2, #0
 80022c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80022c8:	2301      	movs	r3, #1
 80022ca:	e007      	b.n	80022dc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	695b      	ldr	r3, [r3, #20]
 80022d2:	f003 0304 	and.w	r3, r3, #4
 80022d6:	2b04      	cmp	r3, #4
 80022d8:	d1c3      	bne.n	8002262 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80022da:	2300      	movs	r3, #0
}
 80022dc:	4618      	mov	r0, r3
 80022de:	3710      	adds	r7, #16
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bd80      	pop	{r7, pc}

080022e4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80022e4:	b480      	push	{r7}
 80022e6:	b083      	sub	sp, #12
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	695b      	ldr	r3, [r3, #20]
 80022f2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80022fa:	d11b      	bne.n	8002334 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002304:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2200      	movs	r2, #0
 800230a:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2220      	movs	r2, #32
 8002310:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2200      	movs	r2, #0
 8002318:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002320:	f043 0204 	orr.w	r2, r3, #4
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2200      	movs	r2, #0
 800232c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002330:	2301      	movs	r3, #1
 8002332:	e000      	b.n	8002336 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002334:	2300      	movs	r3, #0
}
 8002336:	4618      	mov	r0, r3
 8002338:	370c      	adds	r7, #12
 800233a:	46bd      	mov	sp, r7
 800233c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002340:	4770      	bx	lr
	...

08002344 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b086      	sub	sp, #24
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d101      	bne.n	8002356 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002352:	2301      	movs	r3, #1
 8002354:	e267      	b.n	8002826 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f003 0301 	and.w	r3, r3, #1
 800235e:	2b00      	cmp	r3, #0
 8002360:	d075      	beq.n	800244e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002362:	4b88      	ldr	r3, [pc, #544]	@ (8002584 <HAL_RCC_OscConfig+0x240>)
 8002364:	689b      	ldr	r3, [r3, #8]
 8002366:	f003 030c 	and.w	r3, r3, #12
 800236a:	2b04      	cmp	r3, #4
 800236c:	d00c      	beq.n	8002388 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800236e:	4b85      	ldr	r3, [pc, #532]	@ (8002584 <HAL_RCC_OscConfig+0x240>)
 8002370:	689b      	ldr	r3, [r3, #8]
 8002372:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002376:	2b08      	cmp	r3, #8
 8002378:	d112      	bne.n	80023a0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800237a:	4b82      	ldr	r3, [pc, #520]	@ (8002584 <HAL_RCC_OscConfig+0x240>)
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002382:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002386:	d10b      	bne.n	80023a0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002388:	4b7e      	ldr	r3, [pc, #504]	@ (8002584 <HAL_RCC_OscConfig+0x240>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002390:	2b00      	cmp	r3, #0
 8002392:	d05b      	beq.n	800244c <HAL_RCC_OscConfig+0x108>
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	2b00      	cmp	r3, #0
 800239a:	d157      	bne.n	800244c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800239c:	2301      	movs	r3, #1
 800239e:	e242      	b.n	8002826 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80023a8:	d106      	bne.n	80023b8 <HAL_RCC_OscConfig+0x74>
 80023aa:	4b76      	ldr	r3, [pc, #472]	@ (8002584 <HAL_RCC_OscConfig+0x240>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4a75      	ldr	r2, [pc, #468]	@ (8002584 <HAL_RCC_OscConfig+0x240>)
 80023b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80023b4:	6013      	str	r3, [r2, #0]
 80023b6:	e01d      	b.n	80023f4 <HAL_RCC_OscConfig+0xb0>
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80023c0:	d10c      	bne.n	80023dc <HAL_RCC_OscConfig+0x98>
 80023c2:	4b70      	ldr	r3, [pc, #448]	@ (8002584 <HAL_RCC_OscConfig+0x240>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4a6f      	ldr	r2, [pc, #444]	@ (8002584 <HAL_RCC_OscConfig+0x240>)
 80023c8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80023cc:	6013      	str	r3, [r2, #0]
 80023ce:	4b6d      	ldr	r3, [pc, #436]	@ (8002584 <HAL_RCC_OscConfig+0x240>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4a6c      	ldr	r2, [pc, #432]	@ (8002584 <HAL_RCC_OscConfig+0x240>)
 80023d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80023d8:	6013      	str	r3, [r2, #0]
 80023da:	e00b      	b.n	80023f4 <HAL_RCC_OscConfig+0xb0>
 80023dc:	4b69      	ldr	r3, [pc, #420]	@ (8002584 <HAL_RCC_OscConfig+0x240>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4a68      	ldr	r2, [pc, #416]	@ (8002584 <HAL_RCC_OscConfig+0x240>)
 80023e2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80023e6:	6013      	str	r3, [r2, #0]
 80023e8:	4b66      	ldr	r3, [pc, #408]	@ (8002584 <HAL_RCC_OscConfig+0x240>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4a65      	ldr	r2, [pc, #404]	@ (8002584 <HAL_RCC_OscConfig+0x240>)
 80023ee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80023f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d013      	beq.n	8002424 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023fc:	f7fe ff3c 	bl	8001278 <HAL_GetTick>
 8002400:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002402:	e008      	b.n	8002416 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002404:	f7fe ff38 	bl	8001278 <HAL_GetTick>
 8002408:	4602      	mov	r2, r0
 800240a:	693b      	ldr	r3, [r7, #16]
 800240c:	1ad3      	subs	r3, r2, r3
 800240e:	2b64      	cmp	r3, #100	@ 0x64
 8002410:	d901      	bls.n	8002416 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002412:	2303      	movs	r3, #3
 8002414:	e207      	b.n	8002826 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002416:	4b5b      	ldr	r3, [pc, #364]	@ (8002584 <HAL_RCC_OscConfig+0x240>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800241e:	2b00      	cmp	r3, #0
 8002420:	d0f0      	beq.n	8002404 <HAL_RCC_OscConfig+0xc0>
 8002422:	e014      	b.n	800244e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002424:	f7fe ff28 	bl	8001278 <HAL_GetTick>
 8002428:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800242a:	e008      	b.n	800243e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800242c:	f7fe ff24 	bl	8001278 <HAL_GetTick>
 8002430:	4602      	mov	r2, r0
 8002432:	693b      	ldr	r3, [r7, #16]
 8002434:	1ad3      	subs	r3, r2, r3
 8002436:	2b64      	cmp	r3, #100	@ 0x64
 8002438:	d901      	bls.n	800243e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800243a:	2303      	movs	r3, #3
 800243c:	e1f3      	b.n	8002826 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800243e:	4b51      	ldr	r3, [pc, #324]	@ (8002584 <HAL_RCC_OscConfig+0x240>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002446:	2b00      	cmp	r3, #0
 8002448:	d1f0      	bne.n	800242c <HAL_RCC_OscConfig+0xe8>
 800244a:	e000      	b.n	800244e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800244c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f003 0302 	and.w	r3, r3, #2
 8002456:	2b00      	cmp	r3, #0
 8002458:	d063      	beq.n	8002522 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800245a:	4b4a      	ldr	r3, [pc, #296]	@ (8002584 <HAL_RCC_OscConfig+0x240>)
 800245c:	689b      	ldr	r3, [r3, #8]
 800245e:	f003 030c 	and.w	r3, r3, #12
 8002462:	2b00      	cmp	r3, #0
 8002464:	d00b      	beq.n	800247e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002466:	4b47      	ldr	r3, [pc, #284]	@ (8002584 <HAL_RCC_OscConfig+0x240>)
 8002468:	689b      	ldr	r3, [r3, #8]
 800246a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800246e:	2b08      	cmp	r3, #8
 8002470:	d11c      	bne.n	80024ac <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002472:	4b44      	ldr	r3, [pc, #272]	@ (8002584 <HAL_RCC_OscConfig+0x240>)
 8002474:	685b      	ldr	r3, [r3, #4]
 8002476:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800247a:	2b00      	cmp	r3, #0
 800247c:	d116      	bne.n	80024ac <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800247e:	4b41      	ldr	r3, [pc, #260]	@ (8002584 <HAL_RCC_OscConfig+0x240>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f003 0302 	and.w	r3, r3, #2
 8002486:	2b00      	cmp	r3, #0
 8002488:	d005      	beq.n	8002496 <HAL_RCC_OscConfig+0x152>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	68db      	ldr	r3, [r3, #12]
 800248e:	2b01      	cmp	r3, #1
 8002490:	d001      	beq.n	8002496 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002492:	2301      	movs	r3, #1
 8002494:	e1c7      	b.n	8002826 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002496:	4b3b      	ldr	r3, [pc, #236]	@ (8002584 <HAL_RCC_OscConfig+0x240>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	691b      	ldr	r3, [r3, #16]
 80024a2:	00db      	lsls	r3, r3, #3
 80024a4:	4937      	ldr	r1, [pc, #220]	@ (8002584 <HAL_RCC_OscConfig+0x240>)
 80024a6:	4313      	orrs	r3, r2
 80024a8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024aa:	e03a      	b.n	8002522 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	68db      	ldr	r3, [r3, #12]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d020      	beq.n	80024f6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80024b4:	4b34      	ldr	r3, [pc, #208]	@ (8002588 <HAL_RCC_OscConfig+0x244>)
 80024b6:	2201      	movs	r2, #1
 80024b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024ba:	f7fe fedd 	bl	8001278 <HAL_GetTick>
 80024be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024c0:	e008      	b.n	80024d4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024c2:	f7fe fed9 	bl	8001278 <HAL_GetTick>
 80024c6:	4602      	mov	r2, r0
 80024c8:	693b      	ldr	r3, [r7, #16]
 80024ca:	1ad3      	subs	r3, r2, r3
 80024cc:	2b02      	cmp	r3, #2
 80024ce:	d901      	bls.n	80024d4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80024d0:	2303      	movs	r3, #3
 80024d2:	e1a8      	b.n	8002826 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024d4:	4b2b      	ldr	r3, [pc, #172]	@ (8002584 <HAL_RCC_OscConfig+0x240>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f003 0302 	and.w	r3, r3, #2
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d0f0      	beq.n	80024c2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024e0:	4b28      	ldr	r3, [pc, #160]	@ (8002584 <HAL_RCC_OscConfig+0x240>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	691b      	ldr	r3, [r3, #16]
 80024ec:	00db      	lsls	r3, r3, #3
 80024ee:	4925      	ldr	r1, [pc, #148]	@ (8002584 <HAL_RCC_OscConfig+0x240>)
 80024f0:	4313      	orrs	r3, r2
 80024f2:	600b      	str	r3, [r1, #0]
 80024f4:	e015      	b.n	8002522 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024f6:	4b24      	ldr	r3, [pc, #144]	@ (8002588 <HAL_RCC_OscConfig+0x244>)
 80024f8:	2200      	movs	r2, #0
 80024fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024fc:	f7fe febc 	bl	8001278 <HAL_GetTick>
 8002500:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002502:	e008      	b.n	8002516 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002504:	f7fe feb8 	bl	8001278 <HAL_GetTick>
 8002508:	4602      	mov	r2, r0
 800250a:	693b      	ldr	r3, [r7, #16]
 800250c:	1ad3      	subs	r3, r2, r3
 800250e:	2b02      	cmp	r3, #2
 8002510:	d901      	bls.n	8002516 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002512:	2303      	movs	r3, #3
 8002514:	e187      	b.n	8002826 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002516:	4b1b      	ldr	r3, [pc, #108]	@ (8002584 <HAL_RCC_OscConfig+0x240>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f003 0302 	and.w	r3, r3, #2
 800251e:	2b00      	cmp	r3, #0
 8002520:	d1f0      	bne.n	8002504 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f003 0308 	and.w	r3, r3, #8
 800252a:	2b00      	cmp	r3, #0
 800252c:	d036      	beq.n	800259c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	695b      	ldr	r3, [r3, #20]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d016      	beq.n	8002564 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002536:	4b15      	ldr	r3, [pc, #84]	@ (800258c <HAL_RCC_OscConfig+0x248>)
 8002538:	2201      	movs	r2, #1
 800253a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800253c:	f7fe fe9c 	bl	8001278 <HAL_GetTick>
 8002540:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002542:	e008      	b.n	8002556 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002544:	f7fe fe98 	bl	8001278 <HAL_GetTick>
 8002548:	4602      	mov	r2, r0
 800254a:	693b      	ldr	r3, [r7, #16]
 800254c:	1ad3      	subs	r3, r2, r3
 800254e:	2b02      	cmp	r3, #2
 8002550:	d901      	bls.n	8002556 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002552:	2303      	movs	r3, #3
 8002554:	e167      	b.n	8002826 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002556:	4b0b      	ldr	r3, [pc, #44]	@ (8002584 <HAL_RCC_OscConfig+0x240>)
 8002558:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800255a:	f003 0302 	and.w	r3, r3, #2
 800255e:	2b00      	cmp	r3, #0
 8002560:	d0f0      	beq.n	8002544 <HAL_RCC_OscConfig+0x200>
 8002562:	e01b      	b.n	800259c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002564:	4b09      	ldr	r3, [pc, #36]	@ (800258c <HAL_RCC_OscConfig+0x248>)
 8002566:	2200      	movs	r2, #0
 8002568:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800256a:	f7fe fe85 	bl	8001278 <HAL_GetTick>
 800256e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002570:	e00e      	b.n	8002590 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002572:	f7fe fe81 	bl	8001278 <HAL_GetTick>
 8002576:	4602      	mov	r2, r0
 8002578:	693b      	ldr	r3, [r7, #16]
 800257a:	1ad3      	subs	r3, r2, r3
 800257c:	2b02      	cmp	r3, #2
 800257e:	d907      	bls.n	8002590 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002580:	2303      	movs	r3, #3
 8002582:	e150      	b.n	8002826 <HAL_RCC_OscConfig+0x4e2>
 8002584:	40023800 	.word	0x40023800
 8002588:	42470000 	.word	0x42470000
 800258c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002590:	4b88      	ldr	r3, [pc, #544]	@ (80027b4 <HAL_RCC_OscConfig+0x470>)
 8002592:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002594:	f003 0302 	and.w	r3, r3, #2
 8002598:	2b00      	cmp	r3, #0
 800259a:	d1ea      	bne.n	8002572 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f003 0304 	and.w	r3, r3, #4
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	f000 8097 	beq.w	80026d8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025aa:	2300      	movs	r3, #0
 80025ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025ae:	4b81      	ldr	r3, [pc, #516]	@ (80027b4 <HAL_RCC_OscConfig+0x470>)
 80025b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d10f      	bne.n	80025da <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025ba:	2300      	movs	r3, #0
 80025bc:	60bb      	str	r3, [r7, #8]
 80025be:	4b7d      	ldr	r3, [pc, #500]	@ (80027b4 <HAL_RCC_OscConfig+0x470>)
 80025c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025c2:	4a7c      	ldr	r2, [pc, #496]	@ (80027b4 <HAL_RCC_OscConfig+0x470>)
 80025c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80025c8:	6413      	str	r3, [r2, #64]	@ 0x40
 80025ca:	4b7a      	ldr	r3, [pc, #488]	@ (80027b4 <HAL_RCC_OscConfig+0x470>)
 80025cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025d2:	60bb      	str	r3, [r7, #8]
 80025d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80025d6:	2301      	movs	r3, #1
 80025d8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025da:	4b77      	ldr	r3, [pc, #476]	@ (80027b8 <HAL_RCC_OscConfig+0x474>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d118      	bne.n	8002618 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80025e6:	4b74      	ldr	r3, [pc, #464]	@ (80027b8 <HAL_RCC_OscConfig+0x474>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4a73      	ldr	r2, [pc, #460]	@ (80027b8 <HAL_RCC_OscConfig+0x474>)
 80025ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80025f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025f2:	f7fe fe41 	bl	8001278 <HAL_GetTick>
 80025f6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025f8:	e008      	b.n	800260c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025fa:	f7fe fe3d 	bl	8001278 <HAL_GetTick>
 80025fe:	4602      	mov	r2, r0
 8002600:	693b      	ldr	r3, [r7, #16]
 8002602:	1ad3      	subs	r3, r2, r3
 8002604:	2b02      	cmp	r3, #2
 8002606:	d901      	bls.n	800260c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002608:	2303      	movs	r3, #3
 800260a:	e10c      	b.n	8002826 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800260c:	4b6a      	ldr	r3, [pc, #424]	@ (80027b8 <HAL_RCC_OscConfig+0x474>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002614:	2b00      	cmp	r3, #0
 8002616:	d0f0      	beq.n	80025fa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	689b      	ldr	r3, [r3, #8]
 800261c:	2b01      	cmp	r3, #1
 800261e:	d106      	bne.n	800262e <HAL_RCC_OscConfig+0x2ea>
 8002620:	4b64      	ldr	r3, [pc, #400]	@ (80027b4 <HAL_RCC_OscConfig+0x470>)
 8002622:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002624:	4a63      	ldr	r2, [pc, #396]	@ (80027b4 <HAL_RCC_OscConfig+0x470>)
 8002626:	f043 0301 	orr.w	r3, r3, #1
 800262a:	6713      	str	r3, [r2, #112]	@ 0x70
 800262c:	e01c      	b.n	8002668 <HAL_RCC_OscConfig+0x324>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	689b      	ldr	r3, [r3, #8]
 8002632:	2b05      	cmp	r3, #5
 8002634:	d10c      	bne.n	8002650 <HAL_RCC_OscConfig+0x30c>
 8002636:	4b5f      	ldr	r3, [pc, #380]	@ (80027b4 <HAL_RCC_OscConfig+0x470>)
 8002638:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800263a:	4a5e      	ldr	r2, [pc, #376]	@ (80027b4 <HAL_RCC_OscConfig+0x470>)
 800263c:	f043 0304 	orr.w	r3, r3, #4
 8002640:	6713      	str	r3, [r2, #112]	@ 0x70
 8002642:	4b5c      	ldr	r3, [pc, #368]	@ (80027b4 <HAL_RCC_OscConfig+0x470>)
 8002644:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002646:	4a5b      	ldr	r2, [pc, #364]	@ (80027b4 <HAL_RCC_OscConfig+0x470>)
 8002648:	f043 0301 	orr.w	r3, r3, #1
 800264c:	6713      	str	r3, [r2, #112]	@ 0x70
 800264e:	e00b      	b.n	8002668 <HAL_RCC_OscConfig+0x324>
 8002650:	4b58      	ldr	r3, [pc, #352]	@ (80027b4 <HAL_RCC_OscConfig+0x470>)
 8002652:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002654:	4a57      	ldr	r2, [pc, #348]	@ (80027b4 <HAL_RCC_OscConfig+0x470>)
 8002656:	f023 0301 	bic.w	r3, r3, #1
 800265a:	6713      	str	r3, [r2, #112]	@ 0x70
 800265c:	4b55      	ldr	r3, [pc, #340]	@ (80027b4 <HAL_RCC_OscConfig+0x470>)
 800265e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002660:	4a54      	ldr	r2, [pc, #336]	@ (80027b4 <HAL_RCC_OscConfig+0x470>)
 8002662:	f023 0304 	bic.w	r3, r3, #4
 8002666:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	689b      	ldr	r3, [r3, #8]
 800266c:	2b00      	cmp	r3, #0
 800266e:	d015      	beq.n	800269c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002670:	f7fe fe02 	bl	8001278 <HAL_GetTick>
 8002674:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002676:	e00a      	b.n	800268e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002678:	f7fe fdfe 	bl	8001278 <HAL_GetTick>
 800267c:	4602      	mov	r2, r0
 800267e:	693b      	ldr	r3, [r7, #16]
 8002680:	1ad3      	subs	r3, r2, r3
 8002682:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002686:	4293      	cmp	r3, r2
 8002688:	d901      	bls.n	800268e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800268a:	2303      	movs	r3, #3
 800268c:	e0cb      	b.n	8002826 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800268e:	4b49      	ldr	r3, [pc, #292]	@ (80027b4 <HAL_RCC_OscConfig+0x470>)
 8002690:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002692:	f003 0302 	and.w	r3, r3, #2
 8002696:	2b00      	cmp	r3, #0
 8002698:	d0ee      	beq.n	8002678 <HAL_RCC_OscConfig+0x334>
 800269a:	e014      	b.n	80026c6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800269c:	f7fe fdec 	bl	8001278 <HAL_GetTick>
 80026a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026a2:	e00a      	b.n	80026ba <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026a4:	f7fe fde8 	bl	8001278 <HAL_GetTick>
 80026a8:	4602      	mov	r2, r0
 80026aa:	693b      	ldr	r3, [r7, #16]
 80026ac:	1ad3      	subs	r3, r2, r3
 80026ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d901      	bls.n	80026ba <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80026b6:	2303      	movs	r3, #3
 80026b8:	e0b5      	b.n	8002826 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026ba:	4b3e      	ldr	r3, [pc, #248]	@ (80027b4 <HAL_RCC_OscConfig+0x470>)
 80026bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026be:	f003 0302 	and.w	r3, r3, #2
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d1ee      	bne.n	80026a4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80026c6:	7dfb      	ldrb	r3, [r7, #23]
 80026c8:	2b01      	cmp	r3, #1
 80026ca:	d105      	bne.n	80026d8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026cc:	4b39      	ldr	r3, [pc, #228]	@ (80027b4 <HAL_RCC_OscConfig+0x470>)
 80026ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026d0:	4a38      	ldr	r2, [pc, #224]	@ (80027b4 <HAL_RCC_OscConfig+0x470>)
 80026d2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80026d6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	699b      	ldr	r3, [r3, #24]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	f000 80a1 	beq.w	8002824 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80026e2:	4b34      	ldr	r3, [pc, #208]	@ (80027b4 <HAL_RCC_OscConfig+0x470>)
 80026e4:	689b      	ldr	r3, [r3, #8]
 80026e6:	f003 030c 	and.w	r3, r3, #12
 80026ea:	2b08      	cmp	r3, #8
 80026ec:	d05c      	beq.n	80027a8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	699b      	ldr	r3, [r3, #24]
 80026f2:	2b02      	cmp	r3, #2
 80026f4:	d141      	bne.n	800277a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026f6:	4b31      	ldr	r3, [pc, #196]	@ (80027bc <HAL_RCC_OscConfig+0x478>)
 80026f8:	2200      	movs	r2, #0
 80026fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026fc:	f7fe fdbc 	bl	8001278 <HAL_GetTick>
 8002700:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002702:	e008      	b.n	8002716 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002704:	f7fe fdb8 	bl	8001278 <HAL_GetTick>
 8002708:	4602      	mov	r2, r0
 800270a:	693b      	ldr	r3, [r7, #16]
 800270c:	1ad3      	subs	r3, r2, r3
 800270e:	2b02      	cmp	r3, #2
 8002710:	d901      	bls.n	8002716 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002712:	2303      	movs	r3, #3
 8002714:	e087      	b.n	8002826 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002716:	4b27      	ldr	r3, [pc, #156]	@ (80027b4 <HAL_RCC_OscConfig+0x470>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800271e:	2b00      	cmp	r3, #0
 8002720:	d1f0      	bne.n	8002704 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	69da      	ldr	r2, [r3, #28]
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6a1b      	ldr	r3, [r3, #32]
 800272a:	431a      	orrs	r2, r3
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002730:	019b      	lsls	r3, r3, #6
 8002732:	431a      	orrs	r2, r3
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002738:	085b      	lsrs	r3, r3, #1
 800273a:	3b01      	subs	r3, #1
 800273c:	041b      	lsls	r3, r3, #16
 800273e:	431a      	orrs	r2, r3
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002744:	061b      	lsls	r3, r3, #24
 8002746:	491b      	ldr	r1, [pc, #108]	@ (80027b4 <HAL_RCC_OscConfig+0x470>)
 8002748:	4313      	orrs	r3, r2
 800274a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800274c:	4b1b      	ldr	r3, [pc, #108]	@ (80027bc <HAL_RCC_OscConfig+0x478>)
 800274e:	2201      	movs	r2, #1
 8002750:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002752:	f7fe fd91 	bl	8001278 <HAL_GetTick>
 8002756:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002758:	e008      	b.n	800276c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800275a:	f7fe fd8d 	bl	8001278 <HAL_GetTick>
 800275e:	4602      	mov	r2, r0
 8002760:	693b      	ldr	r3, [r7, #16]
 8002762:	1ad3      	subs	r3, r2, r3
 8002764:	2b02      	cmp	r3, #2
 8002766:	d901      	bls.n	800276c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002768:	2303      	movs	r3, #3
 800276a:	e05c      	b.n	8002826 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800276c:	4b11      	ldr	r3, [pc, #68]	@ (80027b4 <HAL_RCC_OscConfig+0x470>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002774:	2b00      	cmp	r3, #0
 8002776:	d0f0      	beq.n	800275a <HAL_RCC_OscConfig+0x416>
 8002778:	e054      	b.n	8002824 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800277a:	4b10      	ldr	r3, [pc, #64]	@ (80027bc <HAL_RCC_OscConfig+0x478>)
 800277c:	2200      	movs	r2, #0
 800277e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002780:	f7fe fd7a 	bl	8001278 <HAL_GetTick>
 8002784:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002786:	e008      	b.n	800279a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002788:	f7fe fd76 	bl	8001278 <HAL_GetTick>
 800278c:	4602      	mov	r2, r0
 800278e:	693b      	ldr	r3, [r7, #16]
 8002790:	1ad3      	subs	r3, r2, r3
 8002792:	2b02      	cmp	r3, #2
 8002794:	d901      	bls.n	800279a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002796:	2303      	movs	r3, #3
 8002798:	e045      	b.n	8002826 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800279a:	4b06      	ldr	r3, [pc, #24]	@ (80027b4 <HAL_RCC_OscConfig+0x470>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d1f0      	bne.n	8002788 <HAL_RCC_OscConfig+0x444>
 80027a6:	e03d      	b.n	8002824 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	699b      	ldr	r3, [r3, #24]
 80027ac:	2b01      	cmp	r3, #1
 80027ae:	d107      	bne.n	80027c0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80027b0:	2301      	movs	r3, #1
 80027b2:	e038      	b.n	8002826 <HAL_RCC_OscConfig+0x4e2>
 80027b4:	40023800 	.word	0x40023800
 80027b8:	40007000 	.word	0x40007000
 80027bc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80027c0:	4b1b      	ldr	r3, [pc, #108]	@ (8002830 <HAL_RCC_OscConfig+0x4ec>)
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	699b      	ldr	r3, [r3, #24]
 80027ca:	2b01      	cmp	r3, #1
 80027cc:	d028      	beq.n	8002820 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80027d8:	429a      	cmp	r2, r3
 80027da:	d121      	bne.n	8002820 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027e6:	429a      	cmp	r2, r3
 80027e8:	d11a      	bne.n	8002820 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80027ea:	68fa      	ldr	r2, [r7, #12]
 80027ec:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80027f0:	4013      	ands	r3, r2
 80027f2:	687a      	ldr	r2, [r7, #4]
 80027f4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80027f6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80027f8:	4293      	cmp	r3, r2
 80027fa:	d111      	bne.n	8002820 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002806:	085b      	lsrs	r3, r3, #1
 8002808:	3b01      	subs	r3, #1
 800280a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800280c:	429a      	cmp	r2, r3
 800280e:	d107      	bne.n	8002820 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800281a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800281c:	429a      	cmp	r2, r3
 800281e:	d001      	beq.n	8002824 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002820:	2301      	movs	r3, #1
 8002822:	e000      	b.n	8002826 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002824:	2300      	movs	r3, #0
}
 8002826:	4618      	mov	r0, r3
 8002828:	3718      	adds	r7, #24
 800282a:	46bd      	mov	sp, r7
 800282c:	bd80      	pop	{r7, pc}
 800282e:	bf00      	nop
 8002830:	40023800 	.word	0x40023800

08002834 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b084      	sub	sp, #16
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
 800283c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d101      	bne.n	8002848 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002844:	2301      	movs	r3, #1
 8002846:	e0cc      	b.n	80029e2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002848:	4b68      	ldr	r3, [pc, #416]	@ (80029ec <HAL_RCC_ClockConfig+0x1b8>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f003 0307 	and.w	r3, r3, #7
 8002850:	683a      	ldr	r2, [r7, #0]
 8002852:	429a      	cmp	r2, r3
 8002854:	d90c      	bls.n	8002870 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002856:	4b65      	ldr	r3, [pc, #404]	@ (80029ec <HAL_RCC_ClockConfig+0x1b8>)
 8002858:	683a      	ldr	r2, [r7, #0]
 800285a:	b2d2      	uxtb	r2, r2
 800285c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800285e:	4b63      	ldr	r3, [pc, #396]	@ (80029ec <HAL_RCC_ClockConfig+0x1b8>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f003 0307 	and.w	r3, r3, #7
 8002866:	683a      	ldr	r2, [r7, #0]
 8002868:	429a      	cmp	r2, r3
 800286a:	d001      	beq.n	8002870 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800286c:	2301      	movs	r3, #1
 800286e:	e0b8      	b.n	80029e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f003 0302 	and.w	r3, r3, #2
 8002878:	2b00      	cmp	r3, #0
 800287a:	d020      	beq.n	80028be <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f003 0304 	and.w	r3, r3, #4
 8002884:	2b00      	cmp	r3, #0
 8002886:	d005      	beq.n	8002894 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002888:	4b59      	ldr	r3, [pc, #356]	@ (80029f0 <HAL_RCC_ClockConfig+0x1bc>)
 800288a:	689b      	ldr	r3, [r3, #8]
 800288c:	4a58      	ldr	r2, [pc, #352]	@ (80029f0 <HAL_RCC_ClockConfig+0x1bc>)
 800288e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002892:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f003 0308 	and.w	r3, r3, #8
 800289c:	2b00      	cmp	r3, #0
 800289e:	d005      	beq.n	80028ac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80028a0:	4b53      	ldr	r3, [pc, #332]	@ (80029f0 <HAL_RCC_ClockConfig+0x1bc>)
 80028a2:	689b      	ldr	r3, [r3, #8]
 80028a4:	4a52      	ldr	r2, [pc, #328]	@ (80029f0 <HAL_RCC_ClockConfig+0x1bc>)
 80028a6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80028aa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028ac:	4b50      	ldr	r3, [pc, #320]	@ (80029f0 <HAL_RCC_ClockConfig+0x1bc>)
 80028ae:	689b      	ldr	r3, [r3, #8]
 80028b0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	689b      	ldr	r3, [r3, #8]
 80028b8:	494d      	ldr	r1, [pc, #308]	@ (80029f0 <HAL_RCC_ClockConfig+0x1bc>)
 80028ba:	4313      	orrs	r3, r2
 80028bc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f003 0301 	and.w	r3, r3, #1
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d044      	beq.n	8002954 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	2b01      	cmp	r3, #1
 80028d0:	d107      	bne.n	80028e2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028d2:	4b47      	ldr	r3, [pc, #284]	@ (80029f0 <HAL_RCC_ClockConfig+0x1bc>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d119      	bne.n	8002912 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028de:	2301      	movs	r3, #1
 80028e0:	e07f      	b.n	80029e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	2b02      	cmp	r3, #2
 80028e8:	d003      	beq.n	80028f2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80028ee:	2b03      	cmp	r3, #3
 80028f0:	d107      	bne.n	8002902 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028f2:	4b3f      	ldr	r3, [pc, #252]	@ (80029f0 <HAL_RCC_ClockConfig+0x1bc>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d109      	bne.n	8002912 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028fe:	2301      	movs	r3, #1
 8002900:	e06f      	b.n	80029e2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002902:	4b3b      	ldr	r3, [pc, #236]	@ (80029f0 <HAL_RCC_ClockConfig+0x1bc>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f003 0302 	and.w	r3, r3, #2
 800290a:	2b00      	cmp	r3, #0
 800290c:	d101      	bne.n	8002912 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800290e:	2301      	movs	r3, #1
 8002910:	e067      	b.n	80029e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002912:	4b37      	ldr	r3, [pc, #220]	@ (80029f0 <HAL_RCC_ClockConfig+0x1bc>)
 8002914:	689b      	ldr	r3, [r3, #8]
 8002916:	f023 0203 	bic.w	r2, r3, #3
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	4934      	ldr	r1, [pc, #208]	@ (80029f0 <HAL_RCC_ClockConfig+0x1bc>)
 8002920:	4313      	orrs	r3, r2
 8002922:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002924:	f7fe fca8 	bl	8001278 <HAL_GetTick>
 8002928:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800292a:	e00a      	b.n	8002942 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800292c:	f7fe fca4 	bl	8001278 <HAL_GetTick>
 8002930:	4602      	mov	r2, r0
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	1ad3      	subs	r3, r2, r3
 8002936:	f241 3288 	movw	r2, #5000	@ 0x1388
 800293a:	4293      	cmp	r3, r2
 800293c:	d901      	bls.n	8002942 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800293e:	2303      	movs	r3, #3
 8002940:	e04f      	b.n	80029e2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002942:	4b2b      	ldr	r3, [pc, #172]	@ (80029f0 <HAL_RCC_ClockConfig+0x1bc>)
 8002944:	689b      	ldr	r3, [r3, #8]
 8002946:	f003 020c 	and.w	r2, r3, #12
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	009b      	lsls	r3, r3, #2
 8002950:	429a      	cmp	r2, r3
 8002952:	d1eb      	bne.n	800292c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002954:	4b25      	ldr	r3, [pc, #148]	@ (80029ec <HAL_RCC_ClockConfig+0x1b8>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f003 0307 	and.w	r3, r3, #7
 800295c:	683a      	ldr	r2, [r7, #0]
 800295e:	429a      	cmp	r2, r3
 8002960:	d20c      	bcs.n	800297c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002962:	4b22      	ldr	r3, [pc, #136]	@ (80029ec <HAL_RCC_ClockConfig+0x1b8>)
 8002964:	683a      	ldr	r2, [r7, #0]
 8002966:	b2d2      	uxtb	r2, r2
 8002968:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800296a:	4b20      	ldr	r3, [pc, #128]	@ (80029ec <HAL_RCC_ClockConfig+0x1b8>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f003 0307 	and.w	r3, r3, #7
 8002972:	683a      	ldr	r2, [r7, #0]
 8002974:	429a      	cmp	r2, r3
 8002976:	d001      	beq.n	800297c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002978:	2301      	movs	r3, #1
 800297a:	e032      	b.n	80029e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f003 0304 	and.w	r3, r3, #4
 8002984:	2b00      	cmp	r3, #0
 8002986:	d008      	beq.n	800299a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002988:	4b19      	ldr	r3, [pc, #100]	@ (80029f0 <HAL_RCC_ClockConfig+0x1bc>)
 800298a:	689b      	ldr	r3, [r3, #8]
 800298c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	68db      	ldr	r3, [r3, #12]
 8002994:	4916      	ldr	r1, [pc, #88]	@ (80029f0 <HAL_RCC_ClockConfig+0x1bc>)
 8002996:	4313      	orrs	r3, r2
 8002998:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f003 0308 	and.w	r3, r3, #8
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d009      	beq.n	80029ba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80029a6:	4b12      	ldr	r3, [pc, #72]	@ (80029f0 <HAL_RCC_ClockConfig+0x1bc>)
 80029a8:	689b      	ldr	r3, [r3, #8]
 80029aa:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	691b      	ldr	r3, [r3, #16]
 80029b2:	00db      	lsls	r3, r3, #3
 80029b4:	490e      	ldr	r1, [pc, #56]	@ (80029f0 <HAL_RCC_ClockConfig+0x1bc>)
 80029b6:	4313      	orrs	r3, r2
 80029b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80029ba:	f000 f821 	bl	8002a00 <HAL_RCC_GetSysClockFreq>
 80029be:	4602      	mov	r2, r0
 80029c0:	4b0b      	ldr	r3, [pc, #44]	@ (80029f0 <HAL_RCC_ClockConfig+0x1bc>)
 80029c2:	689b      	ldr	r3, [r3, #8]
 80029c4:	091b      	lsrs	r3, r3, #4
 80029c6:	f003 030f 	and.w	r3, r3, #15
 80029ca:	490a      	ldr	r1, [pc, #40]	@ (80029f4 <HAL_RCC_ClockConfig+0x1c0>)
 80029cc:	5ccb      	ldrb	r3, [r1, r3]
 80029ce:	fa22 f303 	lsr.w	r3, r2, r3
 80029d2:	4a09      	ldr	r2, [pc, #36]	@ (80029f8 <HAL_RCC_ClockConfig+0x1c4>)
 80029d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80029d6:	4b09      	ldr	r3, [pc, #36]	@ (80029fc <HAL_RCC_ClockConfig+0x1c8>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4618      	mov	r0, r3
 80029dc:	f7fe fc08 	bl	80011f0 <HAL_InitTick>

  return HAL_OK;
 80029e0:	2300      	movs	r3, #0
}
 80029e2:	4618      	mov	r0, r3
 80029e4:	3710      	adds	r7, #16
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bd80      	pop	{r7, pc}
 80029ea:	bf00      	nop
 80029ec:	40023c00 	.word	0x40023c00
 80029f0:	40023800 	.word	0x40023800
 80029f4:	08005048 	.word	0x08005048
 80029f8:	20000008 	.word	0x20000008
 80029fc:	2000000c 	.word	0x2000000c

08002a00 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a00:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002a04:	b090      	sub	sp, #64	@ 0x40
 8002a06:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002a08:	2300      	movs	r3, #0
 8002a0a:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8002a10:	2300      	movs	r3, #0
 8002a12:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8002a14:	2300      	movs	r3, #0
 8002a16:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002a18:	4b59      	ldr	r3, [pc, #356]	@ (8002b80 <HAL_RCC_GetSysClockFreq+0x180>)
 8002a1a:	689b      	ldr	r3, [r3, #8]
 8002a1c:	f003 030c 	and.w	r3, r3, #12
 8002a20:	2b08      	cmp	r3, #8
 8002a22:	d00d      	beq.n	8002a40 <HAL_RCC_GetSysClockFreq+0x40>
 8002a24:	2b08      	cmp	r3, #8
 8002a26:	f200 80a1 	bhi.w	8002b6c <HAL_RCC_GetSysClockFreq+0x16c>
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d002      	beq.n	8002a34 <HAL_RCC_GetSysClockFreq+0x34>
 8002a2e:	2b04      	cmp	r3, #4
 8002a30:	d003      	beq.n	8002a3a <HAL_RCC_GetSysClockFreq+0x3a>
 8002a32:	e09b      	b.n	8002b6c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002a34:	4b53      	ldr	r3, [pc, #332]	@ (8002b84 <HAL_RCC_GetSysClockFreq+0x184>)
 8002a36:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002a38:	e09b      	b.n	8002b72 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002a3a:	4b53      	ldr	r3, [pc, #332]	@ (8002b88 <HAL_RCC_GetSysClockFreq+0x188>)
 8002a3c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002a3e:	e098      	b.n	8002b72 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002a40:	4b4f      	ldr	r3, [pc, #316]	@ (8002b80 <HAL_RCC_GetSysClockFreq+0x180>)
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002a48:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002a4a:	4b4d      	ldr	r3, [pc, #308]	@ (8002b80 <HAL_RCC_GetSysClockFreq+0x180>)
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d028      	beq.n	8002aa8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a56:	4b4a      	ldr	r3, [pc, #296]	@ (8002b80 <HAL_RCC_GetSysClockFreq+0x180>)
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	099b      	lsrs	r3, r3, #6
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	623b      	str	r3, [r7, #32]
 8002a60:	627a      	str	r2, [r7, #36]	@ 0x24
 8002a62:	6a3b      	ldr	r3, [r7, #32]
 8002a64:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002a68:	2100      	movs	r1, #0
 8002a6a:	4b47      	ldr	r3, [pc, #284]	@ (8002b88 <HAL_RCC_GetSysClockFreq+0x188>)
 8002a6c:	fb03 f201 	mul.w	r2, r3, r1
 8002a70:	2300      	movs	r3, #0
 8002a72:	fb00 f303 	mul.w	r3, r0, r3
 8002a76:	4413      	add	r3, r2
 8002a78:	4a43      	ldr	r2, [pc, #268]	@ (8002b88 <HAL_RCC_GetSysClockFreq+0x188>)
 8002a7a:	fba0 1202 	umull	r1, r2, r0, r2
 8002a7e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002a80:	460a      	mov	r2, r1
 8002a82:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002a84:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002a86:	4413      	add	r3, r2
 8002a88:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002a8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	61bb      	str	r3, [r7, #24]
 8002a90:	61fa      	str	r2, [r7, #28]
 8002a92:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002a96:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002a9a:	f7fd fbf1 	bl	8000280 <__aeabi_uldivmod>
 8002a9e:	4602      	mov	r2, r0
 8002aa0:	460b      	mov	r3, r1
 8002aa2:	4613      	mov	r3, r2
 8002aa4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002aa6:	e053      	b.n	8002b50 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002aa8:	4b35      	ldr	r3, [pc, #212]	@ (8002b80 <HAL_RCC_GetSysClockFreq+0x180>)
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	099b      	lsrs	r3, r3, #6
 8002aae:	2200      	movs	r2, #0
 8002ab0:	613b      	str	r3, [r7, #16]
 8002ab2:	617a      	str	r2, [r7, #20]
 8002ab4:	693b      	ldr	r3, [r7, #16]
 8002ab6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002aba:	f04f 0b00 	mov.w	fp, #0
 8002abe:	4652      	mov	r2, sl
 8002ac0:	465b      	mov	r3, fp
 8002ac2:	f04f 0000 	mov.w	r0, #0
 8002ac6:	f04f 0100 	mov.w	r1, #0
 8002aca:	0159      	lsls	r1, r3, #5
 8002acc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ad0:	0150      	lsls	r0, r2, #5
 8002ad2:	4602      	mov	r2, r0
 8002ad4:	460b      	mov	r3, r1
 8002ad6:	ebb2 080a 	subs.w	r8, r2, sl
 8002ada:	eb63 090b 	sbc.w	r9, r3, fp
 8002ade:	f04f 0200 	mov.w	r2, #0
 8002ae2:	f04f 0300 	mov.w	r3, #0
 8002ae6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002aea:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002aee:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002af2:	ebb2 0408 	subs.w	r4, r2, r8
 8002af6:	eb63 0509 	sbc.w	r5, r3, r9
 8002afa:	f04f 0200 	mov.w	r2, #0
 8002afe:	f04f 0300 	mov.w	r3, #0
 8002b02:	00eb      	lsls	r3, r5, #3
 8002b04:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002b08:	00e2      	lsls	r2, r4, #3
 8002b0a:	4614      	mov	r4, r2
 8002b0c:	461d      	mov	r5, r3
 8002b0e:	eb14 030a 	adds.w	r3, r4, sl
 8002b12:	603b      	str	r3, [r7, #0]
 8002b14:	eb45 030b 	adc.w	r3, r5, fp
 8002b18:	607b      	str	r3, [r7, #4]
 8002b1a:	f04f 0200 	mov.w	r2, #0
 8002b1e:	f04f 0300 	mov.w	r3, #0
 8002b22:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002b26:	4629      	mov	r1, r5
 8002b28:	028b      	lsls	r3, r1, #10
 8002b2a:	4621      	mov	r1, r4
 8002b2c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002b30:	4621      	mov	r1, r4
 8002b32:	028a      	lsls	r2, r1, #10
 8002b34:	4610      	mov	r0, r2
 8002b36:	4619      	mov	r1, r3
 8002b38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	60bb      	str	r3, [r7, #8]
 8002b3e:	60fa      	str	r2, [r7, #12]
 8002b40:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002b44:	f7fd fb9c 	bl	8000280 <__aeabi_uldivmod>
 8002b48:	4602      	mov	r2, r0
 8002b4a:	460b      	mov	r3, r1
 8002b4c:	4613      	mov	r3, r2
 8002b4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002b50:	4b0b      	ldr	r3, [pc, #44]	@ (8002b80 <HAL_RCC_GetSysClockFreq+0x180>)
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	0c1b      	lsrs	r3, r3, #16
 8002b56:	f003 0303 	and.w	r3, r3, #3
 8002b5a:	3301      	adds	r3, #1
 8002b5c:	005b      	lsls	r3, r3, #1
 8002b5e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8002b60:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002b62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b64:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b68:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002b6a:	e002      	b.n	8002b72 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002b6c:	4b05      	ldr	r3, [pc, #20]	@ (8002b84 <HAL_RCC_GetSysClockFreq+0x184>)
 8002b6e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002b70:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002b74:	4618      	mov	r0, r3
 8002b76:	3740      	adds	r7, #64	@ 0x40
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002b7e:	bf00      	nop
 8002b80:	40023800 	.word	0x40023800
 8002b84:	00f42400 	.word	0x00f42400
 8002b88:	017d7840 	.word	0x017d7840

08002b8c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b90:	4b03      	ldr	r3, [pc, #12]	@ (8002ba0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002b92:	681b      	ldr	r3, [r3, #0]
}
 8002b94:	4618      	mov	r0, r3
 8002b96:	46bd      	mov	sp, r7
 8002b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9c:	4770      	bx	lr
 8002b9e:	bf00      	nop
 8002ba0:	20000008 	.word	0x20000008

08002ba4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002ba8:	f7ff fff0 	bl	8002b8c <HAL_RCC_GetHCLKFreq>
 8002bac:	4602      	mov	r2, r0
 8002bae:	4b05      	ldr	r3, [pc, #20]	@ (8002bc4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002bb0:	689b      	ldr	r3, [r3, #8]
 8002bb2:	0a9b      	lsrs	r3, r3, #10
 8002bb4:	f003 0307 	and.w	r3, r3, #7
 8002bb8:	4903      	ldr	r1, [pc, #12]	@ (8002bc8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002bba:	5ccb      	ldrb	r3, [r1, r3]
 8002bbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	bd80      	pop	{r7, pc}
 8002bc4:	40023800 	.word	0x40023800
 8002bc8:	08005058 	.word	0x08005058

08002bcc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002bd0:	f7ff ffdc 	bl	8002b8c <HAL_RCC_GetHCLKFreq>
 8002bd4:	4602      	mov	r2, r0
 8002bd6:	4b05      	ldr	r3, [pc, #20]	@ (8002bec <HAL_RCC_GetPCLK2Freq+0x20>)
 8002bd8:	689b      	ldr	r3, [r3, #8]
 8002bda:	0b5b      	lsrs	r3, r3, #13
 8002bdc:	f003 0307 	and.w	r3, r3, #7
 8002be0:	4903      	ldr	r1, [pc, #12]	@ (8002bf0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002be2:	5ccb      	ldrb	r3, [r1, r3]
 8002be4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002be8:	4618      	mov	r0, r3
 8002bea:	bd80      	pop	{r7, pc}
 8002bec:	40023800 	.word	0x40023800
 8002bf0:	08005058 	.word	0x08005058

08002bf4 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b086      	sub	sp, #24
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8002c00:	2300      	movs	r3, #0
 8002c02:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f003 0301 	and.w	r3, r3, #1
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d105      	bne.n	8002c1c <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d038      	beq.n	8002c8e <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002c1c:	4b68      	ldr	r3, [pc, #416]	@ (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002c1e:	2200      	movs	r2, #0
 8002c20:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002c22:	f7fe fb29 	bl	8001278 <HAL_GetTick>
 8002c26:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002c28:	e008      	b.n	8002c3c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002c2a:	f7fe fb25 	bl	8001278 <HAL_GetTick>
 8002c2e:	4602      	mov	r2, r0
 8002c30:	697b      	ldr	r3, [r7, #20]
 8002c32:	1ad3      	subs	r3, r2, r3
 8002c34:	2b02      	cmp	r3, #2
 8002c36:	d901      	bls.n	8002c3c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002c38:	2303      	movs	r3, #3
 8002c3a:	e0bd      	b.n	8002db8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002c3c:	4b61      	ldr	r3, [pc, #388]	@ (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d1f0      	bne.n	8002c2a <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN,
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	685a      	ldr	r2, [r3, #4]
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	689b      	ldr	r3, [r3, #8]
 8002c50:	019b      	lsls	r3, r3, #6
 8002c52:	431a      	orrs	r2, r3
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	68db      	ldr	r3, [r3, #12]
 8002c58:	071b      	lsls	r3, r3, #28
 8002c5a:	495a      	ldr	r1, [pc, #360]	@ (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c5c:	4313      	orrs	r3, r2
 8002c5e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002c62:	4b57      	ldr	r3, [pc, #348]	@ (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002c64:	2201      	movs	r2, #1
 8002c66:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002c68:	f7fe fb06 	bl	8001278 <HAL_GetTick>
 8002c6c:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002c6e:	e008      	b.n	8002c82 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002c70:	f7fe fb02 	bl	8001278 <HAL_GetTick>
 8002c74:	4602      	mov	r2, r0
 8002c76:	697b      	ldr	r3, [r7, #20]
 8002c78:	1ad3      	subs	r3, r2, r3
 8002c7a:	2b02      	cmp	r3, #2
 8002c7c:	d901      	bls.n	8002c82 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002c7e:	2303      	movs	r3, #3
 8002c80:	e09a      	b.n	8002db8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002c82:	4b50      	ldr	r3, [pc, #320]	@ (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d0f0      	beq.n	8002c70 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f003 0302 	and.w	r3, r3, #2
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	f000 8083 	beq.w	8002da2 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	60fb      	str	r3, [r7, #12]
 8002ca0:	4b48      	ldr	r3, [pc, #288]	@ (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ca2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ca4:	4a47      	ldr	r2, [pc, #284]	@ (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ca6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002caa:	6413      	str	r3, [r2, #64]	@ 0x40
 8002cac:	4b45      	ldr	r3, [pc, #276]	@ (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cb0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002cb4:	60fb      	str	r3, [r7, #12]
 8002cb6:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002cb8:	4b43      	ldr	r3, [pc, #268]	@ (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4a42      	ldr	r2, [pc, #264]	@ (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002cbe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002cc2:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002cc4:	f7fe fad8 	bl	8001278 <HAL_GetTick>
 8002cc8:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8002cca:	e008      	b.n	8002cde <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ccc:	f7fe fad4 	bl	8001278 <HAL_GetTick>
 8002cd0:	4602      	mov	r2, r0
 8002cd2:	697b      	ldr	r3, [r7, #20]
 8002cd4:	1ad3      	subs	r3, r2, r3
 8002cd6:	2b02      	cmp	r3, #2
 8002cd8:	d901      	bls.n	8002cde <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 8002cda:	2303      	movs	r3, #3
 8002cdc:	e06c      	b.n	8002db8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8002cde:	4b3a      	ldr	r3, [pc, #232]	@ (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d0f0      	beq.n	8002ccc <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002cea:	4b36      	ldr	r3, [pc, #216]	@ (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002cf2:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002cf4:	693b      	ldr	r3, [r7, #16]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d02f      	beq.n	8002d5a <HAL_RCCEx_PeriphCLKConfig+0x166>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	691b      	ldr	r3, [r3, #16]
 8002cfe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002d02:	693a      	ldr	r2, [r7, #16]
 8002d04:	429a      	cmp	r2, r3
 8002d06:	d028      	beq.n	8002d5a <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002d08:	4b2e      	ldr	r3, [pc, #184]	@ (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d0a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d0c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002d10:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002d12:	4b2e      	ldr	r3, [pc, #184]	@ (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002d14:	2201      	movs	r2, #1
 8002d16:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002d18:	4b2c      	ldr	r3, [pc, #176]	@ (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002d1e:	4a29      	ldr	r2, [pc, #164]	@ (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d20:	693b      	ldr	r3, [r7, #16]
 8002d22:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002d24:	4b27      	ldr	r3, [pc, #156]	@ (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d28:	f003 0301 	and.w	r3, r3, #1
 8002d2c:	2b01      	cmp	r3, #1
 8002d2e:	d114      	bne.n	8002d5a <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8002d30:	f7fe faa2 	bl	8001278 <HAL_GetTick>
 8002d34:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d36:	e00a      	b.n	8002d4e <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d38:	f7fe fa9e 	bl	8001278 <HAL_GetTick>
 8002d3c:	4602      	mov	r2, r0
 8002d3e:	697b      	ldr	r3, [r7, #20]
 8002d40:	1ad3      	subs	r3, r2, r3
 8002d42:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d901      	bls.n	8002d4e <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8002d4a:	2303      	movs	r3, #3
 8002d4c:	e034      	b.n	8002db8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d4e:	4b1d      	ldr	r3, [pc, #116]	@ (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d52:	f003 0302 	and.w	r3, r3, #2
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d0ee      	beq.n	8002d38 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	691b      	ldr	r3, [r3, #16]
 8002d5e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002d62:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002d66:	d10d      	bne.n	8002d84 <HAL_RCCEx_PeriphCLKConfig+0x190>
 8002d68:	4b16      	ldr	r3, [pc, #88]	@ (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d6a:	689b      	ldr	r3, [r3, #8]
 8002d6c:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	691b      	ldr	r3, [r3, #16]
 8002d74:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8002d78:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002d7c:	4911      	ldr	r1, [pc, #68]	@ (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d7e:	4313      	orrs	r3, r2
 8002d80:	608b      	str	r3, [r1, #8]
 8002d82:	e005      	b.n	8002d90 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8002d84:	4b0f      	ldr	r3, [pc, #60]	@ (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d86:	689b      	ldr	r3, [r3, #8]
 8002d88:	4a0e      	ldr	r2, [pc, #56]	@ (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d8a:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8002d8e:	6093      	str	r3, [r2, #8]
 8002d90:	4b0c      	ldr	r3, [pc, #48]	@ (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d92:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	691b      	ldr	r3, [r3, #16]
 8002d98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d9c:	4909      	ldr	r1, [pc, #36]	@ (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	670b      	str	r3, [r1, #112]	@ 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f003 0308 	and.w	r3, r3, #8
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d003      	beq.n	8002db6 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	7d1a      	ldrb	r2, [r3, #20]
 8002db2:	4b07      	ldr	r3, [pc, #28]	@ (8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8002db4:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8002db6:	2300      	movs	r3, #0
}
 8002db8:	4618      	mov	r0, r3
 8002dba:	3718      	adds	r7, #24
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	bd80      	pop	{r7, pc}
 8002dc0:	42470068 	.word	0x42470068
 8002dc4:	40023800 	.word	0x40023800
 8002dc8:	40007000 	.word	0x40007000
 8002dcc:	42470e40 	.word	0x42470e40
 8002dd0:	424711e0 	.word	0x424711e0

08002dd4 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b084      	sub	sp, #16
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002ddc:	2301      	movs	r3, #1
 8002dde:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d101      	bne.n	8002dea <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8002de6:	2301      	movs	r3, #1
 8002de8:	e073      	b.n	8002ed2 <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	7f5b      	ldrb	r3, [r3, #29]
 8002dee:	b2db      	uxtb	r3, r3
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d105      	bne.n	8002e00 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2200      	movs	r2, #0
 8002df8:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8002dfa:	6878      	ldr	r0, [r7, #4]
 8002dfc:	f7fe f8c0 	bl	8000f80 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2202      	movs	r2, #2
 8002e04:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	68db      	ldr	r3, [r3, #12]
 8002e0c:	f003 0310 	and.w	r3, r3, #16
 8002e10:	2b10      	cmp	r3, #16
 8002e12:	d055      	beq.n	8002ec0 <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	22ca      	movs	r2, #202	@ 0xca
 8002e1a:	625a      	str	r2, [r3, #36]	@ 0x24
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	2253      	movs	r2, #83	@ 0x53
 8002e22:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8002e24:	6878      	ldr	r0, [r7, #4]
 8002e26:	f000 fa49 	bl	80032bc <RTC_EnterInitMode>
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8002e2e:	7bfb      	ldrb	r3, [r7, #15]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d12c      	bne.n	8002e8e <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	689b      	ldr	r3, [r3, #8]
 8002e3a:	687a      	ldr	r2, [r7, #4]
 8002e3c:	6812      	ldr	r2, [r2, #0]
 8002e3e:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8002e42:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002e46:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	6899      	ldr	r1, [r3, #8]
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	685a      	ldr	r2, [r3, #4]
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	691b      	ldr	r3, [r3, #16]
 8002e56:	431a      	orrs	r2, r3
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	695b      	ldr	r3, [r3, #20]
 8002e5c:	431a      	orrs	r2, r3
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	430a      	orrs	r2, r1
 8002e64:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	687a      	ldr	r2, [r7, #4]
 8002e6c:	68d2      	ldr	r2, [r2, #12]
 8002e6e:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	6919      	ldr	r1, [r3, #16]
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	689b      	ldr	r3, [r3, #8]
 8002e7a:	041a      	lsls	r2, r3, #16
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	430a      	orrs	r2, r1
 8002e82:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8002e84:	6878      	ldr	r0, [r7, #4]
 8002e86:	f000 fa50 	bl	800332a <RTC_ExitInitMode>
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8002e8e:	7bfb      	ldrb	r3, [r7, #15]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d110      	bne.n	8002eb6 <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002ea2:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	699a      	ldr	r2, [r3, #24]
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	430a      	orrs	r2, r1
 8002eb4:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	22ff      	movs	r2, #255	@ 0xff
 8002ebc:	625a      	str	r2, [r3, #36]	@ 0x24
 8002ebe:	e001      	b.n	8002ec4 <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8002ec4:	7bfb      	ldrb	r3, [r7, #15]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d102      	bne.n	8002ed0 <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2201      	movs	r2, #1
 8002ece:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8002ed0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	3710      	adds	r7, #16
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bd80      	pop	{r7, pc}

08002eda <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002eda:	b590      	push	{r4, r7, lr}
 8002edc:	b087      	sub	sp, #28
 8002ede:	af00      	add	r7, sp, #0
 8002ee0:	60f8      	str	r0, [r7, #12]
 8002ee2:	60b9      	str	r1, [r7, #8]
 8002ee4:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	7f1b      	ldrb	r3, [r3, #28]
 8002eee:	2b01      	cmp	r3, #1
 8002ef0:	d101      	bne.n	8002ef6 <HAL_RTC_SetTime+0x1c>
 8002ef2:	2302      	movs	r3, #2
 8002ef4:	e087      	b.n	8003006 <HAL_RTC_SetTime+0x12c>
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	2201      	movs	r2, #1
 8002efa:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	2202      	movs	r2, #2
 8002f00:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d126      	bne.n	8002f56 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	689b      	ldr	r3, [r3, #8]
 8002f0e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d102      	bne.n	8002f1c <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8002f16:	68bb      	ldr	r3, [r7, #8]
 8002f18:	2200      	movs	r2, #0
 8002f1a:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8002f1c:	68bb      	ldr	r3, [r7, #8]
 8002f1e:	781b      	ldrb	r3, [r3, #0]
 8002f20:	4618      	mov	r0, r3
 8002f22:	f000 fa27 	bl	8003374 <RTC_ByteToBcd2>
 8002f26:	4603      	mov	r3, r0
 8002f28:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002f2a:	68bb      	ldr	r3, [r7, #8]
 8002f2c:	785b      	ldrb	r3, [r3, #1]
 8002f2e:	4618      	mov	r0, r3
 8002f30:	f000 fa20 	bl	8003374 <RTC_ByteToBcd2>
 8002f34:	4603      	mov	r3, r0
 8002f36:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8002f38:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8002f3a:	68bb      	ldr	r3, [r7, #8]
 8002f3c:	789b      	ldrb	r3, [r3, #2]
 8002f3e:	4618      	mov	r0, r3
 8002f40:	f000 fa18 	bl	8003374 <RTC_ByteToBcd2>
 8002f44:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002f46:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8002f4a:	68bb      	ldr	r3, [r7, #8]
 8002f4c:	78db      	ldrb	r3, [r3, #3]
 8002f4e:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8002f50:	4313      	orrs	r3, r2
 8002f52:	617b      	str	r3, [r7, #20]
 8002f54:	e018      	b.n	8002f88 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	689b      	ldr	r3, [r3, #8]
 8002f5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d102      	bne.n	8002f6a <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8002f64:	68bb      	ldr	r3, [r7, #8]
 8002f66:	2200      	movs	r2, #0
 8002f68:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8002f6a:	68bb      	ldr	r3, [r7, #8]
 8002f6c:	781b      	ldrb	r3, [r3, #0]
 8002f6e:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8002f70:	68bb      	ldr	r3, [r7, #8]
 8002f72:	785b      	ldrb	r3, [r3, #1]
 8002f74:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8002f76:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8002f78:	68ba      	ldr	r2, [r7, #8]
 8002f7a:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8002f7c:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8002f7e:	68bb      	ldr	r3, [r7, #8]
 8002f80:	78db      	ldrb	r3, [r3, #3]
 8002f82:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8002f84:	4313      	orrs	r3, r2
 8002f86:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	22ca      	movs	r2, #202	@ 0xca
 8002f8e:	625a      	str	r2, [r3, #36]	@ 0x24
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	2253      	movs	r2, #83	@ 0x53
 8002f96:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002f98:	68f8      	ldr	r0, [r7, #12]
 8002f9a:	f000 f98f 	bl	80032bc <RTC_EnterInitMode>
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8002fa2:	7cfb      	ldrb	r3, [r7, #19]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d120      	bne.n	8002fea <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681a      	ldr	r2, [r3, #0]
 8002fac:	697b      	ldr	r3, [r7, #20]
 8002fae:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8002fb2:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8002fb6:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	689a      	ldr	r2, [r3, #8]
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002fc6:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	6899      	ldr	r1, [r3, #8]
 8002fce:	68bb      	ldr	r3, [r7, #8]
 8002fd0:	68da      	ldr	r2, [r3, #12]
 8002fd2:	68bb      	ldr	r3, [r7, #8]
 8002fd4:	691b      	ldr	r3, [r3, #16]
 8002fd6:	431a      	orrs	r2, r3
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	430a      	orrs	r2, r1
 8002fde:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8002fe0:	68f8      	ldr	r0, [r7, #12]
 8002fe2:	f000 f9a2 	bl	800332a <RTC_ExitInitMode>
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8002fea:	7cfb      	ldrb	r3, [r7, #19]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d102      	bne.n	8002ff6 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	2201      	movs	r2, #1
 8002ff4:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	22ff      	movs	r2, #255	@ 0xff
 8002ffc:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	2200      	movs	r2, #0
 8003002:	771a      	strb	r2, [r3, #28]

  return status;
 8003004:	7cfb      	ldrb	r3, [r7, #19]
}
 8003006:	4618      	mov	r0, r3
 8003008:	371c      	adds	r7, #28
 800300a:	46bd      	mov	sp, r7
 800300c:	bd90      	pop	{r4, r7, pc}

0800300e <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800300e:	b580      	push	{r7, lr}
 8003010:	b086      	sub	sp, #24
 8003012:	af00      	add	r7, sp, #0
 8003014:	60f8      	str	r0, [r7, #12]
 8003016:	60b9      	str	r1, [r7, #8]
 8003018:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800301a:	2300      	movs	r3, #0
 800301c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003024:	68bb      	ldr	r3, [r7, #8]
 8003026:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	691b      	ldr	r3, [r3, #16]
 800302e:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8003032:	68bb      	ldr	r3, [r7, #8]
 8003034:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8003040:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8003044:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8003046:	697b      	ldr	r3, [r7, #20]
 8003048:	0c1b      	lsrs	r3, r3, #16
 800304a:	b2db      	uxtb	r3, r3
 800304c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003050:	b2da      	uxtb	r2, r3
 8003052:	68bb      	ldr	r3, [r7, #8]
 8003054:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8003056:	697b      	ldr	r3, [r7, #20]
 8003058:	0a1b      	lsrs	r3, r3, #8
 800305a:	b2db      	uxtb	r3, r3
 800305c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003060:	b2da      	uxtb	r2, r3
 8003062:	68bb      	ldr	r3, [r7, #8]
 8003064:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8003066:	697b      	ldr	r3, [r7, #20]
 8003068:	b2db      	uxtb	r3, r3
 800306a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800306e:	b2da      	uxtb	r2, r3
 8003070:	68bb      	ldr	r3, [r7, #8]
 8003072:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8003074:	697b      	ldr	r3, [r7, #20]
 8003076:	0d9b      	lsrs	r3, r3, #22
 8003078:	b2db      	uxtb	r3, r3
 800307a:	f003 0301 	and.w	r3, r3, #1
 800307e:	b2da      	uxtb	r2, r3
 8003080:	68bb      	ldr	r3, [r7, #8]
 8003082:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d11a      	bne.n	80030c0 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800308a:	68bb      	ldr	r3, [r7, #8]
 800308c:	781b      	ldrb	r3, [r3, #0]
 800308e:	4618      	mov	r0, r3
 8003090:	f000 f98e 	bl	80033b0 <RTC_Bcd2ToByte>
 8003094:	4603      	mov	r3, r0
 8003096:	461a      	mov	r2, r3
 8003098:	68bb      	ldr	r3, [r7, #8]
 800309a:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800309c:	68bb      	ldr	r3, [r7, #8]
 800309e:	785b      	ldrb	r3, [r3, #1]
 80030a0:	4618      	mov	r0, r3
 80030a2:	f000 f985 	bl	80033b0 <RTC_Bcd2ToByte>
 80030a6:	4603      	mov	r3, r0
 80030a8:	461a      	mov	r2, r3
 80030aa:	68bb      	ldr	r3, [r7, #8]
 80030ac:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80030ae:	68bb      	ldr	r3, [r7, #8]
 80030b0:	789b      	ldrb	r3, [r3, #2]
 80030b2:	4618      	mov	r0, r3
 80030b4:	f000 f97c 	bl	80033b0 <RTC_Bcd2ToByte>
 80030b8:	4603      	mov	r3, r0
 80030ba:	461a      	mov	r2, r3
 80030bc:	68bb      	ldr	r3, [r7, #8]
 80030be:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80030c0:	2300      	movs	r3, #0
}
 80030c2:	4618      	mov	r0, r3
 80030c4:	3718      	adds	r7, #24
 80030c6:	46bd      	mov	sp, r7
 80030c8:	bd80      	pop	{r7, pc}

080030ca <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80030ca:	b590      	push	{r4, r7, lr}
 80030cc:	b087      	sub	sp, #28
 80030ce:	af00      	add	r7, sp, #0
 80030d0:	60f8      	str	r0, [r7, #12]
 80030d2:	60b9      	str	r1, [r7, #8]
 80030d4:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80030d6:	2300      	movs	r3, #0
 80030d8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	7f1b      	ldrb	r3, [r3, #28]
 80030de:	2b01      	cmp	r3, #1
 80030e0:	d101      	bne.n	80030e6 <HAL_RTC_SetDate+0x1c>
 80030e2:	2302      	movs	r3, #2
 80030e4:	e071      	b.n	80031ca <HAL_RTC_SetDate+0x100>
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	2201      	movs	r2, #1
 80030ea:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	2202      	movs	r2, #2
 80030f0:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d10e      	bne.n	8003116 <HAL_RTC_SetDate+0x4c>
 80030f8:	68bb      	ldr	r3, [r7, #8]
 80030fa:	785b      	ldrb	r3, [r3, #1]
 80030fc:	f003 0310 	and.w	r3, r3, #16
 8003100:	2b00      	cmp	r3, #0
 8003102:	d008      	beq.n	8003116 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8003104:	68bb      	ldr	r3, [r7, #8]
 8003106:	785b      	ldrb	r3, [r3, #1]
 8003108:	f023 0310 	bic.w	r3, r3, #16
 800310c:	b2db      	uxtb	r3, r3
 800310e:	330a      	adds	r3, #10
 8003110:	b2da      	uxtb	r2, r3
 8003112:	68bb      	ldr	r3, [r7, #8]
 8003114:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d11c      	bne.n	8003156 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800311c:	68bb      	ldr	r3, [r7, #8]
 800311e:	78db      	ldrb	r3, [r3, #3]
 8003120:	4618      	mov	r0, r3
 8003122:	f000 f927 	bl	8003374 <RTC_ByteToBcd2>
 8003126:	4603      	mov	r3, r0
 8003128:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800312a:	68bb      	ldr	r3, [r7, #8]
 800312c:	785b      	ldrb	r3, [r3, #1]
 800312e:	4618      	mov	r0, r3
 8003130:	f000 f920 	bl	8003374 <RTC_ByteToBcd2>
 8003134:	4603      	mov	r3, r0
 8003136:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8003138:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 800313a:	68bb      	ldr	r3, [r7, #8]
 800313c:	789b      	ldrb	r3, [r3, #2]
 800313e:	4618      	mov	r0, r3
 8003140:	f000 f918 	bl	8003374 <RTC_ByteToBcd2>
 8003144:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8003146:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800314a:	68bb      	ldr	r3, [r7, #8]
 800314c:	781b      	ldrb	r3, [r3, #0]
 800314e:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8003150:	4313      	orrs	r3, r2
 8003152:	617b      	str	r3, [r7, #20]
 8003154:	e00e      	b.n	8003174 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8003156:	68bb      	ldr	r3, [r7, #8]
 8003158:	78db      	ldrb	r3, [r3, #3]
 800315a:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800315c:	68bb      	ldr	r3, [r7, #8]
 800315e:	785b      	ldrb	r3, [r3, #1]
 8003160:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8003162:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8003164:	68ba      	ldr	r2, [r7, #8]
 8003166:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8003168:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800316a:	68bb      	ldr	r3, [r7, #8]
 800316c:	781b      	ldrb	r3, [r3, #0]
 800316e:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8003170:	4313      	orrs	r3, r2
 8003172:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	22ca      	movs	r2, #202	@ 0xca
 800317a:	625a      	str	r2, [r3, #36]	@ 0x24
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	2253      	movs	r2, #83	@ 0x53
 8003182:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003184:	68f8      	ldr	r0, [r7, #12]
 8003186:	f000 f899 	bl	80032bc <RTC_EnterInitMode>
 800318a:	4603      	mov	r3, r0
 800318c:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800318e:	7cfb      	ldrb	r3, [r7, #19]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d10c      	bne.n	80031ae <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	681a      	ldr	r2, [r3, #0]
 8003198:	697b      	ldr	r3, [r7, #20]
 800319a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800319e:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80031a2:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80031a4:	68f8      	ldr	r0, [r7, #12]
 80031a6:	f000 f8c0 	bl	800332a <RTC_ExitInitMode>
 80031aa:	4603      	mov	r3, r0
 80031ac:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80031ae:	7cfb      	ldrb	r3, [r7, #19]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d102      	bne.n	80031ba <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	2201      	movs	r2, #1
 80031b8:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	22ff      	movs	r2, #255	@ 0xff
 80031c0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	2200      	movs	r2, #0
 80031c6:	771a      	strb	r2, [r3, #28]

  return status;
 80031c8:	7cfb      	ldrb	r3, [r7, #19]
}
 80031ca:	4618      	mov	r0, r3
 80031cc:	371c      	adds	r7, #28
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bd90      	pop	{r4, r7, pc}

080031d2 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80031d2:	b580      	push	{r7, lr}
 80031d4:	b086      	sub	sp, #24
 80031d6:	af00      	add	r7, sp, #0
 80031d8:	60f8      	str	r0, [r7, #12]
 80031da:	60b9      	str	r1, [r7, #8]
 80031dc:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80031de:	2300      	movs	r3, #0
 80031e0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80031ec:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80031f0:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80031f2:	697b      	ldr	r3, [r7, #20]
 80031f4:	0c1b      	lsrs	r3, r3, #16
 80031f6:	b2da      	uxtb	r2, r3
 80031f8:	68bb      	ldr	r3, [r7, #8]
 80031fa:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80031fc:	697b      	ldr	r3, [r7, #20]
 80031fe:	0a1b      	lsrs	r3, r3, #8
 8003200:	b2db      	uxtb	r3, r3
 8003202:	f003 031f 	and.w	r3, r3, #31
 8003206:	b2da      	uxtb	r2, r3
 8003208:	68bb      	ldr	r3, [r7, #8]
 800320a:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800320c:	697b      	ldr	r3, [r7, #20]
 800320e:	b2db      	uxtb	r3, r3
 8003210:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003214:	b2da      	uxtb	r2, r3
 8003216:	68bb      	ldr	r3, [r7, #8]
 8003218:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 800321a:	697b      	ldr	r3, [r7, #20]
 800321c:	0b5b      	lsrs	r3, r3, #13
 800321e:	b2db      	uxtb	r3, r3
 8003220:	f003 0307 	and.w	r3, r3, #7
 8003224:	b2da      	uxtb	r2, r3
 8003226:	68bb      	ldr	r3, [r7, #8]
 8003228:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d11a      	bne.n	8003266 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8003230:	68bb      	ldr	r3, [r7, #8]
 8003232:	78db      	ldrb	r3, [r3, #3]
 8003234:	4618      	mov	r0, r3
 8003236:	f000 f8bb 	bl	80033b0 <RTC_Bcd2ToByte>
 800323a:	4603      	mov	r3, r0
 800323c:	461a      	mov	r2, r3
 800323e:	68bb      	ldr	r3, [r7, #8]
 8003240:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8003242:	68bb      	ldr	r3, [r7, #8]
 8003244:	785b      	ldrb	r3, [r3, #1]
 8003246:	4618      	mov	r0, r3
 8003248:	f000 f8b2 	bl	80033b0 <RTC_Bcd2ToByte>
 800324c:	4603      	mov	r3, r0
 800324e:	461a      	mov	r2, r3
 8003250:	68bb      	ldr	r3, [r7, #8]
 8003252:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8003254:	68bb      	ldr	r3, [r7, #8]
 8003256:	789b      	ldrb	r3, [r3, #2]
 8003258:	4618      	mov	r0, r3
 800325a:	f000 f8a9 	bl	80033b0 <RTC_Bcd2ToByte>
 800325e:	4603      	mov	r3, r0
 8003260:	461a      	mov	r2, r3
 8003262:	68bb      	ldr	r3, [r7, #8]
 8003264:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8003266:	2300      	movs	r3, #0
}
 8003268:	4618      	mov	r0, r3
 800326a:	3718      	adds	r7, #24
 800326c:	46bd      	mov	sp, r7
 800326e:	bd80      	pop	{r7, pc}

08003270 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b084      	sub	sp, #16
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003278:	2300      	movs	r3, #0
 800327a:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4a0d      	ldr	r2, [pc, #52]	@ (80032b8 <HAL_RTC_WaitForSynchro+0x48>)
 8003282:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003284:	f7fd fff8 	bl	8001278 <HAL_GetTick>
 8003288:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800328a:	e009      	b.n	80032a0 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800328c:	f7fd fff4 	bl	8001278 <HAL_GetTick>
 8003290:	4602      	mov	r2, r0
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	1ad3      	subs	r3, r2, r3
 8003296:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800329a:	d901      	bls.n	80032a0 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 800329c:	2303      	movs	r3, #3
 800329e:	e007      	b.n	80032b0 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	68db      	ldr	r3, [r3, #12]
 80032a6:	f003 0320 	and.w	r3, r3, #32
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d0ee      	beq.n	800328c <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 80032ae:	2300      	movs	r3, #0
}
 80032b0:	4618      	mov	r0, r3
 80032b2:	3710      	adds	r7, #16
 80032b4:	46bd      	mov	sp, r7
 80032b6:	bd80      	pop	{r7, pc}
 80032b8:	00013f5f 	.word	0x00013f5f

080032bc <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b084      	sub	sp, #16
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80032c4:	2300      	movs	r3, #0
 80032c6:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80032c8:	2300      	movs	r3, #0
 80032ca:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	68db      	ldr	r3, [r3, #12]
 80032d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d122      	bne.n	8003320 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	68da      	ldr	r2, [r3, #12]
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80032e8:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80032ea:	f7fd ffc5 	bl	8001278 <HAL_GetTick>
 80032ee:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80032f0:	e00c      	b.n	800330c <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80032f2:	f7fd ffc1 	bl	8001278 <HAL_GetTick>
 80032f6:	4602      	mov	r2, r0
 80032f8:	68bb      	ldr	r3, [r7, #8]
 80032fa:	1ad3      	subs	r3, r2, r3
 80032fc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003300:	d904      	bls.n	800330c <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2204      	movs	r2, #4
 8003306:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8003308:	2301      	movs	r3, #1
 800330a:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	68db      	ldr	r3, [r3, #12]
 8003312:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003316:	2b00      	cmp	r3, #0
 8003318:	d102      	bne.n	8003320 <RTC_EnterInitMode+0x64>
 800331a:	7bfb      	ldrb	r3, [r7, #15]
 800331c:	2b01      	cmp	r3, #1
 800331e:	d1e8      	bne.n	80032f2 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8003320:	7bfb      	ldrb	r3, [r7, #15]
}
 8003322:	4618      	mov	r0, r3
 8003324:	3710      	adds	r7, #16
 8003326:	46bd      	mov	sp, r7
 8003328:	bd80      	pop	{r7, pc}

0800332a <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800332a:	b580      	push	{r7, lr}
 800332c:	b084      	sub	sp, #16
 800332e:	af00      	add	r7, sp, #0
 8003330:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003332:	2300      	movs	r3, #0
 8003334:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	68da      	ldr	r2, [r3, #12]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003344:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	689b      	ldr	r3, [r3, #8]
 800334c:	f003 0320 	and.w	r3, r3, #32
 8003350:	2b00      	cmp	r3, #0
 8003352:	d10a      	bne.n	800336a <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003354:	6878      	ldr	r0, [r7, #4]
 8003356:	f7ff ff8b 	bl	8003270 <HAL_RTC_WaitForSynchro>
 800335a:	4603      	mov	r3, r0
 800335c:	2b00      	cmp	r3, #0
 800335e:	d004      	beq.n	800336a <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2204      	movs	r2, #4
 8003364:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8003366:	2301      	movs	r3, #1
 8003368:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800336a:	7bfb      	ldrb	r3, [r7, #15]
}
 800336c:	4618      	mov	r0, r3
 800336e:	3710      	adds	r7, #16
 8003370:	46bd      	mov	sp, r7
 8003372:	bd80      	pop	{r7, pc}

08003374 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8003374:	b480      	push	{r7}
 8003376:	b085      	sub	sp, #20
 8003378:	af00      	add	r7, sp, #0
 800337a:	4603      	mov	r3, r0
 800337c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800337e:	2300      	movs	r3, #0
 8003380:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8003382:	e005      	b.n	8003390 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	3301      	adds	r3, #1
 8003388:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 800338a:	79fb      	ldrb	r3, [r7, #7]
 800338c:	3b0a      	subs	r3, #10
 800338e:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8003390:	79fb      	ldrb	r3, [r7, #7]
 8003392:	2b09      	cmp	r3, #9
 8003394:	d8f6      	bhi.n	8003384 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	b2db      	uxtb	r3, r3
 800339a:	011b      	lsls	r3, r3, #4
 800339c:	b2da      	uxtb	r2, r3
 800339e:	79fb      	ldrb	r3, [r7, #7]
 80033a0:	4313      	orrs	r3, r2
 80033a2:	b2db      	uxtb	r3, r3
}
 80033a4:	4618      	mov	r0, r3
 80033a6:	3714      	adds	r7, #20
 80033a8:	46bd      	mov	sp, r7
 80033aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ae:	4770      	bx	lr

080033b0 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 80033b0:	b480      	push	{r7}
 80033b2:	b085      	sub	sp, #20
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	4603      	mov	r3, r0
 80033b8:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 80033ba:	2300      	movs	r3, #0
 80033bc:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 80033be:	79fb      	ldrb	r3, [r7, #7]
 80033c0:	091b      	lsrs	r3, r3, #4
 80033c2:	b2db      	uxtb	r3, r3
 80033c4:	461a      	mov	r2, r3
 80033c6:	4613      	mov	r3, r2
 80033c8:	009b      	lsls	r3, r3, #2
 80033ca:	4413      	add	r3, r2
 80033cc:	005b      	lsls	r3, r3, #1
 80033ce:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	b2da      	uxtb	r2, r3
 80033d4:	79fb      	ldrb	r3, [r7, #7]
 80033d6:	f003 030f 	and.w	r3, r3, #15
 80033da:	b2db      	uxtb	r3, r3
 80033dc:	4413      	add	r3, r2
 80033de:	b2db      	uxtb	r3, r3
}
 80033e0:	4618      	mov	r0, r3
 80033e2:	3714      	adds	r7, #20
 80033e4:	46bd      	mov	sp, r7
 80033e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ea:	4770      	bx	lr

080033ec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b082      	sub	sp, #8
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d101      	bne.n	80033fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80033fa:	2301      	movs	r3, #1
 80033fc:	e042      	b.n	8003484 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003404:	b2db      	uxtb	r3, r3
 8003406:	2b00      	cmp	r3, #0
 8003408:	d106      	bne.n	8003418 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2200      	movs	r2, #0
 800340e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003412:	6878      	ldr	r0, [r7, #4]
 8003414:	f7fd fde0 	bl	8000fd8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2224      	movs	r2, #36	@ 0x24
 800341c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	68da      	ldr	r2, [r3, #12]
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800342e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003430:	6878      	ldr	r0, [r7, #4]
 8003432:	f000 f82b 	bl	800348c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	691a      	ldr	r2, [r3, #16]
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003444:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	695a      	ldr	r2, [r3, #20]
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003454:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	68da      	ldr	r2, [r3, #12]
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003464:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2200      	movs	r2, #0
 800346a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2220      	movs	r2, #32
 8003470:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2220      	movs	r2, #32
 8003478:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2200      	movs	r2, #0
 8003480:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003482:	2300      	movs	r3, #0
}
 8003484:	4618      	mov	r0, r3
 8003486:	3708      	adds	r7, #8
 8003488:	46bd      	mov	sp, r7
 800348a:	bd80      	pop	{r7, pc}

0800348c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800348c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003490:	b0c0      	sub	sp, #256	@ 0x100
 8003492:	af00      	add	r7, sp, #0
 8003494:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003498:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	691b      	ldr	r3, [r3, #16]
 80034a0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80034a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034a8:	68d9      	ldr	r1, [r3, #12]
 80034aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034ae:	681a      	ldr	r2, [r3, #0]
 80034b0:	ea40 0301 	orr.w	r3, r0, r1
 80034b4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80034b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034ba:	689a      	ldr	r2, [r3, #8]
 80034bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034c0:	691b      	ldr	r3, [r3, #16]
 80034c2:	431a      	orrs	r2, r3
 80034c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034c8:	695b      	ldr	r3, [r3, #20]
 80034ca:	431a      	orrs	r2, r3
 80034cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034d0:	69db      	ldr	r3, [r3, #28]
 80034d2:	4313      	orrs	r3, r2
 80034d4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80034d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	68db      	ldr	r3, [r3, #12]
 80034e0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80034e4:	f021 010c 	bic.w	r1, r1, #12
 80034e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034ec:	681a      	ldr	r2, [r3, #0]
 80034ee:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80034f2:	430b      	orrs	r3, r1
 80034f4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80034f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	695b      	ldr	r3, [r3, #20]
 80034fe:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003502:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003506:	6999      	ldr	r1, [r3, #24]
 8003508:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800350c:	681a      	ldr	r2, [r3, #0]
 800350e:	ea40 0301 	orr.w	r3, r0, r1
 8003512:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003514:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003518:	681a      	ldr	r2, [r3, #0]
 800351a:	4b8f      	ldr	r3, [pc, #572]	@ (8003758 <UART_SetConfig+0x2cc>)
 800351c:	429a      	cmp	r2, r3
 800351e:	d005      	beq.n	800352c <UART_SetConfig+0xa0>
 8003520:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003524:	681a      	ldr	r2, [r3, #0]
 8003526:	4b8d      	ldr	r3, [pc, #564]	@ (800375c <UART_SetConfig+0x2d0>)
 8003528:	429a      	cmp	r2, r3
 800352a:	d104      	bne.n	8003536 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800352c:	f7ff fb4e 	bl	8002bcc <HAL_RCC_GetPCLK2Freq>
 8003530:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003534:	e003      	b.n	800353e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003536:	f7ff fb35 	bl	8002ba4 <HAL_RCC_GetPCLK1Freq>
 800353a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800353e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003542:	69db      	ldr	r3, [r3, #28]
 8003544:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003548:	f040 810c 	bne.w	8003764 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800354c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003550:	2200      	movs	r2, #0
 8003552:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003556:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800355a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800355e:	4622      	mov	r2, r4
 8003560:	462b      	mov	r3, r5
 8003562:	1891      	adds	r1, r2, r2
 8003564:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003566:	415b      	adcs	r3, r3
 8003568:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800356a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800356e:	4621      	mov	r1, r4
 8003570:	eb12 0801 	adds.w	r8, r2, r1
 8003574:	4629      	mov	r1, r5
 8003576:	eb43 0901 	adc.w	r9, r3, r1
 800357a:	f04f 0200 	mov.w	r2, #0
 800357e:	f04f 0300 	mov.w	r3, #0
 8003582:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003586:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800358a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800358e:	4690      	mov	r8, r2
 8003590:	4699      	mov	r9, r3
 8003592:	4623      	mov	r3, r4
 8003594:	eb18 0303 	adds.w	r3, r8, r3
 8003598:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800359c:	462b      	mov	r3, r5
 800359e:	eb49 0303 	adc.w	r3, r9, r3
 80035a2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80035a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	2200      	movs	r2, #0
 80035ae:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80035b2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80035b6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80035ba:	460b      	mov	r3, r1
 80035bc:	18db      	adds	r3, r3, r3
 80035be:	653b      	str	r3, [r7, #80]	@ 0x50
 80035c0:	4613      	mov	r3, r2
 80035c2:	eb42 0303 	adc.w	r3, r2, r3
 80035c6:	657b      	str	r3, [r7, #84]	@ 0x54
 80035c8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80035cc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80035d0:	f7fc fe56 	bl	8000280 <__aeabi_uldivmod>
 80035d4:	4602      	mov	r2, r0
 80035d6:	460b      	mov	r3, r1
 80035d8:	4b61      	ldr	r3, [pc, #388]	@ (8003760 <UART_SetConfig+0x2d4>)
 80035da:	fba3 2302 	umull	r2, r3, r3, r2
 80035de:	095b      	lsrs	r3, r3, #5
 80035e0:	011c      	lsls	r4, r3, #4
 80035e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80035e6:	2200      	movs	r2, #0
 80035e8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80035ec:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80035f0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80035f4:	4642      	mov	r2, r8
 80035f6:	464b      	mov	r3, r9
 80035f8:	1891      	adds	r1, r2, r2
 80035fa:	64b9      	str	r1, [r7, #72]	@ 0x48
 80035fc:	415b      	adcs	r3, r3
 80035fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003600:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003604:	4641      	mov	r1, r8
 8003606:	eb12 0a01 	adds.w	sl, r2, r1
 800360a:	4649      	mov	r1, r9
 800360c:	eb43 0b01 	adc.w	fp, r3, r1
 8003610:	f04f 0200 	mov.w	r2, #0
 8003614:	f04f 0300 	mov.w	r3, #0
 8003618:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800361c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003620:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003624:	4692      	mov	sl, r2
 8003626:	469b      	mov	fp, r3
 8003628:	4643      	mov	r3, r8
 800362a:	eb1a 0303 	adds.w	r3, sl, r3
 800362e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003632:	464b      	mov	r3, r9
 8003634:	eb4b 0303 	adc.w	r3, fp, r3
 8003638:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800363c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	2200      	movs	r2, #0
 8003644:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003648:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800364c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003650:	460b      	mov	r3, r1
 8003652:	18db      	adds	r3, r3, r3
 8003654:	643b      	str	r3, [r7, #64]	@ 0x40
 8003656:	4613      	mov	r3, r2
 8003658:	eb42 0303 	adc.w	r3, r2, r3
 800365c:	647b      	str	r3, [r7, #68]	@ 0x44
 800365e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003662:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003666:	f7fc fe0b 	bl	8000280 <__aeabi_uldivmod>
 800366a:	4602      	mov	r2, r0
 800366c:	460b      	mov	r3, r1
 800366e:	4611      	mov	r1, r2
 8003670:	4b3b      	ldr	r3, [pc, #236]	@ (8003760 <UART_SetConfig+0x2d4>)
 8003672:	fba3 2301 	umull	r2, r3, r3, r1
 8003676:	095b      	lsrs	r3, r3, #5
 8003678:	2264      	movs	r2, #100	@ 0x64
 800367a:	fb02 f303 	mul.w	r3, r2, r3
 800367e:	1acb      	subs	r3, r1, r3
 8003680:	00db      	lsls	r3, r3, #3
 8003682:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003686:	4b36      	ldr	r3, [pc, #216]	@ (8003760 <UART_SetConfig+0x2d4>)
 8003688:	fba3 2302 	umull	r2, r3, r3, r2
 800368c:	095b      	lsrs	r3, r3, #5
 800368e:	005b      	lsls	r3, r3, #1
 8003690:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003694:	441c      	add	r4, r3
 8003696:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800369a:	2200      	movs	r2, #0
 800369c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80036a0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80036a4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80036a8:	4642      	mov	r2, r8
 80036aa:	464b      	mov	r3, r9
 80036ac:	1891      	adds	r1, r2, r2
 80036ae:	63b9      	str	r1, [r7, #56]	@ 0x38
 80036b0:	415b      	adcs	r3, r3
 80036b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80036b4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80036b8:	4641      	mov	r1, r8
 80036ba:	1851      	adds	r1, r2, r1
 80036bc:	6339      	str	r1, [r7, #48]	@ 0x30
 80036be:	4649      	mov	r1, r9
 80036c0:	414b      	adcs	r3, r1
 80036c2:	637b      	str	r3, [r7, #52]	@ 0x34
 80036c4:	f04f 0200 	mov.w	r2, #0
 80036c8:	f04f 0300 	mov.w	r3, #0
 80036cc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80036d0:	4659      	mov	r1, fp
 80036d2:	00cb      	lsls	r3, r1, #3
 80036d4:	4651      	mov	r1, sl
 80036d6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80036da:	4651      	mov	r1, sl
 80036dc:	00ca      	lsls	r2, r1, #3
 80036de:	4610      	mov	r0, r2
 80036e0:	4619      	mov	r1, r3
 80036e2:	4603      	mov	r3, r0
 80036e4:	4642      	mov	r2, r8
 80036e6:	189b      	adds	r3, r3, r2
 80036e8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80036ec:	464b      	mov	r3, r9
 80036ee:	460a      	mov	r2, r1
 80036f0:	eb42 0303 	adc.w	r3, r2, r3
 80036f4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80036f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036fc:	685b      	ldr	r3, [r3, #4]
 80036fe:	2200      	movs	r2, #0
 8003700:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003704:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003708:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800370c:	460b      	mov	r3, r1
 800370e:	18db      	adds	r3, r3, r3
 8003710:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003712:	4613      	mov	r3, r2
 8003714:	eb42 0303 	adc.w	r3, r2, r3
 8003718:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800371a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800371e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003722:	f7fc fdad 	bl	8000280 <__aeabi_uldivmod>
 8003726:	4602      	mov	r2, r0
 8003728:	460b      	mov	r3, r1
 800372a:	4b0d      	ldr	r3, [pc, #52]	@ (8003760 <UART_SetConfig+0x2d4>)
 800372c:	fba3 1302 	umull	r1, r3, r3, r2
 8003730:	095b      	lsrs	r3, r3, #5
 8003732:	2164      	movs	r1, #100	@ 0x64
 8003734:	fb01 f303 	mul.w	r3, r1, r3
 8003738:	1ad3      	subs	r3, r2, r3
 800373a:	00db      	lsls	r3, r3, #3
 800373c:	3332      	adds	r3, #50	@ 0x32
 800373e:	4a08      	ldr	r2, [pc, #32]	@ (8003760 <UART_SetConfig+0x2d4>)
 8003740:	fba2 2303 	umull	r2, r3, r2, r3
 8003744:	095b      	lsrs	r3, r3, #5
 8003746:	f003 0207 	and.w	r2, r3, #7
 800374a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4422      	add	r2, r4
 8003752:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003754:	e106      	b.n	8003964 <UART_SetConfig+0x4d8>
 8003756:	bf00      	nop
 8003758:	40011000 	.word	0x40011000
 800375c:	40011400 	.word	0x40011400
 8003760:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003764:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003768:	2200      	movs	r2, #0
 800376a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800376e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003772:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003776:	4642      	mov	r2, r8
 8003778:	464b      	mov	r3, r9
 800377a:	1891      	adds	r1, r2, r2
 800377c:	6239      	str	r1, [r7, #32]
 800377e:	415b      	adcs	r3, r3
 8003780:	627b      	str	r3, [r7, #36]	@ 0x24
 8003782:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003786:	4641      	mov	r1, r8
 8003788:	1854      	adds	r4, r2, r1
 800378a:	4649      	mov	r1, r9
 800378c:	eb43 0501 	adc.w	r5, r3, r1
 8003790:	f04f 0200 	mov.w	r2, #0
 8003794:	f04f 0300 	mov.w	r3, #0
 8003798:	00eb      	lsls	r3, r5, #3
 800379a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800379e:	00e2      	lsls	r2, r4, #3
 80037a0:	4614      	mov	r4, r2
 80037a2:	461d      	mov	r5, r3
 80037a4:	4643      	mov	r3, r8
 80037a6:	18e3      	adds	r3, r4, r3
 80037a8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80037ac:	464b      	mov	r3, r9
 80037ae:	eb45 0303 	adc.w	r3, r5, r3
 80037b2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80037b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037ba:	685b      	ldr	r3, [r3, #4]
 80037bc:	2200      	movs	r2, #0
 80037be:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80037c2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80037c6:	f04f 0200 	mov.w	r2, #0
 80037ca:	f04f 0300 	mov.w	r3, #0
 80037ce:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80037d2:	4629      	mov	r1, r5
 80037d4:	008b      	lsls	r3, r1, #2
 80037d6:	4621      	mov	r1, r4
 80037d8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80037dc:	4621      	mov	r1, r4
 80037de:	008a      	lsls	r2, r1, #2
 80037e0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80037e4:	f7fc fd4c 	bl	8000280 <__aeabi_uldivmod>
 80037e8:	4602      	mov	r2, r0
 80037ea:	460b      	mov	r3, r1
 80037ec:	4b60      	ldr	r3, [pc, #384]	@ (8003970 <UART_SetConfig+0x4e4>)
 80037ee:	fba3 2302 	umull	r2, r3, r3, r2
 80037f2:	095b      	lsrs	r3, r3, #5
 80037f4:	011c      	lsls	r4, r3, #4
 80037f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80037fa:	2200      	movs	r2, #0
 80037fc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003800:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003804:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003808:	4642      	mov	r2, r8
 800380a:	464b      	mov	r3, r9
 800380c:	1891      	adds	r1, r2, r2
 800380e:	61b9      	str	r1, [r7, #24]
 8003810:	415b      	adcs	r3, r3
 8003812:	61fb      	str	r3, [r7, #28]
 8003814:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003818:	4641      	mov	r1, r8
 800381a:	1851      	adds	r1, r2, r1
 800381c:	6139      	str	r1, [r7, #16]
 800381e:	4649      	mov	r1, r9
 8003820:	414b      	adcs	r3, r1
 8003822:	617b      	str	r3, [r7, #20]
 8003824:	f04f 0200 	mov.w	r2, #0
 8003828:	f04f 0300 	mov.w	r3, #0
 800382c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003830:	4659      	mov	r1, fp
 8003832:	00cb      	lsls	r3, r1, #3
 8003834:	4651      	mov	r1, sl
 8003836:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800383a:	4651      	mov	r1, sl
 800383c:	00ca      	lsls	r2, r1, #3
 800383e:	4610      	mov	r0, r2
 8003840:	4619      	mov	r1, r3
 8003842:	4603      	mov	r3, r0
 8003844:	4642      	mov	r2, r8
 8003846:	189b      	adds	r3, r3, r2
 8003848:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800384c:	464b      	mov	r3, r9
 800384e:	460a      	mov	r2, r1
 8003850:	eb42 0303 	adc.w	r3, r2, r3
 8003854:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003858:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800385c:	685b      	ldr	r3, [r3, #4]
 800385e:	2200      	movs	r2, #0
 8003860:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003862:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003864:	f04f 0200 	mov.w	r2, #0
 8003868:	f04f 0300 	mov.w	r3, #0
 800386c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003870:	4649      	mov	r1, r9
 8003872:	008b      	lsls	r3, r1, #2
 8003874:	4641      	mov	r1, r8
 8003876:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800387a:	4641      	mov	r1, r8
 800387c:	008a      	lsls	r2, r1, #2
 800387e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003882:	f7fc fcfd 	bl	8000280 <__aeabi_uldivmod>
 8003886:	4602      	mov	r2, r0
 8003888:	460b      	mov	r3, r1
 800388a:	4611      	mov	r1, r2
 800388c:	4b38      	ldr	r3, [pc, #224]	@ (8003970 <UART_SetConfig+0x4e4>)
 800388e:	fba3 2301 	umull	r2, r3, r3, r1
 8003892:	095b      	lsrs	r3, r3, #5
 8003894:	2264      	movs	r2, #100	@ 0x64
 8003896:	fb02 f303 	mul.w	r3, r2, r3
 800389a:	1acb      	subs	r3, r1, r3
 800389c:	011b      	lsls	r3, r3, #4
 800389e:	3332      	adds	r3, #50	@ 0x32
 80038a0:	4a33      	ldr	r2, [pc, #204]	@ (8003970 <UART_SetConfig+0x4e4>)
 80038a2:	fba2 2303 	umull	r2, r3, r2, r3
 80038a6:	095b      	lsrs	r3, r3, #5
 80038a8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80038ac:	441c      	add	r4, r3
 80038ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80038b2:	2200      	movs	r2, #0
 80038b4:	673b      	str	r3, [r7, #112]	@ 0x70
 80038b6:	677a      	str	r2, [r7, #116]	@ 0x74
 80038b8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80038bc:	4642      	mov	r2, r8
 80038be:	464b      	mov	r3, r9
 80038c0:	1891      	adds	r1, r2, r2
 80038c2:	60b9      	str	r1, [r7, #8]
 80038c4:	415b      	adcs	r3, r3
 80038c6:	60fb      	str	r3, [r7, #12]
 80038c8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80038cc:	4641      	mov	r1, r8
 80038ce:	1851      	adds	r1, r2, r1
 80038d0:	6039      	str	r1, [r7, #0]
 80038d2:	4649      	mov	r1, r9
 80038d4:	414b      	adcs	r3, r1
 80038d6:	607b      	str	r3, [r7, #4]
 80038d8:	f04f 0200 	mov.w	r2, #0
 80038dc:	f04f 0300 	mov.w	r3, #0
 80038e0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80038e4:	4659      	mov	r1, fp
 80038e6:	00cb      	lsls	r3, r1, #3
 80038e8:	4651      	mov	r1, sl
 80038ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80038ee:	4651      	mov	r1, sl
 80038f0:	00ca      	lsls	r2, r1, #3
 80038f2:	4610      	mov	r0, r2
 80038f4:	4619      	mov	r1, r3
 80038f6:	4603      	mov	r3, r0
 80038f8:	4642      	mov	r2, r8
 80038fa:	189b      	adds	r3, r3, r2
 80038fc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80038fe:	464b      	mov	r3, r9
 8003900:	460a      	mov	r2, r1
 8003902:	eb42 0303 	adc.w	r3, r2, r3
 8003906:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003908:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800390c:	685b      	ldr	r3, [r3, #4]
 800390e:	2200      	movs	r2, #0
 8003910:	663b      	str	r3, [r7, #96]	@ 0x60
 8003912:	667a      	str	r2, [r7, #100]	@ 0x64
 8003914:	f04f 0200 	mov.w	r2, #0
 8003918:	f04f 0300 	mov.w	r3, #0
 800391c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003920:	4649      	mov	r1, r9
 8003922:	008b      	lsls	r3, r1, #2
 8003924:	4641      	mov	r1, r8
 8003926:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800392a:	4641      	mov	r1, r8
 800392c:	008a      	lsls	r2, r1, #2
 800392e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003932:	f7fc fca5 	bl	8000280 <__aeabi_uldivmod>
 8003936:	4602      	mov	r2, r0
 8003938:	460b      	mov	r3, r1
 800393a:	4b0d      	ldr	r3, [pc, #52]	@ (8003970 <UART_SetConfig+0x4e4>)
 800393c:	fba3 1302 	umull	r1, r3, r3, r2
 8003940:	095b      	lsrs	r3, r3, #5
 8003942:	2164      	movs	r1, #100	@ 0x64
 8003944:	fb01 f303 	mul.w	r3, r1, r3
 8003948:	1ad3      	subs	r3, r2, r3
 800394a:	011b      	lsls	r3, r3, #4
 800394c:	3332      	adds	r3, #50	@ 0x32
 800394e:	4a08      	ldr	r2, [pc, #32]	@ (8003970 <UART_SetConfig+0x4e4>)
 8003950:	fba2 2303 	umull	r2, r3, r2, r3
 8003954:	095b      	lsrs	r3, r3, #5
 8003956:	f003 020f 	and.w	r2, r3, #15
 800395a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4422      	add	r2, r4
 8003962:	609a      	str	r2, [r3, #8]
}
 8003964:	bf00      	nop
 8003966:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800396a:	46bd      	mov	sp, r7
 800396c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003970:	51eb851f 	.word	0x51eb851f

08003974 <siprintf>:
 8003974:	b40e      	push	{r1, r2, r3}
 8003976:	b500      	push	{lr}
 8003978:	b09c      	sub	sp, #112	@ 0x70
 800397a:	ab1d      	add	r3, sp, #116	@ 0x74
 800397c:	9002      	str	r0, [sp, #8]
 800397e:	9006      	str	r0, [sp, #24]
 8003980:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8003984:	4809      	ldr	r0, [pc, #36]	@ (80039ac <siprintf+0x38>)
 8003986:	9107      	str	r1, [sp, #28]
 8003988:	9104      	str	r1, [sp, #16]
 800398a:	4909      	ldr	r1, [pc, #36]	@ (80039b0 <siprintf+0x3c>)
 800398c:	f853 2b04 	ldr.w	r2, [r3], #4
 8003990:	9105      	str	r1, [sp, #20]
 8003992:	6800      	ldr	r0, [r0, #0]
 8003994:	9301      	str	r3, [sp, #4]
 8003996:	a902      	add	r1, sp, #8
 8003998:	f000 f994 	bl	8003cc4 <_svfiprintf_r>
 800399c:	9b02      	ldr	r3, [sp, #8]
 800399e:	2200      	movs	r2, #0
 80039a0:	701a      	strb	r2, [r3, #0]
 80039a2:	b01c      	add	sp, #112	@ 0x70
 80039a4:	f85d eb04 	ldr.w	lr, [sp], #4
 80039a8:	b003      	add	sp, #12
 80039aa:	4770      	bx	lr
 80039ac:	20000014 	.word	0x20000014
 80039b0:	ffff0208 	.word	0xffff0208

080039b4 <memset>:
 80039b4:	4402      	add	r2, r0
 80039b6:	4603      	mov	r3, r0
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d100      	bne.n	80039be <memset+0xa>
 80039bc:	4770      	bx	lr
 80039be:	f803 1b01 	strb.w	r1, [r3], #1
 80039c2:	e7f9      	b.n	80039b8 <memset+0x4>

080039c4 <__errno>:
 80039c4:	4b01      	ldr	r3, [pc, #4]	@ (80039cc <__errno+0x8>)
 80039c6:	6818      	ldr	r0, [r3, #0]
 80039c8:	4770      	bx	lr
 80039ca:	bf00      	nop
 80039cc:	20000014 	.word	0x20000014

080039d0 <__libc_init_array>:
 80039d0:	b570      	push	{r4, r5, r6, lr}
 80039d2:	4d0d      	ldr	r5, [pc, #52]	@ (8003a08 <__libc_init_array+0x38>)
 80039d4:	4c0d      	ldr	r4, [pc, #52]	@ (8003a0c <__libc_init_array+0x3c>)
 80039d6:	1b64      	subs	r4, r4, r5
 80039d8:	10a4      	asrs	r4, r4, #2
 80039da:	2600      	movs	r6, #0
 80039dc:	42a6      	cmp	r6, r4
 80039de:	d109      	bne.n	80039f4 <__libc_init_array+0x24>
 80039e0:	4d0b      	ldr	r5, [pc, #44]	@ (8003a10 <__libc_init_array+0x40>)
 80039e2:	4c0c      	ldr	r4, [pc, #48]	@ (8003a14 <__libc_init_array+0x44>)
 80039e4:	f000 fc66 	bl	80042b4 <_init>
 80039e8:	1b64      	subs	r4, r4, r5
 80039ea:	10a4      	asrs	r4, r4, #2
 80039ec:	2600      	movs	r6, #0
 80039ee:	42a6      	cmp	r6, r4
 80039f0:	d105      	bne.n	80039fe <__libc_init_array+0x2e>
 80039f2:	bd70      	pop	{r4, r5, r6, pc}
 80039f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80039f8:	4798      	blx	r3
 80039fa:	3601      	adds	r6, #1
 80039fc:	e7ee      	b.n	80039dc <__libc_init_array+0xc>
 80039fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a02:	4798      	blx	r3
 8003a04:	3601      	adds	r6, #1
 8003a06:	e7f2      	b.n	80039ee <__libc_init_array+0x1e>
 8003a08:	0800509c 	.word	0x0800509c
 8003a0c:	0800509c 	.word	0x0800509c
 8003a10:	0800509c 	.word	0x0800509c
 8003a14:	080050a0 	.word	0x080050a0

08003a18 <__retarget_lock_acquire_recursive>:
 8003a18:	4770      	bx	lr

08003a1a <__retarget_lock_release_recursive>:
 8003a1a:	4770      	bx	lr

08003a1c <_free_r>:
 8003a1c:	b538      	push	{r3, r4, r5, lr}
 8003a1e:	4605      	mov	r5, r0
 8003a20:	2900      	cmp	r1, #0
 8003a22:	d041      	beq.n	8003aa8 <_free_r+0x8c>
 8003a24:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003a28:	1f0c      	subs	r4, r1, #4
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	bfb8      	it	lt
 8003a2e:	18e4      	addlt	r4, r4, r3
 8003a30:	f000 f8e0 	bl	8003bf4 <__malloc_lock>
 8003a34:	4a1d      	ldr	r2, [pc, #116]	@ (8003aac <_free_r+0x90>)
 8003a36:	6813      	ldr	r3, [r2, #0]
 8003a38:	b933      	cbnz	r3, 8003a48 <_free_r+0x2c>
 8003a3a:	6063      	str	r3, [r4, #4]
 8003a3c:	6014      	str	r4, [r2, #0]
 8003a3e:	4628      	mov	r0, r5
 8003a40:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003a44:	f000 b8dc 	b.w	8003c00 <__malloc_unlock>
 8003a48:	42a3      	cmp	r3, r4
 8003a4a:	d908      	bls.n	8003a5e <_free_r+0x42>
 8003a4c:	6820      	ldr	r0, [r4, #0]
 8003a4e:	1821      	adds	r1, r4, r0
 8003a50:	428b      	cmp	r3, r1
 8003a52:	bf01      	itttt	eq
 8003a54:	6819      	ldreq	r1, [r3, #0]
 8003a56:	685b      	ldreq	r3, [r3, #4]
 8003a58:	1809      	addeq	r1, r1, r0
 8003a5a:	6021      	streq	r1, [r4, #0]
 8003a5c:	e7ed      	b.n	8003a3a <_free_r+0x1e>
 8003a5e:	461a      	mov	r2, r3
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	b10b      	cbz	r3, 8003a68 <_free_r+0x4c>
 8003a64:	42a3      	cmp	r3, r4
 8003a66:	d9fa      	bls.n	8003a5e <_free_r+0x42>
 8003a68:	6811      	ldr	r1, [r2, #0]
 8003a6a:	1850      	adds	r0, r2, r1
 8003a6c:	42a0      	cmp	r0, r4
 8003a6e:	d10b      	bne.n	8003a88 <_free_r+0x6c>
 8003a70:	6820      	ldr	r0, [r4, #0]
 8003a72:	4401      	add	r1, r0
 8003a74:	1850      	adds	r0, r2, r1
 8003a76:	4283      	cmp	r3, r0
 8003a78:	6011      	str	r1, [r2, #0]
 8003a7a:	d1e0      	bne.n	8003a3e <_free_r+0x22>
 8003a7c:	6818      	ldr	r0, [r3, #0]
 8003a7e:	685b      	ldr	r3, [r3, #4]
 8003a80:	6053      	str	r3, [r2, #4]
 8003a82:	4408      	add	r0, r1
 8003a84:	6010      	str	r0, [r2, #0]
 8003a86:	e7da      	b.n	8003a3e <_free_r+0x22>
 8003a88:	d902      	bls.n	8003a90 <_free_r+0x74>
 8003a8a:	230c      	movs	r3, #12
 8003a8c:	602b      	str	r3, [r5, #0]
 8003a8e:	e7d6      	b.n	8003a3e <_free_r+0x22>
 8003a90:	6820      	ldr	r0, [r4, #0]
 8003a92:	1821      	adds	r1, r4, r0
 8003a94:	428b      	cmp	r3, r1
 8003a96:	bf04      	itt	eq
 8003a98:	6819      	ldreq	r1, [r3, #0]
 8003a9a:	685b      	ldreq	r3, [r3, #4]
 8003a9c:	6063      	str	r3, [r4, #4]
 8003a9e:	bf04      	itt	eq
 8003aa0:	1809      	addeq	r1, r1, r0
 8003aa2:	6021      	streq	r1, [r4, #0]
 8003aa4:	6054      	str	r4, [r2, #4]
 8003aa6:	e7ca      	b.n	8003a3e <_free_r+0x22>
 8003aa8:	bd38      	pop	{r3, r4, r5, pc}
 8003aaa:	bf00      	nop
 8003aac:	200006b0 	.word	0x200006b0

08003ab0 <sbrk_aligned>:
 8003ab0:	b570      	push	{r4, r5, r6, lr}
 8003ab2:	4e0f      	ldr	r6, [pc, #60]	@ (8003af0 <sbrk_aligned+0x40>)
 8003ab4:	460c      	mov	r4, r1
 8003ab6:	6831      	ldr	r1, [r6, #0]
 8003ab8:	4605      	mov	r5, r0
 8003aba:	b911      	cbnz	r1, 8003ac2 <sbrk_aligned+0x12>
 8003abc:	f000 fba6 	bl	800420c <_sbrk_r>
 8003ac0:	6030      	str	r0, [r6, #0]
 8003ac2:	4621      	mov	r1, r4
 8003ac4:	4628      	mov	r0, r5
 8003ac6:	f000 fba1 	bl	800420c <_sbrk_r>
 8003aca:	1c43      	adds	r3, r0, #1
 8003acc:	d103      	bne.n	8003ad6 <sbrk_aligned+0x26>
 8003ace:	f04f 34ff 	mov.w	r4, #4294967295
 8003ad2:	4620      	mov	r0, r4
 8003ad4:	bd70      	pop	{r4, r5, r6, pc}
 8003ad6:	1cc4      	adds	r4, r0, #3
 8003ad8:	f024 0403 	bic.w	r4, r4, #3
 8003adc:	42a0      	cmp	r0, r4
 8003ade:	d0f8      	beq.n	8003ad2 <sbrk_aligned+0x22>
 8003ae0:	1a21      	subs	r1, r4, r0
 8003ae2:	4628      	mov	r0, r5
 8003ae4:	f000 fb92 	bl	800420c <_sbrk_r>
 8003ae8:	3001      	adds	r0, #1
 8003aea:	d1f2      	bne.n	8003ad2 <sbrk_aligned+0x22>
 8003aec:	e7ef      	b.n	8003ace <sbrk_aligned+0x1e>
 8003aee:	bf00      	nop
 8003af0:	200006ac 	.word	0x200006ac

08003af4 <_malloc_r>:
 8003af4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003af8:	1ccd      	adds	r5, r1, #3
 8003afa:	f025 0503 	bic.w	r5, r5, #3
 8003afe:	3508      	adds	r5, #8
 8003b00:	2d0c      	cmp	r5, #12
 8003b02:	bf38      	it	cc
 8003b04:	250c      	movcc	r5, #12
 8003b06:	2d00      	cmp	r5, #0
 8003b08:	4606      	mov	r6, r0
 8003b0a:	db01      	blt.n	8003b10 <_malloc_r+0x1c>
 8003b0c:	42a9      	cmp	r1, r5
 8003b0e:	d904      	bls.n	8003b1a <_malloc_r+0x26>
 8003b10:	230c      	movs	r3, #12
 8003b12:	6033      	str	r3, [r6, #0]
 8003b14:	2000      	movs	r0, #0
 8003b16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003b1a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003bf0 <_malloc_r+0xfc>
 8003b1e:	f000 f869 	bl	8003bf4 <__malloc_lock>
 8003b22:	f8d8 3000 	ldr.w	r3, [r8]
 8003b26:	461c      	mov	r4, r3
 8003b28:	bb44      	cbnz	r4, 8003b7c <_malloc_r+0x88>
 8003b2a:	4629      	mov	r1, r5
 8003b2c:	4630      	mov	r0, r6
 8003b2e:	f7ff ffbf 	bl	8003ab0 <sbrk_aligned>
 8003b32:	1c43      	adds	r3, r0, #1
 8003b34:	4604      	mov	r4, r0
 8003b36:	d158      	bne.n	8003bea <_malloc_r+0xf6>
 8003b38:	f8d8 4000 	ldr.w	r4, [r8]
 8003b3c:	4627      	mov	r7, r4
 8003b3e:	2f00      	cmp	r7, #0
 8003b40:	d143      	bne.n	8003bca <_malloc_r+0xd6>
 8003b42:	2c00      	cmp	r4, #0
 8003b44:	d04b      	beq.n	8003bde <_malloc_r+0xea>
 8003b46:	6823      	ldr	r3, [r4, #0]
 8003b48:	4639      	mov	r1, r7
 8003b4a:	4630      	mov	r0, r6
 8003b4c:	eb04 0903 	add.w	r9, r4, r3
 8003b50:	f000 fb5c 	bl	800420c <_sbrk_r>
 8003b54:	4581      	cmp	r9, r0
 8003b56:	d142      	bne.n	8003bde <_malloc_r+0xea>
 8003b58:	6821      	ldr	r1, [r4, #0]
 8003b5a:	1a6d      	subs	r5, r5, r1
 8003b5c:	4629      	mov	r1, r5
 8003b5e:	4630      	mov	r0, r6
 8003b60:	f7ff ffa6 	bl	8003ab0 <sbrk_aligned>
 8003b64:	3001      	adds	r0, #1
 8003b66:	d03a      	beq.n	8003bde <_malloc_r+0xea>
 8003b68:	6823      	ldr	r3, [r4, #0]
 8003b6a:	442b      	add	r3, r5
 8003b6c:	6023      	str	r3, [r4, #0]
 8003b6e:	f8d8 3000 	ldr.w	r3, [r8]
 8003b72:	685a      	ldr	r2, [r3, #4]
 8003b74:	bb62      	cbnz	r2, 8003bd0 <_malloc_r+0xdc>
 8003b76:	f8c8 7000 	str.w	r7, [r8]
 8003b7a:	e00f      	b.n	8003b9c <_malloc_r+0xa8>
 8003b7c:	6822      	ldr	r2, [r4, #0]
 8003b7e:	1b52      	subs	r2, r2, r5
 8003b80:	d420      	bmi.n	8003bc4 <_malloc_r+0xd0>
 8003b82:	2a0b      	cmp	r2, #11
 8003b84:	d917      	bls.n	8003bb6 <_malloc_r+0xc2>
 8003b86:	1961      	adds	r1, r4, r5
 8003b88:	42a3      	cmp	r3, r4
 8003b8a:	6025      	str	r5, [r4, #0]
 8003b8c:	bf18      	it	ne
 8003b8e:	6059      	strne	r1, [r3, #4]
 8003b90:	6863      	ldr	r3, [r4, #4]
 8003b92:	bf08      	it	eq
 8003b94:	f8c8 1000 	streq.w	r1, [r8]
 8003b98:	5162      	str	r2, [r4, r5]
 8003b9a:	604b      	str	r3, [r1, #4]
 8003b9c:	4630      	mov	r0, r6
 8003b9e:	f000 f82f 	bl	8003c00 <__malloc_unlock>
 8003ba2:	f104 000b 	add.w	r0, r4, #11
 8003ba6:	1d23      	adds	r3, r4, #4
 8003ba8:	f020 0007 	bic.w	r0, r0, #7
 8003bac:	1ac2      	subs	r2, r0, r3
 8003bae:	bf1c      	itt	ne
 8003bb0:	1a1b      	subne	r3, r3, r0
 8003bb2:	50a3      	strne	r3, [r4, r2]
 8003bb4:	e7af      	b.n	8003b16 <_malloc_r+0x22>
 8003bb6:	6862      	ldr	r2, [r4, #4]
 8003bb8:	42a3      	cmp	r3, r4
 8003bba:	bf0c      	ite	eq
 8003bbc:	f8c8 2000 	streq.w	r2, [r8]
 8003bc0:	605a      	strne	r2, [r3, #4]
 8003bc2:	e7eb      	b.n	8003b9c <_malloc_r+0xa8>
 8003bc4:	4623      	mov	r3, r4
 8003bc6:	6864      	ldr	r4, [r4, #4]
 8003bc8:	e7ae      	b.n	8003b28 <_malloc_r+0x34>
 8003bca:	463c      	mov	r4, r7
 8003bcc:	687f      	ldr	r7, [r7, #4]
 8003bce:	e7b6      	b.n	8003b3e <_malloc_r+0x4a>
 8003bd0:	461a      	mov	r2, r3
 8003bd2:	685b      	ldr	r3, [r3, #4]
 8003bd4:	42a3      	cmp	r3, r4
 8003bd6:	d1fb      	bne.n	8003bd0 <_malloc_r+0xdc>
 8003bd8:	2300      	movs	r3, #0
 8003bda:	6053      	str	r3, [r2, #4]
 8003bdc:	e7de      	b.n	8003b9c <_malloc_r+0xa8>
 8003bde:	230c      	movs	r3, #12
 8003be0:	6033      	str	r3, [r6, #0]
 8003be2:	4630      	mov	r0, r6
 8003be4:	f000 f80c 	bl	8003c00 <__malloc_unlock>
 8003be8:	e794      	b.n	8003b14 <_malloc_r+0x20>
 8003bea:	6005      	str	r5, [r0, #0]
 8003bec:	e7d6      	b.n	8003b9c <_malloc_r+0xa8>
 8003bee:	bf00      	nop
 8003bf0:	200006b0 	.word	0x200006b0

08003bf4 <__malloc_lock>:
 8003bf4:	4801      	ldr	r0, [pc, #4]	@ (8003bfc <__malloc_lock+0x8>)
 8003bf6:	f7ff bf0f 	b.w	8003a18 <__retarget_lock_acquire_recursive>
 8003bfa:	bf00      	nop
 8003bfc:	200006a8 	.word	0x200006a8

08003c00 <__malloc_unlock>:
 8003c00:	4801      	ldr	r0, [pc, #4]	@ (8003c08 <__malloc_unlock+0x8>)
 8003c02:	f7ff bf0a 	b.w	8003a1a <__retarget_lock_release_recursive>
 8003c06:	bf00      	nop
 8003c08:	200006a8 	.word	0x200006a8

08003c0c <__ssputs_r>:
 8003c0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003c10:	688e      	ldr	r6, [r1, #8]
 8003c12:	461f      	mov	r7, r3
 8003c14:	42be      	cmp	r6, r7
 8003c16:	680b      	ldr	r3, [r1, #0]
 8003c18:	4682      	mov	sl, r0
 8003c1a:	460c      	mov	r4, r1
 8003c1c:	4690      	mov	r8, r2
 8003c1e:	d82d      	bhi.n	8003c7c <__ssputs_r+0x70>
 8003c20:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003c24:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003c28:	d026      	beq.n	8003c78 <__ssputs_r+0x6c>
 8003c2a:	6965      	ldr	r5, [r4, #20]
 8003c2c:	6909      	ldr	r1, [r1, #16]
 8003c2e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003c32:	eba3 0901 	sub.w	r9, r3, r1
 8003c36:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003c3a:	1c7b      	adds	r3, r7, #1
 8003c3c:	444b      	add	r3, r9
 8003c3e:	106d      	asrs	r5, r5, #1
 8003c40:	429d      	cmp	r5, r3
 8003c42:	bf38      	it	cc
 8003c44:	461d      	movcc	r5, r3
 8003c46:	0553      	lsls	r3, r2, #21
 8003c48:	d527      	bpl.n	8003c9a <__ssputs_r+0x8e>
 8003c4a:	4629      	mov	r1, r5
 8003c4c:	f7ff ff52 	bl	8003af4 <_malloc_r>
 8003c50:	4606      	mov	r6, r0
 8003c52:	b360      	cbz	r0, 8003cae <__ssputs_r+0xa2>
 8003c54:	6921      	ldr	r1, [r4, #16]
 8003c56:	464a      	mov	r2, r9
 8003c58:	f000 fae8 	bl	800422c <memcpy>
 8003c5c:	89a3      	ldrh	r3, [r4, #12]
 8003c5e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8003c62:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003c66:	81a3      	strh	r3, [r4, #12]
 8003c68:	6126      	str	r6, [r4, #16]
 8003c6a:	6165      	str	r5, [r4, #20]
 8003c6c:	444e      	add	r6, r9
 8003c6e:	eba5 0509 	sub.w	r5, r5, r9
 8003c72:	6026      	str	r6, [r4, #0]
 8003c74:	60a5      	str	r5, [r4, #8]
 8003c76:	463e      	mov	r6, r7
 8003c78:	42be      	cmp	r6, r7
 8003c7a:	d900      	bls.n	8003c7e <__ssputs_r+0x72>
 8003c7c:	463e      	mov	r6, r7
 8003c7e:	6820      	ldr	r0, [r4, #0]
 8003c80:	4632      	mov	r2, r6
 8003c82:	4641      	mov	r1, r8
 8003c84:	f000 faa8 	bl	80041d8 <memmove>
 8003c88:	68a3      	ldr	r3, [r4, #8]
 8003c8a:	1b9b      	subs	r3, r3, r6
 8003c8c:	60a3      	str	r3, [r4, #8]
 8003c8e:	6823      	ldr	r3, [r4, #0]
 8003c90:	4433      	add	r3, r6
 8003c92:	6023      	str	r3, [r4, #0]
 8003c94:	2000      	movs	r0, #0
 8003c96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c9a:	462a      	mov	r2, r5
 8003c9c:	f000 fad4 	bl	8004248 <_realloc_r>
 8003ca0:	4606      	mov	r6, r0
 8003ca2:	2800      	cmp	r0, #0
 8003ca4:	d1e0      	bne.n	8003c68 <__ssputs_r+0x5c>
 8003ca6:	6921      	ldr	r1, [r4, #16]
 8003ca8:	4650      	mov	r0, sl
 8003caa:	f7ff feb7 	bl	8003a1c <_free_r>
 8003cae:	230c      	movs	r3, #12
 8003cb0:	f8ca 3000 	str.w	r3, [sl]
 8003cb4:	89a3      	ldrh	r3, [r4, #12]
 8003cb6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003cba:	81a3      	strh	r3, [r4, #12]
 8003cbc:	f04f 30ff 	mov.w	r0, #4294967295
 8003cc0:	e7e9      	b.n	8003c96 <__ssputs_r+0x8a>
	...

08003cc4 <_svfiprintf_r>:
 8003cc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003cc8:	4698      	mov	r8, r3
 8003cca:	898b      	ldrh	r3, [r1, #12]
 8003ccc:	061b      	lsls	r3, r3, #24
 8003cce:	b09d      	sub	sp, #116	@ 0x74
 8003cd0:	4607      	mov	r7, r0
 8003cd2:	460d      	mov	r5, r1
 8003cd4:	4614      	mov	r4, r2
 8003cd6:	d510      	bpl.n	8003cfa <_svfiprintf_r+0x36>
 8003cd8:	690b      	ldr	r3, [r1, #16]
 8003cda:	b973      	cbnz	r3, 8003cfa <_svfiprintf_r+0x36>
 8003cdc:	2140      	movs	r1, #64	@ 0x40
 8003cde:	f7ff ff09 	bl	8003af4 <_malloc_r>
 8003ce2:	6028      	str	r0, [r5, #0]
 8003ce4:	6128      	str	r0, [r5, #16]
 8003ce6:	b930      	cbnz	r0, 8003cf6 <_svfiprintf_r+0x32>
 8003ce8:	230c      	movs	r3, #12
 8003cea:	603b      	str	r3, [r7, #0]
 8003cec:	f04f 30ff 	mov.w	r0, #4294967295
 8003cf0:	b01d      	add	sp, #116	@ 0x74
 8003cf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003cf6:	2340      	movs	r3, #64	@ 0x40
 8003cf8:	616b      	str	r3, [r5, #20]
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	9309      	str	r3, [sp, #36]	@ 0x24
 8003cfe:	2320      	movs	r3, #32
 8003d00:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003d04:	f8cd 800c 	str.w	r8, [sp, #12]
 8003d08:	2330      	movs	r3, #48	@ 0x30
 8003d0a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8003ea8 <_svfiprintf_r+0x1e4>
 8003d0e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003d12:	f04f 0901 	mov.w	r9, #1
 8003d16:	4623      	mov	r3, r4
 8003d18:	469a      	mov	sl, r3
 8003d1a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003d1e:	b10a      	cbz	r2, 8003d24 <_svfiprintf_r+0x60>
 8003d20:	2a25      	cmp	r2, #37	@ 0x25
 8003d22:	d1f9      	bne.n	8003d18 <_svfiprintf_r+0x54>
 8003d24:	ebba 0b04 	subs.w	fp, sl, r4
 8003d28:	d00b      	beq.n	8003d42 <_svfiprintf_r+0x7e>
 8003d2a:	465b      	mov	r3, fp
 8003d2c:	4622      	mov	r2, r4
 8003d2e:	4629      	mov	r1, r5
 8003d30:	4638      	mov	r0, r7
 8003d32:	f7ff ff6b 	bl	8003c0c <__ssputs_r>
 8003d36:	3001      	adds	r0, #1
 8003d38:	f000 80a7 	beq.w	8003e8a <_svfiprintf_r+0x1c6>
 8003d3c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003d3e:	445a      	add	r2, fp
 8003d40:	9209      	str	r2, [sp, #36]	@ 0x24
 8003d42:	f89a 3000 	ldrb.w	r3, [sl]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	f000 809f 	beq.w	8003e8a <_svfiprintf_r+0x1c6>
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	f04f 32ff 	mov.w	r2, #4294967295
 8003d52:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003d56:	f10a 0a01 	add.w	sl, sl, #1
 8003d5a:	9304      	str	r3, [sp, #16]
 8003d5c:	9307      	str	r3, [sp, #28]
 8003d5e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003d62:	931a      	str	r3, [sp, #104]	@ 0x68
 8003d64:	4654      	mov	r4, sl
 8003d66:	2205      	movs	r2, #5
 8003d68:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003d6c:	484e      	ldr	r0, [pc, #312]	@ (8003ea8 <_svfiprintf_r+0x1e4>)
 8003d6e:	f7fc fa37 	bl	80001e0 <memchr>
 8003d72:	9a04      	ldr	r2, [sp, #16]
 8003d74:	b9d8      	cbnz	r0, 8003dae <_svfiprintf_r+0xea>
 8003d76:	06d0      	lsls	r0, r2, #27
 8003d78:	bf44      	itt	mi
 8003d7a:	2320      	movmi	r3, #32
 8003d7c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003d80:	0711      	lsls	r1, r2, #28
 8003d82:	bf44      	itt	mi
 8003d84:	232b      	movmi	r3, #43	@ 0x2b
 8003d86:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003d8a:	f89a 3000 	ldrb.w	r3, [sl]
 8003d8e:	2b2a      	cmp	r3, #42	@ 0x2a
 8003d90:	d015      	beq.n	8003dbe <_svfiprintf_r+0xfa>
 8003d92:	9a07      	ldr	r2, [sp, #28]
 8003d94:	4654      	mov	r4, sl
 8003d96:	2000      	movs	r0, #0
 8003d98:	f04f 0c0a 	mov.w	ip, #10
 8003d9c:	4621      	mov	r1, r4
 8003d9e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003da2:	3b30      	subs	r3, #48	@ 0x30
 8003da4:	2b09      	cmp	r3, #9
 8003da6:	d94b      	bls.n	8003e40 <_svfiprintf_r+0x17c>
 8003da8:	b1b0      	cbz	r0, 8003dd8 <_svfiprintf_r+0x114>
 8003daa:	9207      	str	r2, [sp, #28]
 8003dac:	e014      	b.n	8003dd8 <_svfiprintf_r+0x114>
 8003dae:	eba0 0308 	sub.w	r3, r0, r8
 8003db2:	fa09 f303 	lsl.w	r3, r9, r3
 8003db6:	4313      	orrs	r3, r2
 8003db8:	9304      	str	r3, [sp, #16]
 8003dba:	46a2      	mov	sl, r4
 8003dbc:	e7d2      	b.n	8003d64 <_svfiprintf_r+0xa0>
 8003dbe:	9b03      	ldr	r3, [sp, #12]
 8003dc0:	1d19      	adds	r1, r3, #4
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	9103      	str	r1, [sp, #12]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	bfbb      	ittet	lt
 8003dca:	425b      	neglt	r3, r3
 8003dcc:	f042 0202 	orrlt.w	r2, r2, #2
 8003dd0:	9307      	strge	r3, [sp, #28]
 8003dd2:	9307      	strlt	r3, [sp, #28]
 8003dd4:	bfb8      	it	lt
 8003dd6:	9204      	strlt	r2, [sp, #16]
 8003dd8:	7823      	ldrb	r3, [r4, #0]
 8003dda:	2b2e      	cmp	r3, #46	@ 0x2e
 8003ddc:	d10a      	bne.n	8003df4 <_svfiprintf_r+0x130>
 8003dde:	7863      	ldrb	r3, [r4, #1]
 8003de0:	2b2a      	cmp	r3, #42	@ 0x2a
 8003de2:	d132      	bne.n	8003e4a <_svfiprintf_r+0x186>
 8003de4:	9b03      	ldr	r3, [sp, #12]
 8003de6:	1d1a      	adds	r2, r3, #4
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	9203      	str	r2, [sp, #12]
 8003dec:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003df0:	3402      	adds	r4, #2
 8003df2:	9305      	str	r3, [sp, #20]
 8003df4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8003eb8 <_svfiprintf_r+0x1f4>
 8003df8:	7821      	ldrb	r1, [r4, #0]
 8003dfa:	2203      	movs	r2, #3
 8003dfc:	4650      	mov	r0, sl
 8003dfe:	f7fc f9ef 	bl	80001e0 <memchr>
 8003e02:	b138      	cbz	r0, 8003e14 <_svfiprintf_r+0x150>
 8003e04:	9b04      	ldr	r3, [sp, #16]
 8003e06:	eba0 000a 	sub.w	r0, r0, sl
 8003e0a:	2240      	movs	r2, #64	@ 0x40
 8003e0c:	4082      	lsls	r2, r0
 8003e0e:	4313      	orrs	r3, r2
 8003e10:	3401      	adds	r4, #1
 8003e12:	9304      	str	r3, [sp, #16]
 8003e14:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003e18:	4824      	ldr	r0, [pc, #144]	@ (8003eac <_svfiprintf_r+0x1e8>)
 8003e1a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003e1e:	2206      	movs	r2, #6
 8003e20:	f7fc f9de 	bl	80001e0 <memchr>
 8003e24:	2800      	cmp	r0, #0
 8003e26:	d036      	beq.n	8003e96 <_svfiprintf_r+0x1d2>
 8003e28:	4b21      	ldr	r3, [pc, #132]	@ (8003eb0 <_svfiprintf_r+0x1ec>)
 8003e2a:	bb1b      	cbnz	r3, 8003e74 <_svfiprintf_r+0x1b0>
 8003e2c:	9b03      	ldr	r3, [sp, #12]
 8003e2e:	3307      	adds	r3, #7
 8003e30:	f023 0307 	bic.w	r3, r3, #7
 8003e34:	3308      	adds	r3, #8
 8003e36:	9303      	str	r3, [sp, #12]
 8003e38:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003e3a:	4433      	add	r3, r6
 8003e3c:	9309      	str	r3, [sp, #36]	@ 0x24
 8003e3e:	e76a      	b.n	8003d16 <_svfiprintf_r+0x52>
 8003e40:	fb0c 3202 	mla	r2, ip, r2, r3
 8003e44:	460c      	mov	r4, r1
 8003e46:	2001      	movs	r0, #1
 8003e48:	e7a8      	b.n	8003d9c <_svfiprintf_r+0xd8>
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	3401      	adds	r4, #1
 8003e4e:	9305      	str	r3, [sp, #20]
 8003e50:	4619      	mov	r1, r3
 8003e52:	f04f 0c0a 	mov.w	ip, #10
 8003e56:	4620      	mov	r0, r4
 8003e58:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003e5c:	3a30      	subs	r2, #48	@ 0x30
 8003e5e:	2a09      	cmp	r2, #9
 8003e60:	d903      	bls.n	8003e6a <_svfiprintf_r+0x1a6>
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d0c6      	beq.n	8003df4 <_svfiprintf_r+0x130>
 8003e66:	9105      	str	r1, [sp, #20]
 8003e68:	e7c4      	b.n	8003df4 <_svfiprintf_r+0x130>
 8003e6a:	fb0c 2101 	mla	r1, ip, r1, r2
 8003e6e:	4604      	mov	r4, r0
 8003e70:	2301      	movs	r3, #1
 8003e72:	e7f0      	b.n	8003e56 <_svfiprintf_r+0x192>
 8003e74:	ab03      	add	r3, sp, #12
 8003e76:	9300      	str	r3, [sp, #0]
 8003e78:	462a      	mov	r2, r5
 8003e7a:	4b0e      	ldr	r3, [pc, #56]	@ (8003eb4 <_svfiprintf_r+0x1f0>)
 8003e7c:	a904      	add	r1, sp, #16
 8003e7e:	4638      	mov	r0, r7
 8003e80:	f3af 8000 	nop.w
 8003e84:	1c42      	adds	r2, r0, #1
 8003e86:	4606      	mov	r6, r0
 8003e88:	d1d6      	bne.n	8003e38 <_svfiprintf_r+0x174>
 8003e8a:	89ab      	ldrh	r3, [r5, #12]
 8003e8c:	065b      	lsls	r3, r3, #25
 8003e8e:	f53f af2d 	bmi.w	8003cec <_svfiprintf_r+0x28>
 8003e92:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003e94:	e72c      	b.n	8003cf0 <_svfiprintf_r+0x2c>
 8003e96:	ab03      	add	r3, sp, #12
 8003e98:	9300      	str	r3, [sp, #0]
 8003e9a:	462a      	mov	r2, r5
 8003e9c:	4b05      	ldr	r3, [pc, #20]	@ (8003eb4 <_svfiprintf_r+0x1f0>)
 8003e9e:	a904      	add	r1, sp, #16
 8003ea0:	4638      	mov	r0, r7
 8003ea2:	f000 f879 	bl	8003f98 <_printf_i>
 8003ea6:	e7ed      	b.n	8003e84 <_svfiprintf_r+0x1c0>
 8003ea8:	08005060 	.word	0x08005060
 8003eac:	0800506a 	.word	0x0800506a
 8003eb0:	00000000 	.word	0x00000000
 8003eb4:	08003c0d 	.word	0x08003c0d
 8003eb8:	08005066 	.word	0x08005066

08003ebc <_printf_common>:
 8003ebc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ec0:	4616      	mov	r6, r2
 8003ec2:	4698      	mov	r8, r3
 8003ec4:	688a      	ldr	r2, [r1, #8]
 8003ec6:	690b      	ldr	r3, [r1, #16]
 8003ec8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	bfb8      	it	lt
 8003ed0:	4613      	movlt	r3, r2
 8003ed2:	6033      	str	r3, [r6, #0]
 8003ed4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003ed8:	4607      	mov	r7, r0
 8003eda:	460c      	mov	r4, r1
 8003edc:	b10a      	cbz	r2, 8003ee2 <_printf_common+0x26>
 8003ede:	3301      	adds	r3, #1
 8003ee0:	6033      	str	r3, [r6, #0]
 8003ee2:	6823      	ldr	r3, [r4, #0]
 8003ee4:	0699      	lsls	r1, r3, #26
 8003ee6:	bf42      	ittt	mi
 8003ee8:	6833      	ldrmi	r3, [r6, #0]
 8003eea:	3302      	addmi	r3, #2
 8003eec:	6033      	strmi	r3, [r6, #0]
 8003eee:	6825      	ldr	r5, [r4, #0]
 8003ef0:	f015 0506 	ands.w	r5, r5, #6
 8003ef4:	d106      	bne.n	8003f04 <_printf_common+0x48>
 8003ef6:	f104 0a19 	add.w	sl, r4, #25
 8003efa:	68e3      	ldr	r3, [r4, #12]
 8003efc:	6832      	ldr	r2, [r6, #0]
 8003efe:	1a9b      	subs	r3, r3, r2
 8003f00:	42ab      	cmp	r3, r5
 8003f02:	dc26      	bgt.n	8003f52 <_printf_common+0x96>
 8003f04:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003f08:	6822      	ldr	r2, [r4, #0]
 8003f0a:	3b00      	subs	r3, #0
 8003f0c:	bf18      	it	ne
 8003f0e:	2301      	movne	r3, #1
 8003f10:	0692      	lsls	r2, r2, #26
 8003f12:	d42b      	bmi.n	8003f6c <_printf_common+0xb0>
 8003f14:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003f18:	4641      	mov	r1, r8
 8003f1a:	4638      	mov	r0, r7
 8003f1c:	47c8      	blx	r9
 8003f1e:	3001      	adds	r0, #1
 8003f20:	d01e      	beq.n	8003f60 <_printf_common+0xa4>
 8003f22:	6823      	ldr	r3, [r4, #0]
 8003f24:	6922      	ldr	r2, [r4, #16]
 8003f26:	f003 0306 	and.w	r3, r3, #6
 8003f2a:	2b04      	cmp	r3, #4
 8003f2c:	bf02      	ittt	eq
 8003f2e:	68e5      	ldreq	r5, [r4, #12]
 8003f30:	6833      	ldreq	r3, [r6, #0]
 8003f32:	1aed      	subeq	r5, r5, r3
 8003f34:	68a3      	ldr	r3, [r4, #8]
 8003f36:	bf0c      	ite	eq
 8003f38:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003f3c:	2500      	movne	r5, #0
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	bfc4      	itt	gt
 8003f42:	1a9b      	subgt	r3, r3, r2
 8003f44:	18ed      	addgt	r5, r5, r3
 8003f46:	2600      	movs	r6, #0
 8003f48:	341a      	adds	r4, #26
 8003f4a:	42b5      	cmp	r5, r6
 8003f4c:	d11a      	bne.n	8003f84 <_printf_common+0xc8>
 8003f4e:	2000      	movs	r0, #0
 8003f50:	e008      	b.n	8003f64 <_printf_common+0xa8>
 8003f52:	2301      	movs	r3, #1
 8003f54:	4652      	mov	r2, sl
 8003f56:	4641      	mov	r1, r8
 8003f58:	4638      	mov	r0, r7
 8003f5a:	47c8      	blx	r9
 8003f5c:	3001      	adds	r0, #1
 8003f5e:	d103      	bne.n	8003f68 <_printf_common+0xac>
 8003f60:	f04f 30ff 	mov.w	r0, #4294967295
 8003f64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f68:	3501      	adds	r5, #1
 8003f6a:	e7c6      	b.n	8003efa <_printf_common+0x3e>
 8003f6c:	18e1      	adds	r1, r4, r3
 8003f6e:	1c5a      	adds	r2, r3, #1
 8003f70:	2030      	movs	r0, #48	@ 0x30
 8003f72:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003f76:	4422      	add	r2, r4
 8003f78:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003f7c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003f80:	3302      	adds	r3, #2
 8003f82:	e7c7      	b.n	8003f14 <_printf_common+0x58>
 8003f84:	2301      	movs	r3, #1
 8003f86:	4622      	mov	r2, r4
 8003f88:	4641      	mov	r1, r8
 8003f8a:	4638      	mov	r0, r7
 8003f8c:	47c8      	blx	r9
 8003f8e:	3001      	adds	r0, #1
 8003f90:	d0e6      	beq.n	8003f60 <_printf_common+0xa4>
 8003f92:	3601      	adds	r6, #1
 8003f94:	e7d9      	b.n	8003f4a <_printf_common+0x8e>
	...

08003f98 <_printf_i>:
 8003f98:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003f9c:	7e0f      	ldrb	r7, [r1, #24]
 8003f9e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003fa0:	2f78      	cmp	r7, #120	@ 0x78
 8003fa2:	4691      	mov	r9, r2
 8003fa4:	4680      	mov	r8, r0
 8003fa6:	460c      	mov	r4, r1
 8003fa8:	469a      	mov	sl, r3
 8003faa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003fae:	d807      	bhi.n	8003fc0 <_printf_i+0x28>
 8003fb0:	2f62      	cmp	r7, #98	@ 0x62
 8003fb2:	d80a      	bhi.n	8003fca <_printf_i+0x32>
 8003fb4:	2f00      	cmp	r7, #0
 8003fb6:	f000 80d2 	beq.w	800415e <_printf_i+0x1c6>
 8003fba:	2f58      	cmp	r7, #88	@ 0x58
 8003fbc:	f000 80b9 	beq.w	8004132 <_printf_i+0x19a>
 8003fc0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003fc4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003fc8:	e03a      	b.n	8004040 <_printf_i+0xa8>
 8003fca:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003fce:	2b15      	cmp	r3, #21
 8003fd0:	d8f6      	bhi.n	8003fc0 <_printf_i+0x28>
 8003fd2:	a101      	add	r1, pc, #4	@ (adr r1, 8003fd8 <_printf_i+0x40>)
 8003fd4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003fd8:	08004031 	.word	0x08004031
 8003fdc:	08004045 	.word	0x08004045
 8003fe0:	08003fc1 	.word	0x08003fc1
 8003fe4:	08003fc1 	.word	0x08003fc1
 8003fe8:	08003fc1 	.word	0x08003fc1
 8003fec:	08003fc1 	.word	0x08003fc1
 8003ff0:	08004045 	.word	0x08004045
 8003ff4:	08003fc1 	.word	0x08003fc1
 8003ff8:	08003fc1 	.word	0x08003fc1
 8003ffc:	08003fc1 	.word	0x08003fc1
 8004000:	08003fc1 	.word	0x08003fc1
 8004004:	08004145 	.word	0x08004145
 8004008:	0800406f 	.word	0x0800406f
 800400c:	080040ff 	.word	0x080040ff
 8004010:	08003fc1 	.word	0x08003fc1
 8004014:	08003fc1 	.word	0x08003fc1
 8004018:	08004167 	.word	0x08004167
 800401c:	08003fc1 	.word	0x08003fc1
 8004020:	0800406f 	.word	0x0800406f
 8004024:	08003fc1 	.word	0x08003fc1
 8004028:	08003fc1 	.word	0x08003fc1
 800402c:	08004107 	.word	0x08004107
 8004030:	6833      	ldr	r3, [r6, #0]
 8004032:	1d1a      	adds	r2, r3, #4
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	6032      	str	r2, [r6, #0]
 8004038:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800403c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004040:	2301      	movs	r3, #1
 8004042:	e09d      	b.n	8004180 <_printf_i+0x1e8>
 8004044:	6833      	ldr	r3, [r6, #0]
 8004046:	6820      	ldr	r0, [r4, #0]
 8004048:	1d19      	adds	r1, r3, #4
 800404a:	6031      	str	r1, [r6, #0]
 800404c:	0606      	lsls	r6, r0, #24
 800404e:	d501      	bpl.n	8004054 <_printf_i+0xbc>
 8004050:	681d      	ldr	r5, [r3, #0]
 8004052:	e003      	b.n	800405c <_printf_i+0xc4>
 8004054:	0645      	lsls	r5, r0, #25
 8004056:	d5fb      	bpl.n	8004050 <_printf_i+0xb8>
 8004058:	f9b3 5000 	ldrsh.w	r5, [r3]
 800405c:	2d00      	cmp	r5, #0
 800405e:	da03      	bge.n	8004068 <_printf_i+0xd0>
 8004060:	232d      	movs	r3, #45	@ 0x2d
 8004062:	426d      	negs	r5, r5
 8004064:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004068:	4859      	ldr	r0, [pc, #356]	@ (80041d0 <_printf_i+0x238>)
 800406a:	230a      	movs	r3, #10
 800406c:	e011      	b.n	8004092 <_printf_i+0xfa>
 800406e:	6821      	ldr	r1, [r4, #0]
 8004070:	6833      	ldr	r3, [r6, #0]
 8004072:	0608      	lsls	r0, r1, #24
 8004074:	f853 5b04 	ldr.w	r5, [r3], #4
 8004078:	d402      	bmi.n	8004080 <_printf_i+0xe8>
 800407a:	0649      	lsls	r1, r1, #25
 800407c:	bf48      	it	mi
 800407e:	b2ad      	uxthmi	r5, r5
 8004080:	2f6f      	cmp	r7, #111	@ 0x6f
 8004082:	4853      	ldr	r0, [pc, #332]	@ (80041d0 <_printf_i+0x238>)
 8004084:	6033      	str	r3, [r6, #0]
 8004086:	bf14      	ite	ne
 8004088:	230a      	movne	r3, #10
 800408a:	2308      	moveq	r3, #8
 800408c:	2100      	movs	r1, #0
 800408e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004092:	6866      	ldr	r6, [r4, #4]
 8004094:	60a6      	str	r6, [r4, #8]
 8004096:	2e00      	cmp	r6, #0
 8004098:	bfa2      	ittt	ge
 800409a:	6821      	ldrge	r1, [r4, #0]
 800409c:	f021 0104 	bicge.w	r1, r1, #4
 80040a0:	6021      	strge	r1, [r4, #0]
 80040a2:	b90d      	cbnz	r5, 80040a8 <_printf_i+0x110>
 80040a4:	2e00      	cmp	r6, #0
 80040a6:	d04b      	beq.n	8004140 <_printf_i+0x1a8>
 80040a8:	4616      	mov	r6, r2
 80040aa:	fbb5 f1f3 	udiv	r1, r5, r3
 80040ae:	fb03 5711 	mls	r7, r3, r1, r5
 80040b2:	5dc7      	ldrb	r7, [r0, r7]
 80040b4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80040b8:	462f      	mov	r7, r5
 80040ba:	42bb      	cmp	r3, r7
 80040bc:	460d      	mov	r5, r1
 80040be:	d9f4      	bls.n	80040aa <_printf_i+0x112>
 80040c0:	2b08      	cmp	r3, #8
 80040c2:	d10b      	bne.n	80040dc <_printf_i+0x144>
 80040c4:	6823      	ldr	r3, [r4, #0]
 80040c6:	07df      	lsls	r7, r3, #31
 80040c8:	d508      	bpl.n	80040dc <_printf_i+0x144>
 80040ca:	6923      	ldr	r3, [r4, #16]
 80040cc:	6861      	ldr	r1, [r4, #4]
 80040ce:	4299      	cmp	r1, r3
 80040d0:	bfde      	ittt	le
 80040d2:	2330      	movle	r3, #48	@ 0x30
 80040d4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80040d8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80040dc:	1b92      	subs	r2, r2, r6
 80040de:	6122      	str	r2, [r4, #16]
 80040e0:	f8cd a000 	str.w	sl, [sp]
 80040e4:	464b      	mov	r3, r9
 80040e6:	aa03      	add	r2, sp, #12
 80040e8:	4621      	mov	r1, r4
 80040ea:	4640      	mov	r0, r8
 80040ec:	f7ff fee6 	bl	8003ebc <_printf_common>
 80040f0:	3001      	adds	r0, #1
 80040f2:	d14a      	bne.n	800418a <_printf_i+0x1f2>
 80040f4:	f04f 30ff 	mov.w	r0, #4294967295
 80040f8:	b004      	add	sp, #16
 80040fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80040fe:	6823      	ldr	r3, [r4, #0]
 8004100:	f043 0320 	orr.w	r3, r3, #32
 8004104:	6023      	str	r3, [r4, #0]
 8004106:	4833      	ldr	r0, [pc, #204]	@ (80041d4 <_printf_i+0x23c>)
 8004108:	2778      	movs	r7, #120	@ 0x78
 800410a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800410e:	6823      	ldr	r3, [r4, #0]
 8004110:	6831      	ldr	r1, [r6, #0]
 8004112:	061f      	lsls	r7, r3, #24
 8004114:	f851 5b04 	ldr.w	r5, [r1], #4
 8004118:	d402      	bmi.n	8004120 <_printf_i+0x188>
 800411a:	065f      	lsls	r7, r3, #25
 800411c:	bf48      	it	mi
 800411e:	b2ad      	uxthmi	r5, r5
 8004120:	6031      	str	r1, [r6, #0]
 8004122:	07d9      	lsls	r1, r3, #31
 8004124:	bf44      	itt	mi
 8004126:	f043 0320 	orrmi.w	r3, r3, #32
 800412a:	6023      	strmi	r3, [r4, #0]
 800412c:	b11d      	cbz	r5, 8004136 <_printf_i+0x19e>
 800412e:	2310      	movs	r3, #16
 8004130:	e7ac      	b.n	800408c <_printf_i+0xf4>
 8004132:	4827      	ldr	r0, [pc, #156]	@ (80041d0 <_printf_i+0x238>)
 8004134:	e7e9      	b.n	800410a <_printf_i+0x172>
 8004136:	6823      	ldr	r3, [r4, #0]
 8004138:	f023 0320 	bic.w	r3, r3, #32
 800413c:	6023      	str	r3, [r4, #0]
 800413e:	e7f6      	b.n	800412e <_printf_i+0x196>
 8004140:	4616      	mov	r6, r2
 8004142:	e7bd      	b.n	80040c0 <_printf_i+0x128>
 8004144:	6833      	ldr	r3, [r6, #0]
 8004146:	6825      	ldr	r5, [r4, #0]
 8004148:	6961      	ldr	r1, [r4, #20]
 800414a:	1d18      	adds	r0, r3, #4
 800414c:	6030      	str	r0, [r6, #0]
 800414e:	062e      	lsls	r6, r5, #24
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	d501      	bpl.n	8004158 <_printf_i+0x1c0>
 8004154:	6019      	str	r1, [r3, #0]
 8004156:	e002      	b.n	800415e <_printf_i+0x1c6>
 8004158:	0668      	lsls	r0, r5, #25
 800415a:	d5fb      	bpl.n	8004154 <_printf_i+0x1bc>
 800415c:	8019      	strh	r1, [r3, #0]
 800415e:	2300      	movs	r3, #0
 8004160:	6123      	str	r3, [r4, #16]
 8004162:	4616      	mov	r6, r2
 8004164:	e7bc      	b.n	80040e0 <_printf_i+0x148>
 8004166:	6833      	ldr	r3, [r6, #0]
 8004168:	1d1a      	adds	r2, r3, #4
 800416a:	6032      	str	r2, [r6, #0]
 800416c:	681e      	ldr	r6, [r3, #0]
 800416e:	6862      	ldr	r2, [r4, #4]
 8004170:	2100      	movs	r1, #0
 8004172:	4630      	mov	r0, r6
 8004174:	f7fc f834 	bl	80001e0 <memchr>
 8004178:	b108      	cbz	r0, 800417e <_printf_i+0x1e6>
 800417a:	1b80      	subs	r0, r0, r6
 800417c:	6060      	str	r0, [r4, #4]
 800417e:	6863      	ldr	r3, [r4, #4]
 8004180:	6123      	str	r3, [r4, #16]
 8004182:	2300      	movs	r3, #0
 8004184:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004188:	e7aa      	b.n	80040e0 <_printf_i+0x148>
 800418a:	6923      	ldr	r3, [r4, #16]
 800418c:	4632      	mov	r2, r6
 800418e:	4649      	mov	r1, r9
 8004190:	4640      	mov	r0, r8
 8004192:	47d0      	blx	sl
 8004194:	3001      	adds	r0, #1
 8004196:	d0ad      	beq.n	80040f4 <_printf_i+0x15c>
 8004198:	6823      	ldr	r3, [r4, #0]
 800419a:	079b      	lsls	r3, r3, #30
 800419c:	d413      	bmi.n	80041c6 <_printf_i+0x22e>
 800419e:	68e0      	ldr	r0, [r4, #12]
 80041a0:	9b03      	ldr	r3, [sp, #12]
 80041a2:	4298      	cmp	r0, r3
 80041a4:	bfb8      	it	lt
 80041a6:	4618      	movlt	r0, r3
 80041a8:	e7a6      	b.n	80040f8 <_printf_i+0x160>
 80041aa:	2301      	movs	r3, #1
 80041ac:	4632      	mov	r2, r6
 80041ae:	4649      	mov	r1, r9
 80041b0:	4640      	mov	r0, r8
 80041b2:	47d0      	blx	sl
 80041b4:	3001      	adds	r0, #1
 80041b6:	d09d      	beq.n	80040f4 <_printf_i+0x15c>
 80041b8:	3501      	adds	r5, #1
 80041ba:	68e3      	ldr	r3, [r4, #12]
 80041bc:	9903      	ldr	r1, [sp, #12]
 80041be:	1a5b      	subs	r3, r3, r1
 80041c0:	42ab      	cmp	r3, r5
 80041c2:	dcf2      	bgt.n	80041aa <_printf_i+0x212>
 80041c4:	e7eb      	b.n	800419e <_printf_i+0x206>
 80041c6:	2500      	movs	r5, #0
 80041c8:	f104 0619 	add.w	r6, r4, #25
 80041cc:	e7f5      	b.n	80041ba <_printf_i+0x222>
 80041ce:	bf00      	nop
 80041d0:	08005071 	.word	0x08005071
 80041d4:	08005082 	.word	0x08005082

080041d8 <memmove>:
 80041d8:	4288      	cmp	r0, r1
 80041da:	b510      	push	{r4, lr}
 80041dc:	eb01 0402 	add.w	r4, r1, r2
 80041e0:	d902      	bls.n	80041e8 <memmove+0x10>
 80041e2:	4284      	cmp	r4, r0
 80041e4:	4623      	mov	r3, r4
 80041e6:	d807      	bhi.n	80041f8 <memmove+0x20>
 80041e8:	1e43      	subs	r3, r0, #1
 80041ea:	42a1      	cmp	r1, r4
 80041ec:	d008      	beq.n	8004200 <memmove+0x28>
 80041ee:	f811 2b01 	ldrb.w	r2, [r1], #1
 80041f2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80041f6:	e7f8      	b.n	80041ea <memmove+0x12>
 80041f8:	4402      	add	r2, r0
 80041fa:	4601      	mov	r1, r0
 80041fc:	428a      	cmp	r2, r1
 80041fe:	d100      	bne.n	8004202 <memmove+0x2a>
 8004200:	bd10      	pop	{r4, pc}
 8004202:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004206:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800420a:	e7f7      	b.n	80041fc <memmove+0x24>

0800420c <_sbrk_r>:
 800420c:	b538      	push	{r3, r4, r5, lr}
 800420e:	4d06      	ldr	r5, [pc, #24]	@ (8004228 <_sbrk_r+0x1c>)
 8004210:	2300      	movs	r3, #0
 8004212:	4604      	mov	r4, r0
 8004214:	4608      	mov	r0, r1
 8004216:	602b      	str	r3, [r5, #0]
 8004218:	f7fc ff56 	bl	80010c8 <_sbrk>
 800421c:	1c43      	adds	r3, r0, #1
 800421e:	d102      	bne.n	8004226 <_sbrk_r+0x1a>
 8004220:	682b      	ldr	r3, [r5, #0]
 8004222:	b103      	cbz	r3, 8004226 <_sbrk_r+0x1a>
 8004224:	6023      	str	r3, [r4, #0]
 8004226:	bd38      	pop	{r3, r4, r5, pc}
 8004228:	200006a4 	.word	0x200006a4

0800422c <memcpy>:
 800422c:	440a      	add	r2, r1
 800422e:	4291      	cmp	r1, r2
 8004230:	f100 33ff 	add.w	r3, r0, #4294967295
 8004234:	d100      	bne.n	8004238 <memcpy+0xc>
 8004236:	4770      	bx	lr
 8004238:	b510      	push	{r4, lr}
 800423a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800423e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004242:	4291      	cmp	r1, r2
 8004244:	d1f9      	bne.n	800423a <memcpy+0xe>
 8004246:	bd10      	pop	{r4, pc}

08004248 <_realloc_r>:
 8004248:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800424c:	4680      	mov	r8, r0
 800424e:	4615      	mov	r5, r2
 8004250:	460c      	mov	r4, r1
 8004252:	b921      	cbnz	r1, 800425e <_realloc_r+0x16>
 8004254:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004258:	4611      	mov	r1, r2
 800425a:	f7ff bc4b 	b.w	8003af4 <_malloc_r>
 800425e:	b92a      	cbnz	r2, 800426c <_realloc_r+0x24>
 8004260:	f7ff fbdc 	bl	8003a1c <_free_r>
 8004264:	2400      	movs	r4, #0
 8004266:	4620      	mov	r0, r4
 8004268:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800426c:	f000 f81a 	bl	80042a4 <_malloc_usable_size_r>
 8004270:	4285      	cmp	r5, r0
 8004272:	4606      	mov	r6, r0
 8004274:	d802      	bhi.n	800427c <_realloc_r+0x34>
 8004276:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800427a:	d8f4      	bhi.n	8004266 <_realloc_r+0x1e>
 800427c:	4629      	mov	r1, r5
 800427e:	4640      	mov	r0, r8
 8004280:	f7ff fc38 	bl	8003af4 <_malloc_r>
 8004284:	4607      	mov	r7, r0
 8004286:	2800      	cmp	r0, #0
 8004288:	d0ec      	beq.n	8004264 <_realloc_r+0x1c>
 800428a:	42b5      	cmp	r5, r6
 800428c:	462a      	mov	r2, r5
 800428e:	4621      	mov	r1, r4
 8004290:	bf28      	it	cs
 8004292:	4632      	movcs	r2, r6
 8004294:	f7ff ffca 	bl	800422c <memcpy>
 8004298:	4621      	mov	r1, r4
 800429a:	4640      	mov	r0, r8
 800429c:	f7ff fbbe 	bl	8003a1c <_free_r>
 80042a0:	463c      	mov	r4, r7
 80042a2:	e7e0      	b.n	8004266 <_realloc_r+0x1e>

080042a4 <_malloc_usable_size_r>:
 80042a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80042a8:	1f18      	subs	r0, r3, #4
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	bfbc      	itt	lt
 80042ae:	580b      	ldrlt	r3, [r1, r0]
 80042b0:	18c0      	addlt	r0, r0, r3
 80042b2:	4770      	bx	lr

080042b4 <_init>:
 80042b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042b6:	bf00      	nop
 80042b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042ba:	bc08      	pop	{r3}
 80042bc:	469e      	mov	lr, r3
 80042be:	4770      	bx	lr

080042c0 <_fini>:
 80042c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042c2:	bf00      	nop
 80042c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042c6:	bc08      	pop	{r3}
 80042c8:	469e      	mov	lr, r3
 80042ca:	4770      	bx	lr
